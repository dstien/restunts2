; Generated by restunts-export.py (Ghidra)
.8086
.model medium

include custom.inc
include structs.inc
include seg000.inc
include seg001.inc
include seg002.inc
include seg003.inc
include seg004.inc
include seg005.inc
include seg006.inc
include seg008.inc
include seg009.inc
include seg010.inc
include seg011.inc
include seg012.inc
include seg013.inc
include seg014.inc
include seg015.inc
include seg016.inc
include seg017.inc
include seg018.inc
include seg019.inc
include seg020.inc
include seg021.inc
include seg022.inc
include seg023.inc
include seg024.inc
include seg025.inc
include seg026.inc
include seg027.inc
include seg028.inc
include seg029.inc
include seg030.inc
include seg031.inc
include seg032.inc
include seg033.inc
include seg034.inc
include seg035.inc
include seg036.inc
include seg037.inc
include seg038.inc
include seg039.inc
include dseg.inc
include dsegu.inc

seg007 segment byte public use16 'STUNTSC'
    assume cs:seg007, es:nothing, ss:nothing, ds:dseg

    public audio_add_driver_timer
    public audio_remove_driver_timer
    public pad_id
    public audio_init_engine
    public audio_op_unk
    public audio_function2
    public audio_driver_timer
    public audio_op_unk2
    public nopsub_27220
    public nopsub_2726C
    public nopsub_272B0
    public audio_function2_wrap
    public audio_op_unk3
    public audio_op_unk4
    public audio_op_unk5
    public audio_op_unk6
    public audio_op_unk7
    public nopsub_27489

    db 0x90

; void __cdecl16far audio_add_driver_timer(void)
audio_add_driver_timer proc far
    mov     bx, offset audiotimers
    jmp     LAB_26ba_0019
LAB_26ba_0013:
    mov     byte ptr [bx], 0x0
    add     bx, 0x4c
LAB_26ba_0019:
    cmp     bx, offset word_42240
    jc      LAB_26ba_0013
    mov     word ptr [word_42240], 0x16
    mov     ax, offset audio_driver_timer
; <REPLACE>
    mov     dx, seg seg007
; </REPLACE>
;    mov     dx, 0x26ba
    push    dx
    push    ax
    call    far ptr timer_reg_callback
    pop     bx
    pop     bx
    retf
audio_add_driver_timer endp

; void __cdecl16far audio_remove_driver_timer(void)
audio_remove_driver_timer proc far
    push    si
    mov     si, offset audiotimers
    jmp     LAB_26ba_004f
LAB_26ba_003b:
    cmp     byte ptr [si], 0x1
    jnz     LAB_26ba_0049
    push    word ptr [si+0x2]
    call    far ptr sub_374DE
    pop     bx
LAB_26ba_0049:
    mov     byte ptr [si], 0x0
    add     si, 0x4c
LAB_26ba_004f:
    cmp     si, offset word_42240
    jc      LAB_26ba_003b
    mov     ax, offset audio_driver_timer
; <REPLACE>
    mov     dx, seg seg007
; </REPLACE>
;    mov     dx, 0x26ba
    push    dx
    push    ax
    call    far ptr timer_remove_callback
    pop     bx
    pop     bx
    pop     si
    retf
audio_remove_driver_timer endp

; word * __cdecl16far pad_id(word * param_1)
pad_id proc far
    param_1    = dword ptr   6

    push    bp
    mov     bp, sp
    push    si
    les     bx, [bp+param_1]
    mov     ax, word ptr es:[bx]
    mov     dx, word ptr es:[bx+0x2]
    mov     word ptr [word_42242], ax
    mov     word ptr [word_42244], dx
    mov     byte ptr [byte_42246], 0x0
    sub     si, si
LAB_26ba_0082:
    cmp     byte ptr [si+word_42242], 0x0
    jnz     LAB_26ba_008e
    mov     byte ptr [si+word_42242], 0x20
LAB_26ba_008e:
    inc     si
    cmp     si, 0x4
    jl      LAB_26ba_0082
    mov     ax, offset word_42242
    pop     si
    mov     sp, bp
    pop     bp
    retf
pad_id endp

; int __cdecl16far audio_init_engine(int unk_flags, char * res_id, void * res1, void * res0)
audio_init_engine proc far
    var_18     = dword ptr -24
    var_14     = word ptr  -20
    var_12     = word ptr  -18
    var_10     = word ptr  -16
    var_E      = word ptr  -14
    var_8      = dword ptr  -8
    var_4      = word ptr   -4
    var_2      = word ptr   -2
    unk_flags  = word ptr    6
    res_id     = dword ptr  10
    res1       = dword ptr  14
    res0       = dword ptr  18

    push    bp
    mov     bp, sp
    sub     sp, 0x18
    push    di
    push    si
    mov     di, 0xffff
    sub     dx, dx
    mov     bx, offset audiotimers
    jmp     LAB_26ba_00bd
LAB_26ba_00ae:
    or      di, di
    jge     LAB_26ba_00c3
    cmp     byte ptr [bx], 0x0
    jnz     LAB_26ba_00b9
    mov     di, dx
LAB_26ba_00b9:
    add     bx, 0x4c
    inc     dx
LAB_26ba_00bd:
    cmp     bx, offset word_42240              ; end of audiotimer
    jc      LAB_26ba_00ae
LAB_26ba_00c3:
    or      di, di
    jge     LAB_26ba_00ca
    jmp     near ptr LAB_26ba_0344
LAB_26ba_00ca:
    mov     ax, di
    mov     cx, 0x4c
    imul    cx
    add     ax, offset audiotimers
    mov     word ptr [bp+var_14], ax
    add     ax, 0x1c
    mov     word ptr [bp+var_12], ax
    mov     word ptr [bp+var_10], ds
    mov     cx, word ptr [bp+0x8]
    mov     dx, word ptr [bp+res_id]
    mov     word ptr [bp+var_8], cx
    mov     word ptr [bp+var_8+2], dx
    mov     word ptr [bp+var_4], ax
    mov     word ptr [bp+var_2], 0x0
    mov     word ptr [bp+var_E], di
    jmp     LAB_26ba_0115
LAB_26ba_00f9:
    les     bx, [bp+var_8]
    add     word ptr [bp+var_8], 0x1
    jnc     LAB_26ba_0107
    add     word ptr [bp+var_8+2], 0x1000
LAB_26ba_0107:
    mov     al, byte ptr es:[bx]
    mov     bx, word ptr [bp+var_4]
    inc     word ptr [bp+var_4]
    mov     byte ptr [bx], al
    inc     word ptr [bp+var_2]
LAB_26ba_0115:
    cmp     word ptr [bp+var_2], 0x30
    jl      LAB_26ba_00f9
    mov     di, word ptr [bp+var_12]
    mov     es, word ptr [bp+var_10]
    cmp     byte ptr es:[di+0x6], 0x0
    jz      LAB_26ba_012b
    jmp     near ptr LAB_26ba_02c1
LAB_26ba_012b:
    push    word ptr es:[di+0xa]
    push    word ptr es:[di+0x8]
    mov     si, es
    push    cs
    call    near ptr pad_id
    pop     bx
    pop     bx
    push    ax
    push    word ptr [bp+res1]
    push    word ptr [bp+res_id+2]
    call    far ptr locate_shape_fatal
    add     sp, 0x6
    mov     es, si
    mov     word ptr es:[di+0x8], ax
    mov     word ptr es:[di+0xa], dx
    push    word ptr es:[di+0x12]
    push    word ptr es:[di+0x10]
    push    cs
    call    near ptr pad_id
    pop     bx
    pop     bx
    push    ax
    push    word ptr [bp+res1]
    push    word ptr [bp+res_id+2]
    push    word ptr [bp+res0]
    push    word ptr [bp+res1+2]
    call    far ptr init_audio_resources
    add     sp, 0xa
    mov     es, si
    mov     word ptr es:[di+0x10], ax
    mov     word ptr es:[di+0x12], dx
    push    word ptr es:[di+0x16]
    push    word ptr es:[di+0x14]
    push    cs
    call    near ptr pad_id
    pop     bx
    pop     bx
    push    ax
    push    word ptr [bp+res1]
    push    word ptr [bp+res_id+2]
    push    word ptr [bp+res0]
    push    word ptr [bp+res1+2]
    call    far ptr init_audio_resources
    add     sp, 0xa
    mov     es, si
    mov     word ptr es:[di+0x14], ax
    mov     word ptr es:[di+0x16], dx
    push    word ptr es:[di+0x1a]
    push    word ptr es:[di+0x18]
    push    cs
    call    near ptr pad_id
    pop     bx
    pop     bx
    push    ax
    push    word ptr [bp+res1]
    push    word ptr [bp+res_id+2]
    push    word ptr [bp+res0]
    push    word ptr [bp+res1+2]
    call    far ptr init_audio_resources
    add     sp, 0xa
    mov     es, si
    mov     word ptr es:[di+0x18], ax
    mov     word ptr es:[di+0x1a], dx
    push    word ptr es:[di+0x1e]
    push    word ptr es:[di+0x1c]
    push    cs
    call    near ptr pad_id
    pop     bx
    pop     bx
    push    ax
    push    word ptr [bp+res1]
    push    word ptr [bp+res_id+2]
    push    word ptr [bp+res0]
    push    word ptr [bp+res1+2]
    call    far ptr init_audio_resources
    add     sp, 0xa
    mov     es, si
    mov     word ptr es:[di+0x1c], ax
    mov     word ptr es:[di+0x1e], dx
    push    word ptr es:[di+0x22]
    push    word ptr es:[di+0x20]
    push    cs
    call    near ptr pad_id
    pop     bx
    pop     bx
    push    ax
    push    word ptr [bp+res1]
    push    word ptr [bp+res_id+2]
    push    word ptr [bp+res0]
    push    word ptr [bp+res1+2]
    call    far ptr init_audio_resources
    add     sp, 0xa
    mov     es, si
    mov     word ptr es:[di+0x20], ax
    mov     word ptr es:[di+0x22], dx
    push    word ptr es:[di+0x26]
    push    word ptr es:[di+0x24]
    push    cs
    call    near ptr pad_id
    pop     bx
    pop     bx
    push    ax
    push    word ptr [bp+res1]
    push    word ptr [bp+res_id+2]
    push    word ptr [bp+res0]
    push    word ptr [bp+res1+2]
    call    far ptr init_audio_resources
    add     sp, 0xa
    mov     es, si
    mov     word ptr es:[di+0x24], ax
    mov     word ptr es:[di+0x26], dx
    push    word ptr es:[di+0x2a]
    push    word ptr es:[di+0x28]
    push    cs
    call    near ptr pad_id
    pop     bx
    pop     bx
    push    ax
    push    word ptr [bp+res1]
    push    word ptr [bp+res_id+2]
    push    word ptr [bp+res0]
    push    word ptr [bp+res1+2]
    call    far ptr init_audio_resources
    add     sp, 0xa
    mov     es, si
    mov     word ptr es:[di+0x28], ax
    mov     word ptr es:[di+0x2a], dx
    push    word ptr es:[di+0x2e]
    push    word ptr es:[di+0x2c]
    push    cs
    call    near ptr pad_id
    pop     bx
    pop     bx
    push    ax
    push    word ptr [bp+res1]
    push    word ptr [bp+res_id+2]
    push    word ptr [bp+res0]
    push    word ptr [bp+res1+2]
    call    far ptr init_audio_resources
    add     sp, 0xa
    mov     es, si
    mov     word ptr es:[di+0x2c], ax
    mov     word ptr es:[di+0x2e], dx
    mov     byte ptr es:[di+0x6], 0x1
LAB_26ba_02c1:
    mov     si, word ptr [bp+var_14]
    mov     ax, 0x7f
    push    ax
    mov     ax, 0xffff
    push    ax
    call    far ptr sub_37470
    pop     bx
    pop     bx
    mov     word ptr [si+0x2], ax
    mov     byte ptr [si+0x1], 0x0
    mov     word ptr [si+0x4], 0x0
    sub     ax, ax
    mov     word ptr [si+0x8], ax
    mov     word ptr [si+0x6], ax
    mov     byte ptr [si+0xa], 0x0
    mov     es, word ptr [bp+var_10]
    mov     ax, word ptr es:[di]
    mov     cx, es
    les     bx, es:[di+0x8]
    mov     dl, byte ptr es:[bx+0xf]
    mov     word ptr [bp+var_18], di
    mov     word ptr [bp+var_18+2], cx
    mov     cl, byte ptr es:[bx+0xe]
    sub     ch, ch
    mov     bx, dx
    sub     dx, dx
    div     cx
    mov     cl, 0x4
    sub     bh, bh
    shl     bx, cl
    add     ax, bx
    mov     word ptr [si+0xc], ax
    mov     byte ptr [si+0xe], 0xff
    mov     ax, 0xffff
    mov     word ptr [si+0x10], ax
    mov     word ptr [si+0x12], ax
    mov     word ptr [si+0x14], ax
    mov     word ptr [si+0x16], ax
    les     bx, [bp+var_18]
    mov     ax, word ptr es:[bx]
    mov     word ptr [si+0x18], ax
    sub     al, al
    mov     byte ptr [si+0x1a], al
    mov     byte ptr [si+0x1b], al
    mov     byte ptr [si], 0x1
    mov     ax, word ptr [bp+var_E]
    jmp     LAB_26ba_034e
LAB_26ba_0344:
    mov     ax, offset aInitengineAllHandlesUsed_
    push    ax
    call    far ptr fatal_error
    pop     bx
LAB_26ba_034e:
    pop     si
    pop     di
    mov     sp, bp
    pop     bp
    retf
audio_init_engine endp

; void __cdecl16far audio_op_unk(int param_1)
audio_op_unk proc far
    param_1    = word ptr    6

    push    bp
    mov     bp, sp
    push    di
    push    si
    mov     ax, 0x4c
    imul    word ptr [bp+param_1]
    mov     si, ax
    add     si, offset audiotimers
    cmp     byte ptr [si], 0x1
    jnz     LAB_26ba_03c7
    cmp     byte ptr [si+0x1], 0x0
    jnz     LAB_26ba_03c7
    lea     bx, [si+0x1c]
    push    word ptr [bx+0xa]
    push    word ptr [bx+0x8]
    push    word ptr [si+0x2]
    mov     di, bx
    call    far ptr audio_unk4
    add     sp, 0x6
    mov     ax, word ptr [di]
    les     bx, [di+0x8]
    mov     cl, byte ptr es:[bx+0xe]
    sub     ch, ch
    sub     dx, dx
    div     cx
    mov     cl, 0x4
    mov     dl, byte ptr es:[bx+0xf]
    sub     dh, dh
    shl     dx, cl
    add     ax, dx
    mov     word ptr [si+0xc], ax
    push    word ptr [si+0x2]
    push    ax
    call    far ptr audio_drum_unk2
    pop     bx
    pop     bx
    mov     word ptr [si+0x12], ax
    mov     al, 0x1
    mov     byte ptr [si+0x1], al
    mov     byte ptr [si+0x1a], al
    sub     ax, ax
    push    ax
    push    word ptr [si+0x2]
    call    far ptr audio_unk2
    pop     bx
    pop     bx
LAB_26ba_03c7:
    pop     si
    pop     di
    mov     sp, bp
    pop     bp
    retf
audio_op_unk endp

; void __cdecl16far audio_function2(int param_1)
audio_function2 proc far
    param_1    = word ptr    6

    push    bp
    mov     bp, sp
    push    si
    mov     ax, 0x4c
    imul    word ptr [bp+param_1]
    mov     si, ax
    add     si, offset audiotimers
    cmp     byte ptr [si], 0x1
    jnz     LAB_26ba_03fe
    cmp     byte ptr [si+0x1], 0x1
    jnz     LAB_26ba_03fe
    push    word ptr [si+0x12]
    call    far ptr sub_38156
    pop     bx
    mov     word ptr [si+0x12], 0xffff
    mov     byte ptr [si+0x1], 0x0
    mov     byte ptr [si+0x1a], 0x1
LAB_26ba_03fe:
    pop     si
    mov     sp, bp
    pop     bp
    retf
audio_function2 endp

; void __cdecl16far audio_driver_timer(void)
audio_driver_timer proc far
    var_4      = word ptr   -4
    var_1      = byte ptr   -1

    push    bp
    mov     bp, sp
    sub     sp, 0x4
    push    di
    push    si
    call    far ptr compare_ds_ss
    or      ax, ax
    jnz     LAB_26ba_0417
    jmp     near ptr LAB_26ba_0587
LAB_26ba_0417:
    inc     word ptr [word_3EB2A]
    cmp     word ptr [word_3EB2A], 0x2
    jge     LAB_26ba_042c
    cmp     byte ptr [byte_40634], 0x0
    jz      LAB_26ba_042c
    jmp     near ptr LAB_26ba_0587
LAB_26ba_042c:
    mov     word ptr [bp+var_4], 0x0
    mov     si, offset audiotimers
LAB_26ba_0434:
    cmp     byte ptr [si], 0x0
    jnz     LAB_26ba_043c
    jmp     near ptr LAB_26ba_056b
LAB_26ba_043c:
    cmp     byte ptr [audioflag6], 0x0
    jnz     LAB_26ba_0446
    jmp     near ptr LAB_26ba_056b
LAB_26ba_0446:
    mov     cl, 0x4
    mov     al, byte ptr [si+0xa]
    sub     ah, ah
    shl     ax, cl
    mov     dx, word ptr [si+0x4]
    mov     bx, dx
    shl     dx, 0x1
    add     dx, bx
    shl     dx, 0x1
    add     dx, bx
    add     ax, dx
    mov     cl, 0x3
    shr     ax, cl
    mov     word ptr [si+0x4], ax
    mov     cl, 0x4
    shr     ax, cl
    mov     byte ptr [bp+var_1], al
    cmp     al, byte ptr [si+0xe]
    jnz     LAB_26ba_0477
    cmp     byte ptr [si+0x1a], 0x0
    jz      LAB_26ba_04bd
LAB_26ba_0477:
    mov     al, byte ptr [bp+var_1]
    sub     ah, ah
    push    ax
    push    word ptr [si+0x2]
    mov     di, ax
    call    far ptr audio_unk2
    add     sp, 0x4
    mov     ax, di
    sub     di, 0xa
    jns     LAB_26ba_0493
    sub     di, di
LAB_26ba_0493:
    cmp     word ptr [si+0x14], -0x1
    jz      LAB_26ba_04a5
    push    di
    push    word ptr [si+0x14]
    call    far ptr audio_unk2
    add     sp, 0x4
LAB_26ba_04a5:
    cmp     word ptr [si+0x16], -0x1
    jz      LAB_26ba_04b7
    push    di
    push    word ptr [si+0x16]
    call    far ptr audio_unk2
    add     sp, 0x4
LAB_26ba_04b7:
    mov     al, byte ptr [bp+var_1]
    mov     byte ptr [si+0xe], al
LAB_26ba_04bd:
    mov     ax, word ptr [si+0x6]
    mov     dx, word ptr [si+0x8]
    mov     cx, ax
    mov     bx, dx
    shl     ax, 0x1
    rcl     dx, 0x1
    add     ax, cx
    adc     dx, bx
    shl     ax, 0x1
    rcl     dx, 0x1
    add     ax, cx
    adc     dx, bx
    mov     cx, word ptr [si+0xc]
    sub     bx, bx
    shl     cx, 0x1
    rcl     bx, 0x1
    shl     cx, 0x1
    rcl     bx, 0x1
    shl     cx, 0x1
    rcl     bx, 0x1
    shl     cx, 0x1
    rcl     bx, 0x1
    add     cx, ax
    adc     bx, dx
    shr     bx, 0x1
    rcr     cx, 0x1
    shr     bx, 0x1
    rcr     cx, 0x1
    shr     bx, 0x1
    rcr     cx, 0x1
    mov     word ptr [si+0x6], cx
    mov     word ptr [si+0x8], bx
    shr     bx, 0x1
    rcr     cx, 0x1
    shr     bx, 0x1
    rcr     cx, 0x1
    shr     bx, 0x1
    rcr     cx, 0x1
    shr     bx, 0x1
    rcr     cx, 0x1
    mov     di, cx
    cmp     cx, word ptr [si+0x10]
    jnz     LAB_26ba_051f
    cmp     byte ptr [si+0x1a], 0x0
    jz      LAB_26ba_0534
LAB_26ba_051f:
    cmp     word ptr [si+0x12], -0x1
    jz      LAB_26ba_0534
    push    di
    push    word ptr [si+0x12]
    call    far ptr sub_39088
    add     sp, 0x4
    mov     word ptr [si+0x10], di
LAB_26ba_0534:
    mov     byte ptr [si+0x1a], 0x0
    cmp     byte ptr [si+0x1b], 0x0
    jz      LAB_26ba_056b
    cmp     byte ptr [si+0x1], 0x0
    jz      LAB_26ba_054e
    push    word ptr [si+0x14]
    call    far ptr audio_init_chunk2
    jmp     LAB_26ba_0564
LAB_26ba_054e:
    push    word ptr [si+0x14]
    call    far ptr sub_3771E
    add     sp, 0x2
    or      ax, ax
    jz      LAB_26ba_056b
    push    word ptr [bp+var_4]
    push    cs
    call    near ptr audio_op_unk
LAB_26ba_0564:
    add     sp, 0x2
    mov     byte ptr [si+0x1b], 0x0
LAB_26ba_056b:
    add     si, 0x4c
    inc     word ptr [bp+var_4]
    cmp     word ptr [bp+var_4], 0x19
    jge     LAB_26ba_057a
    jmp     near ptr LAB_26ba_0434
LAB_26ba_057a:
    cmp     word ptr [word_3EB2A], 0x2
    jl      LAB_26ba_0587
    mov     word ptr [word_3EB2A], 0x0
LAB_26ba_0587:
    pop     si
    pop     di
    mov     sp, bp
    pop     bp
    retf
audio_driver_timer endp
    db 0x90

; void __cdecl16far audio_op_unk2(int param_1, uint param_2, uint param_3, uint param_4, uint param_5, uint param_6, uint param_7, uint param_8, uint param_9)
audio_op_unk2 proc far
    var_16     = word ptr  -22
    var_14     = word ptr  -20
    var_10     = word ptr  -16
    var_E      = word ptr  -14
    var_C      = word ptr  -12
    var_A      = word ptr  -10
    var_8      = word ptr   -8
    var_6      = word ptr   -6
    var_2      = word ptr   -2
    param_1    = word ptr    6
    param_2    = word ptr    8
    param_3    = word ptr   10
    param_4    = word ptr   12
    param_5    = word ptr   14
    param_6    = word ptr   16
    param_7    = word ptr   18
    param_8    = word ptr   20
    param_9    = word ptr   22

    push    bp
    mov     bp, sp
    sub     sp, 0x16
    mov     ax, 0x4c
    imul    word ptr [bp+param_1]
    add     ax, offset audiotimers
    mov     word ptr [bp+var_2], ax
    push    word ptr [bp+param_7]
    push    word ptr [bp+param_8]
    push    word ptr [bp+param_6]
    call    far ptr polarRadius2D
    add     sp, 0x4
    push    ax
    call    far ptr polarRadius2D
    add     sp, 0x4
    mov     word ptr [bp+var_C], ax
    cmp     ax, 0x1770
    jle     LAB_26ba_05d2
    mov     word ptr [bp+var_8], 0x0
    mov     bx, word ptr [bp+var_2]
    mov     byte ptr [bx+0xa], 0x0
    mov     sp, bp
    pop     bp
    retf
LAB_26ba_05d2:
    push    word ptr [bp+param_4]
    push    word ptr [bp+param_5]
    push    word ptr [bp+param_3]
    call    far ptr polarRadius2D
    add     sp, 0x4
    push    ax
    call    far ptr polarRadius2D
    add     sp, 0x4
    mov     word ptr [bp+var_A], ax
    sub     ax, word ptr [bp+var_C]
    mov     word ptr [bp+var_16], ax
    mov     ax, 0x64
    xor     dx, dx
    div     word ptr [bp+param_9]
    imul    word ptr [bp+var_16]
    mov     word ptr [bp+var_16], ax
    mov     ax, 0x7f
    mul     word ptr [bp+var_C]
    mov     cx, 0x1770
    div     cx
    neg     ax
    add     ax, 0x7f
    mov     word ptr [bp+var_8], ax
    cmp     word ptr [bp+var_16], 0x0
    jle     LAB_26ba_0626
    mov     cl, 0x4
    mov     ax, word ptr [bp+var_8]
    shr     ax, cl
    sub     word ptr [bp+var_8], ax
LAB_26ba_0626:
    mov     ax, word ptr [bp+param_2]
    mov     bx, word ptr [bp+var_2]
    add     bx, 0x1c
    mov     word ptr [bp+var_10], bx
    mov     word ptr [bp+var_E], ds
    les     bx, [bx+0x8]
    mov     cl, byte ptr es:[bx+0xe]
    sub     ch, ch
    sub     dx, dx
    div     cx
    mov     cl, 0x4
    mov     dl, byte ptr es:[bx+0xf]
    sub     dh, dh
    shl     dx, cl
    add     ax, dx
    mov     word ptr [bp+var_14], ax
    mov     ax, 0x1770
    sub     ax, word ptr [bp+var_16]
    mov     word ptr [bp+var_6], ax
    or      ax, ax
    jz      LAB_26ba_0673
    mov     ax, 0x1770
    mul     word ptr [bp+var_14]
    div     word ptr [bp+var_6]
    mov     word ptr [bp+var_6], ax
    mov     ax, word ptr [bp+var_6]
    mov     bx, word ptr [bp+var_2]
    mov     word ptr [bx+0xc], ax
LAB_26ba_0673:
    mov     al, byte ptr [bp+var_8]
    mov     bx, word ptr [bp+var_2]
    mov     byte ptr [bx+0xa], al
    mov     sp, bp
    pop     bp
    retf
audio_op_unk2 endp

; void __cdecl16far nopsub_27220(int param_1)
nopsub_27220 proc far
    param_1    = word ptr    6

    push    bp
    mov     bp, sp
    push    si
    mov     ax, 0x4c
    imul    word ptr [bp+param_1]
    mov     bx, ax
    add     bx, offset audiotimers
    mov     ax, word ptr [bx+0x4]
    mov     cl, 0x4
    shr     ax, cl
    push    ax
    mov     ax, 0x40
    push    ax
    mov     ax, 0xffff
    push    ax
    push    word ptr [bx+0x2e]
    push    word ptr [bx+0x2c]
    mov     si, bx
    call    far ptr audio_check_flag
    add     sp, 0xa
    mov     word ptr [si+0x14], ax
    push    ax
    mov     ax, 0x33bc
    push    ax
    call    far ptr nopsub_debug_print
    pop     bx
    pop     bx
    mov     al, 0x1
    mov     byte ptr [si+0x1a], al
    mov     byte ptr [si+0x1b], al
    pop     si
    mov     sp, bp
    pop     bp
    retf
nopsub_27220 endp

; void __cdecl16far nopsub_2726C(int param_1)
nopsub_2726C proc far
    param_1    = word ptr    6

    push    bp
    mov     bp, sp
    push    si
    mov     ax, 0x4c
    imul    word ptr [bp+param_1]
    mov     bx, ax
    add     bx, offset audiotimers
    mov     ax, word ptr [bx+0x4]
    mov     cl, 0x4
    shr     ax, cl
    push    ax
    mov     ax, 0x40
    push    ax
    mov     ax, 0xffff
    push    ax
    push    word ptr [bx+0x32]
    push    word ptr [bx+0x30]
    mov     si, bx
    call    far ptr audio_check_flag
    add     sp, 0xa
    mov     word ptr [si+0x14], ax
    mov     byte ptr [si+0x1a], 0x1
    push    word ptr [bp+param_1]
    push    cs
    call    near ptr audio_function2
    pop     bx
    pop     si
    mov     sp, bp
    pop     bp
    retf
nopsub_2726C endp

; void __cdecl16far nopsub_272B0(int param_1)
nopsub_272B0 proc far
    param_1    = word ptr    6

    push    bp
    mov     bp, sp
    push    si
    mov     ax, 0x4c
    imul    word ptr [bp+param_1]
    mov     bx, ax
    add     bx, offset audiotimers
    mov     ax, word ptr [bx+0x4]
    mov     cl, 0x4
    shr     ax, cl
    push    ax
    mov     ax, 0x40
    push    ax
    mov     ax, 0xffff
    push    ax
    push    word ptr [bx+0x36]
    push    word ptr [bx+0x34]
    mov     si, bx
    call    far ptr audio_check_flag
    add     sp, 0xa
    mov     word ptr [si+0x14], ax
    mov     byte ptr [si+0x1a], 0x1
    push    word ptr [bp+param_1]
    push    cs
    call    near ptr audio_function2
    pop     bx
    pop     si
    mov     sp, bp
    pop     bp
    retf
nopsub_272B0 endp

; void __cdecl16far audio_function2_wrap(int param_1)
audio_function2_wrap proc far
    param_1    = word ptr    6

    push    bp
    mov     bp, sp
    push    si
    mov     ax, 0x4c
    imul    word ptr [bp+param_1]
    mov     bx, ax
    add     bx, offset audiotimers
    mov     ax, word ptr [bx+0x4]
    mov     cl, 0x4
    shr     ax, cl
    push    ax
    mov     ax, 0x64
    push    ax
    mov     ax, 0xffff
    push    ax
    push    word ptr [bx+0x3a]
    push    word ptr [bx+0x38]
    mov     si, bx
    call    far ptr audio_check_flag
    add     sp, 0xa
    mov     word ptr [si+0x14], ax
    mov     byte ptr [si+0x1a], 0x1
    push    word ptr [bp+param_1]
    push    cs
    call    near ptr audio_function2
    pop     bx
    pop     si
    mov     sp, bp
    pop     bp
    retf
audio_function2_wrap endp

; void __cdecl16far audio_op_unk3(int param_1)
audio_op_unk3 proc far
    param_1    = word ptr    6

    push    bp
    mov     bp, sp
    push    si
    mov     ax, 0x4c
    imul    word ptr [bp+param_1]
    mov     bx, ax
    add     bx, offset audiotimers
    mov     ax, word ptr [bx+0x4]
    mov     cl, 0x4
    shr     ax, cl
    push    ax
    mov     ax, 0x40
    push    ax
    mov     ax, 0xffff
    push    ax
    push    word ptr [bx+0x46]
    push    word ptr [bx+0x44]
    mov     si, bx
    call    far ptr audio_check_flag
    add     sp, 0xa
    mov     word ptr [si+0x14], ax
    mov     byte ptr [si+0x1a], 0x1
    pop     si
    mov     sp, bp
    pop     bp
    retf
audio_op_unk3 endp

; void __cdecl16far audio_op_unk4(int param_1)
audio_op_unk4 proc far
    param_1    = word ptr    6

    push    bp
    mov     bp, sp
    push    si
    mov     ax, 0x4c
    imul    word ptr [bp+param_1]
    mov     bx, ax
    add     bx, offset audiotimers
    mov     ax, word ptr [bx+0x4]
    mov     cl, 0x4
    shr     ax, cl
    push    ax
    mov     ax, 0x40
    push    ax
    mov     ax, 0xffff
    push    ax
    push    word ptr [bx+0x4a]
    push    word ptr [bx+0x48]
    mov     si, bx
    call    far ptr audio_check_flag
    add     sp, 0xa
    mov     word ptr [si+0x14], ax
    mov     byte ptr [si+0x1a], 0x1
    pop     si
    mov     sp, bp
    pop     bp
    retf
audio_op_unk4 endp

; void __cdecl16far audio_op_unk5(int param_1)
audio_op_unk5 proc far
    var_2      = word ptr   -2
    param_1    = word ptr    6

    push    bp
    mov     bp, sp
    sub     sp, 0x4
    push    di
    push    si
    mov     ax, 0x4c
    imul    word ptr [bp+param_1]
    mov     si, ax
    add     si, offset audiotimers
    lea     ax, [si+0x1c]
    mov     di, ax
    mov     word ptr [bp+var_2], ds
    cmp     word ptr [si+0x16], -0x1
    jz      LAB_26ba_083b
    push    word ptr [si+0x16]
    call    far ptr audio_init_chunk2
    pop     bx
LAB_26ba_083b:
    mov     cl, 0x4
    mov     ax, word ptr [si+0x4]
    shr     ax, cl
    push    ax
    mov     ax, 0x40
    push    ax
    mov     ax, 0xffff
    push    ax
    mov     es, word ptr [bp+var_2]
    push    word ptr es:[di+0x22]
    push    word ptr es:[di+0x20]
    call    far ptr audio_check_flag
    add     sp, 0xa
    mov     word ptr [si+0x16], ax
    mov     byte ptr [si+0x1a], 0x1
    pop     si
    pop     di
    mov     sp, bp
    pop     bp
    retf
audio_op_unk5 endp

; void __cdecl16far audio_op_unk6(int param_1)
audio_op_unk6 proc far
    var_2      = word ptr   -2
    param_1    = word ptr    6

    push    bp
    mov     bp, sp
    sub     sp, 0x4
    push    di
    push    si
    mov     ax, 0x4c
    imul    word ptr [bp+param_1]
    mov     si, ax
    add     si, offset audiotimers
    lea     ax, [si+0x1c]
    mov     di, ax
    mov     word ptr [bp+var_2], ds
    cmp     word ptr [si+0x16], -0x1
    jz      LAB_26ba_0896
    push    word ptr [si+0x16]
    call    far ptr audio_init_chunk2
    pop     bx
LAB_26ba_0896:
    mov     cl, 0x4
    mov     ax, word ptr [si+0x4]
    shr     ax, cl
    push    ax
    mov     ax, 0x40
    push    ax
    mov     ax, 0xffff
    push    ax
    mov     es, word ptr [bp+var_2]
    push    word ptr es:[di+0x26]
    push    word ptr es:[di+0x24]
    call    far ptr audio_check_flag
    add     sp, 0xa
    mov     word ptr [si+0x16], ax
    mov     byte ptr [si+0x1a], 0x1
    pop     si
    pop     di
    mov     sp, bp
    pop     bp
    retf
audio_op_unk6 endp

; void __cdecl16far audio_op_unk7(int param_1)
audio_op_unk7 proc far
    param_1    = word ptr    6

    push    bp
    mov     bp, sp
    push    si
    mov     ax, 0x4c
    imul    word ptr [bp+param_1]
    mov     bx, ax
    push    word ptr [bx+(audiotimers+22)]
    mov     si, ax
    call    far ptr audio_init_chunk2
    pop     bx
    mov     word ptr [si+(audiotimers+22)], 0xffff
    pop     si
    mov     sp, bp
    pop     bp
    retf
audio_op_unk7 endp

; void __cdecl16far nopsub_27489(int param_1)
nopsub_27489 proc far
    param_1    = word ptr    6

    push    bp
    mov     bp, sp
    push    si
    mov     ax, 0x4c
    imul    word ptr [bp+param_1]
    mov     bx, ax
    mov     si, word ptr [bx+(audiotimers+20)]
    cmp     si, -0x1
    jle     LAB_26ba_0907
    push    si
    call    far ptr sub_3771E
    pop     bx
    jmp     LAB_26ba_090a
LAB_26ba_0907:
    mov     ax, 0x1
LAB_26ba_090a:
    pop     si
    mov     sp, bp
    pop     bp
    retf
nopsub_27489 endp
    db 0
seg007 ends
end
