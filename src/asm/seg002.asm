; Generated by restunts-export.py (Ghidra)
.8086
.model medium

include seg002.inc

seg002 segment byte public use16 'STUNTSC'
    assume cs:seg002, es:nothing, ss:nothing, ds:dseg

    db 0x90

; uint __cdecl16far update_rpm_from_speed(uint cur_rpm, uint speed, uint gear_ratio, int changing_gear, uint idle_rpm_)
update_rpm_from_speed_asm_ proc far
    cur_rpm    = word ptr    6
    speed      = word ptr    8
    gear_ratio = word ptr   10
    changing_gear = word ptr   12
    idle_rpm_  = word ptr   14

    push    bp
    mov     bp, sp
    push    bp
    mov     cx, word ptr [bp+cur_rpm]
    mov     ax, word ptr [bp+speed]
    cmp     word ptr [bp+changing_gear], 0x0
    jnz     LAB_19dc_001b
; This makes: 
; cx = speed * ratio /2^16  
    mul     word ptr [bp+gear_ratio]
    mov     cx, dx
LAB_19dc_001b:
    cmp     cx, word ptr [bp+idle_rpm_]
    jnc     LAB_19dc_0023
    mov     cx, word ptr [bp+idle_rpm_]
LAB_19dc_0023:
    mov     ax, cx
    pop     bp
    pop     bp
    retf
update_rpm_from_speed_asm_ endp

; int __cdecl16far nopsub_19DE8(int param_1)
nopsub_19DE8_asm_ proc far
    param_1    = word ptr    6

    push    bp
    mov     bp, sp
    push    bp
    xor     ax, ax
    mov     bx, word ptr [bp+param_1]
    or      bx, bx
    jz      LAB_19dc_003c
    jl      LAB_19dc_003b
    inc     ax
    pop     bp
    pop     bp
    retf
LAB_19dc_003b:
    dec     ax
LAB_19dc_003c:
    pop     bp
    pop     bp
    retf
nopsub_19DE8_asm_ endp

; void __cdecl16far nopsub_19DFF(word param_1)
nopsub_19DFF_asm_ proc far
    param_1    = word ptr    6

    push    bp
    mov     bp, sp
    mov     ax, word ptr [bp+param_1]
    int     0x61                               ; reserved for user interrupt
    pop     bp
    retf
nopsub_19DFF_asm_ endp

; void __cdecl16far nopsub_19E09(word param_1)
nopsub_19E09_asm_ proc far
    param_1    = word ptr    6

    push    bp
    mov     bp, sp
    mov     ax, word ptr [bp+param_1]
    int     0x60
    pop     bp
    retf
nopsub_19E09_asm_ endp

; void __cdecl16far nopsub_19E13(word param_1)
nopsub_19E13_asm_ proc far
    param_1    = word ptr    6

    push    bp
    mov     bp, sp
    push    bp
    push    si
    mov     si, word ptr [bp+param_1]
    int     0x62                               ; reserved for user interrupt
    pop     si
    pop     bp
    pop     bp
    retf
nopsub_19E13_asm_ endp

; void __cdecl16far init_kevinrandom(char * seed)
init_kevinrandom_asm_ proc far
    seed       = word ptr    6

    push    bp
    mov     bp, sp
    push    bp
    mov     bx, word ptr [bp+seed]
    mov     al, byte ptr [bx]
    mov     byte ptr [g_kevinrandom_seed], al
    mov     al, byte ptr [bx+0x1]
    mov     byte ptr [(g_kevinrandom_seed+1)], al
    mov     al, byte ptr [bx+0x2]
    mov     byte ptr [(g_kevinrandom_seed+2)], al
    mov     al, byte ptr [bx+0x3]
    mov     byte ptr [(g_kevinrandom_seed+3)], al
    mov     al, byte ptr [bx+0x4]
    mov     byte ptr [(g_kevinrandom_seed+4)], al
    mov     al, byte ptr [bx+0x5]
    mov     byte ptr [(g_kevinrandom_seed+5)], al
    pop     bp
    pop     bp
    retf
init_kevinrandom_asm_ endp

; void __cdecl16far get_kevinrandom_seed(char * seed)
get_kevinrandom_seed_asm_ proc far
    seed       = word ptr    6

    push    bp
    mov     bp, sp
    push    bp
    mov     bx, word ptr [bp+seed]
    mov     al, byte ptr [g_kevinrandom_seed]
    mov     byte ptr [bx], al
    mov     al, byte ptr [(g_kevinrandom_seed+1)]
    mov     byte ptr [bx+0x1], al
    mov     al, byte ptr [(g_kevinrandom_seed+2)]
    mov     byte ptr [bx+0x2], al
    mov     al, byte ptr [(g_kevinrandom_seed+3)]
    mov     byte ptr [bx+0x3], al
    mov     al, byte ptr [(g_kevinrandom_seed+4)]
    mov     byte ptr [bx+0x4], al
    mov     al, byte ptr [(g_kevinrandom_seed+5)]
    mov     byte ptr [bx+0x5], al
    pop     bp
    pop     bp
    retf
get_kevinrandom_seed_asm_ endp

; int __cdecl16far get_kevinrandom(void)
get_kevinrandom_asm_ proc far
    mov     al, byte ptr [(g_kevinrandom_seed+5)]
    add     al, byte ptr [(g_kevinrandom_seed+4)]
    mov     byte ptr [(g_kevinrandom_seed+4)], al
    add     al, byte ptr [(g_kevinrandom_seed+3)]
    mov     byte ptr [(g_kevinrandom_seed+3)], al
    add     al, byte ptr [(g_kevinrandom_seed+2)]
    mov     byte ptr [(g_kevinrandom_seed+2)], al
    add     al, byte ptr [(g_kevinrandom_seed+1)]
    mov     byte ptr [(g_kevinrandom_seed+1)], al
    add     al, byte ptr [g_kevinrandom_seed]
    mov     byte ptr [g_kevinrandom_seed], al
    inc     byte ptr [(g_kevinrandom_seed+5)]
    jnz     LAB_19dc_0103
    inc     byte ptr [(g_kevinrandom_seed+4)]
    jnz     LAB_19dc_0103
    inc     byte ptr [(g_kevinrandom_seed+3)]
    jnz     LAB_19dc_0103
    inc     byte ptr [(g_kevinrandom_seed+2)]
    jnz     LAB_19dc_0103
    inc     byte ptr [(g_kevinrandom_seed+1)]
    jnz     LAB_19dc_0103
    inc     byte ptr [g_kevinrandom_seed]
LAB_19dc_0103:
    mov     al, byte ptr [g_kevinrandom_seed]
    xor     ah, ah
    retf
get_kevinrandom_asm_ endp

; short __stdcall16near intr0_handler(void)
intr0_handler_asm_ proc near
    local_res0 = word ptr    2

    push    bp
    mov     bp, sp
    push    ds
; <REPLACE>
    mov     ax, seg dseg
; </REPLACE>
;    mov     ax, 0x3b77                         ; dseg
    mov     ds, ax
    mov     ax, word ptr [bp+0x4]
    mov     word ptr [word_3BE30], ax
    mov     ax, word ptr [bp+local_res0]
    mov     word ptr [word_3BE32], ax
    inc     ax
    inc     ax
    mov     word ptr [bp+local_res0], ax
    xor     ax, ax
    pop     ds
    pop     bp
    iret
intr0_handler_asm_ endp

; void __cdecl16far init_div0(void)
init_div0_asm_ proc far
    push    ds
    mov     ah, 0x35
    mov     al, 0x0
    int     0x21                               ; DOS - 2+ - GET INTERRUPT VECTOR
                                               ; AL = interrupt number
                                               ; Return: ES:BX = value of interrupt vector
    mov     word ptr [old_intr0_handler+2], es
    mov     word ptr [old_intr0_handler], bx
; <REPLACE>
    mov     dx, seg seg002
; </REPLACE>
;    mov     dx, 0x19dc
    mov     ds, dx
    mov     dx, offset intr0_handler
    mov     ah, 0x25
    mov     al, 0x0
    int     0x21                               ; DOS - SET INTERRUPT VECTOR
                                               ; AL = interrupt number
                                               ; DS:DX = new vector to be used for specified interrupt
    pop     ds
    retf
init_div0_asm_ endp
byte_19F07:
    db 0x1E, 0xC5, 0x16, 0xBC, 0x06, 0xB4, 0x25, 0xB0
    db 0x00, 0xCD, 0x21
seg002 ends
end
