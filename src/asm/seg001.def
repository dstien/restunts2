; Generated by restunts-export.py (Ghidra)
seg001 segment byte public use16 'STUNTSC'
    extrn opponent_op_asm_:proc
    extrn mat_mul_vector2_asm_:proc
    extrn update_player_state_asm_:proc
    extrn init_carstate_from_simd_asm_:proc
    extrn init_game_state_asm_:proc
    extrn restore_gamestate_asm_:proc
    extrn update_gamestate_asm_:proc
    extrn player_op_asm_:proc
    extrn detect_penalty_asm_:proc
    extrn update_car_speed_asm_:proc
    extrn update_grip_asm_:proc
    extrn car_car_speed_adjust_maybe_asm_:proc
    extrn carState_rc_op_asm_:proc
    extrn upd_statef20_from_steer_input_asm_:proc
    extrn audio_carstate_asm_:proc
    extrn audio_unk3_asm_:proc
    extrn sub_18D06_asm_:proc
    extrn gettlistpoint_asm_:proc
    extrn car_car_coll_detect_maybe_asm_:proc
    extrn init_plantrak_asm_:proc
    extrn do_opponent_op_asm_:proc
    extrn update_crash_state_asm_:proc
    extrn plane_rotate_op_asm_:proc
    extrn plane_origin_op_asm_:proc
    extrn vec_normalInnerProduct_asm_:proc
    extrn state_op_unk_asm_:proc
    extrn move_explode_asm_:proc
    extrn setup_aero_trackdata_asm_:proc

    ifdef RESTUNTS_ORIGINAL
        ; Alias all functions to the original asm implementation.
        opponent_op = opponent_op_asm_
        mat_mul_vector2 = mat_mul_vector2_asm_
        update_player_state = update_player_state_asm_
        init_carstate_from_simd = init_carstate_from_simd_asm_
        init_game_state = init_game_state_asm_
        restore_gamestate = restore_gamestate_asm_
        update_gamestate = update_gamestate_asm_
        player_op = player_op_asm_
        detect_penalty = detect_penalty_asm_
        update_car_speed = update_car_speed_asm_
        update_grip = update_grip_asm_
        car_car_speed_adjust_maybe = car_car_speed_adjust_maybe_asm_
        carState_rc_op = carState_rc_op_asm_
        upd_statef20_from_steer_input = upd_statef20_from_steer_input_asm_
        audio_carstate = audio_carstate_asm_
        audio_unk3 = audio_unk3_asm_
        sub_18D06 = sub_18D06_asm_
        gettlistpoint = gettlistpoint_asm_
        car_car_coll_detect_maybe = car_car_coll_detect_maybe_asm_
        init_plantrak = init_plantrak_asm_
        do_opponent_op = do_opponent_op_asm_
        update_crash_state = update_crash_state_asm_
        plane_rotate_op = plane_rotate_op_asm_
        plane_origin_op = plane_origin_op_asm_
        vec_normalInnerProduct = vec_normalInnerProduct_asm_
        state_op_unk = state_op_unk_asm_
        move_explode = move_explode_asm_
        setup_aero_trackdata = setup_aero_trackdata_asm_
    else
        ; Alias unported functions to the original asm implementation.
        opponent_op = opponent_op_asm_
        mat_mul_vector2 = mat_mul_vector2_asm_
        update_player_state = update_player_state_asm_
        init_carstate_from_simd = init_carstate_from_simd_asm_
        init_game_state = init_game_state_asm_
        restore_gamestate = restore_gamestate_asm_
        update_gamestate = update_gamestate_asm_
        player_op = player_op_asm_
        detect_penalty = detect_penalty_asm_
        update_car_speed = update_car_speed_asm_
        update_grip = update_grip_asm_
        car_car_speed_adjust_maybe = car_car_speed_adjust_maybe_asm_
        carState_rc_op = carState_rc_op_asm_
        upd_statef20_from_steer_input = upd_statef20_from_steer_input_asm_
        audio_carstate = audio_carstate_asm_
        audio_unk3 = audio_unk3_asm_
        sub_18D06 = sub_18D06_asm_
        gettlistpoint = gettlistpoint_asm_
        car_car_coll_detect_maybe = car_car_coll_detect_maybe_asm_
        init_plantrak = init_plantrak_asm_
        do_opponent_op = do_opponent_op_asm_
        update_crash_state = update_crash_state_asm_
        plane_rotate_op = plane_rotate_op_asm_
        plane_origin_op = plane_origin_op_asm_
        vec_normalInnerProduct = vec_normalInnerProduct_asm_
        state_op_unk = state_op_unk_asm_
        move_explode = move_explode_asm_
        setup_aero_trackdata = setup_aero_trackdata_asm_
    endif
seg001 ends
