; Generated by restunts-export.py (Ghidra)
.8086
.model medium

include custom.inc
include structs.inc
include seg000.inc
include seg001.inc
include seg002.inc
include seg003.inc
include seg004.inc
include seg005.inc
include seg006.inc
include seg007.inc
include seg008.inc
include seg009.inc
include seg010.inc
include seg011.inc
include seg012.inc
include seg013.inc
include seg014.inc
include seg015.inc
include seg016.inc
include seg017.inc
include seg018.inc
include seg019.inc
include seg020.inc
include seg021.inc
include seg022.inc
include seg023.inc
include seg024.inc
include seg025.inc
include seg026.inc
include seg027.inc
include seg028.inc
include seg029.inc
include seg030.inc
include seg032.inc
include seg033.inc
include seg034.inc
include seg035.inc
include seg036.inc
include seg037.inc
include seg038.inc
include seg039.inc
include dseg.inc
include dsegu.inc

seg031 segment byte public use16 'STUNTSC'
    assume cs:seg031, es:nothing, ss:nothing, ds:dseg

    public file_load_shape2d_nofatal2
    public file_combine_and_find
    public file_find_next_alt
    public nullsub_1
    public nullsub_2
    public init_main
    public random_wait
    public load_palandcursor
    public get_0
    public mmgr_alloc_resbytes
    public mmgr_get_res_ofs_diff_scaled
    public mmgr_get_chunk_size_bytes

; void * __cdecl16far file_load_shape2d_nofatal2(char * filename)
file_load_shape2d_nofatal2 proc far
    filename   = word ptr    6

    push    bp
    mov     bp, sp
    push    word ptr [bp+filename]
    call    far ptr file_load_shape2d_nofatal_thunk
    add     sp, 0x2
    pop     bp
    retf
file_load_shape2d_nofatal2 endp

; undefined __cdecl16far file_combine_and_find(char * dir, char * name_, char * ext)
file_combine_and_find proc far
    var_50     = byte ptr  -80
    dir        = word ptr    6
    name_      = word ptr    8
    ext        = word ptr   10

    push    bp
    mov     bp, sp
    sub     sp, 0x50
    lea     ax, [bp+var_50]
    push    ax                                 ; char *
    push    word ptr [bp+ext]                  ; int
    push    word ptr [bp+name_]
    push    word ptr [bp+dir]                  ; char *
    call    far ptr file_build_path
    add     sp, 0x8
    lea     ax, [bp+var_50]
    push    ax
    call    far ptr file_find
    mov     sp, bp
    pop     bp
    retf
file_combine_and_find endp

; char * __cdecl16far file_find_next_alt(void)
file_find_next_alt proc far
    call    far ptr file_find_next
    retf
file_find_next_alt endp

; void __cdecl16far nullsub_1(void)
nullsub_1 proc far
    retf
nullsub_1 endp
    db 0x90

; void __cdecl16far nullsub_2(void)
nullsub_2 proc far
    retf
nullsub_2 endp
    db 0x90

; void __cdecl16far init_main(int argc_, char * * argv_)
init_main proc far
    var_argcmd = word ptr  -30
    var_timerdelta3 = word ptr  -28
    var_1A     = word ptr  -26
    var_18     = word ptr  -24
    var_argmode4 = byte ptr  -18
    var_timerdelta2 = word ptr  -16
    var_argnosound = byte ptr  -14
    var_timerdelta1 = word ptr  -12
    var_A      = word ptr  -10
    var_8      = word ptr   -8
    var_6      = word ptr   -6
    var_4      = word ptr   -4
    var_argunknown = byte ptr   -2
    argc_      = word ptr    6
    argv_      = word ptr    8

    push    bp
    mov     bp, sp
    sub     sp, 0x1e
    push    di
    push    si
    call    far ptr kb_init_interrupt
    call    far ptr kb_shift_checking2
    call    far ptr kb_call_readchar_callback
    mov     ax, offset show_graphic_levels_menu
; <REPLACE>
    mov     dx, seg seg008
; </REPLACE>
;    mov     dx, 0x274b
    push    dx
    push    ax
    mov     ax, 0x7
    push    ax
    call    far ptr kb_reg_callback
    add     sp, 0x6
    mov     ax, offset do_joy_restext
; <REPLACE>
    mov     dx, seg seg008
; </REPLACE>
;    mov     dx, 0x274b
    push    dx
    push    ax
    mov     ax, 0xa
    push    ax
    call    far ptr kb_reg_callback
    add     sp, 0x6
    mov     ax, offset do_key_restext
; <REPLACE>
    mov     dx, seg seg008
; </REPLACE>
;    mov     dx, 0x274b
    push    dx
    push    ax
    mov     ax, 0xb
    push    ax
    call    far ptr kb_reg_callback
    add     sp, 0x6
    mov     ax, offset do_mof_restext
; <REPLACE>
    mov     dx, seg seg008
; </REPLACE>
;    mov     dx, 0x274b
    push    dx
    push    ax
    mov     ax, 0x3200
    push    ax
    call    far ptr kb_reg_callback
    add     sp, 0x6
    mov     ax, offset do_pau_restext
; <REPLACE>
    mov     dx, seg seg008
; </REPLACE>
;    mov     dx, 0x274b
    push    dx
    push    ax
    mov     ax, 0x10
    push    ax
    call    far ptr kb_reg_callback
    add     sp, 0x6
    mov     ax, offset do_pau_restext
; <REPLACE>
    mov     dx, seg seg008
; </REPLACE>
;    mov     dx, 0x274b
    push    dx
    push    ax
    mov     ax, 0x70
    push    ax
    call    far ptr kb_reg_callback
    add     sp, 0x6
    mov     ax, offset do_dos_restext
; <REPLACE>
    mov     dx, seg seg008
; </REPLACE>
;    mov     dx, 0x274b
    push    dx
    push    ax
    mov     ax, 0x11
    push    ax
    call    far ptr kb_reg_callback
    add     sp, 0x6
    mov     ax, offset do_sonsof_restext
; <REPLACE>
    mov     dx, seg seg008
; </REPLACE>
;    mov     dx, 0x274b
    push    dx
    push    ax
    mov     ax, 0x13
    push    ax
    call    far ptr kb_reg_callback
    add     sp, 0x6
    mov     ax, offset do_dos_restext
; <REPLACE>
    mov     dx, seg seg008
; </REPLACE>
;    mov     dx, 0x274b
    push    dx
    push    ax
    mov     ax, 0x18
    push    ax
    call    far ptr kb_reg_callback
    add     sp, 0x6
    mov     word ptr [video_flag1_is1], 0x1
    mov     word ptr [video_flag2_is1], 0x1
    mov     word ptr [video_flag3_isFFFF], 0xffff
    mov     word ptr [video_flag4_is1], 0x1
    call    far ptr mmgr_alloc_a000
    mov     byte ptr [video_flag5_is0], 0x0
    mov     byte ptr [video_flag6_is1], 0x1
    mov     byte ptr [textresprefix], 0x65
    mov     byte ptr [bp+var_argmode4], 0x0
    mov     byte ptr [bp+var_argnosound], 0x0
    mov     byte ptr [bp+var_argunknown], 0x0
    mov     si, 0x1
    jmp     LAB_39e1_0153
LAB_39e1_014e:
    mov     byte ptr [bp+var_argmode4], 0x1
LAB_39e1_0152:
    inc     si
LAB_39e1_0153:
    cmp     word ptr [bp+argc_], si
    jg      LAB_39e1_015b
    jmp     near ptr LAB_39e1_026a
LAB_39e1_015b:
    mov     bx, word ptr [bp+argv_]
    mov     ax, si
    shl     ax, 0x1
    add     bx, ax
    mov     ax, word ptr [bx]
    mov     word ptr [bp+var_argcmd], ax
    mov     bx, ax
    cmp     byte ptr [bx], 0x2f
    jnz     LAB_39e1_0152
    mov     al, byte ptr [bx+0x1]
    cbw
    cmp     ax, 0x68
    jz      LAB_39e1_014e
    cmp     ax, 0x6e
    jnz     LAB_39e1_0181
    jmp     near ptr LAB_39e1_0236
LAB_39e1_0181:
    cmp     ax, 0x73
    jnz     LAB_39e1_0152
    mov     bx, word ptr [bp+argv_]
    mov     ax, si
    shl     ax, 0x1
    add     bx, ax
    mov     ax, word ptr [bx]
    mov     word ptr [bp+var_argcmd], ax
    mov     bx, ax
    mov     al, byte ptr [bx+0x2]
    cbw
    mov     bx, ax
    test    byte ptr [bx+g_ascii_props], 0x1
    jz      LAB_39e1_01b8
    mov     bx, word ptr [bp+argv_]
    mov     ax, si
    shl     ax, 0x1
    add     bx, ax
    mov     bx, word ptr [bx]
    mov     al, byte ptr [bx+0x2]
    cbw
    add     ax, 0x20
    jmp     LAB_39e1_01c7
    db 0x90
LAB_39e1_01b8:
    mov     bx, word ptr [bp+argv_]
    mov     ax, si
    shl     ax, 0x1
    add     bx, ax
    mov     bx, word ptr [bx]
    mov     al, byte ptr [bx+0x2]
    cbw
LAB_39e1_01c7:
    cmp     ax, 0x73
    jnz     LAB_39e1_0212
    mov     bx, word ptr [bp+var_argcmd]
    mov     al, byte ptr [bx+0x3]
    cbw
    mov     bx, ax
    test    byte ptr [bx+g_ascii_props], 0x1
    jz      LAB_39e1_01f0
    mov     bx, word ptr [bp+argv_]
    mov     ax, si
    shl     ax, 0x1
    add     bx, ax
    mov     bx, word ptr [bx]
    mov     al, byte ptr [bx+0x3]
    cbw
    add     ax, 0x20
    jmp     LAB_39e1_01ff
LAB_39e1_01f0:
    mov     bx, word ptr [bp+argv_]
    mov     ax, si
    shl     ax, 0x1
    add     bx, ax
    mov     bx, word ptr [bx]
    mov     al, byte ptr [bx+0x3]
    cbw
LAB_39e1_01ff:
    cmp     ax, 0x62
    jnz     LAB_39e1_0212
    mov     byte ptr [audiodriverstring], 0x61
    mov     byte ptr [(audiodriverstring+1)], 0x64
    jmp     near ptr LAB_39e1_0152
    db 0x90
LAB_39e1_0212:
    mov     ax, word ptr [bp+argv_]
    mov     cx, si
    shl     cx, 0x1
    add     ax, cx
    mov     word ptr [bp+var_argcmd], ax
    mov     bx, ax
    mov     bx, word ptr [bx]
    mov     al, byte ptr [bx+0x2]
    mov     byte ptr [audiodriverstring], al
    mov     bx, word ptr [bp+var_argcmd]
    mov     bx, word ptr [bx]
    mov     al, byte ptr [bx+0x3]
    mov     byte ptr [(audiodriverstring+1)], al
    jmp     near ptr LAB_39e1_0152
LAB_39e1_0236:
    mov     bx, word ptr [bp+argv_]
    mov     ax, si
    shl     ax, 0x1
    add     bx, ax
    mov     bx, word ptr [bx]
    cmp     byte ptr [bx+0x2], 0x73
    jnz     LAB_39e1_024e
    mov     byte ptr [bp+var_argnosound], 0x1
    jmp     near ptr LAB_39e1_0152
LAB_39e1_024e:
    mov     bx, word ptr [bp+argv_]
    mov     ax, si
    shl     ax, 0x1
    add     bx, ax
    mov     bx, word ptr [bx]
    cmp     byte ptr [bx+0x2], 0x64
    jz      LAB_39e1_0262
    jmp     near ptr LAB_39e1_0152
LAB_39e1_0262:
    mov     byte ptr [bp+var_argunknown], 0x1
    jmp     near ptr LAB_39e1_0152
    db 0x90
LAB_39e1_026a:
    call    far ptr video_set_mode_13h
    cmp     byte ptr [bp+var_argmode4], 0x0
    jz      LAB_39e1_027a
    call    far ptr video_set_mode4
LAB_39e1_027a:
    call    far ptr timer_setup_interrupt
    call    far ptr sprite_copy_2_to_1_clear
    mov     ax, 0xc8
    push    ax
    mov     ax, 0x140
    push    ax
    call    far ptr mouse_init
    add     sp, 0x4
    sub     ax, ax
    push    ax                                 ; int
    push    ax
    mov     ax, offset audiodriverstring
    push    ax                                 ; char *
    call    far ptr audio_load_driver
    add     sp, 0x6
    or      ax, ax
    jz      LAB_39e1_02b9
    call    far ptr audio_stop_unk
    mov     ax, 0x1
    push    ax
    call    far ptr libsub_quit_to_dos_alt
    add     sp, 0x2
LAB_39e1_02b9:
    cmp     byte ptr [bp+var_argnosound], 0x0
    jz      LAB_39e1_02c9
    call    far ptr audio_toggle_flag2
    call    far ptr audio_toggle_flag6
LAB_39e1_02c9:
    mov     ax, offset do_dea_textres
; <REPLACE>
    mov     dx, seg seg008
; </REPLACE>
;    mov     dx, 0x274b
    push    dx
    push    ax
    call    far ptr set_criterr_handler
    add     sp, 0x4
    push    cs
    call    near ptr load_palandcursor
    call    far ptr sprite_copy_2_to_1
    mov     ax, 0x78
    push    ax
    sub     ax, ax
    push    ax
    mov     ax, 0x140
    push    ax
    sub     ax, ax
    push    ax
    call    far ptr sprite_set_1_size
    add     sp, 0x8
    call    far ptr timer_get_delta_alt
    sub     si, si
LAB_39e1_02ff:
    sub     ax, ax
    push    ax
    call    far ptr sprite_clear_1_color
    add     sp, 0x2
    inc     si
    cmp     si, 0xf
    jl      LAB_39e1_02ff
    call    far ptr timer_get_delta_alt
    mov     word ptr [bp+var_timerdelta1], ax
    mov     ax, 0x3c
    push    ax
    sub     ax, ax
    push    ax
    mov     ax, 0x140
    push    ax
    sub     ax, ax
    push    ax
    call    far ptr sprite_set_1_size
    add     sp, 0x8
    sub     si, si
LAB_39e1_0330:
    mov     word ptr [bp+var_A], 0x0
    mov     word ptr [bp+var_8], 0x0
    mov     word ptr [bp+var_6], 0x0
    mov     word ptr [bp+var_4], 0x0
    sub     di, di
LAB_39e1_0346:
    mov     word ptr [bp+var_1A], di
    mov     word ptr [bp+var_18], di
    lea     ax, [bp+var_A]
    push    ax
    lea     ax, [bp+var_1A]
    push    ax
    call    far ptr rect_adjust_from_point
    add     sp, 0x4
    inc     di
    cmp     di, 0x190
    jl      LAB_39e1_0346
    sub     ax, ax
    push    ax
    call    far ptr sprite_clear_1_color
    add     sp, 0x2
    inc     si
    cmp     si, 0xf
    jl      LAB_39e1_0330
    call    far ptr timer_get_delta_alt
    mov     word ptr [bp+var_timerdelta2], ax
    sub     si, si
    jmp     LAB_39e1_039b
LAB_39e1_0380:
    inc     di
LAB_39e1_0381:
    cmp     di, 0xff
    jge     LAB_39e1_039a
    lea     ax, [bp+var_A]
    push    ax
    lea     ax, [bp+var_1A]
    push    ax
    call    far ptr rect_adjust_from_point
    add     sp, 0x4
    jmp     LAB_39e1_0380
    db 0x90
LAB_39e1_039a:
    inc     si
LAB_39e1_039b:
    cmp     si, 0x92
    jge     LAB_39e1_03a6
    sub     di, di
    jmp     LAB_39e1_0381
    db 0x90
LAB_39e1_03a6:
    call    far ptr timer_get_delta_alt
    mov     word ptr [bp+var_timerdelta3], ax
    mov     ax, word ptr [bp+var_timerdelta1]
    cmp     word ptr [bp+var_timerdelta2], ax
    jle     LAB_39e1_03be
    mov     word ptr [slow_video_mgmt], 0x0
    jmp     LAB_39e1_03c4
LAB_39e1_03be:
    mov     word ptr [slow_video_mgmt], 0x1
LAB_39e1_03c4:
    cmp     word ptr [bp+var_timerdelta3], 0x4b
    jge     LAB_39e1_03d2
    mov     word ptr [framespersec2], 0x14
    jmp     LAB_39e1_03d8
LAB_39e1_03d2:
    mov     word ptr [framespersec2], 0xa
LAB_39e1_03d8:
    cmp     word ptr [bp+var_timerdelta3], 0x23
    jge     LAB_39e1_03e6
    mov     byte ptr [detail_level], 0x0
    jmp     LAB_39e1_041b
    db 0x90
LAB_39e1_03e6:
    cmp     word ptr [bp+var_timerdelta3], 0x37
    jge     LAB_39e1_03f4
    mov     byte ptr [detail_level], 0x1
    jmp     LAB_39e1_041b
    db 0x90
LAB_39e1_03f4:
    cmp     word ptr [bp+var_timerdelta3], 0x4b
    jge     LAB_39e1_0402
    mov     byte ptr [detail_level], 0x2
    jmp     LAB_39e1_041b
    db 0x90
LAB_39e1_0402:
    cmp     word ptr [bp+var_timerdelta3], 0x64
    jl      LAB_39e1_040f
    cmp     word ptr [slow_video_mgmt], 0x0
    jnz     LAB_39e1_0416
LAB_39e1_040f:
    mov     byte ptr [detail_level], 0x3
    jmp     LAB_39e1_041b
LAB_39e1_0416:
    mov     byte ptr [detail_level], 0x4
LAB_39e1_041b:
    mov     ax, word ptr [framespersec2]
    mov     word ptr [framespersec], ax
    mov     ax, word ptr [slow_video_mgmt]
    mov     word ptr [slow_video_mgmt_copy], ax
    push    cs
    call    near ptr random_wait
    sub     ax, ax
    push    ax
    push    word ptr [material_patlist2_ptr]
    push    word ptr [material_patlist_ptr]
    push    word ptr [material_clrlist2_ptr]
    push    word ptr [material_clrlist_ptr]
    call    far ptr copy_material_list_pointers
    add     sp, 0xa
    pop     si
    pop     di
    mov     sp, bp
    pop     bp
    retf
init_main endp

; int __cdecl16far random_wait(void)
random_wait proc far
    push    bp
    mov     bp, sp
    sub     sp, 0x4
    push    di
    push    si
    call    far ptr video_get_status
    mov     si, ax
    sub     di, di
    jmp     LAB_39e1_0467
    db 0x90
LAB_39e1_0460:
    cmp     di, 0x2ee0
    jge     LAB_39e1_0470
    inc     di
LAB_39e1_0467:
    call    far ptr video_get_status
    cmp     ax, si
    jz      LAB_39e1_0460
LAB_39e1_0470:
    cmp     di, 0x400
    jnz     LAB_39e1_048a
    mov     bx, offset aMisc_1
    mov     al, byte ptr [bx]
    cbw
    mov     di, ax
    jmp     LAB_39e1_048a
LAB_39e1_0480:
    call    far ptr _rand
    call    far ptr get_kevinrandom
LAB_39e1_048a:
    mov     ax, di
    dec     di
    or      ax, ax
    jnz     LAB_39e1_0480
    and     di, 0xff
    jmp     LAB_39e1_04a2
    db 0x90
LAB_39e1_0498:
    call    far ptr get_kevinrandom
    call    far ptr _rand
LAB_39e1_04a2:
    mov     ax, di
    dec     di
    or      ax, ax
    jnz     LAB_39e1_0498
    pop     si
    pop     di
    mov     sp, bp
    pop     bp
    retf
random_wait endp
    db 0x90

; void __cdecl16far load_palandcursor(void)
load_palandcursor proc far
    var_312    = word ptr  -786
    var_310    = dword ptr -784
    var_30C    = word ptr  -780
    var_30A    = word ptr  -778
    var_308    = word ptr  -776
    var_306    = word ptr  -774
    var_304    = dword ptr -772
    var_300    = byte ptr  -768

    push    bp
    mov     bp, sp
    sub     sp, 0x312
    push    si
    mov     ax, offset aSdmain
    push    ax
    call    far ptr file_load_shape2d_fatal_thunk
    add     sp, 0x2
    mov     word ptr [bp+var_30C], ax
    mov     word ptr [bp+var_30A], dx
    mov     ax, offset aPal
    push    ax
    push    dx
    push    word ptr [bp+var_30C]
    call    far ptr locate_shape_fatal
    add     sp, 0x6
    mov     word ptr [bp+var_304], ax
    mov     word ptr [bp+var_304+2], dx
    add     word ptr [bp+var_304], 0x10
    mov     word ptr [bp+var_308], 0x0
LAB_39e1_04f0:
    mov     bx, word ptr [bp+var_308]
    les     si, [bp+var_304]
    mov     al, byte ptr es:[bx+si]
    mov     si, bx
    mov     byte ptr [bp+si+0xfd00], al
    inc     word ptr [bp+var_308]
    cmp     word ptr [bp+var_308], 0x300
    jl      LAB_39e1_04f0
    lea     ax, [bp+var_300]
    push    ax
    mov     ax, 0x100
    push    ax
    sub     ax, ax
    push    ax
    call    far ptr video_set_palette
    add     sp, 0x6
    mov     ax, offset aSmou
    push    ax
    push    word ptr [bp+var_30A]
    push    word ptr [bp+var_30C]
    call    far ptr locate_shape_fatal
    add     sp, 0x6
    mov     word ptr [bp+var_310], ax
    mov     word ptr [bp+var_310+2], dx
    les     bx, [bp+var_310]
    mov     ax, word ptr es:[bx]
    imul    word ptr [video_flag2_is1]
    mov     word ptr [bp+var_312], ax
    mov     ax, word ptr es:[bx+0x2]
    mov     word ptr [bp+var_306], ax
    push    word ptr [bp+var_30A]
    push    word ptr [bp+var_30C]
    call    far ptr mmgr_free
    add     sp, 0x4
    mov     ax, 0xf
    push    ax
    push    word ptr [bp+var_306]
    push    word ptr [bp+var_312]
    call    far ptr sprite_make_wnd
    add     sp, 0x6
    mov     word ptr [smouspriteptr], ax
    mov     word ptr [smouspriteptr+2], dx
    mov     ax, 0xf
    push    ax
    push    word ptr [bp+var_306]
    push    word ptr [bp+var_312]
    call    far ptr sprite_make_wnd
    add     sp, 0x6
    mov     word ptr [mmouspriteptr], ax
    mov     word ptr [mmouspriteptr+2], dx
    mov     ax, 0xf
    push    ax
    push    word ptr [bp+var_306]
    mov     ax, word ptr [bp+var_312]
    add     ax, word ptr [video_flag2_is1]
    push    ax
    call    far ptr sprite_make_wnd
    add     sp, 0x6
    mov     word ptr [mouseunkspriteptr], ax
    mov     word ptr [mouseunkspriteptr+2], dx
    mov     ax, offset aSdmain_0
    push    ax
    call    far ptr file_load_shape2d_fatal_thunk
    add     sp, 0x2
    mov     word ptr [bp+var_30C], ax
    mov     word ptr [bp+var_30A], dx
    push    word ptr [smouspriteptr+2]
    push    word ptr [smouspriteptr]
    call    far ptr sprite_set_1_from_argptr
    add     sp, 0x4
    sub     ax, ax
    push    ax
    push    ax
    mov     ax, offset aSmou_0
    push    ax
    push    word ptr [bp+var_30A]
    push    word ptr [bp+var_30C]
    call    far ptr locate_shape_fatal
    add     sp, 0x6
    push    dx
    push    ax
    call    far ptr sprite_shape_to_1
    add     sp, 0x8
    push    word ptr [mmouspriteptr+2]
    push    word ptr [mmouspriteptr]
    call    far ptr sprite_set_1_from_argptr
    add     sp, 0x4
    sub     ax, ax
    push    ax
    push    ax
    mov     ax, offset aMmou
    push    ax
    push    word ptr [bp+var_30A]
    push    word ptr [bp+var_30C]
    call    far ptr locate_shape_fatal
    add     sp, 0x6
    push    dx
    push    ax
    call    far ptr sprite_shape_to_1
    add     sp, 0x8
    push    word ptr [bp+var_30A]
    push    word ptr [bp+var_30C]
    call    far ptr mmgr_free
    add     sp, 0x4
    call    far ptr sprite_copy_2_to_1_2
    pop     si
    mov     sp, bp
    pop     bp
    retf
load_palandcursor endp

; int __cdecl16far get_0(void)
get_0 proc far
    sub     ax, ax
    retf
get_0 endp
    db 0x90

; void * __cdecl16far mmgr_alloc_resbytes(char * name_, long size_)
mmgr_alloc_resbytes proc far
    name_      = word ptr    6
    size_      = dword ptr   8

    push    bp
    mov     bp, sp
    mov     ax, 0x10
    cwd
    push    dx
    push    ax
    push    word ptr [bp+size_+2]
    push    word ptr [bp+size_]
    call    far ptr __aFldiv
    inc     ax
    push    ax
    push    word ptr [bp+name_]
    call    far ptr mmgr_alloc_pages
    add     sp, 0x4
    pop     bp
    retf
mmgr_alloc_resbytes endp
    db 0x90

; ulong __cdecl16far mmgr_get_res_ofs_diff_scaled(void)
mmgr_get_res_ofs_diff_scaled proc far
    call    far ptr mmgr_get_ofs_diff
    sub     dx, dx
    mov     cl, 0x4
LAB_39e1_067d:
    shl     ax, 0x1
    rcl     dx, 0x1
    dec     cl
    jnz     LAB_39e1_067d
    retf
mmgr_get_res_ofs_diff_scaled endp

; ulong __cdecl16far mmgr_get_chunk_size_bytes(void * data)
mmgr_get_chunk_size_bytes proc far
    data       = dword ptr   6

    push    bp
    mov     bp, sp
    push    word ptr [bp+data+2]
    push    word ptr [bp+data]
    call    far ptr mmgr_get_chunk_size
    add     sp, 0x4
    sub     dx, dx
    mov     cl, 0x4
LAB_39e1_069b:
    shl     ax, 0x1
    rcl     dx, 0x1
    dec     cl
    jnz     LAB_39e1_069b
    pop     bp
    retf
mmgr_get_chunk_size_bytes endp

seg031 ends
end
