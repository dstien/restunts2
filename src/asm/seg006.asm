; Generated by restunts-export.py (Ghidra)
.8086
.model medium

include seg006.inc

seg006 segment byte public use16 'STUNTSC'
    assume cs:seg006, es:nothing, ss:nothing, ds:dseg

; void __cdecl16far init_polyinfo(void)
init_polyinfo_asm_ proc far
    mov     ax, 0x28a0                         ; bytes to reserve
    cwd
    push    dx
    push    ax
    mov     ax, offset aPolyinfo
    push    ax
    call    far ptr mmgr_alloc_resbytes
    add     sp, 0x6
    mov     word ptr [polyinfoptr], ax
    mov     word ptr [polyinfoptr+2], dx
    sub     ax, ax
    push    ax
    mov     ax, offset mat_y0
    push    ax
    call    far ptr mat_rot_y
    add     sp, 0x4
    mov     ax, 0x100
    push    ax
    mov     ax, offset mat_y100
    push    ax
    call    far ptr mat_rot_y
    add     sp, 0x4
    mov     ax, 0x200
    push    ax
    mov     ax, offset mat_y200
    push    ax
    call    far ptr mat_rot_y
    add     sp, 0x4
    mov     ax, 0x300
    push    ax
    mov     ax, offset mat_y300
    push    ax
    call    far ptr mat_rot_y
    add     sp, 0x4
    push    cs
    call    near ptr calc_sincos80
    retf
init_polyinfo_asm_ endp
    db 0x90

; void __cdecl16far copy_material_list_pointers(void * clrlist, void * clrlist2, void * patlist, void * patlist2, uint videoConst)
copy_material_list_pointers_asm_ proc far
    clrlist    = word ptr    6
    clrlist2   = word ptr    8
    patlist    = word ptr   10
    patlist2   = word ptr   12
    videoConst = word ptr   14

    push    bp
    mov     bp, sp
    mov     ax, word ptr [bp+clrlist]
    mov     word ptr [material_clrlist_ptr_cpy], ax
    mov     ax, word ptr [bp+clrlist2]
    mov     word ptr [material_clrlist2_ptr_cpy], ax
    mov     ax, word ptr [bp+patlist]
    mov     word ptr [material_patlist_ptr_cpy], ax
    mov     ax, word ptr [bp+patlist2]
    mov     word ptr [material_patlist2_ptr_cpy], ax
    mov     ax, word ptr [bp+videoConst]
    mov     word ptr [someZeroVideoConst], ax
    pop     bp
    retf
copy_material_list_pointers_asm_ endp
    db 0x90

; void __cdecl16far polyinfo_reset(void)
polyinfo_reset_asm_ proc far
    mov     word ptr [polyinfonumpolys], 0x0
    mov     word ptr [polyinfoptrnext], 0x0
    mov     word ptr [word_40ECE], 0x0
    mov     word ptr [word_411F6], 0xffff
    mov     word ptr [poly_linklist_40ED6_iter2], 0x190
    retf
polyinfo_reset_asm_ endp
    db 0x90

; uint __cdecl16far select_cliprect_rotate(int ang_z, int ang_x, int ang_y, RECTANGLE * cliprect, int unk)
select_cliprect_rotate_asm_ proc far
    var_vec    = byte ptr  -14
    var_matptr = word ptr   -8
    var_vec2   = byte ptr   -6
    ang_z      = word ptr    6
    ang_x      = word ptr    8
    ang_y      = word ptr   10
    cliprect   = word ptr   12
    unk        = word ptr   14

    push    bp
    mov     bp, sp
    sub     sp, 0xe
    push    di
    push    si
    mov     ax, 0x1
    push    ax
    push    word ptr [bp+ang_y]
    push    word ptr [bp+ang_x]
    push    word ptr [bp+ang_z]
    push    cs
    call    near ptr mat_rot_zxy
    add     sp, 0x8
    mov     di, offset mat_temp
    mov     si, ax
    push    ds
    pop     es
    mov     cx, 0x9
    rep movsw
    push    cs
    call    near ptr polyinfo_reset
    mov     ax, word ptr [bp+cliprect]
    mov     di, offset select_rect_rc
    mov     si, ax
    push    ds
    pop     es
    movsw
    movsw
    movsw
    movsw
    mov     ax, word ptr [bp+unk]
    mov     word ptr [select_rect_param], ax
    sub     ax, ax
    push    ax
    mov     ax, word ptr [bp+ang_y]
    neg     ax
    push    ax
    mov     ax, word ptr [bp+ang_x]
    neg     ax
    push    ax
    mov     ax, word ptr [bp+ang_z]
    neg     ax
    push    ax
    push    cs
    call    near ptr mat_rot_zxy
    add     sp, 0x8
    mov     word ptr [bp+var_matptr], ax
    mov     word ptr [bp+var_vec+4], 0x2710
    mov     word ptr [bp+var_vec+2], 0x0
    mov     word ptr [bp+var_vec], 0x0
    lea     ax, [bp+var_vec2]
    push    ax
    push    word ptr [bp+var_matptr]
    lea     ax, [bp+var_vec]
    push    ax
    call    far ptr mat_mul_vector
    add     sp, 0x6
    push    word ptr [bp+var_vec2+4]
    push    word ptr [bp+var_vec2]
    call    far ptr int_atan2
    add     sp, 0x4
    and     ah, 0x3
    pop     si
    pop     di
    mov     sp, bp
    pop     bp
    retf
select_cliprect_rotate_asm_ endp

; uint __cdecl16far transformed_shape_op(TRANSFORMEDSHAPE * transshape)
transformed_shape_op_asm_ proc far
    var_B7C    = word ptr  -2940
    var_polyvertunktabptr = word ptr  -2938
    var_cull1  = dword ptr -2936
    var_vec4   = byte ptr  -2932
    var_vecarr = byte ptr  -2926
    var_574    = dword ptr -1396
    var_polyvertY = word ptr  -1392
    var_polyvertsptr = dword ptr -1390
    var_vec3   = byte ptr  -1386
    var_polyvertX = word ptr  -1380
    var_vertflagtbl = byte ptr  -1378
    var_462    = word ptr  -1122
    var_460    = word ptr  -1120
    var_45E    = word ptr  -1118
    var_45C    = dword ptr -1116
    var_vec2   = byte ptr  -1112
    var_450    = dword ptr -1104
    var_ptrectflag = byte ptr  -1098
    var_448    = word ptr  -1096
    var_mat    = byte ptr  -1094
    var_cull2  = dword ptr -1076
    var_transshapepolyinfoptptr = dword ptr -1072
    var_rotmatptr = word ptr  -1068
    var_mat2   = byte ptr  -1066
    var_fileprimtype = word ptr  -1048
    var_vecarr2 = dword ptr -1046
    var_1A     = word ptr  -26
    var_18     = dword ptr -24
    var_vec    = byte ptr  -20
    var_polyvertcounter = word ptr  -14
    var_C      = word ptr  -12
    var_A      = dword ptr -10
    var_primtype = byte ptr   -6
    var_4      = word ptr   -4
    var_primitiveflags = word ptr   -2
    transshape = word ptr    6

    push    bp
    mov     bp, sp
    sub     sp, 0xb7c
    push    di
    push    si
    cmp     word ptr [word_40ECE], 0x0
    jz      LAB_24d6_0158
LAB_24d6_014e:
    mov     ax, 0x1
    pop     si
    pop     di
    mov     sp, bp
    pop     bp
    retf
    db 0x90
LAB_24d6_0158:
    mov     bx, word ptr [bp+transshape]
    mov     bx, word ptr [bx+0x6]
    mov     ax, word ptr [bx]
    mov     word ptr [transshapenumverts], ax
    mov     bx, word ptr [bp+transshape]
    mov     bx, word ptr [bx+0x6]
    mov     ax, word ptr [bx+0xa]
    mov     dx, word ptr [bx+0xc]
    mov     word ptr [transshapeprimitives], ax
    mov     word ptr [transshapeprimitives+2], dx
    mov     bx, word ptr [bp+transshape]
    mov     bx, word ptr [bx+0x6]
    mov     ax, word ptr [bx+0x2]
    mov     dx, word ptr [bx+0x4]
    mov     word ptr [transshapeverts], ax
    mov     word ptr [transshapeverts+2], dx
    mov     bx, word ptr [bp+transshape]
    mov     bx, word ptr [bx+0x6]
    mov     al, byte ptr [bx+0x8]
    cbw
    mov     word ptr [transshapenumpaints], ax
    mov     bx, word ptr [bp+transshape]
    mov     bx, word ptr [bx+0x6]
    mov     ax, word ptr [bx+0xe]
    mov     dx, word ptr [bx+0x10]
    mov     word ptr [bp+var_cull1], ax
    mov     word ptr [bp+var_cull1+2], dx
    mov     bx, word ptr [bp+transshape]
    mov     bx, word ptr [bx+0x6]
    mov     ax, word ptr [bx+0x12]
    mov     dx, word ptr [bx+0x14]
    mov     word ptr [bp+var_cull2], ax
    mov     word ptr [bp+var_cull2+2], dx
    mov     bx, word ptr [bp+transshape]
    mov     al, byte ptr [bx+0x13]
    mov     byte ptr [transshapematerial], al
    cmp     byte ptr [transshapenumpaints], al
    ja      LAB_24d6_01d2
    mov     byte ptr [transshapematerial], 0x0
LAB_24d6_01d2:
    mov     al, byte ptr [bx+0x12]
    mov     byte ptr [transshapeflags], al
    test    byte ptr [transshapeflags], 0x8
    jz      LAB_24d6_01e5
    mov     ax, word ptr [bx+0x8]
    mov     word ptr [transshaperectptr], ax
LAB_24d6_01e5:
    sub     si, si
    jmp     LAB_24d6_01f0
    db 0x90
LAB_24d6_01ea:
    mov     byte ptr [bp+si+0xfa9e], 0xff
    inc     si
LAB_24d6_01f0:
    mov     ax, si
    cmp     ax, word ptr [transshapenumverts]
    jc      LAB_24d6_01ea
; ^ loop fills vertflagtbl w/0xff's 
;   
    test    byte ptr [transshapeflags], 0x2
    jz      LAB_24d6_0256
    sub     ax, ax
    push    ax
    mov     bx, word ptr [bp+transshape]
    push    word ptr [bx+0xe]
    push    word ptr [bx+0xc]
    push    word ptr [bx+0xa]
    push    cs
    call    near ptr mat_rot_zxy
    add     sp, 0x8
    mov     word ptr [bp+var_rotmatptr], ax
    lea     ax, [bp+var_mat2]
    push    ax
    mov     ax, offset mat_temp
    push    ax
    push    word ptr [bp+var_rotmatptr]
    call    far ptr mat_multiply
    add     sp, 0x6
    mov     ax, word ptr [bp+transshape]
    push    si
    push    di
    lea     di, [bp+var_vec]
    mov     si, ax
    push    ss
    pop     es
    movsw
    movsw
    movsw
    pop     di
    pop     si
LAB_24d6_023f:
    mov     word ptr [bp+var_45C], 0xffff
    mov     word ptr [bp+var_45C+2], 0xffff
    sub     ax, ax
    mov     word ptr [bp+var_A+2], ax
    mov     word ptr [bp+var_A], ax
    jmp     near ptr LAB_24d6_0343
LAB_24d6_0256:
    sub     ax, ax
    push    ax
    mov     bx, word ptr [bp+transshape]
    push    word ptr [bx+0xe]
    push    word ptr [bx+0xc]
    push    word ptr [bx+0xa]
    push    cs
    call    near ptr mat_rot_zxy
    add     sp, 0x8
    mov     word ptr [bp+var_rotmatptr], ax
    lea     ax, [bp+var_vec]
    push    ax
    mov     ax, offset mat_temp
    push    ax
    push    word ptr [bp+transshape]
    call    far ptr mat_mul_vector
    add     sp, 0x6
    lea     ax, [bp+var_mat2]
    push    ax
    mov     ax, offset mat_temp
    push    ax
    push    word ptr [bp+var_rotmatptr]
    call    far ptr mat_multiply
    add     sp, 0x6
    lea     ax, [bp+var_mat]
    push    ax
    lea     ax, [bp+var_mat2]
    push    ax
    call    far ptr mat_invert
    add     sp, 0x4
    mov     word ptr [bp+var_vec2], 0x0
    mov     word ptr [bp+var_vec2+2], 0x0
    mov     word ptr [bp+var_vec2+4], 0x1000
    lea     ax, [bp+var_vec3]
    push    ax
    lea     ax, [bp+var_mat]
    push    ax
    lea     ax, [bp+var_vec2]
    push    ax
    call    far ptr mat_mul_vector
    add     sp, 0x6
    cmp     word ptr [bp+var_vec3+2], 0x0
    jle     LAB_24d6_02e6
    mov     bx, word ptr [bp+transshape]
    cmp     word ptr [bx+0x2], 0x0
    jge     LAB_24d6_02e6
    jmp     near ptr LAB_24d6_023f
LAB_24d6_02e6:
    push    word ptr [bp+var_vec]              ; int
    call    far ptr _abs
    add     sp, 0x2
    mov     bx, word ptr [bp+transshape]
    mov     cx, word ptr [bx+0x10]
    shl     cx, 0x1
    cmp     cx, ax
    jle     LAB_24d6_0317
    push    word ptr [bp+var_vec+4]            ; int
    call    far ptr _abs
    add     sp, 0x2
    mov     bx, word ptr [bp+transshape]
    mov     cx, word ptr [bx+0x10]
    shl     cx, 0x1
    cmp     cx, ax
    jle     LAB_24d6_0317
    jmp     near ptr LAB_24d6_023f
LAB_24d6_0317:
    lea     ax, [bp+var_vec3]
    push    ax
    push    cs
    call    near ptr vector_op_unk2
    add     sp, 0x2
    mov     byte ptr [byte_4393D], al
    cbw
    mov     bx, ax
    shl     bx, 0x1
    shl     bx, 0x1
    mov     ax, word ptr [bx+invpow2tbl]
    mov     dx, word ptr [bx+invpow2tbl+2]
    mov     word ptr [bp+var_45C], ax
    mov     word ptr [bp+var_45C+2], dx
    mov     word ptr [bp+var_A], ax
    mov     word ptr [bp+var_A+2], dx
LAB_24d6_0343:
    mov     ax, word ptr [poly_linklist_40ED6_iter2] ; initialized to 190h in polyinfo_reset()
    mov     word ptr [poly_linklist_40ED6_iter1], ax
    mov     word ptr [poly_linklist_40ED6_iter4], ax
    mov     word ptr [poly_linklist_40ED6_iter3], 0x0
    mov     word ptr [bp+var_45E], 0x0
    cmp     word ptr [transshapenumverts], 0x8
    jbe     LAB_24d6_0366
    mov     byte ptr [transshapenumvertscopy], 0x8
    jmp     LAB_24d6_036c
LAB_24d6_0366:
    mov     al, byte ptr [transshapenumverts]
    mov     byte ptr [transshapenumvertscopy], al
LAB_24d6_036c:
    cmp     byte ptr [transshapenumvertscopy], 0x4
    jbe     LAB_24d6_0386
    les     bx, [transshapeverts]
    mov     ax, word ptr es:[bx+0x1a]
    cmp     word ptr es:[bx+0x2], ax
    jnz     LAB_24d6_0386
    mov     byte ptr [transshapenumvertscopy], 0x4
LAB_24d6_0386:
    mov     byte ptr [bp+var_ptrectflag], 0xf
    mov     word ptr [bp+var_460], 0x1
    mov     word ptr [bp+var_1A], 0x0
    sub     si, si
    jmp     LAB_24d6_03df
LAB_24d6_039a:
    mov     word ptr [bp+var_460], 0x0
    mov     byte ptr [bp+si+0xfa9e], 0x0
    mov     bx, si
    shl     bx, 0x1
    push    word ptr [bx+polyvertpointptrtab]
    lea     ax, [bp+var_vec3]
    push    ax
    call    far ptr vector_to_point
    add     sp, 0x4
    cmp     byte ptr [bp+var_ptrectflag], 0x0
    jz      LAB_24d6_03d4
    mov     bx, si
    shl     bx, 0x1
    push    word ptr [bx+polyvertpointptrtab]
    push    cs
    call    near ptr rect_compare_point
    add     sp, 0x2
    and     byte ptr [bp+var_ptrectflag], al
LAB_24d6_03d4:
    cmp     byte ptr [bp+var_ptrectflag], 0x0
    jnz     LAB_24d6_03de
    jmp     near ptr LAB_24d6_04c0
LAB_24d6_03de:
    inc     si
LAB_24d6_03df:
    mov     al, byte ptr [transshapenumvertscopy]
    sub     ah, ah
    cmp     ax, si
    ja      LAB_24d6_03eb
    jmp     near ptr LAB_24d6_0496
LAB_24d6_03eb:
    mov     bx, si
    shl     bx, 0x1
    mov     ax, si
    shl     ax, 0x1
    shl     ax, 0x1
    add     ax, bp
    sub     ax, 0x416                          ; array access in var_416, but dunno how to make IDA show this
    mov     word ptr [bx+polyvertpointptrtab], ax
    mov     ax, si
    mov     cx, ax
    shl     ax, 0x1
    add     ax, cx
    shl     ax, 0x1
    add     ax, word ptr [transshapeverts]
    mov     dx, word ptr [transshapeverts+2]
    push    si
    push    di
    lea     di, [bp+var_vec2]
    mov     si, ax
    push    ss
    pop     es
    push    ds
    mov     ds, dx
    movsw
    movsw
    movsw
    pop     ds
    pop     di
    pop     si
    cmp     word ptr [select_rect_param], 0x0
    jz      LAB_24d6_0436
    sar     word ptr [bp+var_vec2], 0x1
    sar     word ptr [bp+var_vec2+2], 0x1
    sar     word ptr [bp+var_vec2+4], 0x1
LAB_24d6_0436:
    lea     ax, [bp+var_vec3]
    push    ax
    lea     ax, [bp+var_mat2]
    push    ax
    lea     ax, [bp+var_vec2]
    push    ax
    call    far ptr mat_mul_vector
    add     sp, 0x6
    mov     ax, word ptr [bp+var_vec]
    add     word ptr [bp+var_vec3], ax
    mov     ax, word ptr [bp+var_vec+2]
    add     word ptr [bp+var_vec3+2], ax
    mov     ax, word ptr [bp+var_vec+4]
    add     word ptr [bp+var_vec3+4], ax
    mov     bx, si
    mov     ax, bx
    shl     bx, 0x1
    add     bx, ax
    shl     bx, 0x1                            ; bx = vertex index * 6
    add     bx, bp
    push    si
    push    di
    lea     di, [bx+0xf492]
    lea     si, [bp+var_vec3]
    push    ss
    pop     es
    movsw
    movsw
    movsw
    pop     di
    pop     si
    cmp     word ptr [bp+var_vec3+4], 0xc
    jl      LAB_24d6_0489
    jmp     near ptr LAB_24d6_039a
LAB_24d6_0489:
    mov     byte ptr [bp+si+0xfa9e], 0x1
    mov     word ptr [bp+var_1A], 0x1
    jmp     near ptr LAB_24d6_03de
LAB_24d6_0496:
    cmp     word ptr [bp+var_460], 0x0
    jnz     _done_ret_neg1
    cmp     word ptr [bp+var_1A], 0x0
    jz      _done_ret_neg1
    push    word ptr [bp+var_vec]              ; int
    call    far ptr _abs
    add     sp, 0x2
    mov     bx, word ptr [bp+transshape]
    cmp     word ptr [bx+0x10], ax
    jge     LAB_24d6_04c0
_done_ret_neg1:
    mov     ax, 0xffff
    pop     si
    pop     di
    mov     sp, bp
    pop     bp
    retf
    db 0x90
LAB_24d6_04c0:
    mov     bx, word ptr [bp+transshape]
    mov     bx, word ptr [bx+0x6]
    mov     ax, word ptr [bx+0xa]
    mov     dx, word ptr [bx+0xc]
    mov     word ptr [transshapeprimitives], ax
    mov     word ptr [transshapeprimitives+2], dx
LAB_24d6_04d3:
    les     bx, [transshapeprimitives]
    mov     bl, byte ptr es:[bx]               ; primitives+0 = primitive type
    sub     bh, bh
    mov     al, byte ptr [bx+primidxcounttab]  ; look up maybe indexcount from a table?
    sub     ah, ah
    add     ax, word ptr [transshapenumpaints]
    add     ax, word ptr [transshapeprimitives]
    mov     dx, es
    add     ax, 0x2
    mov     word ptr [transshapeprimptr], ax
    mov     word ptr [transshapeprimptr+2], dx
    mov     bx, word ptr [transshapeprimitives]
    mov     al, byte ptr es:[bx+0x1]           ; primitives+1 = primitive flags
    sub     ah, ah
    mov     word ptr [bp+var_primitiveflags], ax
    mov     word ptr [bp+var_4], 0x0
    les     bx, [bp+var_cull1]
    mov     ax, word ptr es:[bx]
    mov     dx, word ptr es:[bx+0x2]
    and     ax, word ptr [bp+var_45C]
    and     dx, word ptr [bp+var_45C+2]
    or      dx, ax
    jnz     LAB_24d6_0522
    jmp     near ptr LAB_24d6_0aa1
LAB_24d6_0522:
    les     bx, [transshapeprimitives]
    mov     al, byte ptr es:[bx]               ; primitives+0 = type
    sub     ah, ah
    mov     word ptr [bp+var_fileprimtype], ax
    mov     bx, ax
    mov     al, byte ptr [bx+primidxcounttab]
    mov     byte ptr [transshapenumvertscopy], al
    mov     al, byte ptr [bx+primtypetab]
    mov     byte ptr [bp+var_primtype], al     ; primunktab maps from file-based primitive type to internal type:
                                               ; 1 = 5   (particle)
                                               ; 2 = 1   (line)
                                               ; 3..10 = 0 (poly)
                                               ; 11 = 2   (sphere)
                                               ; 12 = 3   (wheel)
                                               ; 14 = 4   (unknown)
    mov     ax, word ptr [polyinfoptrnext]
    add     ax, word ptr [polyinfoptr]
    mov     dx, word ptr [polyinfoptr+2]
    mov     word ptr [transshapepolyinfo], ax
    mov     word ptr [transshapepolyinfo+2], dx
    mov     bx, word ptr [polyinfonumpolys]
    shl     bx, 0x1
    shl     bx, 0x1
    mov     word ptr [bx+polyinfoptrs], ax
    mov     word ptr [bx+polyinfoptrs+2], dx
    mov     bl, byte ptr [transshapematerial]
    sub     bh, bh
    add     bx, word ptr [transshapeprimitives]
    mov     es, word ptr [transshapeprimitives+2]
    mov     al, byte ptr es:[bx+0x2]           ; primitives+2+X = paint job color, X in [0..numpaints]
    mov     byte ptr [transprimitivepaintjob], al
    mov     ax, word ptr [transshapenumpaints]
    add     ax, 0x2
    add     word ptr [transshapeprimitives], ax ; <- skip header and materials, -> point at indices
    mov     byte ptr [bp+var_ptrectflag], 0xf
    mov     word ptr [bp+var_460], 0x1
    mov     word ptr [bp+var_1A], 0x0
    mov     ax, word ptr [transshapeprimitives]
    mov     dx, es
    mov     word ptr [transshapeprimindexptr], ax
    mov     word ptr [transshapeprimindexptr+2], dx
    mov     word ptr [bp+var_polyvertcounter], 0x0
    jmp     LAB_24d6_05c8
    db 0x90
LAB_24d6_05a4:
    mov     word ptr [bp+var_460], 0x0
LAB_24d6_05aa:
    cmp     byte ptr [bp+var_ptrectflag], 0x0
    jz      LAB_24d6_05c5
    mov     bx, word ptr [bp+var_polyvertcounter]
    shl     bx, 0x1
    push    word ptr [bx+polyvertpointptrtab]
    push    cs
    call    near ptr rect_compare_point
    add     sp, 0x2
    and     byte ptr [bp+var_ptrectflag], al
LAB_24d6_05c5:
    inc     word ptr [bp+var_polyvertcounter]
LAB_24d6_05c8:
    mov     al, byte ptr [transshapenumvertscopy]
    sub     ah, ah
    cmp     word ptr [bp+var_polyvertcounter], ax
    jc      LAB_24d6_05d5
    jmp     near ptr LAB_24d6_06ca
LAB_24d6_05d5:
    mov     bx, word ptr [transshapeprimindexptr]
    inc     word ptr [transshapeprimindexptr]
    mov     es, word ptr [transshapeprimindexptr+2]
    mov     al, byte ptr es:[bx]
    mov     si, ax
    mov     bx, word ptr [bp+var_polyvertcounter]
    shl     bx, 0x1
    shl     ax, 0x1
    shl     ax, 0x1
    add     ax, bp
    sub     ax, 0x416
    mov     word ptr [bx+polyvertpointptrtab], ax
    mov     al, byte ptr [bp+si+0xfa9e]
    cbw
    cmp     ax, 0xffff
    jz      LAB_24d6_0610
    or      ax, ax
    jz      LAB_24d6_05a4
    cmp     ax, 0x1
    jnz     LAB_24d6_060e
    jmp     near ptr LAB_24d6_069d
LAB_24d6_060e:
    jmp     LAB_24d6_05c5
LAB_24d6_0610:
    mov     ax, si
    mov     cx, ax
    shl     ax, 0x1
    add     ax, cx
    shl     ax, 0x1
    add     ax, word ptr [transshapeverts]
    mov     dx, word ptr [transshapeverts+2]
    push    si
    push    di
    lea     di, [bp+var_vec2]
    mov     si, ax
    push    ss
    pop     es
    push    ds
    mov     ds, dx
    movsw
    movsw
    movsw
    pop     ds
    pop     di
    pop     si
    cmp     word ptr [select_rect_param], 0x0
    jz      LAB_24d6_0648
    sar     word ptr [bp+var_vec2], 0x1
    sar     word ptr [bp+var_vec2+2], 0x1
    sar     word ptr [bp+var_vec2+4], 0x1
LAB_24d6_0648:
    lea     ax, [bp+var_vec3]
    push    ax
    lea     ax, [bp+var_mat2]
    push    ax
    lea     ax, [bp+var_vec2]
    push    ax
    call    far ptr mat_mul_vector
    add     sp, 0x6
    mov     ax, word ptr [bp+var_vec]
    add     word ptr [bp+var_vec3], ax
    mov     ax, word ptr [bp+var_vec+2]
    add     word ptr [bp+var_vec3+2], ax
    mov     ax, word ptr [bp+var_vec+4]
    add     word ptr [bp+var_vec3+4], ax
    mov     bx, si
    mov     ax, bx
    shl     bx, 0x1
    add     bx, ax
    shl     bx, 0x1
    add     bx, bp
    push    si
    push    di
    lea     di, [bx+0xf492]
    lea     si, [bp+var_vec3]
    push    ss
    pop     es
    movsw
    movsw
    movsw
    pop     di
    pop     si
    cmp     word ptr [bp+var_vec3+4], 0xc
    jge     LAB_24d6_06a6
    mov     byte ptr [bp+si+0xfa9e], 0x1
LAB_24d6_069d:
    mov     word ptr [bp+var_1A], 0x1
    jmp     near ptr LAB_24d6_05c5
    db 0x90
LAB_24d6_06a6:
    mov     word ptr [bp+var_460], 0x0
    mov     byte ptr [bp+si+0xfa9e], 0x0
    mov     bx, word ptr [bp+var_polyvertcounter]
    shl     bx, 0x1
    push    word ptr [bx+polyvertpointptrtab]
    lea     ax, [bp+var_vec3]
    push    ax
    call    far ptr vector_to_point
    add     sp, 0x4
    jmp     near ptr LAB_24d6_05aa
LAB_24d6_06ca:
    cmp     word ptr [bp+var_460], 0x0
    jz      LAB_24d6_06d4
    jmp     near ptr LAB_24d6_0aa1
LAB_24d6_06d4:
    cmp     byte ptr [bp+var_ptrectflag], 0x0
    jz      LAB_24d6_06e4
    cmp     word ptr [bp+var_1A], 0x0
    jnz     LAB_24d6_06e4
    jmp     near ptr LAB_24d6_0aa1
LAB_24d6_06e4:
    mov     al, byte ptr [bp+var_primtype]
    sub     ah, ah
    or      ax, ax
    jz      _primtype_poly                     ; al = 0 for polygons,
    cmp     ax, 0x1                            ; 1 = lines
    jnz     LAB_24d6_06f5
    jmp     near ptr _primtype_line
LAB_24d6_06f5:
    cmp     ax, 0x2
    jnz     LAB_24d6_06fd
    jmp     near ptr _primtype_sphere          ; 2 = sphere
LAB_24d6_06fd:
    cmp     ax, 0x3
    jnz     LAB_24d6_0705
    jmp     near ptr _primtype_wheel           ; 3 = wheel
LAB_24d6_0705:
    cmp     ax, 0x5
    jnz     LAB_24d6_070d
    jmp     near ptr LAB_24d6_0f80             ; 5 = particle
LAB_24d6_070d:
    jmp     near ptr LAB_24d6_0aa1             ; everything else? (4?)
_primtype_poly:
    mov     ax, word ptr [transshapepolyinfo]
    mov     dx, word ptr [transshapepolyinfo+2]
    add     ax, 0x6
    mov     word ptr [bp+var_transshapepolyinfoptptr], ax
    mov     word ptr [bp+var_transshapepolyinfoptptr+2], dx
    mov     ax, word ptr [transshapeprimitives]
    mov     dx, word ptr [transshapeprimitives+2]
    mov     word ptr [transshapeprimindexptr], ax
    mov     word ptr [transshapeprimindexptr+2], dx
    sub     ax, ax
    mov     word ptr [bp+var_18+2], ax
    mov     word ptr [bp+var_18], ax
    mov     byte ptr [bp+var_ptrectflag], 0xf
    cmp     word ptr [bp+var_1A], ax
    jnz     LAB_24d6_07b8
    sub     si, si
    jmp     LAB_24d6_0747
LAB_24d6_0746:
    inc     si
LAB_24d6_0747:
    mov     al, byte ptr [transshapenumvertscopy]
    sub     ah, ah
    cmp     ax, si
    ja      LAB_24d6_0753
    jmp     near ptr LAB_24d6_09ba
LAB_24d6_0753:
    mov     bx, word ptr [transshapeprimindexptr]
    inc     word ptr [transshapeprimindexptr]
    mov     es, word ptr [transshapeprimindexptr+2]
    mov     al, byte ptr es:[bx]
    mov     word ptr [bp+var_C], ax
    mov     bx, ax
    shl     bx, 0x1
    add     bx, ax
    shl     bx, 0x1
    add     bx, bp
    mov     ax, word ptr [bx+0xf496]
    cwd
    add     word ptr [bp+var_18], ax
    adc     word ptr [bp+var_18+2], dx
    mov     ax, si
    shl     ax, 0x1
    add     ax, offset polyvertpointptrtab
    mov     word ptr [bp+var_polyvertunktabptr], ax
    mov     bx, ax
    mov     bx, word ptr [bx]
    mov     ax, word ptr [bx]
    mov     dx, word ptr [bx+0x2]
    les     bx, [bp+var_transshapepolyinfoptptr]
    mov     word ptr es:[bx], ax
    mov     word ptr es:[bx+0x2], dx
    cmp     byte ptr [bp+var_ptrectflag], 0x0
    jz      LAB_24d6_07b1
    mov     bx, word ptr [bp+var_polyvertunktabptr]
    push    word ptr [bx]
    push    cs
    call    near ptr rect_compare_point
    add     sp, 0x2
    and     byte ptr [bp+var_ptrectflag], al
LAB_24d6_07b1:
    add     word ptr [bp+var_transshapepolyinfoptptr], 0x4
    jmp     LAB_24d6_0746
LAB_24d6_07b8:
    mov     word ptr [bp+var_polyvertcounter], 0x0
    mov     bl, byte ptr [transshapenumvertscopy]
    sub     bh, bh
    add     bx, word ptr [transshapeprimitives]
    mov     es, word ptr [transshapeprimitives+2]
    mov     al, byte ptr es:[bx-0x1]
    sub     ah, ah
    mov     word ptr [bp+var_448], ax
    sub     si, si
    jmp     near ptr LAB_24d6_088e
LAB_24d6_07da:
    mov     bx, word ptr [bp+var_448]
    add     bx, bp
    cmp     byte ptr [bx+0xfa9e], 0x0
    jz      LAB_24d6_07ea
    jmp     near ptr LAB_24d6_0886
LAB_24d6_07ea:
    mov     ax, 0xc
    push    ax
    lea     ax, [bp+var_vec2]
    push    ax
    mov     ax, word ptr [bp+var_C]
    mov     cx, ax
    shl     ax, 0x1
    add     ax, cx
    shl     ax, 0x1
    add     ax, bp
    sub     ax, 0xb6e
    push    ax
    mov     ax, word ptr [bp+var_448]
    mov     cx, ax
    shl     ax, 0x1
    add     ax, cx
    shl     ax, 0x1
    add     ax, bp
    sub     ax, 0xb6e
    push    ax
    call    far ptr vector_op_unk
    add     sp, 0x8
    lea     ax, [bp+var_574]
    push    ax
    lea     ax, [bp+var_vec2]
    push    ax
    call    far ptr vector_to_point
    add     sp, 0x4
    mov     ax, word ptr [bp+var_448]
    shl     ax, 0x1
    shl     ax, 0x1
    add     ax, bp
    mov     word ptr [bp+var_B7C], ax
    mov     bx, ax
    mov     ax, word ptr [bp+var_574]
    cmp     word ptr [bx+0xfbea], ax
    jnz     LAB_24d6_0854
    mov     ax, word ptr [bp+var_574+2]
    cmp     word ptr [bx+0xfbec], ax
    jz      LAB_24d6_0886
LAB_24d6_0854:
    cmp     byte ptr [bp+var_ptrectflag], 0x0
    jz      LAB_24d6_086b
    lea     ax, [bp+var_574]
    push    ax
    push    cs
    call    near ptr rect_compare_point
    add     sp, 0x2
    and     byte ptr [bp+var_ptrectflag], al
LAB_24d6_086b:
    les     bx, [bp+var_transshapepolyinfoptptr]
    mov     ax, word ptr [bp+var_574]
    mov     dx, word ptr [bp+var_574+2]
    mov     word ptr es:[bx], ax
    mov     word ptr es:[bx+0x2], dx
LAB_24d6_087e:
    add     word ptr [bp+var_transshapepolyinfoptptr], 0x4
    inc     word ptr [bp+var_polyvertcounter]
LAB_24d6_0886:
    mov     ax, word ptr [bp+var_C]
    mov     word ptr [bp+var_448], ax
    inc     si
LAB_24d6_088e:
    mov     al, byte ptr [transshapenumvertscopy]
    sub     ah, ah
    cmp     ax, si
    ja      LAB_24d6_089a
    jmp     near ptr LAB_24d6_09b4
LAB_24d6_089a:
    mov     bx, word ptr [transshapeprimindexptr]
    inc     word ptr [transshapeprimindexptr]
    mov     es, word ptr [transshapeprimindexptr+2]
    mov     al, byte ptr es:[bx]
    mov     word ptr [bp+var_C], ax
    mov     cx, ax
    shl     ax, 0x1
    add     ax, cx
    shl     ax, 0x1
    add     ax, bp
    mov     word ptr [bp+var_polyvertunktabptr], ax
    mov     bx, ax
    mov     ax, word ptr [bx+0xf496]
    cwd
    add     word ptr [bp+var_18], ax
    adc     word ptr [bp+var_18+2], dx
    mov     bx, cx
    add     bx, bp
    cmp     byte ptr [bx+0xfa9e], 0x0
    jz      LAB_24d6_08d5
    jmp     near ptr LAB_24d6_07da
LAB_24d6_08d5:
    mov     bx, word ptr [bp+var_448]
    add     bx, bp
    cmp     byte ptr [bx+0xfa9e], 0x0
    jnz     LAB_24d6_08e5
    jmp     near ptr LAB_24d6_0977
LAB_24d6_08e5:
    mov     ax, 0xc
    push    ax
    lea     ax, [bp+var_vec2]
    push    ax
    mov     ax, word ptr [bp+var_448]
    mov     cx, ax
    shl     ax, 0x1
    add     ax, cx
    shl     ax, 0x1
    add     ax, bp
    sub     ax, 0xb6e
    push    ax
    mov     ax, word ptr [bp+var_polyvertunktabptr]
    sub     ax, 0xb6e
    push    ax
    call    far ptr vector_op_unk
    add     sp, 0x8
    lea     ax, [bp+var_574]
    push    ax
    lea     ax, [bp+var_vec2]
    push    ax
    call    far ptr vector_to_point
    add     sp, 0x4
    mov     ax, word ptr [bp+var_C]
    shl     ax, 0x1
    shl     ax, 0x1
    add     ax, bp
    mov     word ptr [bp+var_B7C], ax
    mov     bx, ax
    mov     ax, word ptr [bp+var_574]
    cmp     word ptr [bx+0xfbea], ax
    jnz     LAB_24d6_0945
    mov     ax, word ptr [bp+var_574+2]
    cmp     word ptr [bx+0xfbec], ax
    jz      LAB_24d6_0977
LAB_24d6_0945:
    cmp     byte ptr [bp+var_ptrectflag], 0x0
    jz      LAB_24d6_095c
    lea     ax, [bp+var_574]
    push    ax
    push    cs
    call    near ptr rect_compare_point
    add     sp, 0x2
    and     byte ptr [bp+var_ptrectflag], al
LAB_24d6_095c:
    les     bx, [bp+var_transshapepolyinfoptptr]
    mov     ax, word ptr [bp+var_574]
    mov     dx, word ptr [bp+var_574+2]
    mov     word ptr es:[bx], ax
    mov     word ptr es:[bx+0x2], dx
    add     word ptr [bp+var_transshapepolyinfoptptr], 0x4
    inc     word ptr [bp+var_polyvertcounter]
LAB_24d6_0977:
    mov     ax, si
    shl     ax, 0x1
    add     ax, offset polyvertpointptrtab
    mov     word ptr [bp+var_B7C], ax
    mov     bx, ax
    mov     bx, word ptr [bx]
    mov     ax, word ptr [bx]
    mov     dx, word ptr [bx+0x2]
    les     bx, [bp+var_transshapepolyinfoptptr]
    mov     word ptr es:[bx], ax
    mov     word ptr es:[bx+0x2], dx
    cmp     byte ptr [bp+var_ptrectflag], 0x0
    jnz     LAB_24d6_09a0
    jmp     near ptr LAB_24d6_087e
LAB_24d6_09a0:
    mov     bx, word ptr [bp+var_B7C]
    push    word ptr [bx]
    push    cs
    call    near ptr rect_compare_point
    add     sp, 0x2
    and     byte ptr [bp+var_ptrectflag], al
    jmp     near ptr LAB_24d6_087e
LAB_24d6_09b4:
    mov     al, byte ptr [bp+var_polyvertcounter]
    mov     byte ptr [transshapenumvertscopy], al
LAB_24d6_09ba:
    cmp     byte ptr [transshapenumvertscopy], 0x0
    jnz     LAB_24d6_09c4
    jmp     near ptr LAB_24d6_0aa1
LAB_24d6_09c4:
    cmp     byte ptr [bp+var_ptrectflag], 0x0
    jz      LAB_24d6_09ce
    jmp     near ptr LAB_24d6_0aa1
LAB_24d6_09ce:
    test    byte ptr [bp+var_primitiveflags], 0x1
    jnz     LAB_24d6_0a00
    les     bx, [bp+var_cull2]
    mov     ax, word ptr es:[bx]
    mov     dx, word ptr es:[bx+0x2]
    and     ax, word ptr [bp+var_A]
    and     dx, word ptr [bp+var_A+2]
    or      dx, ax
    jnz     LAB_24d6_0a00
    mov     ax, word ptr [transshapepolyinfo]
    mov     dx, word ptr [transshapepolyinfo+2]
    add     ax, 0x6
    push    dx
    push    ax
    push    cs
    call    near ptr is_facing_camera
    add     sp, 0x4
    or      al, al
    jz      LAB_24d6_0a03
LAB_24d6_0a00:
    inc     word ptr [bp+var_4]
LAB_24d6_0a03:
    cmp     word ptr [bp+var_4], 0x0
    jnz     LAB_24d6_0a0c
    jmp     near ptr LAB_24d6_0aa1
LAB_24d6_0a0c:
    test    byte ptr [transshapeflags], 0x8
    jnz     LAB_24d6_0a16
    jmp     near ptr LAB_24d6_0aa1
; looks like this loop tries to find the rectangular edges for the poly  
LAB_24d6_0a16:
    mov     ax, word ptr [transshapepolyinfo]
    mov     dx, word ptr [transshapepolyinfo+2]
    add     ax, 0x6
    mov     word ptr [bp+var_polyvertsptr], ax
    mov     word ptr [bp+var_polyvertsptr+2], dx
    mov     word ptr [bp+var_polyvertcounter], 0x0
    jmp     LAB_24d6_0a97
    db 0x90
LAB_24d6_0a30:
    les     bx, [bp+var_polyvertsptr]
    mov     ax, word ptr es:[bx]
    mov     word ptr [bp+var_polyvertX], ax
    mov     ax, word ptr es:[bx+0x2]
    mov     word ptr [bp+var_polyvertY], ax
    add     word ptr [bp+var_polyvertsptr], 0x4
    mov     bx, word ptr [transshaperectptr]
    mov     ax, word ptr [bx]
    cmp     word ptr [bp+var_polyvertX], ax
    jge     LAB_24d6_0a5a
    mov     ax, word ptr [bp+var_polyvertX]
    mov     word ptr [bx], ax
LAB_24d6_0a5a:
    mov     ax, word ptr [bp+var_polyvertX]
    inc     ax
    mov     word ptr [bp+var_B7C], ax
    mov     bx, word ptr [transshaperectptr]
    cmp     word ptr [bx+0x2], ax
    jge     LAB_24d6_0a6f
    mov     word ptr [bx+0x2], ax
LAB_24d6_0a6f:
    mov     bx, word ptr [transshaperectptr]
    mov     ax, word ptr [bp+var_polyvertY]
    cmp     word ptr [bx+0x4], ax
    jle     LAB_24d6_0a7f
    mov     word ptr [bx+0x4], ax
LAB_24d6_0a7f:
    mov     ax, word ptr [bp+var_polyvertY]
    inc     ax
    mov     word ptr [bp+var_B7C], ax
    mov     bx, word ptr [transshaperectptr]
    cmp     word ptr [bx+0x6], ax
    jge     LAB_24d6_0a94
    mov     word ptr [bx+0x6], ax
LAB_24d6_0a94:
    inc     word ptr [bp+var_polyvertcounter]
LAB_24d6_0a97:
    mov     al, byte ptr [transshapenumvertscopy]
    sub     ah, ah
    cmp     word ptr [bp+var_polyvertcounter], ax
    jc      LAB_24d6_0a30
; end of loop  
LAB_24d6_0aa1:
    mov     ax, word ptr [transshapeprimptr]
    mov     dx, word ptr [transshapeprimptr+2]
    mov     word ptr [transshapeprimitives], ax
    mov     word ptr [transshapeprimitives+2], dx
    add     word ptr [bp+var_cull2], 0x4
    add     word ptr [bp+var_cull1], 0x4
    cmp     word ptr [bp+var_4], 0x0
    jz      LAB_24d6_0ac2
    jmp     near ptr LAB_24d6_0fdc
LAB_24d6_0ac2:
    test    byte ptr [bp+var_primitiveflags], 0x2
    jz      LAB_24d6_0acb
    jmp     near ptr LAB_24d6_10a4
LAB_24d6_0acb:
    les     bx, [transshapeprimitives]
    test    byte ptr es:[bx+0x1], 0x2
    jnz     LAB_24d6_0ad9
    jmp     near ptr LAB_24d6_10a4
LAB_24d6_0ad9:
    mov     bl, byte ptr es:[bx]
    sub     bh, bh
    mov     al, byte ptr [bx+0x32f2]
    sub     ah, ah
    add     ax, word ptr [transshapenumpaints]
    add     ax, 0x2
    add     word ptr [transshapeprimitives], ax
    add     word ptr [bp+var_cull1], 0x4
    add     word ptr [bp+var_cull2], 0x4
    jmp     LAB_24d6_0acb
    db 0x90
_primtype_line:
    les     bx, [transshapeprimitives]
    mov     al, byte ptr es:[bx]
    sub     ah, ah
    mov     si, ax
    mov     al, byte ptr es:[bx+0x1]
    mov     di, ax
    mov     al, byte ptr [bp+di+0xfa9e]
    cbw
    mov     cx, ax
    mov     al, byte ptr [bp+si+0xfa9e]
    cbw
    add     ax, cx
    cmp     ax, 0x2
    jz      LAB_24d6_0aa1
    cmp     byte ptr [bp+si+0xfa9e], 0x0
    jz      LAB_24d6_0b5c
    mov     ax, 0xc
    push    ax
    lea     ax, [bp+var_vec2]
    push    ax
    mov     ax, si
    mov     cx, ax
    shl     ax, 0x1
    add     ax, cx
    shl     ax, 0x1
    add     ax, bp
    sub     ax, 0xb6e
    push    ax
    mov     ax, di
    mov     cx, ax
    shl     ax, 0x1
    add     ax, cx
    shl     ax, 0x1
    add     ax, bp
    sub     ax, 0xb6e
    push    ax
    call    far ptr vector_op_unk
    add     sp, 0x8
    mov     ax, si
    jmp     LAB_24d6_0b96
LAB_24d6_0b5c:
    cmp     byte ptr [bp+di+0xfa9e], 0x0
    jz      LAB_24d6_0bad
    mov     ax, 0xc
    push    ax
    lea     ax, [bp+var_vec2]
    push    ax
    mov     ax, di
    mov     cx, ax
    shl     ax, 0x1
    add     ax, cx
    shl     ax, 0x1
    add     ax, bp
    sub     ax, 0xb6e
    push    ax
    mov     ax, si
    mov     cx, ax
    shl     ax, 0x1
    add     ax, cx
    shl     ax, 0x1
    add     ax, bp
    sub     ax, 0xb6e
    push    ax
    call    far ptr vector_op_unk
    add     sp, 0x8
    mov     ax, di
LAB_24d6_0b96:
    shl     ax, 0x1
    shl     ax, 0x1
    add     ax, bp
    sub     ax, 0x416
    push    ax
    lea     ax, [bp+var_vec2]
    push    ax
    call    far ptr vector_to_point
    add     sp, 0x4
LAB_24d6_0bad:
    mov     bx, si
    mov     ax, bx
    shl     bx, 0x1
    add     bx, ax
    shl     bx, 0x1
    add     bx, bp
    mov     ax, word ptr [bx+0xf496]
    mov     bx, di
    mov     cx, bx
    shl     bx, 0x1
    add     bx, cx
    shl     bx, 0x1
    add     bx, bp
    add     ax, word ptr [bx+0xf496]
    cwd
    mov     word ptr [bp+var_18], ax
    mov     word ptr [bp+var_18+2], dx
    mov     bx, word ptr [polyvertpointptrtab]
    mov     ax, word ptr [bx]
    mov     dx, word ptr [bx+0x2]
    les     bx, [transshapepolyinfo]
    mov     word ptr es:[bx+0x6], ax
    mov     word ptr es:[bx+0x8], dx
    mov     bx, word ptr [(polyvertpointptrtab+1*2)]
    mov     ax, word ptr [bx]
    mov     dx, word ptr [bx+0x2]
    les     bx, [transshapepolyinfo]
    mov     word ptr es:[bx+0xa], ax
    mov     word ptr es:[bx+0xc], dx
    test    byte ptr [transshapeflags], 0x8
    jz      LAB_24d6_0c23
    push    word ptr [transshaperectptr]
    push    word ptr [polyvertpointptrtab]
    push    cs
    call    near ptr rect_adjust_from_point
    add     sp, 0x4
    push    word ptr [transshaperectptr]
    push    word ptr [(polyvertpointptrtab+1*2)]
LAB_24d6_0c1c:
    push    cs
    call    near ptr rect_adjust_from_point
    add     sp, 0x4
LAB_24d6_0c23:
    mov     byte ptr [transshapenumvertscopy], 0x2
LAB_24d6_0c28:
    inc     word ptr [bp+var_4]
    jmp     near ptr LAB_24d6_0aa1
_primtype_wheel:
    cmp     word ptr [bp+var_1A], 0x0
    jz      LAB_24d6_0c37
    jmp     near ptr LAB_24d6_0aa1
LAB_24d6_0c37:
    mov     bx, word ptr [polyvertpointptrtab]
    mov     ax, word ptr [bx]
    mov     dx, word ptr [bx+0x2]
    les     bx, [transshapepolyinfo]
    mov     word ptr es:[bx+0x6], ax
    mov     word ptr es:[bx+0x8], dx
    mov     bx, word ptr [(polyvertpointptrtab+1*2)]
    mov     ax, word ptr [bx]
    mov     dx, word ptr [bx+0x2]
    les     bx, [transshapepolyinfo]
    mov     word ptr es:[bx+0xa], ax
    mov     word ptr es:[bx+0xc], dx
    mov     bx, word ptr [(polyvertpointptrtab+2*2)]
    mov     ax, word ptr [bx]
    mov     dx, word ptr [bx+0x2]
    les     bx, [transshapepolyinfo]
    mov     word ptr es:[bx+0xe], ax
    mov     word ptr es:[bx+0x10], dx
    mov     bx, word ptr [(polyvertpointptrtab+3*2)]
    mov     ax, word ptr [bx]
    mov     dx, word ptr [bx+0x2]
    les     bx, [transshapepolyinfo]
    mov     word ptr es:[bx+0x12], ax
    mov     word ptr es:[bx+0x14], dx
    mov     ax, word ptr [transshapepolyinfo]
    mov     dx, word ptr [transshapepolyinfo+2]
    add     ax, 0x6
    push    dx
    push    ax
    push    cs
    call    near ptr is_facing_camera
    add     sp, 0x4
    or      al, al
    jnz     LAB_24d6_0d1c
    mov     bx, word ptr [(polyvertpointptrtab+3*2)]
    mov     ax, word ptr [bx]
    mov     dx, word ptr [bx+0x2]
    les     bx, [transshapepolyinfo]
    mov     word ptr es:[bx+0x6], ax
    mov     word ptr es:[bx+0x8], dx
    mov     bx, word ptr [(polyvertpointptrtab+4*2)]
    mov     ax, word ptr [bx]
    mov     dx, word ptr [bx+0x2]
    les     bx, [transshapepolyinfo]
    mov     word ptr es:[bx+0xa], ax
    mov     word ptr es:[bx+0xc], dx
    mov     bx, word ptr [(polyvertpointptrtab+5*2)]
    mov     ax, word ptr [bx]
    mov     dx, word ptr [bx+0x2]
    les     bx, [transshapepolyinfo]
    mov     word ptr es:[bx+0xe], ax
    mov     word ptr es:[bx+0x10], dx
    mov     bx, word ptr [polyvertpointptrtab]
    mov     ax, word ptr [bx]
    mov     dx, word ptr [bx+0x2]
    les     bx, [transshapepolyinfo]
    mov     word ptr es:[bx+0x12], ax
    mov     word ptr es:[bx+0x14], dx
    les     bx, [transshapeprimitives]
    mov     al, byte ptr es:[bx+0x3]           ; primitives+3 = paintjob 1? [0..x]
    sub     ah, ah
    mov     bx, ax
    shl     bx, 0x1
    add     bx, ax
    shl     bx, 0x1
    add     bx, bp
    mov     ax, word ptr [bx+0xf496]
    cwd
    mov     cl, 0x2
LAB_24d6_0d11:
    shl     ax, 0x1
    rcl     dx, 0x1
    dec     cl
    jnz     LAB_24d6_0d11
    jmp     LAB_24d6_0d3e
    db 0x90
LAB_24d6_0d1c:
    les     bx, [transshapeprimitives]
    mov     al, byte ptr es:[bx]               ; primitives+0 = primitivetype
    sub     ah, ah
    mov     bx, ax
    shl     bx, 0x1
    add     bx, ax
    shl     bx, 0x1
    add     bx, bp
    mov     ax, word ptr [bx+0xf496]
    cwd
    mov     cl, 0x2
LAB_24d6_0d36:
    shl     ax, 0x1
    rcl     dx, 0x1
    dec     cl
    jnz     LAB_24d6_0d36
LAB_24d6_0d3e:
    mov     word ptr [bp+var_18], ax
    mov     word ptr [bp+var_18+2], dx
    les     bx, [transshapepolyinfo]
    mov     ax, word ptr es:[bx+0x8]
    sub     ax, word ptr es:[bx+0xc]
    push    ax
    mov     ax, word ptr es:[bx+0x6]
    sub     ax, word ptr es:[bx+0xa]
    push    ax
    call    far ptr int_hypot
    add     sp, 0x4
    mov     si, ax
    les     bx, [transshapepolyinfo]
    mov     ax, word ptr es:[bx+0x8]
    sub     ax, word ptr es:[bx+0x10]
    push    ax
    mov     ax, word ptr es:[bx+0x6]
    sub     ax, word ptr es:[bx+0xe]
    push    ax
    call    far ptr int_hypot
    add     sp, 0x4
    mov     di, ax
    cmp     di, si
    jle     LAB_24d6_0d8a
    mov     si, di
LAB_24d6_0d8a:
    test    byte ptr [transshapeflags], 0x8
    jnz     LAB_24d6_0d94
    jmp     near ptr LAB_24d6_0e3c
LAB_24d6_0d94:
    les     bx, [transshapepolyinfo]
    mov     ax, word ptr es:[bx+0x6]
    sub     ax, si
    dec     ax
    mov     word ptr [bp+var_450], ax
    mov     ax, word ptr es:[bx+0x8]
    sub     ax, si
    dec     ax
    mov     word ptr [bp+var_450+2], ax
    push    word ptr [transshaperectptr]
    lea     ax, [bp+var_450]
    push    ax
    push    cs
    call    near ptr rect_adjust_from_point
    add     sp, 0x4
    les     bx, [transshapepolyinfo]
    mov     ax, word ptr es:[bx+0x8]
    add     ax, si
    inc     ax
    mov     word ptr [bp+var_450+2], ax
    mov     ax, word ptr es:[bx+0x6]
    add     ax, si
    inc     ax
    mov     word ptr [bp+var_450], ax
    push    word ptr [transshaperectptr]
    lea     ax, [bp+var_450]
    push    ax
    push    cs
    call    near ptr rect_adjust_from_point
    add     sp, 0x4
    les     bx, [transshapepolyinfo]
    mov     ax, word ptr es:[bx+0x12]
    sub     ax, si
    dec     ax
    mov     word ptr [bp+var_450], ax
    mov     ax, word ptr es:[bx+0x14]
    sub     ax, si
    dec     ax
    mov     word ptr [bp+var_450+2], ax
    push    word ptr [transshaperectptr]
    lea     ax, [bp+var_450]
    push    ax
    push    cs
    call    near ptr rect_adjust_from_point
    add     sp, 0x4
    les     bx, [transshapepolyinfo]
    mov     ax, word ptr es:[bx+0x14]
    add     ax, si
    inc     ax
    mov     word ptr [bp+var_450+2], ax
    mov     ax, word ptr es:[bx+0x12]
    add     ax, si
    inc     ax
    mov     word ptr [bp+var_450], ax
    push    word ptr [transshaperectptr]
    lea     ax, [bp+var_450]
    push    ax
    push    cs
    call    near ptr rect_adjust_from_point
    add     sp, 0x4
LAB_24d6_0e3c:
    mov     byte ptr [transshapenumvertscopy], 0x4
    mov     word ptr [bp+var_4], 0x1
    jmp     near ptr LAB_24d6_0aa1
    db 0x90
_primtype_sphere:
    les     bx, [transshapeprimitives]
    mov     al, byte ptr es:[bx]
    sub     ah, ah
    mov     si, ax
    mov     al, byte ptr es:[bx+0x1]
    mov     di, ax
    mov     cx, ax
    shl     ax, 0x1
    add     ax, cx
    shl     ax, 0x1
    add     ax, bp
    mov     word ptr [bp+var_B7C], ax
    mov     ax, si
    mov     cx, ax
    shl     ax, 0x1
    add     ax, cx
    shl     ax, 0x1
    add     ax, bp
    mov     word ptr [bp+var_polyvertunktabptr], ax
    mov     bx, ax
    mov     ax, word ptr [bx+0xf496]
    mov     bx, word ptr [bp+var_B7C]
    add     ax, word ptr [bx+0xf496]
    cwd
    mov     word ptr [bp+var_18], ax
    mov     word ptr [bp+var_18+2], dx
    mov     al, byte ptr [bp+di+0xfa9e]
    cbw
    mov     cx, ax
    mov     al, byte ptr [bp+si+0xfa9e]
    cbw
    add     ax, cx
    jz      LAB_24d6_0ea1
    jmp     near ptr LAB_24d6_0aa1
LAB_24d6_0ea1:
    mov     bx, word ptr [polyvertpointptrtab]
    mov     ax, word ptr [bx]
    mov     dx, word ptr [bx+0x2]
    les     bx, [transshapepolyinfo]
    mov     word ptr es:[bx+0x6], ax
    mov     word ptr es:[bx+0x8], dx
    mov     bx, word ptr [bp+var_polyvertunktabptr]
    push    si
    push    di
    lea     di, [bp+var_vec3]
    lea     si, [bx+0xf492]
    push    ss
    pop     es
    movsw
    movsw
    movsw
    pop     di
    pop     si
    mov     bx, word ptr [bp+var_B7C]
    push    si
    push    di
    lea     di, [bp+var_vec4]
    lea     si, [bx+0xf492]
    movsw
    movsw
    movsw
    pop     di
    pop     si
    mov     ax, word ptr [bp+var_vec3]
    sub     ax, word ptr [bp+var_vec4]
    mov     word ptr [bp+var_vec2], ax
    mov     ax, word ptr [bp+var_vec3+2]
    sub     ax, word ptr [bp+var_vec4+2]
    mov     word ptr [bp+var_vec2+2], ax
    mov     ax, word ptr [bp+var_vec3+4]
    sub     ax, word ptr [bp+var_vec4+4]
    mov     word ptr [bp+var_vec2+4], ax
    push    word ptr [bp+var_vec3+4]
    lea     ax, [bp+var_vec2]
    push    ax
    call    far ptr int_hypot_3d
    add     sp, 0x2
    push    ax
    call    far ptr projectiondata9_times_ratio
    add     sp, 0x4
    mov     word ptr [bp+var_462], ax
    les     bx, [transshapepolyinfo]
    mov     word ptr es:[bx+0xa], ax
    test    byte ptr [transshapeflags], 0x8
    jnz     LAB_24d6_0f32
    jmp     near ptr LAB_24d6_0c23
LAB_24d6_0f32:
    mov     bx, word ptr [polyvertpointptrtab]
    mov     ax, word ptr [bx+0x2]
    sub     ax, word ptr [bp+var_462]
    mov     word ptr [bp+var_450+2], ax
    mov     ax, word ptr [bx]
    sub     ax, word ptr [bp+var_462]
    mov     word ptr [bp+var_450], ax
    push    word ptr [transshaperectptr]
    lea     ax, [bp+var_450]
    push    ax
    push    cs
    call    near ptr rect_adjust_from_point
    add     sp, 0x4
    mov     ax, word ptr [bp+var_462]
    mov     bx, word ptr [polyvertpointptrtab]
    add     ax, word ptr [bx]
    mov     word ptr [bp+var_450], ax
    mov     ax, word ptr [bx+0x2]
    add     ax, word ptr [bp+var_462]
    mov     word ptr [bp+var_450], ax
    push    word ptr [transshaperectptr]
    lea     ax, [bp+var_450]
    push    ax
    jmp     near ptr LAB_24d6_0c1c
LAB_24d6_0f80:
    les     bx, [transshapeprimitives]
    mov     al, byte ptr es:[bx]               ; primitives+ 0 = type
    sub     ah, ah
    mov     si, ax
    cmp     byte ptr [bp+si+0xfa9e], ah
    jz      LAB_24d6_0f94
    jmp     near ptr LAB_24d6_0aa1
LAB_24d6_0f94:
    mov     bx, si
    shl     bx, 0x1
    add     bx, ax
    shl     bx, 0x1
    add     bx, bp
    mov     ax, word ptr [bx+0xf496]
    cwd
    mov     word ptr [bp+var_18], ax
    mov     word ptr [bp+var_18+2], dx
    mov     bx, word ptr [polyvertpointptrtab]
    mov     ax, word ptr [bx]
    mov     dx, word ptr [bx+0x2]
    les     bx, [transshapepolyinfo]
    mov     word ptr es:[bx+0x6], ax
    mov     word ptr es:[bx+0x8], dx
    test    byte ptr [transshapeflags], 0x8
    jz      LAB_24d6_0fd4
    push    word ptr [transshaperectptr]
    push    word ptr [polyvertpointptrtab]
    push    cs
    call    near ptr rect_adjust_from_point
    add     sp, 0x4
LAB_24d6_0fd4:
    mov     byte ptr [transshapenumvertscopy], 0x1
    jmp     near ptr LAB_24d6_0c28
LAB_24d6_0fdc:
    inc     word ptr [bp+var_45E]
    les     bx, [transshapepolyinfo]
    mov     al, byte ptr [transshapenumvertscopy]
    mov     byte ptr es:[bx+0x3], al           ; polyinfo+3 = numverts
    les     bx, [transshapepolyinfo]
    mov     al, byte ptr [bp+var_primtype]
    mov     byte ptr es:[bx+0x4], al           ; polyinfo+4 = primtype
    cmp     byte ptr [transprimitivepaintjob], 0x2d ; if shape paintjob = 0x2d (back lights), use override
    jnz     LAB_24d6_1006
    les     bx, [transshapepolyinfo]
    mov     al, byte ptr [backlights_paint_override]
    jmp     LAB_24d6_100d
LAB_24d6_1006:
    les     bx, [transshapepolyinfo]
    mov     al, byte ptr [transprimitivepaintjob]
LAB_24d6_100d:
    mov     byte ptr es:[bx+0x2], al           ; polyinfo+2 = paintjob
    mov     al, byte ptr [transshapenumvertscopy]
    sub     ah, ah
    cmp     ax, 0x1
    jz      LAB_24d6_103c
    cmp     ax, 0x2
    jz      LAB_24d6_1058
    cmp     ax, 0x4
    jz      LAB_24d6_1066
    cmp     ax, 0x8
    jz      LAB_24d6_107a
    sub     cx, cx
    push    cx
    push    ax
    push    word ptr [bp+var_18+2]
    push    word ptr [bp+var_18]
    call    far ptr __aFuldiv
    jmp     LAB_24d6_1062
    db 0x90
LAB_24d6_103c:
    mov     si, word ptr [bp+var_18]
LAB_24d6_103f:
    les     bx, [transshapepolyinfo]
    mov     word ptr es:[bx], si               ; polyinfo+0 = ???
    test    byte ptr [transshapeflags], 0x1
    jnz     LAB_24d6_1053
    test    byte ptr [bp+var_primitiveflags], 0x2
    jz      LAB_24d6_108e
LAB_24d6_1053:
    sub     ax, ax
    jmp     LAB_24d6_1091
    db 0x90
LAB_24d6_1058:
    mov     ax, word ptr [bp+var_18]
    mov     dx, word ptr [bp+var_18+2]
    sar     dx, 0x1
    rcr     ax, 0x1
LAB_24d6_1062:
    mov     si, ax
    jmp     LAB_24d6_103f
LAB_24d6_1066:
    mov     ax, word ptr [bp+var_18]
    mov     dx, word ptr [bp+var_18+2]
    mov     cl, 0x2
LAB_24d6_106e:
    or      cl, cl
    jz      LAB_24d6_1062
    sar     dx, 0x1
    rcr     ax, 0x1
    dec     cl
    jmp     LAB_24d6_106e
LAB_24d6_107a:
    mov     ax, word ptr [bp+var_18]
    mov     dx, word ptr [bp+var_18+2]
    mov     cl, 0x3
LAB_24d6_1082:
    or      cl, cl
    jz      LAB_24d6_1062
    sar     dx, 0x1
    rcr     ax, 0x1
    dec     cl
    jmp     LAB_24d6_1082
LAB_24d6_108e:
    mov     ax, 0x1
LAB_24d6_1091:
    push    ax
    push    si
    push    cs
    call    near ptr insert_newest_poly_in_poly_linked_list_40ED6
    add     sp, 0x4
    mov     word ptr [word_40ECE], ax
    or      ax, ax
    jz      LAB_24d6_10a4
    jmp     near ptr LAB_24d6_014e
LAB_24d6_10a4:
    les     bx, [transshapeprimitives]
    cmp     byte ptr es:[bx], 0x0
    jz      _transform_done
    jmp     near ptr LAB_24d6_04d3
_transform_done:
    cmp     word ptr [bp+var_45E], 0x0
    jnz     _done_ret_0
    jmp     near ptr _done_ret_neg1
_done_ret_0:
    sub     ax, ax
    pop     si
    pop     di
    mov     sp, bp
    pop     bp
    retf
transformed_shape_op_asm_ endp
    db 0x90
; Formerly transformed_shape_op_helper3

; undefined2 __cdecl16far insert_newest_poly_in_poly_linked_list_40ED6(int param_1, int param_2)
insert_newest_poly_in_poly_linked_list_40ED6_asm_ proc far
    param_1    = word ptr    6
    param_2    = word ptr    8

    push    bp
    mov     bp, sp
    sub     sp, 0x4
    push    di
    push    si
    cmp     word ptr [bp+param_2], 0x0
    jnz     LAB_24d6_10de
    mov     bx, word ptr [poly_linklist_40ED6_iter4]
    shl     bx, 0x1
    mov     di, word ptr [bx+poly_linked_list_40ED6]
    jmp     LAB_24d6_111b
LAB_24d6_10de:
    mov     ax, word ptr [poly_linklist_40ED6_iter1]
    mov     word ptr [poly_linklist_40ED6_iter4], ax
    mov     bx, ax
    shl     bx, 0x1
    mov     di, word ptr [bx+poly_linked_list_40ED6]
    mov     si, word ptr [poly_linklist_40ED6_iter3]
    jmp     LAB_24d6_1117
LAB_24d6_10f2:
    mov     ax, si
    dec     si
    or      ax, ax
    jz      LAB_24d6_111b
    mov     bx, di
    shl     bx, 0x1
    shl     bx, 0x1
    les     bx, [bx+polyinfoptrs]
    mov     ax, word ptr [bp+param_1]
    cmp     word ptr es:[bx], ax
    jl      LAB_24d6_111b
    mov     word ptr [poly_linklist_40ED6_iter4], di
    mov     bx, di
    shl     bx, 0x1
    mov     di, word ptr [bx+poly_linked_list_40ED6]
LAB_24d6_1117:
    or      di, di
    jge     LAB_24d6_10f2
LAB_24d6_111b:
    mov     bx, word ptr [polyinfonumpolys]
    shl     bx, 0x1
    mov     word ptr [bx+poly_linked_list_40ED6], di
    mov     bx, word ptr [poly_linklist_40ED6_iter4]
    shl     bx, 0x1
    mov     ax, word ptr [polyinfonumpolys]
    mov     word ptr [bx+poly_linked_list_40ED6], ax
    inc     word ptr [poly_linklist_40ED6_iter3]
    or      di, di
    jge     LAB_24d6_1140
    mov     ax, word ptr [polyinfonumpolys]
    mov     word ptr [poly_linklist_40ED6_iter2], ax
LAB_24d6_1140:
    mov     bx, word ptr [poly_linklist_40ED6_iter4]
    shl     bx, 0x1
    mov     ax, word ptr [bx+poly_linked_list_40ED6]
    mov     word ptr [poly_linklist_40ED6_iter4], ax
    inc     word ptr [polyinfonumpolys]
    mov     al, byte ptr [transshapenumvertscopy]
    sub     ah, ah
    shl     ax, 0x1
    shl     ax, 0x1
    add     ax, 0x6
    add     word ptr [polyinfoptrnext], ax
    cmp     word ptr [polyinfonumpolys], 0x190
    jz      LAB_24d6_1171
    cmp     word ptr [polyinfoptrnext], 0x2872
    jle     LAB_24d6_117a
LAB_24d6_1171:
    mov     ax, 0x1                            ; return 1 if error
    pop     si
    pop     di
    mov     sp, bp
    pop     bp
    retf
LAB_24d6_117a:
    sub     ax, ax
    pop     si
    pop     di
    mov     sp, bp
    pop     bp
    retf
insert_newest_poly_in_poly_linked_list_40ED6_asm_ endp

; byte __cdecl16far rect_compare_point(int * param_1)
rect_compare_point_asm_ proc far
    var_flags  = byte ptr   -4
    param_1    = word ptr    6

    push    bp
    mov     bp, sp
    sub     sp, 0x4
    push    si
    mov     si, word ptr [bp+param_1]
    mov     ax, word ptr [select_rect_rc.rc_top]
    cmp     word ptr [si+0x2], ax
    jge     LAB_24d6_119a
    mov     byte ptr [bp+var_flags], 0x1
    jmp     LAB_24d6_11ac
LAB_24d6_119a:
    mov     ax, word ptr [select_rect_rc.rc_bottom]
    cmp     word ptr [si+0x2], ax
    jle     LAB_24d6_11a8
    mov     byte ptr [bp+var_flags], 0x2
    jmp     LAB_24d6_11ac
LAB_24d6_11a8:
    mov     byte ptr [bp+var_flags], 0x0
LAB_24d6_11ac:
    mov     ax, word ptr [select_rect_rc]
    cmp     word ptr [si], ax
    jge     LAB_24d6_11ba
    or      byte ptr [bp+var_flags], 0x4
    jmp     LAB_24d6_11c5
    db 0x90
LAB_24d6_11ba:
    mov     ax, word ptr [select_rect_rc.rc_right]
    cmp     word ptr [si], ax
    jle     LAB_24d6_11c5
    or      byte ptr [bp+var_flags], 0x8
LAB_24d6_11c5:
    mov     al, byte ptr [bp+var_flags]
    cbw
    pop     si
    mov     sp, bp
    pop     bp
    retf
rect_compare_point_asm_ endp

; char __cdecl16far is_facing_camera(POINT2D * pts)
is_facing_camera_asm_ proc far
    var_10     = dword ptr -16
    var_C      = dword ptr -12
    var_8      = dword ptr  -8
    var_4      = dword ptr  -4
    pts        = dword ptr   6

    push    bp
    mov     bp, sp
    sub     sp, 0x10
    push    di
    push    si
    les     bx, [bp+pts]
    mov     ax, word ptr es:[bx+0x4]
    cwd
    mov     cx, ax
    mov     ax, word ptr es:[bx]
    mov     bx, dx
    cwd
    sub     ax, cx
    sbb     dx, bx
    mov     word ptr [bp+var_4], ax
    mov     word ptr [bp+var_4+2], dx
    mov     bx, word ptr [bp+pts]
    mov     ax, word ptr es:[bx+0x4]
    cwd
    mov     cx, ax
    mov     ax, word ptr es:[bx+0x8]
    mov     bx, dx
    cwd
    sub     ax, cx
    sbb     dx, bx
    mov     word ptr [bp+var_C], ax
    mov     word ptr [bp+var_C+2], dx
    mov     ax, word ptr [bp+var_4]
    or      ax, word ptr [bp+var_4+2]
    jnz     LAB_24d6_121a
    mov     ax, word ptr [bp+var_C]
    or      ax, dx
    jz      LAB_24d6_128e
LAB_24d6_121a:
    mov     bx, word ptr [bp+pts]
    mov     ax, word ptr es:[bx+0x2]
    sub     ax, word ptr es:[bx+0x6]
    cwd
    mov     word ptr [bp+var_8], ax
    mov     word ptr [bp+var_8+2], dx
    mov     ax, word ptr es:[bx+0xa]
    sub     ax, word ptr es:[bx+0x6]
    cwd
    mov     word ptr [bp+var_10], ax
    mov     word ptr [bp+var_10+2], dx
    mov     ax, word ptr [bp+var_8]
    or      ax, word ptr [bp+var_8+2]
    jnz     LAB_24d6_124a
    mov     ax, word ptr [bp+var_10]
    or      ax, dx
    jz      LAB_24d6_128e
LAB_24d6_124a:
    push    word ptr [bp+var_10+2]
    push    word ptr [bp+var_10]
    push    word ptr [bp+var_4+2]
    push    word ptr [bp+var_4]
    call    far ptr __aFlmul
    push    word ptr [bp+var_8+2]
    push    word ptr [bp+var_8]
    push    word ptr [bp+var_C+2]
    push    word ptr [bp+var_C]
    mov     si, ax
    mov     di, dx
    call    far ptr __aFlmul
    sub     ax, si
    sbb     dx, di
    or      dx, dx
    jl      LAB_24d6_1284
    jg      LAB_24d6_127e
    or      ax, ax
    jz      LAB_24d6_1284
LAB_24d6_127e:
    mov     al, 0x1
    jmp     LAB_24d6_1286
    db 0x90
    db 0x90
LAB_24d6_1284:
    sub     al, al
LAB_24d6_1286:
    cbw
    pop     si
    pop     di
    mov     sp, bp
    pop     bp
    retf
    db 0x90
LAB_24d6_128e:
    sub     ax, ax
    pop     si
    pop     di
    mov     sp, bp
    pop     bp
    retf
is_facing_camera_asm_ endp

; void __cdecl16far get_a_poly_info(void)
get_a_poly_info_asm_ proc far
    var_pattype2 = word ptr  -64
    var_polyinfoptrdata = dword ptr -62
    var_polyinfoptr = dword ptr -56
    var_32     = byte ptr  -50
    var_32ptr  = word ptr  -10
    var_matcolor = word ptr   -8
    var_mattype = word ptr   -6
    var_counter = word ptr   -4
    var_maxcount = word ptr   -2

    push    bp
    mov     bp, sp
    sub     sp, 0x40
    push    di
    push    si
    mov     di, 0x190
    sub     si, si
    jmp     near ptr LAB_24d6_134c
_fill_type0:
    les     bx, [bp+var_polyinfoptr]
    mov     al, byte ptr es:[bx+0x3]
    cbw
    mov     word ptr [bp+var_maxcount], ax
    mov     ax, bx
    mov     dx, es
    add     ax, 0x6
    mov     word ptr [bp+var_polyinfoptrdata], ax ; polyinfoptrdata = polyinfoptr+6
    mov     word ptr [bp+var_polyinfoptrdata+2], dx
    lea     ax, [bp+var_32]
    mov     word ptr [bp+var_32ptr], ax
    mov     word ptr [bp+var_counter], 0x0
    jmp     LAB_24d6_12e9
    db 0x90
LAB_24d6_12cc:
    les     bx, [bp+var_polyinfoptrdata]
    mov     ax, word ptr es:[bx]
    mov     dx, word ptr es:[bx+0x2]
    mov     bx, word ptr [bp+var_32ptr]
    mov     word ptr [bx], ax
    mov     word ptr [bx+0x2], dx
    add     word ptr [bp+var_32ptr], 0x4
    add     word ptr [bp+var_polyinfoptrdata], 0x4
    inc     word ptr [bp+var_counter]
LAB_24d6_12e9:
    mov     ax, word ptr [bp+var_maxcount]
    cmp     word ptr [bp+var_counter], ax
    jc      LAB_24d6_12cc
    mov     bx, word ptr [bp+var_mattype]
    shl     bx, 0x1
    add     bx, word ptr [material_patlist_ptr_cpy]
    mov     ax, word ptr [bx]
    or      ax, ax
    jz      _fill_default                      ; 0 normal 1 grille 2? 3 invisible
    cmp     ax, 0x1
    jz      _fill_patterned
    cmp     ax, 0x2
    jnz     _do_fill_next
    jmp     near ptr _fill_unk
_do_fill_next:
    jmp     _fill_next
    db 0x90
_fill_default:
    lea     ax, [bp+var_32]
    push    ax
    push    word ptr [bp+var_maxcount]
    push    word ptr [bp+var_matcolor]
; NOP: Default case 
; missing (xD).  
    call    far ptr preRender_default
_fill_next_eop6:
    add     sp, 0x6
    jmp     _fill_next
_fill_patterned:
    mov     bx, word ptr [bp+var_mattype]
    shl     bx, 0x1
    add     bx, word ptr [material_patlist2_ptr_cpy]
    mov     ax, word ptr [bx]
    mov     word ptr [bp+var_pattype2], ax
    or      ax, ax
    jz      _fill_next
    lea     ax, [bp+var_32]
    push    ax
    push    word ptr [bp+var_maxcount]
    push    word ptr [bp+var_matcolor]
    push    word ptr [bp+var_pattype2]
; NOP: Patterned surfaces 
; missing.  
    call    far ptr preRender_patterned
_fill_next_eop8:
    add     sp, 0x8
_fill_next:
    inc     si
LAB_24d6_134c:
    mov     ax, si
    cmp     ax, word ptr [polyinfonumpolys]
    jc      LAB_24d6_1357
    jmp     near ptr _get_a_poly_info_done
LAB_24d6_1357:
    mov     bx, di                             ; di = 400
    shl     bx, 0x1
    mov     di, word ptr [bx+poly_linked_list_40ED6]
    mov     bx, di
    shl     bx, 0x1
    shl     bx, 0x1
    mov     ax, word ptr [bx+polyinfoptrs]
    mov     dx, word ptr [bx+polyinfoptrs+2]
    mov     word ptr [bp+var_polyinfoptr], ax
    mov     word ptr [bp+var_polyinfoptr+2], dx
    les     bx, [bp+var_polyinfoptr]
    mov     al, byte ptr es:[bx+0x2]           ; material type
    sub     ah, ah
    mov     word ptr [bp+var_mattype], ax
    mov     bx, ax                             ; material index...
    shl     bx, 0x1
    add     bx, word ptr [material_clrlist_ptr_cpy]
    mov     ax, word ptr [bx]
    mov     word ptr [bp+var_matcolor], ax
    mov     bx, word ptr [bp+var_polyinfoptr]
    mov     al, byte ptr es:[bx+0x4]           ; object type (solid, sphere, wheel, pixel)
    cbw
    or      ax, ax
    jnz     _fill_nonzero
    jmp     near ptr _fill_type0
_fill_nonzero:
    cmp     ax, 0x1
    jz      _fill_solid
    cmp     ax, 0x2
    jnz     LAB_24d6_13a8
    jmp     near ptr _fill_sphere
LAB_24d6_13a8:
    cmp     ax, 0x3
    jz      _fill_wheel0
    cmp     ax, 0x5
    jnz     _fill_next_jmp
    jmp     near ptr _fill_pixel
_fill_next_jmp:
    jmp     _fill_next
    db 0x90
_fill_unk:
    mov     ax, word ptr [bp+var_mattype]
    shl     ax, 0x1
    mov     word ptr [bp+var_pattype2], ax
    lea     ax, [bp+var_32]
    push    ax
    push    word ptr [bp+var_maxcount]
    push    word ptr [bp+var_matcolor]
    mov     bx, word ptr [bp+var_pattype2]
    add     bx, word ptr [material_clrlist2_ptr_cpy]
    push    word ptr [bx]
    mov     bx, word ptr [bp+var_pattype2]
    add     bx, word ptr [material_patlist2_ptr_cpy]
    push    word ptr [bx]
; NOP: No visible effects.  
    call    far ptr preRender_unk
    jmp     _fill_next_eop10
    db 0x90
_fill_solid:
    push    word ptr [bp+var_matcolor]
    les     bx, [bp+var_polyinfoptr]
    push    word ptr es:[bx+0xc]
    push    word ptr es:[bx+0xa]
    push    word ptr es:[bx+0x8]
    push    word ptr es:[bx+0x6]
; NOP: No visbile effects.  
    call    far ptr preRender_line
_fill_next_eop10:
    add     sp, 0xa
    jmp     near ptr _fill_next
    db 0x90
_fill_wheel0:
    mov     word ptr [bp+var_counter], 0x0
_fill_wheel:
    mov     ax, word ptr [bp+var_counter]
    shl     ax, 0x1
    shl     ax, 0x1
    mov     word ptr [bp+var_pattype2], ax
    mov     bx, ax
    add     bx, word ptr [bp+var_polyinfoptr]
    mov     es, word ptr [bp+var_polyinfoptr+2]
    mov     ax, word ptr es:[bx+0x6]
    mov     dx, word ptr es:[bx+0x8]
    mov     bx, word ptr [bp+var_pattype2]
    add     bx, bp
    mov     word ptr [bx-0x32], ax
    mov     word ptr [bx-0x30], dx
    inc     word ptr [bp+var_counter]
    cmp     word ptr [bp+var_counter], 0x4
    jc      _fill_wheel                        ; b4 every car0 render
    mov     ax, word ptr [bp+var_mattype]      ; material index
    shl     ax, 0x1
    add     ax, word ptr [material_clrlist_ptr_cpy]
    mov     word ptr [bp+var_pattype2], ax
    mov     bx, ax
    push    word ptr [bx+0x4]
    push    word ptr [bx+0x2]
    push    word ptr [bp+var_matcolor]
    mov     ax, offset (trkObjectList+80*14).ss_ssOvelay
    push    ax
    lea     ax, [bp+var_32]
    push    ax
; NOP: Wheels missing.  
    call    far ptr preRender_wheel
    jmp     _fill_next_eop10
    db 0x90
_fill_sphere:
    push    word ptr [bp+var_matcolor]
    les     bx, [bp+var_polyinfoptr]
    push    word ptr es:[bx+0xa]
    push    word ptr es:[bx+0x8]
    push    word ptr es:[bx+0x6]
; NOP: Spheres missing.  
    call    far ptr preRender_sphere
    jmp     near ptr _fill_next_eop8
_fill_pixel:
    push    word ptr [bp+var_matcolor]
    les     bx, [bp+var_polyinfoptr]
    push    word ptr es:[bx+0x8]
    push    word ptr es:[bx+0x6]
; NOP: No visible effects. 
; (I'd guess 3D particles 
; are missing.)  
    call    far ptr putpixel_single_maybe
    jmp     near ptr _fill_next_eop6
_get_a_poly_info_done:
    push    cs
    call    near ptr polyinfo_reset
    pop     si
    pop     di
    mov     sp, bp
    pop     bp
    retf
get_a_poly_info_asm_ endp

; ******************************************************************************
; * dbg: matematrix
; ******************************************************************************
;  
; Combined rotation matrix for 
; angles around all axes.  

; MATRIX * __cdecl16far mat_rot_zxy(int z_, int x_, int y_, int unk)
mat_rot_zxy_asm_ proc far
    z_         = word ptr    6
    x_         = word ptr    8
    y_         = word ptr   10
    unk        = word ptr   12

    push    bp
    mov     bp, sp
    sub     sp, 0x4
    push    di
    push    si
    sub     si, si
; Skips if angle is multiple of 400h.  
    test    word ptr [bp+z_], 0x3ff
    jz      LAB_24d6_14bc
    mov     si, 0x4
    push    word ptr [bp+z_]
    mov     ax, offset mat_z_rot
    push    ax
    call    far ptr mat_rot_z
    add     sp, si
LAB_24d6_14bc:
    test    word ptr [bp+x_], 0x3ff
    jz      LAB_24d6_14d6
    or      si, 0x2
    nop
    push    word ptr [bp+x_]
    mov     ax, offset mat_x_rot
    push    ax
    call    far ptr mat_rot_x
    add     sp, 0x4
LAB_24d6_14d6:
    test    word ptr [bp+y_], 0x3ff
    jz      LAB_24d6_1525
    or      si, 0x1
    nop
    mov     ax, word ptr [bp+y_]
    and     ah, 0x3
    cmp     ax, word ptr [mat_y_rot_angle]
    jnz     LAB_24d6_14f2
LAB_24d6_14ed:
    mov     di, offset mat_y_rot
    jmp     LAB_24d6_1525
LAB_24d6_14f2:
    mov     ax, word ptr [bp+y_]
    and     ah, 0x3
    cmp     ax, 0x100
    jz      LAB_24d6_1522
    cmp     ax, 0x200
    jz      LAB_24d6_1538
    cmp     ax, 0x300
    jz      LAB_24d6_153e
    push    word ptr [bp+y_]
    mov     ax, offset mat_y_rot
    push    ax
    call    far ptr mat_rot_y
    add     sp, 0x4
    mov     ax, word ptr [bp+y_]
    and     ah, 0x3
    mov     word ptr [mat_y_rot_angle], ax
    jmp     LAB_24d6_14ed
    db 0x90
LAB_24d6_1522:
    mov     di, offset mat_y100
LAB_24d6_1525:
    mov     ax, si
    cmp     ax, 0x7
    jbe     LAB_24d6_152f
    jmp     near ptr LAB_24d6_1612
LAB_24d6_152f:
    add     ax, ax
    xchg    ax, bx
switchD:
    jmp     word ptr cs:[bx+off_rot_zxy]
    db 0x90
LAB_24d6_1538:
    mov     di, offset mat_y200
    jmp     LAB_24d6_1525
    db 0x90
LAB_24d6_153e:
    mov     di, offset mat_y300
    jmp     LAB_24d6_1525
    db 0x90
LAB_24d6_1544:
    mov     di, offset mat_y0
    jmp     near ptr LAB_24d6_1612
LAB_24d6_154a:
    test    byte ptr [bp+0xc], 0x1
    jz      LAB_24d6_155c
    mov     ax, offset mat_rot_temp
    push    ax
    mov     ax, offset mat_x_rot
LAB_24d6_1557:
    push    ax
    push    di
    jmp     LAB_24d6_1565
    db 0x90
LAB_24d6_155c:
    mov     ax, offset mat_rot_temp
    push    ax
    push    di
LAB_24d6_1561:
    mov     ax, offset mat_x_rot
LAB_24d6_1564:
    push    ax
LAB_24d6_1565:
    call    far ptr mat_multiply
    add     sp, 0x6
    mov     di, offset mat_rot_temp
    jmp     near ptr LAB_24d6_1612
    db 0x90
LAB_24d6_1574:
    test    byte ptr [bp+0xc], 0x1
    jz      LAB_24d6_1584
    mov     ax, offset mat_rot_temp
    push    ax
    mov     ax, offset mat_z_rot
    jmp     LAB_24d6_1557
    db 0x90
LAB_24d6_1584:
    mov     ax, offset mat_rot_temp
    push    ax
    push    di
LAB_24d6_1589:
    mov     ax, offset mat_z_rot
    jmp     LAB_24d6_1564
LAB_24d6_158e:
    test    byte ptr [bp+0xc], 0x1
    jz      LAB_24d6_159e
    mov     ax, offset mat_rot_temp
    push    ax
    mov     ax, offset mat_z_rot
    push    ax
    jmp     LAB_24d6_1561
LAB_24d6_159e:
    mov     ax, offset mat_rot_temp
    push    ax
    mov     ax, offset mat_x_rot
    push    ax
    jmp     LAB_24d6_1589
LAB_24d6_15a8:
    test    byte ptr [bp+0xc], 0x1
    jz      LAB_24d6_15d8
    mov     ax, offset mat_rot_temp
    push    ax
    mov     ax, offset mat_x_rot
    push    ax
    push    di
    call    far ptr mat_multiply
    add     sp, 0x6
    mov     ax, offset mat_x_rot
    push    ax
    mov     ax, offset mat_z_rot
    push    ax
    mov     ax, offset mat_rot_temp
    push    ax
    call    far ptr mat_multiply
    add     sp, 0x6
LAB_24d6_15d3:
    mov     di, offset mat_x_rot
    jmp     LAB_24d6_1612
LAB_24d6_15d8:
    mov     ax, offset mat_rot_temp
    push    ax
    mov     ax, offset mat_x_rot
    push    ax
    mov     ax, offset mat_z_rot
    push    ax
    call    far ptr mat_multiply
    add     sp, 0x6
    mov     ax, offset mat_z_rot
    push    ax
    push    di
    mov     ax, offset mat_rot_temp
    push    ax
    call    far ptr mat_multiply
    add     sp, 0x6
LAB_24d6_15fd:
    mov     di, offset mat_z_rot
    jmp     LAB_24d6_1612
off_rot_zxy:
    dw LAB_24d6_1544
    dw LAB_24d6_1612
    dw LAB_24d6_15d3
    dw LAB_24d6_154a
    dw LAB_24d6_15fd
    dw LAB_24d6_1574
    dw LAB_24d6_158e
    dw LAB_24d6_15a8
LAB_24d6_1612:
    mov     ax, di
    pop     si
    pop     di
    mov     sp, bp
    pop     bp
    retf
mat_rot_zxy_asm_ endp

; void __cdecl16far rect_adjust_from_point(POINT2D * pt, RECTANGLE * rc)
rect_adjust_from_point_asm_ proc far
    var_6      = word ptr   -6
    pt         = word ptr    6
    rc         = word ptr    8

    push    bp
    mov     bp, sp
    sub     sp, 0x6
    push    di
    push    si
    mov     bx, word ptr [bp+pt]
    mov     si, word ptr [bx]
    mov     di, word ptr [bx+0x2]
    mov     bx, word ptr [bp+rc]
    cmp     word ptr [bx], si
    jle     LAB_24d6_1633
    mov     word ptr [bx], si
LAB_24d6_1633:
    lea     ax, [si+0x1]
    mov     word ptr [bp+var_6], ax
    mov     bx, word ptr [bp+rc]
    cmp     word ptr [bx+0x2], ax
    jge     LAB_24d6_1644
    mov     word ptr [bx+0x2], ax
LAB_24d6_1644:
    mov     bx, word ptr [bp+rc]
    cmp     word ptr [bx+0x4], di
    jle     LAB_24d6_164f
    mov     word ptr [bx+0x4], di
LAB_24d6_164f:
    lea     ax, [di+0x1]
    mov     word ptr [bp+var_6], ax
    mov     bx, word ptr [bp+rc]
    cmp     word ptr [bx+0x6], ax
    jge     LAB_24d6_1660
    mov     word ptr [bx+0x6], ax
LAB_24d6_1660:
    pop     si
    pop     di
    mov     sp, bp
    pop     bp
    retf
rect_adjust_from_point_asm_ endp

; int __cdecl16far vector_op_unk2(VECTOR * vec)
vector_op_unk2_asm_ proc far
    var_y      = dword ptr -14
    var_A      = byte ptr  -10
    var_8      = word ptr   -8
    var_6      = word ptr   -6
    var_4      = word ptr   -4
    var_2      = word ptr   -2
    vec        = word ptr    6

    push    bp
    mov     bp, sp
    sub     sp, 0xe
    push    di
    push    si
    mov     bx, word ptr [bp+vec]
    push    word ptr [bx+0x2]                  ; int
    call    far ptr _abs
    add     sp, 0x2
    cwd
    mov     word ptr [bp+var_y], ax
    mov     word ptr [bp+var_y+2], dx
    mov     bx, word ptr [bp+vec]
    push    word ptr [bx+0x4]                  ; int
    call    far ptr _abs
    add     sp, 0x2
    push    ax
    mov     bx, word ptr [bp+vec]
    push    word ptr [bx]                      ; int
    call    far ptr _abs
    add     sp, 0x2
    push    ax
    call    far ptr int_hypot
    add     sp, 0x4
    mov     word ptr [bp+var_4], ax
    mov     word ptr [bp+var_2], 0x0
    mov     ax, word ptr [sin80]
    mov     dx, word ptr [sin80+2]
    cmp     word ptr [cos80], ax
    jnz     LAB_24d6_16da
    cmp     word ptr [cos80+2], dx
    jnz     LAB_24d6_16da
    mov     ax, word ptr [bp+var_y]
    mov     dx, word ptr [bp+var_y+2]
    cmp     word ptr [bp+var_2], dx
    jg      LAB_24d6_170e
    jl      LAB_24d6_16d5
    cmp     word ptr [bp+var_4], ax
    jnc     LAB_24d6_170e
LAB_24d6_16d5:
    mov     ax, 0x1
    jmp     LAB_24d6_1710
LAB_24d6_16da:
    push    word ptr [sin80+2]
    push    word ptr [sin80]
    push    word ptr [bp+var_y+2]
    push    word ptr [bp+var_y]
    call    far ptr __aFlmul
    push    word ptr [cos80+2]
    push    word ptr [cos80]
    push    word ptr [bp+var_2]
    push    word ptr [bp+var_4]
    mov     si, ax
    mov     di, dx
    call    far ptr __aFlmul
    cmp     dx, di
    jg      LAB_24d6_170e
    jl      LAB_24d6_16d5
    cmp     ax, si
    jc      LAB_24d6_16d5
LAB_24d6_170e:
    sub     ax, ax
LAB_24d6_1710:
    mov     word ptr [bp+var_8], ax
    mov     bx, word ptr [bp+vec]
    cmp     word ptr [bx+0x2], 0x0
    jge     LAB_24d6_172a
    or      ax, ax
    jz      LAB_24d6_1740
    mov     ax, 0x1e
    pop     si
    pop     di
    mov     sp, bp
    pop     bp
    retf
    db 0x90
LAB_24d6_172a:
    cmp     word ptr [bx+0x2], 0x0
    jle     LAB_24d6_1740
    cmp     word ptr [bp+var_8], 0x0
    jz      LAB_24d6_1740
    mov     ax, 0x1f
    pop     si
    pop     di
    mov     sp, bp
    pop     bp
    retf
    db 0x90
LAB_24d6_1740:
    cmp     word ptr [bx+0x2], 0x0
    jle     LAB_24d6_174c
    mov     byte ptr [bp+var_A], 0xf
    jmp     LAB_24d6_1750
LAB_24d6_174c:
    mov     byte ptr [bp+var_A], 0x0
LAB_24d6_1750:
    mov     ax, word ptr [bx]
    neg     ax
    push    ax
    push    word ptr [bx+0x4]
    call    far ptr int_atan2
    add     sp, 0x4
    neg     ax
    mov     word ptr [bp+var_6], ax
    or      ax, ax
    jge     LAB_24d6_176d
    add     byte ptr [bp+var_6+1], 0x4
LAB_24d6_176d:
    mov     ax, word ptr [bp+var_6]
    cwd
    mov     cx, ax
    mov     bx, dx
    shl     ax, 0x1
    rcl     dx, 0x1
    shl     ax, 0x1
    rcl     dx, 0x1
    shl     ax, 0x1
    rcl     dx, 0x1
    shl     ax, 0x1
    rcl     dx, 0x1
    sub     ax, cx
    sbb     dx, bx
    mov     cl, 0xa
LAB_24d6_178b:
    sar     dx, 0x1
    rcr     ax, 0x1
    dec     cl
    jnz     LAB_24d6_178b
    add     byte ptr [bp+var_A], al
    mov     al, byte ptr [bp+var_A]
    cbw
    pop     si
    pop     di
    mov     sp, bp
    pop     bp
    retf
vector_op_unk2_asm_ endp

; void __cdecl16far calc_sincos80(void)
calc_sincos80_asm_ proc far
    mov     ax, 0x80
    push    ax
    call    far ptr int_sin
    add     sp, 0x2
    cwd
    mov     word ptr [sin80], ax
    mov     word ptr [sin80+2], dx
    mov     ax, 0x80
    push    ax
    call    far ptr int_cos
    add     sp, 0x2
    cwd
    mov     word ptr [cos80], ax
    mov     word ptr [cos80+2], dx
    mov     ax, 0x80
    push    ax
    call    far ptr int_sin
    add     sp, 0x2
    cwd
    mov     word ptr [sin80_2], ax
    mov     word ptr [sin80_2+2], dx
    mov     ax, 0x80
    push    ax
    call    far ptr int_cos
    add     sp, 0x2
    cwd
    mov     word ptr [cos80_2], ax
    mov     word ptr [cos80_2+2], dx
    retf
calc_sincos80_asm_ endp
    db 0x90

; int __cdecl16far nopsub_26552(int param_1, int param_2)
nopsub_26552_asm_ proc far
    param_1    = word ptr    6
    param_2    = word ptr    8

    push    bp
    mov     bp, sp
    cmp     word ptr [bp+param_2], 0x0
    jge     LAB_24d6_180a
    mov     ax, word ptr [bp+param_1]
    mov     dx, word ptr [bp+param_2]
    neg     ax
    adc     dx, 0x0
    neg     dx
    pop     bp
    retf
LAB_24d6_180a:
    mov     ax, word ptr [bp+param_1]
    mov     dx, word ptr [bp+param_2]
    pop     bp
    retf
nopsub_26552_asm_ endp

; void __cdecl16far rect_union(RECTANGLE * r1, RECTANGLE * r2, RECTANGLE * outrc)
rect_union_asm_ proc far
    r1         = word ptr    6
    r2         = word ptr    8
    outrc      = word ptr   10

    push    bp
    mov     bp, sp
    push    si
    mov     bx, word ptr [bp+outrc]
    mov     si, word ptr [bp+r1]
    mov     ax, word ptr [si]
    mov     si, word ptr [bp+r2]
    cmp     ax, word ptr [si]
    jle     LAB_24d6_1827
    mov     ax, word ptr [si]
LAB_24d6_1827:
    mov     word ptr [bx], ax
    mov     bx, word ptr [bp+outrc]
    mov     si, word ptr [bp+r1]
    mov     ax, word ptr [si+0x2]
    mov     si, word ptr [bp+r2]
    cmp     ax, word ptr [si+0x2]
    jge     LAB_24d6_183d
    mov     ax, word ptr [si+0x2]
LAB_24d6_183d:
    mov     word ptr [bx+0x2], ax
    mov     bx, word ptr [bp+outrc]
    mov     si, word ptr [bp+r1]
    mov     ax, word ptr [si+0x4]
    mov     si, word ptr [bp+r2]
    cmp     ax, word ptr [si+0x4]
    jle     LAB_24d6_1854
    mov     ax, word ptr [si+0x4]
LAB_24d6_1854:
    mov     word ptr [bx+0x4], ax
    mov     bx, word ptr [bp+outrc]
    mov     si, word ptr [bp+r1]
    mov     ax, word ptr [si+0x6]
    mov     si, word ptr [bp+r2]
    cmp     ax, word ptr [si+0x6]
    jge     LAB_24d6_186b
    mov     ax, word ptr [si+0x6]
LAB_24d6_186b:
    mov     word ptr [bx+0x6], ax
    cmp     word ptr [video_flag2_is1], 0x1
    jz      LAB_24d6_1889
    mov     bx, word ptr [bp+outrc]
    mov     si, bx
    mov     ax, word ptr [si+0x2]
    add     ax, word ptr [video_flag2_is1]
    dec     ax
    and     ax, word ptr [video_flag3_isFFFF]
    mov     word ptr [bx+0x2], ax
LAB_24d6_1889:
    pop     si
    pop     bp
    retf
rect_union_asm_ endp

; int __cdecl16far rect_intersect(RECTANGLE * r1, RECTANGLE * r2)
rect_intersect_asm_ proc far
    r1         = word ptr    6
    r2         = word ptr    8

    push    bp
    mov     bp, sp
    push    si
    mov     bx, word ptr [bp+r1]
    mov     si, bx
    mov     ax, word ptr [si]
    cmp     word ptr [bx+0x2], ax
    jge     LAB_24d6_18a2
LAB_24d6_189c:
    mov     ax, 0x1
    pop     si
    pop     bp
    retf
LAB_24d6_18a2:
    mov     bx, word ptr [bp+r2]
    mov     si, word ptr [bp+r1]
    mov     ax, word ptr [si]
    cmp     word ptr [bx+0x2], ax
    jle     LAB_24d6_189c
    mov     bx, si
    mov     si, word ptr [bp+r2]
    mov     ax, word ptr [si]
    cmp     word ptr [bx+0x2], ax
    jle     LAB_24d6_189c
    mov     ax, word ptr [si+0x6]
    cmp     word ptr [bx+0x4], ax
    jge     LAB_24d6_189c
    mov     ax, word ptr [si+0x4]
    cmp     word ptr [bx+0x6], ax
    jle     LAB_24d6_189c
    mov     bx, si
    mov     si, word ptr [bx]
    mov     bx, word ptr [bp+r1]
    cmp     word ptr [bx], si
    jge     LAB_24d6_18d8
    mov     word ptr [bx], si
LAB_24d6_18d8:
    mov     bx, word ptr [bp+r1]
    mov     si, word ptr [bp+r2]
    mov     ax, word ptr [si+0x2]
    cmp     word ptr [bx+0x2], ax
    jle     LAB_24d6_18e9
    mov     word ptr [bx+0x2], ax
LAB_24d6_18e9:
    mov     bx, word ptr [bp+r1]
    mov     si, word ptr [bp+r2]
    mov     ax, word ptr [si+0x4]
    cmp     word ptr [bx+0x4], ax
    jge     LAB_24d6_18fa
    mov     word ptr [bx+0x4], ax
LAB_24d6_18fa:
    mov     bx, word ptr [bp+r1]
    mov     si, word ptr [bp+r2]
    mov     ax, word ptr [si+0x6]
    cmp     word ptr [bx+0x6], ax
    jle     LAB_24d6_190b
    mov     word ptr [bx+0x6], ax
LAB_24d6_190b:
    sub     ax, ax
    pop     si
    pop     bp
    retf
rect_intersect_asm_ endp

; void __cdecl16far rectlist_add_rect(char * rect_arr_len, RECTANGLE * rect_arr, RECTANGLE * rect)
rectlist_add_rect_asm_ proc far
    var_22     = byte ptr  -34
    var_rect2  = byte ptr  -32
    var_18     = byte ptr  -24
    var_rectptr = word ptr  -22
    var_counter = byte ptr  -20
    var_12     = byte ptr  -18
    var_rect   = byte ptr  -16
    var_rect3  = byte ptr   -8
    rect_arr_len = word ptr    6
    rect_arr   = word ptr    8
    rect       = word ptr   10

    push    bp
    mov     bp, sp
    sub     sp, 0x22
    push    di
    push    si
    cmp     word ptr [video_flag2_is1], 0x1
    jz      LAB_24d6_1933
    mov     bx, word ptr [bp+rect]
    mov     si, bx
    mov     ax, word ptr [si+0x2]
    add     ax, word ptr [video_flag2_is1]
    dec     ax
    and     ax, word ptr [video_flag3_isFFFF]
    mov     word ptr [bx+0x2], ax
LAB_24d6_1933:
    mov     byte ptr [bp+var_counter], 0x0
    jmp     LAB_24d6_1969
    db 0x90
LAB_24d6_193a:
    mov     di, si
    mov     cl, 0x3
    shl     di, cl
    add     di, word ptr [bp+rect_arr]
    push    si
    push    di
    lea     si, [di+0x8]
    push    ds
    pop     es
    movsw
    movsw
    movsw
    movsw
    pop     di
    pop     si
    inc     byte ptr [bp+var_12]
LAB_24d6_1953:
    mov     al, byte ptr [bp+var_12]
    cbw
    mov     si, ax
    mov     bx, word ptr [bp+rect_arr_len]
    mov     al, byte ptr [bx]
    cbw
    dec     ax
    cmp     ax, si
    jg      LAB_24d6_193a
    dec     byte ptr [bx]
LAB_24d6_1966:
    inc     byte ptr [bp+var_counter]
LAB_24d6_1969:
    mov     bx, word ptr [bp+rect_arr_len]
    mov     al, byte ptr [bp+var_counter]
    cmp     byte ptr [bx], al
    jg      LAB_24d6_1976
    jmp     near ptr LAB_24d6_1b20
LAB_24d6_1976:
    cbw
    mov     cl, 0x3
    shl     ax, cl
    add     ax, word ptr [bp+rect_arr]
    mov     word ptr [bp+var_rectptr], ax
    push    ax
    push    word ptr [bp+rect]
    push    cs
    call    near ptr rect_is_overlapping
    add     sp, 0x4
    or      al, al
    jz      LAB_24d6_1966
    push    word ptr [bp+var_rectptr]
    push    word ptr [bp+rect]
    push    cs
    call    near ptr rect_is_inside
    add     sp, 0x4
    or      al, al
    jz      LAB_24d6_19a4
    jmp     near ptr LAB_24d6_1bf7
LAB_24d6_19a4:
    push    word ptr [bp+rect]
    push    word ptr [bp+var_rectptr]
    push    cs
    call    near ptr rect_is_inside
    add     sp, 0x4
    or      al, al
    jz      LAB_24d6_19be
    mov     al, byte ptr [bp+var_counter]
    mov     byte ptr [bp+var_12], al
    jmp     LAB_24d6_1953
    db 0x90
LAB_24d6_19be:
    mov     ax, word ptr [bp+var_rectptr]
    lea     di, [bp+var_rect]
    mov     si, ax
    push    ss
    pop     es
    movsw
    movsw
    movsw
    movsw
    mov     bx, ax
    mov     si, word ptr [bp+rect]
    mov     ax, word ptr [si+0x4]
    cmp     word ptr [bx+0x4], ax
    jge     LAB_24d6_19fa
    mov     ax, bx
    lea     di, [bp+var_rect2]
    mov     si, ax
    movsw
    movsw
    movsw
    movsw
    mov     bx, word ptr [bp+rect]
    mov     ax, word ptr [bx+0x4]
    mov     word ptr [bp+var_rect2+6], ax
    mov     ax, word ptr [bx+0x4]
    mov     word ptr [bp+var_rect+4], ax
LAB_24d6_19f3:
    mov     byte ptr [bp+var_18], 0x1
    jmp     LAB_24d6_1a24
    db 0x90
LAB_24d6_19fa:
    mov     bx, word ptr [bp+rect]
    mov     si, word ptr [bp+var_rectptr]
    mov     ax, word ptr [si+0x4]
    cmp     word ptr [bx+0x4], ax
    jge     LAB_24d6_1a20
    mov     ax, bx
    lea     di, [bp+var_rect2]
    mov     si, ax
    push    ss
    pop     es
    movsw
    movsw
    movsw
    movsw
    mov     bx, word ptr [bp+var_rectptr]
    mov     ax, word ptr [bx+0x4]
    mov     word ptr [bp+var_rect2+6], ax
    jmp     LAB_24d6_19f3
LAB_24d6_1a20:
    mov     byte ptr [bp+var_18], 0x0
LAB_24d6_1a24:
    mov     bx, word ptr [bp+var_rectptr]
    mov     si, word ptr [bp+rect]
    mov     ax, word ptr [si+0x6]
    cmp     word ptr [bx+0x6], ax
    jle     LAB_24d6_1a54
    mov     ax, bx
    lea     di, [bp+var_rect3]
    mov     si, ax
    push    ss
    pop     es
    movsw
    movsw
    movsw
    movsw
    mov     bx, word ptr [bp+rect]
    mov     ax, word ptr [bx+0x6]
    mov     word ptr [bp+var_rect3+4], ax
    mov     ax, word ptr [bx+0x6]
    mov     word ptr [bp+var_rect+6], ax
LAB_24d6_1a4e:
    mov     byte ptr [bp+var_22], 0x1
    jmp     LAB_24d6_1a7e
LAB_24d6_1a54:
    mov     bx, word ptr [bp+rect]
    mov     si, word ptr [bp+var_rectptr]
    mov     ax, word ptr [si+0x6]
    cmp     word ptr [bx+0x6], ax
    jle     LAB_24d6_1a7a
    mov     ax, bx
    lea     di, [bp+var_rect3]
    mov     si, ax
    push    ss
    pop     es
    movsw
    movsw
    movsw
    movsw
    mov     bx, word ptr [bp+var_rectptr]
    mov     ax, word ptr [bx+0x6]
    mov     word ptr [bp+var_rect3+4], ax
    jmp     LAB_24d6_1a4e
LAB_24d6_1a7a:
    mov     byte ptr [bp+var_22], 0x0
LAB_24d6_1a7e:
    mov     bx, word ptr [bp+rect]
    mov     ax, word ptr [bx]
    mov     bx, word ptr [bp+var_rectptr]
    cmp     ax, word ptr [bx]
    jle     LAB_24d6_1a8c
    mov     ax, word ptr [bx]
LAB_24d6_1a8c:
    mov     word ptr [bp+var_rect], ax
    mov     bx, word ptr [bp+rect]
    mov     ax, word ptr [bx+0x2]
    mov     bx, word ptr [bp+var_rectptr]
    cmp     ax, word ptr [bx+0x2]
    jge     LAB_24d6_1aa0
    mov     ax, word ptr [bx+0x2]
LAB_24d6_1aa0:
    mov     word ptr [bp+var_rect+2], ax
    mov     al, byte ptr [bp+var_counter]
    mov     byte ptr [bp+var_12], al
    jmp     LAB_24d6_1ac5
    db 0x90
LAB_24d6_1aac:
    mov     di, si
    mov     cl, 0x3
    shl     di, cl
    add     di, word ptr [bp+rect_arr]
    push    si
    push    di
    lea     si, [di+0x8]
    push    ds
    pop     es
    movsw
    movsw
    movsw
    movsw
    pop     di
    pop     si
    inc     byte ptr [bp+var_12]
LAB_24d6_1ac5:
    mov     al, byte ptr [bp+var_12]
    cbw
    mov     si, ax
    mov     bx, word ptr [bp+rect_arr_len]
    mov     al, byte ptr [bx]
    cbw
    dec     ax
    cmp     ax, si
    jg      LAB_24d6_1aac
    dec     byte ptr [bx]
    cmp     byte ptr [bp+var_18], 0x0
    jz      LAB_24d6_1aef
    lea     ax, [bp+var_rect2]
    push    ax
    push    word ptr [bp+rect_arr]
    push    word ptr [bp+rect_arr_len]
    push    cs
    call    near ptr rectlist_add_rect
    add     sp, 0x6
LAB_24d6_1aef:
    lea     ax, [bp+var_rect]
    push    ax
    push    word ptr [bp+rect_arr]
    push    word ptr [bp+rect_arr_len]
    push    cs
    call    near ptr rectlist_add_rect
    add     sp, 0x6
    cmp     byte ptr [bp+var_22], 0x0
    jnz     LAB_24d6_1b09
    jmp     near ptr LAB_24d6_1bf7
LAB_24d6_1b09:
    lea     ax, [bp+var_rect3]
LAB_24d6_1b0c:
    push    ax
    push    word ptr [bp+rect_arr]
    push    word ptr [bp+rect_arr_len]
    push    cs
    call    near ptr rectlist_add_rect
    add     sp, 0x6
    pop     si
    pop     di
    mov     sp, bp
    pop     bp
    retf
LAB_24d6_1b20:
    mov     byte ptr [bp+var_counter], 0x0
    jmp     LAB_24d6_1b5b
LAB_24d6_1b26:
    mov     di, si
    mov     cl, 0x3
    shl     di, cl
    add     di, word ptr [bp+rect_arr]
    push    si
    push    di
    lea     si, [di+0x8]
    push    ds
    pop     es
    movsw
    movsw
    movsw
    movsw
    pop     di
    pop     si
    inc     byte ptr [bp+var_12]
LAB_24d6_1b3f:
    mov     al, byte ptr [bp+var_12]
    cbw
    mov     si, ax
    mov     bx, word ptr [bp+rect_arr_len]
    mov     al, byte ptr [bx]
    cbw
    dec     ax
    cmp     ax, si
    jg      LAB_24d6_1b26
    dec     byte ptr [bx]
    lea     ax, [bp+var_rect]
    jmp     LAB_24d6_1b0c
    db 0x90
LAB_24d6_1b58:
    inc     byte ptr [bp+var_counter]
LAB_24d6_1b5b:
    mov     bx, word ptr [bp+rect_arr_len]
    mov     al, byte ptr [bp+var_counter]
    cmp     byte ptr [bx], al
    jle     LAB_24d6_1bd6
    cbw
    mov     cl, 0x3
    shl     ax, cl
    add     ax, word ptr [bp+rect_arr]
    mov     word ptr [bp+var_rectptr], ax
    push    word ptr [bp+rect]
    push    ax
    push    cs
    call    near ptr rect_is_adjacent
    add     sp, 0x4
    or      al, al
    jz      LAB_24d6_1b58
    mov     bx, word ptr [bp+var_rectptr]
    mov     ax, word ptr [bx]
    mov     bx, word ptr [bp+rect]
    cmp     ax, word ptr [bx]
    jle     LAB_24d6_1b8d
    mov     ax, word ptr [bx]
LAB_24d6_1b8d:
    mov     word ptr [bp+var_rect], ax
    mov     bx, word ptr [bp+var_rectptr]
    mov     ax, word ptr [bx+0x2]
    mov     bx, word ptr [bp+rect]
    cmp     ax, word ptr [bx+0x2]
    jge     LAB_24d6_1ba1
    mov     ax, word ptr [bx+0x2]
LAB_24d6_1ba1:
    mov     word ptr [bp+var_rect+2], ax
    mov     bx, word ptr [bp+var_rectptr]
    mov     ax, word ptr [bx+0x4]
    mov     bx, word ptr [bp+rect]
    cmp     ax, word ptr [bx+0x4]
    jle     LAB_24d6_1bb5
    mov     ax, word ptr [bx+0x4]
LAB_24d6_1bb5:
    mov     word ptr [bp+var_rect+4], ax
    mov     bx, word ptr [bp+var_rectptr]
    mov     ax, word ptr [bx+0x6]
    mov     bx, word ptr [bp+rect]
    cmp     ax, word ptr [bx+0x6]
    jge     LAB_24d6_1bc9
    mov     ax, word ptr [bx+0x6]
LAB_24d6_1bc9:
    mov     word ptr [bp+var_rect+6], ax
    mov     al, byte ptr [bp+var_counter]
    mov     byte ptr [bp+var_12], al
    jmp     near ptr LAB_24d6_1b3f
    db 0x90
LAB_24d6_1bd6:
    mov     bx, word ptr [bp+rect_arr_len]
    mov     al, byte ptr [bx]
    cbw
    mov     bx, ax
    mov     cl, 0x3
    shl     bx, cl
    mov     si, word ptr [bp+rect_arr]
    mov     ax, word ptr [bp+rect]
    lea     di, [bx+si]
    mov     si, ax
    push    ds
    pop     es
    movsw
    movsw
    movsw
    movsw
    mov     bx, word ptr [bp+rect_arr_len]
    inc     byte ptr [bx]
LAB_24d6_1bf7:
    pop     si
    pop     di
    mov     sp, bp
    pop     bp
    retf
rectlist_add_rect_asm_ endp
    db 0x90

; int __cdecl16far rect_is_overlapping(RECTANGLE * r1, RECTANGLE * r2)
rect_is_overlapping_asm_ proc far
    r1         = word ptr    6
    r2         = word ptr    8

    push    bp
    mov     bp, sp
    push    si
    mov     bx, word ptr [bp+r1]
    mov     si, word ptr [bp+r2]
    mov     ax, word ptr [si]
    cmp     word ptr [bx+0x2], ax
    jg      LAB_24d6_1c14
LAB_24d6_1c0f:
    sub     ax, ax
    pop     si
    pop     bp
    retf
LAB_24d6_1c14:
    mov     bx, word ptr [bp+r2]
    mov     si, word ptr [bp+r1]
    mov     ax, word ptr [si]
    cmp     word ptr [bx+0x2], ax
    jle     LAB_24d6_1c0f
    mov     bx, si
    mov     si, word ptr [bp+r2]
    mov     ax, word ptr [si+0x6]
    cmp     word ptr [bx+0x4], ax
    jge     LAB_24d6_1c0f
    mov     ax, word ptr [si+0x4]
    cmp     word ptr [bx+0x6], ax
    jle     LAB_24d6_1c0f
    mov     ax, 0x1
    pop     si
    pop     bp
    retf
rect_is_overlapping_asm_ endp

; int __cdecl16far rect_is_inside(RECTANGLE * r1, RECTANGLE * r2)
rect_is_inside_asm_ proc far
    r1         = word ptr    6
    r2         = word ptr    8

    push    bp
    mov     bp, sp
    push    si
    mov     bx, word ptr [bp+r1]
    mov     si, word ptr [bp+r2]
    mov     ax, word ptr [si+0x2]
    cmp     word ptr [bx+0x2], ax
    jg      LAB_24d6_1c6a
    mov     ax, word ptr [si]
    cmp     word ptr [bx], ax
    jl      LAB_24d6_1c6a
    mov     ax, word ptr [si+0x4]
    cmp     word ptr [bx+0x4], ax
    jl      LAB_24d6_1c6a
    mov     ax, word ptr [si+0x6]
    cmp     word ptr [bx+0x6], ax
    jg      LAB_24d6_1c6a
    mov     ax, 0x1
    pop     si
    pop     bp
    retf
LAB_24d6_1c6a:
    sub     ax, ax
    pop     si
    pop     bp
    retf
rect_is_inside_asm_ endp
    db 0x90

; int __cdecl16far rect_is_adjacent(RECTANGLE * r1, RECTANGLE * r2)
rect_is_adjacent_asm_ proc far
    r1         = word ptr    6
    r2         = word ptr    8

    push    bp
    mov     bp, sp
    push    si
    mov     bx, word ptr [bp+r1]
    mov     si, word ptr [bp+r2]
    mov     ax, word ptr [si+0x4]
    cmp     word ptr [bx+0x6], ax
    jnz     LAB_24d6_1ca2
    mov     ax, word ptr [si]
    cmp     word ptr [bx], ax
    jz      LAB_24d6_1c8e
LAB_24d6_1c88:
    sub     ax, ax
    pop     si
    pop     bp
    retf
    db 0x90
LAB_24d6_1c8e:
    mov     bx, word ptr [bp+r1]
    mov     si, word ptr [bp+r2]
    mov     ax, word ptr [si+0x2]
    cmp     word ptr [bx+0x2], ax
    jnz     LAB_24d6_1c88
LAB_24d6_1c9c:
    mov     ax, 0x1
    pop     si
    pop     bp
    retf
LAB_24d6_1ca2:
    mov     bx, word ptr [bp+r1]
    mov     si, word ptr [bp+r2]
    mov     ax, word ptr [si+0x6]
    cmp     word ptr [bx+0x4], ax
    jnz     LAB_24d6_1cc0
    mov     ax, word ptr [si]
    cmp     word ptr [bx], ax
    jnz     LAB_24d6_1c88
    mov     ax, word ptr [si+0x2]
    cmp     word ptr [bx+0x2], ax
LAB_24d6_1cbc:
    jz      LAB_24d6_1c9c
    jmp     LAB_24d6_1c88
LAB_24d6_1cc0:
    mov     bx, word ptr [bp+r1]
    mov     si, word ptr [bp+r2]
    mov     ax, word ptr [si]
    cmp     word ptr [bx+0x2], ax
    jnz     LAB_24d6_1cde
LAB_24d6_1ccd:
    mov     ax, word ptr [si+0x4]
    cmp     word ptr [bx+0x4], ax
    jnz     LAB_24d6_1c88
    mov     ax, word ptr [si+0x6]
    cmp     word ptr [bx+0x6], ax
    jmp     LAB_24d6_1cbc
    db 0x90
LAB_24d6_1cde:
    mov     bx, word ptr [bp+r2]
    mov     si, word ptr [bp+r1]
    mov     ax, word ptr [si]
    cmp     word ptr [bx+0x2], ax
    jnz     LAB_24d6_1c88
    mov     bx, si
    mov     si, word ptr [bp+r2]
    jmp     LAB_24d6_1ccd
rect_is_adjacent_asm_ endp

; void __cdecl16far rectlist_add_rects(byte rect_count, char * rect_arr_indices, RECTANGLE * rect_arr1, RECTANGLE * rect_arr2, RECTANGLE * param_5, char * rect_arr_len, RECTANGLE * rect_arr)
rectlist_add_rects_asm_ proc far
    var_rectptr3 = word ptr  -28
    var_rectptr = word ptr  -26
    var_rectcounter = byte ptr  -24
    var_rectarray_index = byte ptr  -22
    var_rect   = byte ptr  -20
    var_rect2  = byte ptr  -12
    var_rectptr2 = word ptr   -4
    var_2      = byte ptr   -2
    rect_count = byte ptr    6
    rect_arr_indices = word ptr    8
    rect_arr1  = word ptr   10
    rect_arr2  = word ptr   12
    param_5    = word ptr   14
    rect_arr_len = word ptr   16
    rect_arr   = word ptr   18

    push    bp
    mov     bp, sp
    sub     sp, 0x1c
    push    di
    push    si
    mov     byte ptr [bp+var_rectcounter], 0x0
    jmp     LAB_24d6_1d60
LAB_24d6_1d00:
    mov     ax, word ptr [bp+var_rectptr]
LAB_24d6_1d03:
    mov     word ptr [bp+var_rectptr2], ax
    mov     byte ptr [bp+var_2], 0x1
    jmp     LAB_24d6_1d26
LAB_24d6_1d0c:
    test    byte ptr [bp+var_rectarray_index], 0x2
    jz      LAB_24d6_1d22
    mov     bx, word ptr [bp+var_rectptr3]
    mov     si, bx
    mov     ax, word ptr [si]
    cmp     word ptr [bx+0x2], ax
    jle     LAB_24d6_1d22
    mov     ax, bx
    jmp     LAB_24d6_1d03
LAB_24d6_1d22:
    mov     byte ptr [bp+var_2], 0x0
LAB_24d6_1d26:
    cmp     byte ptr [bp+var_2], 0x0
    jz      LAB_24d6_1d5d
    mov     ax, word ptr [bp+var_rectptr2]
    lea     di, [bp+var_rect]
    mov     si, ax
    push    ss
    pop     es
    movsw
    movsw
    movsw
    movsw
    push    word ptr [bp+param_5]
    lea     ax, [bp+var_rect]
    push    ax
    push    cs
    call    near ptr rect_intersect
    add     sp, 0x4
    or      al, al
    jnz     LAB_24d6_1d5d
    lea     ax, [bp+var_rect]
    push    ax
    push    word ptr [bp+rect_arr]
    push    word ptr [bp+rect_arr_len]
    push    cs
    call    near ptr rectlist_add_rect
    add     sp, 0x6
LAB_24d6_1d5d:
    inc     byte ptr [bp+var_rectcounter]
LAB_24d6_1d60:
    mov     al, byte ptr [bp+rect_count]
    cmp     byte ptr [bp+var_rectcounter], al
    jnc     LAB_24d6_1de4
    mov     al, byte ptr [bp+var_rectcounter]
    cbw
    mov     si, ax
    mov     bx, word ptr [bp+rect_arr_indices]
    mov     al, byte ptr [bx+si]
    mov     byte ptr [bp+var_rectarray_index], al
    test    byte ptr [bp+var_rectarray_index], 0x1
    jz      LAB_24d6_1d8a
    mov     ax, word ptr [bp+rect_arr1]
    mov     dx, si
    mov     cl, 0x3
    shl     dx, cl
    add     ax, dx
    mov     word ptr [bp+var_rectptr], ax
LAB_24d6_1d8a:
    test    byte ptr [bp+var_rectarray_index], 0x2
    jz      LAB_24d6_1d9e
    mov     al, byte ptr [bp+var_rectcounter]
    cbw
    mov     cl, 0x3
    shl     ax, cl
    add     ax, word ptr [bp+rect_arr2]
    mov     word ptr [bp+var_rectptr3], ax
LAB_24d6_1d9e:
    test    byte ptr [bp+var_rectarray_index], 0x1
    jnz     LAB_24d6_1da7
    jmp     near ptr LAB_24d6_1d0c
LAB_24d6_1da7:
    mov     bx, word ptr [bp+var_rectptr]
    mov     si, bx
    mov     ax, word ptr [si]
    cmp     word ptr [bx+0x2], ax
    jg      LAB_24d6_1db6
    jmp     near ptr LAB_24d6_1d0c
LAB_24d6_1db6:
    test    byte ptr [bp+var_rectarray_index], 0x2
    jnz     LAB_24d6_1dbf
    jmp     near ptr LAB_24d6_1d00
LAB_24d6_1dbf:
    mov     bx, word ptr [bp+var_rectptr3]
    mov     si, bx
    mov     ax, word ptr [si]
    cmp     word ptr [bx+0x2], ax
    jg      LAB_24d6_1dce
    jmp     near ptr LAB_24d6_1d00
LAB_24d6_1dce:
    lea     ax, [bp+var_rect2]
    push    ax
    push    bx
    push    word ptr [bp+var_rectptr]
    push    cs
    call    near ptr rect_union
    add     sp, 0x6
    lea     ax, [bp+var_rect2]
    jmp     near ptr LAB_24d6_1d03
    db 0x90
LAB_24d6_1de4:
    pop     si
    pop     di
    mov     sp, bp
    pop     bp
    retf
rectlist_add_rects_asm_ endp

; void __cdecl16far rect_array_sort_by_top(char arr_length, RECTANGLE * arr, int * indices)
rect_array_sort_by_top_asm_ proc far
    var_intbuffer = word ptr  -514
    arr_length = byte ptr    6
    arr        = word ptr    8
    indices    = word ptr   10

    push    bp
    mov     bp, sp
    sub     sp, 0x202
    push    di
    push    si
    cmp     byte ptr [bp+arr_length], 0x1
    jle     LAB_24d6_1e40
    sub     si, si
    jmp     LAB_24d6_1e1c
    db 0x90
LAB_24d6_1dfe:
    mov     di, si
    shl     di, 0x1
    mov     bx, word ptr [bp+arr]
    mov     ax, si
    mov     cl, 0x3
    shl     ax, cl
    add     bx, ax
    mov     ax, word ptr [bx+0x4]
    neg     ax
    mov     word ptr [bp+di+0xfdfe], ax
    mov     bx, word ptr [bp+indices]
    mov     word ptr [bx+di], si
    inc     si
LAB_24d6_1e1c:
    mov     al, byte ptr [bp+arr_length]
    cbw
    cmp     ax, si
    jg      LAB_24d6_1dfe
    push    word ptr [bp+indices]
    lea     ax, [bp+var_intbuffer]
    push    ax
    mov     al, byte ptr [bp+arr_length]
    cbw
    push    ax
    call    far ptr heapsort_by_order
    add     sp, 0x6
    pop     si
    pop     di
    mov     sp, bp
    pop     bp
    retf
    db 0x90
LAB_24d6_1e40:
    mov     bx, word ptr [bp+indices]
    mov     word ptr [bx], 0x0
    pop     si
    pop     di
    mov     sp, bp
    pop     bp
    retf
rect_array_sort_by_top_asm_ endp

seg006 ends
end
