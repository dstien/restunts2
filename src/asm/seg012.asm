; Generated by restunts-export.py (Ghidra)
.8086
.model medium

include seg012.inc

seg012 segment byte public use16 'STUNTSC'
    assume cs:seg012, es:nothing, ss:nothing, ds:dseg

    db 0x90

; void __stdcall16near fatal_error(char * fmt, ...)
fatal_error_asm_ proc near
    fmt        = word ptr    4

    pop     ax
    pop     ax
    call    far ptr sprite_copy_2_to_1
    call    far ptr _printf
    call    far ptr flush_stdin
    call    far ptr call_exitlist
    call    far ptr _printf
    add     sp, 0x2
    call    far ptr _abort
fatal_error_asm_ endp
    db 0

; ******************************************************************************
; * dbg: intatan
; ******************************************************************************

; int __cdecl16far int_atan2(int z_, int y_)
int_atan2_asm_ proc far
    z_         = word ptr    6
    y_         = word ptr    8

    push    bp
    mov     bp, sp
    push    di
    xor     di, di
    mov     dx, word ptr [bp+z_]
    mov     cx, word ptr [bp+y_]
    or      dx, dx
    jge     LAB_2ea2_0043
; di = quadrant flag  
    or      di, 0x8
    neg     dx
LAB_2ea2_0043:
    or      cx, cx
    jge     LAB_2ea2_004c
    or      di, 0x4
    neg     cx
; comparing z and x  
LAB_2ea2_004c:
    cmp     dx, cx
    jl      LAB_2ea2_0057
    jz      LAB_2ea2_006f
; z > x : exchange x and z  
    xchg    cx, dx
    or      di, 0x2
; get angle via arctangent  
LAB_2ea2_0057:
    xor     ax, ax
    div     cx
    mov     bl, ah
    xor     bh, bh
    add     al, 0x80
    adc     bx, 0x0
    mov     al, byte ptr [bx+atantable]
    xor     ah, ah
    jmp     word ptr cs:[di+off_2EA9B]
; z = x : angle is multiple of pi/4  
LAB_2ea2_006f:
    or      dx, dx
    jz      LAB_2ea2_0090
    mov     ax, 0x80
    jmp     word ptr cs:[di+off_2EA9B]
off_2EA9B:
    dw LAB_2ea2_0090
    dw LAB_2ea2_008b
    dw LAB_2ea2_0098
    dw LAB_2ea2_0093
    dw LAB_2ea2_009f
    dw LAB_2ea2_00a3
    dw LAB_2ea2_00af
    dw LAB_2ea2_00a8
LAB_2ea2_008b:
    neg     ax
    add     ah, 0x1
LAB_2ea2_0090:
    pop     di
    pop     bp
    retf
LAB_2ea2_0093:
    add     ah, 0x1
    jmp     LAB_2ea2_0090
LAB_2ea2_0098:
    neg     ax
    add     ah, 0x2
    jmp     LAB_2ea2_0090
LAB_2ea2_009f:
    neg     ax
    jmp     LAB_2ea2_0090
LAB_2ea2_00a3:
    sub     ah, 0x1
    jmp     LAB_2ea2_0090
LAB_2ea2_00a8:
    add     ah, 0x1
    neg     ax
    jmp     LAB_2ea2_0090
LAB_2ea2_00af:
    sub     ah, 0x2
    jmp     LAB_2ea2_0090
int_atan2_asm_ endp

; word __cdecl16far sub_2EAD4(void)
sub_2EAD4_asm_ proc far
    cli
    mov     ax, word ptr [word_3F87C]
    mov     dx, word ptr [word_3F87E]
    sti
    retf
sub_2EAD4_asm_ endp

; void __cdecl16far set_add_value(uint param_1, int param_2)
set_add_value_asm_ proc far
    param_1    = word ptr    6
    param_2    = word ptr    8

    push    bp
    mov     bp, sp
    call    far ptr sub_2EAD4
    add     ax, word ptr [bp+param_1]
    adc     dx, word ptr [bp+param_2]
    mov     word ptr [word_3F1C2], ax
    mov     word ptr [word_3F1C4], dx
    pop     bp
    retf
set_add_value_asm_ endp
LAB_2ea2_00d5:
    call    far ptr sub_2EAD4
    cmp     dx, word ptr [word_3F1C4]
    jc      LAB_2ea2_00d5
    cmp     ax, word ptr [word_3F1C2]
    jc      LAB_2ea2_00d5
    retf

; undefined2 __cdecl16far sub_2EB07(void)
sub_2EB07_asm_ proc far
    call    far ptr sub_2EAD4
    xor     cx, cx
    cmp     dx, word ptr [word_3F1C4]
    jc      LAB_2ea2_00fb
    cmp     ax, word ptr [word_3F1C2]
    jc      LAB_2ea2_00fb
    inc     cx
LAB_2ea2_00fb:
    mov     ax, cx
    retf
sub_2EB07_asm_ endp

; undefined __cdecl16far sub_2EB1E(uint param_1, int param_2)
sub_2EB1E_asm_ proc far
    var_4      = word ptr   -4
    var_2      = word ptr   -2
    param_1    = word ptr    6
    param_2    = word ptr    8

    push    bp
    mov     bp, sp
    sub     sp, 0x4
    call    far ptr sub_2EAD4
    add     ax, word ptr [bp+param_1]
    adc     dx, word ptr [bp+param_2]
    mov     word ptr [bp+var_4], ax
    mov     word ptr [bp+var_2], dx
LAB_2ea2_0115:
    call    far ptr sub_2EAD4
    cmp     dx, word ptr [bp+var_2]
    jc      LAB_2ea2_0115
    cmp     ax, word ptr [bp+var_4]
    jc      LAB_2ea2_0115
    mov     sp, bp
    pop     bp
    retf
sub_2EB1E_asm_ endp

; uint __cdecl16far draw_line_related_alt(uint x1_, uint y1_, uint x2_, uint y2_, uint unk)
draw_line_related_alt_asm_ proc far
    var_4      = byte ptr   -4
    x1_        = word ptr    6
    y1_        = word ptr    8
    x2_        = word ptr   10
    y2_        = word ptr   12
    unk        = word ptr   14

    push    bp
    mov     bp, sp
    sub     sp, 0x4
    push    si
    push    di
    mov     byte ptr [bp+var_4], 0x1
    jmp     _draw_line_related
draw_line_related_alt_asm_ endp

; uint __cdecl16far draw_line_related(uint x1_, uint y1_, uint x2_, uint y2_, uint unk)
draw_line_related_asm_ proc far
    var_4      = byte ptr   -4
    var_2      = word ptr   -2
    x1_        = word ptr    6
    y1_        = word ptr    8
    x2_        = word ptr   10
    y2_        = word ptr   12
    unk        = word ptr   14

    push    bp
    mov     bp, sp
    sub     sp, 0x4
    push    si
    push    di
    mov     byte ptr [bp+var_4], 0x0
_draw_line_related:
    mov     si, word ptr [bp+unk]              ; unk is a pointer to something sizeof 0x1C
    mov     word ptr [si+0x12], 0xff
    xor     ax, ax
    mov     word ptr [si], ax
    mov     word ptr [si+0x4], ax
    mov     word ptr [si+0x14], ax
    mov     word ptr [si+0x16], ax
    mov     word ptr [si+0x18], ax
    mov     word ptr [si+0x1a], ax
    mov     ax, word ptr [bp+y1_]
    mov     bx, word ptr [bp+y2_]
    mov     cx, word ptr [bp+x1_]
    mov     dx, word ptr [bp+x2_]
    cmp     ax, bx
    jg      LAB_2ea2_017c
    mov     word ptr [si+0x2], cx
    mov     word ptr [si+0x6], ax
    mov     word ptr [si+0x8], dx
    mov     word ptr [si+0xa], bx
    jmp     LAB_2ea2_0188
    db 0x90
LAB_2ea2_017c:
    mov     word ptr [si+0x2], dx
    mov     word ptr [si+0x6], bx
    mov     word ptr [si+0x8], cx
    mov     word ptr [si+0xa], ax
LAB_2ea2_0188:
    jnz     LAB_2ea2_018d
    jmp     near ptr LAB_2ea2_0783
LAB_2ea2_018d:
    xor     dx, dx
    cmp     byte ptr [bp+var_4], 0x0
    jnz     LAB_2ea2_01fa
    mov     ax, word ptr [si+0x6]
    mov     bx, word ptr cs:[sprite1.sprite_top]
    mov     cx, word ptr cs:[sprite1.sprite_height]
    cmp     ax, cx
    jl      LAB_2ea2_01ab
    mov     dl, 0x8
    jmp     near ptr LAB_2ea2_057b
LAB_2ea2_01ab:
    cmp     ax, bx
    jge     LAB_2ea2_01b2
    or      dh, 0x4
LAB_2ea2_01b2:
    mov     ax, word ptr [si+0xa]
    cmp     ax, bx
    jge     LAB_2ea2_01be
    mov     dl, 0x4
    jmp     near ptr LAB_2ea2_057b
LAB_2ea2_01be:
    cmp     ax, cx
    jl      LAB_2ea2_01c5
    or      dl, 0x8
LAB_2ea2_01c5:
    mov     bx, word ptr cs:[sprite1.sprite_left2]
    mov     cx, word ptr cs:[sprite1.sprite_widthsum]
    mov     ax, word ptr [si+0x2]
    cmp     ax, bx
    jge     LAB_2ea2_01d9
    or      dh, 0x2
LAB_2ea2_01d9:
    cmp     ax, cx
    jl      LAB_2ea2_01e0
    or      dh, 0x1
LAB_2ea2_01e0:
    mov     ax, word ptr [si+0x8]
    cmp     ax, bx
    jge     LAB_2ea2_01ea
    or      dl, 0x2
LAB_2ea2_01ea:
    cmp     ax, cx
    jl      LAB_2ea2_01f1
    or      dl, 0x1
LAB_2ea2_01f1:
    test    dh, dl
    jz      LAB_2ea2_01fa
    and     dl, dh
    jmp     near ptr LAB_2ea2_057b
LAB_2ea2_01fa:
    or      dl, dh
    xor     dh, dh
    mov     word ptr [bp+var_2], dx
    mov     cx, word ptr [si+0xa]
    sub     cx, word ptr [si+0x6]
    jno     LAB_2ea2_020c
LAB_2ea2_0209:
    jmp     near ptr LAB_2ea2_0833
LAB_2ea2_020c:
    mov     dx, word ptr [si+0x8]
    sub     dx, word ptr [si+0x2]
    jo      LAB_2ea2_0209
    jnz     LAB_2ea2_0221
    inc     cx
    mov     word ptr [si+0xe], cx
    mov     byte ptr [si+0x12], 0x2
    jmp     LAB_2ea2_028d
    db 0x90
LAB_2ea2_0221:
    jl      LAB_2ea2_026f
    cmp     dx, cx
    jc      LAB_2ea2_0262
    jz      LAB_2ea2_0268
    mov     byte ptr [si+0x12], 0x8
LAB_2ea2_022d:
    xchg    dx, cx
LAB_2ea2_022f:
    cmp     cx, word ptr cs:[len_off_2F44A]
    jge     LAB_2ea2_0249
    mov     bx, cx
    shl     bx, 0x1
    mov     bx, word ptr cs:[bx+off_2F44A]
    add     bx, dx
    add     bx, dx
    mov     ax, word ptr cs:[bx]
    jmp     LAB_2ea2_0256
    db 0x90
LAB_2ea2_0249:
    xor     ax, ax
    div     cx
    mov     bx, cx
    shr     bx, 0x1
    sub     bx, dx
    adc     ax, 0x0
LAB_2ea2_0256:
    mov     word ptr [si+0xc], ax
    inc     cx
    jo      LAB_2ea2_0209
    mov     word ptr [si+0xe], cx
    jmp     LAB_2ea2_028d
    db 0x90
LAB_2ea2_0262:
    mov     byte ptr [si+0x12], 0x6
    jmp     LAB_2ea2_022f
LAB_2ea2_0268:
    mov     byte ptr [si+0x12], 0x4
    jmp     LAB_2ea2_0289
    db 0x90
LAB_2ea2_026f:
    neg     dx
    jo      LAB_2ea2_0209
    cmp     dx, cx
    jc      LAB_2ea2_027f
    jz      LAB_2ea2_0285
    mov     byte ptr [si+0x12], 0x7
    jmp     LAB_2ea2_022d
LAB_2ea2_027f:
    mov     byte ptr [si+0x12], 0x5
    jmp     LAB_2ea2_022f
LAB_2ea2_0285:
    mov     byte ptr [si+0x12], 0x3
LAB_2ea2_0289:
    inc     cx
    mov     word ptr [si+0xe], cx
LAB_2ea2_028d:
    mov     bx, word ptr [bp+var_2]
    shl     bx, 0x1
    jz      LAB_2ea2_02b9
    jmp     word ptr cs:[bx+off_2ECB9]
off_2ECB9:
    dw LAB_2ea2_02b9
    dw LAB_2ea2_05ff
    dw LAB_2ea2_0458
    dw LAB_2ea2_0458
    dw LAB_2ea2_02c1
    dw LAB_2ea2_02c1
    dw LAB_2ea2_02c1
    dw LAB_2ea2_02c1
    dw LAB_2ea2_0385
    dw LAB_2ea2_0385
    dw LAB_2ea2_0385
    dw LAB_2ea2_0385
    dw LAB_2ea2_02c1
    dw LAB_2ea2_02c1
    dw LAB_2ea2_02c1
    dw LAB_2ea2_02c1
LAB_2ea2_02b9:
    xor     ax, ax
    pop     di
    pop     si
    mov     sp, bp
    pop     bp
    retf
LAB_2ea2_02c1:
    mov     ax, word ptr [si+0x6]
    mov     cx, word ptr cs:[sprite1.sprite_top]
    mov     word ptr [si+0x6], cx
    sub     cx, ax
    mov     bl, byte ptr [si+0x12]
    shl     bx, 0x1
    jmp     word ptr cs:[bx+off_2ECF8]
off_2ECF8:
    dw 0x0000
    dw 0x0000
    dw LAB_2ea2_02ea
    dw LAB_2ea2_02f0
    dw LAB_2ea2_02f9
    dw LAB_2ea2_0302
    dw LAB_2ea2_0312
    dw LAB_2ea2_0322
    dw LAB_2ea2_035e
LAB_2ea2_02ea:
    sub     word ptr [si+0xe], cx
    jmp     near ptr LAB_2ea2_071e
LAB_2ea2_02f0:
    sub     word ptr [si+0x2], cx
    sub     word ptr [si+0xe], cx
    jmp     near ptr LAB_2ea2_071e
LAB_2ea2_02f9:
    add     word ptr [si+0x2], cx
    sub     word ptr [si+0xe], cx
    jmp     near ptr LAB_2ea2_071e
LAB_2ea2_0302:
    mov     ax, word ptr [si+0xc]
    mul     cx
    sub     word ptr [si], ax
    sbb     word ptr [si+0x2], dx
    sub     word ptr [si+0xe], cx
    jmp     near ptr LAB_2ea2_071e
LAB_2ea2_0312:
    mov     ax, word ptr [si+0xc]
    mul     cx
    add     word ptr [si], ax
    adc     word ptr [si+0x2], dx
    sub     word ptr [si+0xe], cx
    jmp     near ptr LAB_2ea2_071e
LAB_2ea2_0322:
    mov     word ptr [si+0x6], ax
    mov     dx, cx
    xor     ax, ax
    mov     cx, word ptr [si+0xc]
    div     cx
    shr     cx, 0x1
    sub     cx, dx
    adc     ax, 0x0
    sub     word ptr [si+0x2], ax
    sub     word ptr [si+0xe], ax
    jle     LAB_2ea2_0349
    mul     word ptr [si+0xc]
    add     word ptr [si+0x4], ax
    adc     word ptr [si+0x6], dx
    jmp     near ptr LAB_2ea2_071e
LAB_2ea2_0349:
    mov     word ptr [si+0xe], 0x1
    mov     ax, cs:[0x5f30]
    mov     word ptr [si+0x6], ax
    mov     ax, word ptr [si+0x8]
    mov     word ptr [si+0x2], ax
    jmp     near ptr LAB_2ea2_071e
LAB_2ea2_035e:
    mov     word ptr [si+0x6], ax
    mov     dx, cx
    xor     ax, ax
    mov     cx, word ptr [si+0xc]
    div     cx
    shr     cx, 0x1
    sub     cx, dx
    adc     ax, 0x0
    add     word ptr [si+0x2], ax
    sub     word ptr [si+0xe], ax
    jle     LAB_2ea2_0349
    mul     word ptr [si+0xc]
    add     word ptr [si+0x4], ax
    adc     word ptr [si+0x6], dx
    jmp     near ptr LAB_2ea2_071e
LAB_2ea2_0385:
    mov     cx, word ptr [si+0xa]
    mov     dx, word ptr cs:[sprite1.sprite_height]
    dec     dx
    mov     word ptr [si+0xa], dx
    sub     cx, dx
    mov     bl, byte ptr [si+0x12]
    shl     bx, 0x1
    jmp     word ptr cs:[bx+off_2EDBD]
off_2EDBD:
    dw 0x0000
    dw 0x0000
    dw LAB_2ea2_03af
    dw LAB_2ea2_03b5
    dw LAB_2ea2_03be
    dw LAB_2ea2_03c7
    dw LAB_2ea2_03eb
    dw LAB_2ea2_040a
    dw LAB_2ea2_0433
LAB_2ea2_03af:
    sub     word ptr [si+0xe], cx
    jmp     near ptr LAB_2ea2_0728
LAB_2ea2_03b5:
    add     word ptr [si+0x8], cx
    sub     word ptr [si+0xe], cx
    jmp     near ptr LAB_2ea2_0728
LAB_2ea2_03be:
    sub     word ptr [si+0x8], cx
    sub     word ptr [si+0xe], cx
    jmp     near ptr LAB_2ea2_0728
LAB_2ea2_03c7:
    mov     dx, word ptr [si+0xe]
    sub     dx, cx
    mov     word ptr [si+0xe], dx
    dec     dx
    mov     ax, word ptr [si+0xc]
    mul     dx
    mov     bx, word ptr [si]
    mov     cx, word ptr [si+0x2]
    sub     bx, ax
    sbb     cx, dx
    add     bx, 0x8000
    adc     cx, 0x0
    mov     word ptr [si+0x8], cx
    jmp     near ptr LAB_2ea2_0728
LAB_2ea2_03eb:
    mov     dx, word ptr [si+0xe]
    sub     dx, cx
    mov     word ptr [si+0xe], dx
    dec     dx
    mov     ax, word ptr [si+0xc]
    mul     dx
    add     ax, word ptr [si]
    adc     dx, word ptr [si+0x2]
    add     ax, 0x8000
    adc     dx, 0x0
    mov     word ptr [si+0x8], dx
    jmp     near ptr LAB_2ea2_0728
LAB_2ea2_040a:
    xor     ax, ax
    sub     ax, word ptr [si+0x4]
    sbb     dx, word ptr [si+0x6]
    jl      LAB_2ea2_042f
    mov     cx, word ptr [si+0xc]
    div     cx
    shr     cx, 0x1
    sub     cx, dx
    adc     ax, 0x0
LAB_2ea2_0420:
    mov     dx, word ptr [si+0x2]
    sub     dx, ax
    mov     word ptr [si+0x8], dx
    inc     ax
    mov     word ptr [si+0xe], ax
    jmp     near ptr LAB_2ea2_0728
LAB_2ea2_042f:
    xor     ax, ax
    jmp     LAB_2ea2_0420
LAB_2ea2_0433:
    xor     ax, ax
    sub     ax, word ptr [si+0x4]
    sbb     dx, word ptr [si+0x6]
    jl      LAB_2ea2_042f
    mov     cx, word ptr [si+0xc]
    div     cx
    shr     cx, 0x1
    sub     cx, dx
    adc     ax, 0x0
    mov     dx, word ptr [si+0x2]
    add     dx, ax
    mov     word ptr [si+0x8], dx
    inc     ax
    mov     word ptr [si+0xe], ax
    jmp     near ptr LAB_2ea2_0728
LAB_2ea2_0458:
    mov     bl, byte ptr [si+0x12]
    shl     bx, 0x1
    jmp     word ptr cs:[bx+off_2EE82]
off_2EE82:
    dw 0x0000
    dw 0x0000
    dw LAB_2ea2_0578
    dw LAB_2ea2_0474
    dw LAB_2ea2_048d
    dw LAB_2ea2_04a6
    dw LAB_2ea2_04de
    dw LAB_2ea2_0511
    dw LAB_2ea2_0541
LAB_2ea2_0474:
    mov     cx, word ptr cs:[sprite1.sprite_left2]
    mov     ax, word ptr [si+0x8]
    mov     word ptr [si+0x8], cx
    sub     cx, ax
    add     word ptr [si+0x16], cx
    sub     word ptr [si+0xe], cx
    sub     word ptr [si+0xa], cx
    jmp     near ptr LAB_2ea2_0776
LAB_2ea2_048d:
    mov     ax, word ptr [si+0x2]
    mov     cx, word ptr cs:[sprite1.sprite_left2]
    mov     word ptr [si+0x2], cx
    sub     cx, ax
    add     word ptr [si+0x14], cx
    add     word ptr [si+0x6], cx
    sub     word ptr [si+0xe], cx
    jmp     near ptr LAB_2ea2_0776
LAB_2ea2_04a6:
    mov     ax, word ptr [si]
    mov     dx, word ptr [si+0x2]
    mov     cx, word ptr cs:[sprite1.sprite_left2]
    mov     word ptr [si+0x8], cx
    sub     dx, cx
    jl      LAB_2ea2_04d9
    mov     cx, word ptr [si+0xc]
    div     cx
    shr     cx, 0x1
    sub     cx, dx
    adc     ax, 0x0
    inc     ax
LAB_2ea2_04c4:
    mov     cx, word ptr [si+0xe]
    mov     word ptr [si+0xe], ax
    sub     cx, ax
    add     word ptr [si+0x16], cx
    dec     ax
    add     ax, word ptr [si+0x6]
    mov     word ptr [si+0xa], ax
    jmp     near ptr LAB_2ea2_0776
LAB_2ea2_04d9:
    mov     ax, 0x1
    jmp     LAB_2ea2_04c4
LAB_2ea2_04de:
    mov     dx, word ptr cs:[sprite1.sprite_left2]
    xor     ax, ax
    sub     ax, word ptr [si]
    sbb     dx, word ptr [si+0x2]
    jl      LAB_2ea2_050e
    mov     cx, word ptr [si+0xc]
    div     cx
    shr     cx, 0x1
    sub     cx, dx
    adc     ax, 0x0
    add     word ptr [si+0x6], ax
    add     word ptr [si+0x14], ax
    sub     word ptr [si+0xe], ax
    jle     LAB_2ea2_0578
    mul     word ptr [si+0xc]
    add     word ptr [si], ax
    adc     word ptr [si+0x2], dx
    jmp     near ptr LAB_2ea2_0776
LAB_2ea2_050e:
    jmp     LAB_2ea2_0578
    nop
LAB_2ea2_0511:
    mov     ax, word ptr [si+0x2]
    mov     dx, word ptr cs:[sprite1.sprite_left2]
    mov     word ptr [si+0x8], dx
    sub     ax, dx
    mov     cx, ax
    inc     cx
    mov     word ptr [si+0xe], cx
    mul     word ptr [si+0xc]
    add     ax, word ptr [si+0x4]
    adc     dx, word ptr [si+0x6]
    add     ax, 0x8000
    adc     dx, 0x0
    mov     ax, word ptr [si+0xa]
    sub     ax, dx
    mov     word ptr [si+0xa], dx
    add     word ptr [si+0x16], ax
    jmp     near ptr LAB_2ea2_0776
LAB_2ea2_0541:
    mov     cx, word ptr [si+0x2]
    mov     ax, word ptr cs:[sprite1.sprite_left2]
    mov     word ptr [si+0x2], ax
    sub     ax, cx
    sub     word ptr [si+0xe], ax
    mul     word ptr [si+0xc]
    mov     bx, word ptr [si+0x4]
    mov     cx, word ptr [si+0x6]
    add     ax, bx
    adc     dx, cx
    mov     word ptr [si+0x4], ax
    mov     word ptr [si+0x6], dx
    add     bx, 0x8000
    adc     cx, 0x0
    add     ax, 0x8000
    adc     dx, 0x0
    sub     dx, cx
    add     word ptr [si+0x14], dx
    jmp     near ptr LAB_2ea2_0776
LAB_2ea2_0578:
    mov     dx, 0x2
LAB_2ea2_057b:
    mov     byte ptr [si+0x13], dl
    mov     word ptr [si+0xe], 0x0
    mov     al, byte ptr [si+0x13]
    test    al, 0x4
    jz      LAB_2ea2_059e
    mov     bx, word ptr cs:[sprite1.sprite_top]
    mov     word ptr [si+0x6], bx
    mov     word ptr [si+0x4], 0x0
    dec     bx
    mov     word ptr [si+0xa], bx
    jmp     LAB_2ea2_05f7
    db 0x90
LAB_2ea2_059e:
    test    al, 0x8
    jz      LAB_2ea2_05b2
    mov     bx, word ptr cs:[sprite1.sprite_height]
    mov     word ptr [si+0x6], bx
    mov     word ptr [si+0x4], 0x0
    jmp     LAB_2ea2_05f7
    db 0x90
LAB_2ea2_05b2:
    mov     cx, word ptr [si+0xa]
    cmp     cx, word ptr cs:[sprite1.sprite_height]
    jl      LAB_2ea2_05c2
    mov     cx, word ptr cs:[sprite1.sprite_height]
    dec     cx
LAB_2ea2_05c2:
    mov     dx, word ptr [si+0x6]
    mov     bx, word ptr [si+0x4]
    add     bx, 0x8000
    adc     dx, 0x0
    cmp     dx, word ptr cs:[sprite1.sprite_top]
    jge     LAB_2ea2_05db
    mov     dx, word ptr cs:[sprite1.sprite_top]
LAB_2ea2_05db:
    mov     word ptr [si+0x6], dx
    mov     word ptr [si+0x4], 0x0
    sub     cx, dx
    dec     dx
    inc     cx
    mov     word ptr [si+0xa], dx
    test    al, 0x2
    jz      LAB_2ea2_05f4
    add     word ptr [si+0x16], cx
    jmp     LAB_2ea2_05f7
    db 0x90
LAB_2ea2_05f4:
    add     word ptr [si+0x1a], cx
LAB_2ea2_05f7:
    xor     ah, ah
    pop     di
    pop     si
    mov     sp, bp
    pop     bp
    retf
LAB_2ea2_05ff:
    mov     bl, byte ptr [si+0x12]
    xor     bh, bh
    shl     bx, 0x1
    jmp     word ptr cs:[bx+off_2F02B]
off_2F02B:
    dw 0x0000
    dw 0x0000
    dw LAB_2ea2_061d
    dw LAB_2ea2_0623
    dw LAB_2ea2_063c
    dw LAB_2ea2_0656
    dw LAB_2ea2_0683
    dw LAB_2ea2_06b7
    dw LAB_2ea2_06f0
LAB_2ea2_061d:
    mov     dx, 0x1
    jmp     near ptr LAB_2ea2_057b
LAB_2ea2_0623:
    mov     cx, word ptr [si+0x2]
    mov     ax, word ptr cs:[sprite1.sprite_widthsum]
    dec     ax
    mov     word ptr [si+0x2], ax
    sub     cx, ax
    add     word ptr [si+0x6], cx
    sub     word ptr [si+0xe], cx
    add     word ptr [si+0x18], cx
    jmp     near ptr LAB_2ea2_02b9
LAB_2ea2_063c:
    mov     cx, word ptr cs:[sprite1.sprite_widthsum]
    dec     cx
    mov     ax, word ptr [si+0x8]
    mov     word ptr [si+0x8], cx
    sub     ax, cx
    add     word ptr [si+0x1a], ax
    sub     word ptr [si+0xe], ax
    sub     word ptr [si+0xa], ax
    jmp     near ptr LAB_2ea2_02b9
LAB_2ea2_0656:
    mov     ax, word ptr [si]
    mov     dx, word ptr [si+0x2]
    sub     dx, word ptr cs:[sprite1.sprite_widthsum]
    inc     dx
    mov     cx, word ptr [si+0xc]
    div     cx
    shr     cx, 0x1
    sub     cx, dx
    adc     ax, 0x0
    sub     word ptr [si+0xe], ax
    jle     LAB_2ea2_061d
    add     word ptr [si+0x6], ax
    add     word ptr [si+0x18], ax
    mul     word ptr [si+0xc]
    sub     word ptr [si], ax
    sbb     word ptr [si+0x2], dx
    jmp     near ptr LAB_2ea2_02b9
LAB_2ea2_0683:
    mov     dx, word ptr cs:[sprite1.sprite_widthsum]
    dec     dx
    mov     word ptr [si+0x8], dx
    xor     ax, ax
    sub     ax, word ptr [si]
    sbb     dx, word ptr [si+0x2]
    jl      LAB_2ea2_061d
    mov     cx, word ptr [si+0xc]
    div     cx
    shr     cx, 0x1
    sub     cx, dx
    adc     ax, 0x0
    inc     ax
    mov     cx, word ptr [si+0xe]
    mov     word ptr [si+0xe], ax
    sub     cx, ax
    add     word ptr [si+0x1a], cx
    dec     ax
    add     ax, word ptr [si+0x6]
    mov     word ptr [si+0xa], ax
    jmp     near ptr LAB_2ea2_02b9
LAB_2ea2_06b7:
    mov     ax, word ptr [si+0x2]
    mov     cx, word ptr cs:[sprite1.sprite_widthsum]
    dec     cx
    sub     ax, cx
    mov     word ptr [si+0x2], cx
    sub     word ptr [si+0xe], ax
    mul     word ptr [si+0xc]
    mov     bx, word ptr [si+0x4]
    mov     cx, word ptr [si+0x6]
    add     ax, bx
    adc     dx, cx
    mov     word ptr [si+0x4], ax
    mov     word ptr [si+0x6], dx
    add     bx, 0x8000
    adc     cx, 0x0
    add     ax, 0x8000
    adc     dx, 0x0
    sub     dx, cx
    add     word ptr [si+0x18], dx
    jmp     near ptr LAB_2ea2_02b9
LAB_2ea2_06f0:
    mov     ax, cs:[0x5f3c]
    mov     cx, ax
    dec     cx
    mov     word ptr [si+0x8], cx
    sub     ax, word ptr [si+0x2]
    mov     word ptr [si+0xe], ax
    dec     ax
    mul     word ptr [si+0xc]
    add     ax, word ptr [si+0x4]
    adc     dx, word ptr [si+0x6]
    add     ax, 0x8000
    adc     dx, 0x0
    mov     ax, word ptr [si+0xa]
    sub     ax, dx
    mov     word ptr [si+0xa], dx
    add     word ptr [si+0x1a], ax
    jmp     near ptr LAB_2ea2_02b9
LAB_2ea2_071e:
    test    word ptr [bp-0x2], 0x8
    jz      LAB_2ea2_0728
    jmp     near ptr LAB_2ea2_0385
LAB_2ea2_0728:
    xor     dx, dx
    mov     ax, word ptr [si+0x2]
    cmp     ax, word ptr cs:[sprite1.sprite_left2]
    jge     LAB_2ea2_0737
    or      dh, 0x2
LAB_2ea2_0737:
    mov     bx, word ptr [si]
    add     bx, 0x8000
    adc     ax, 0x0
    cmp     ax, word ptr cs:[sprite1.sprite_widthsum]
    jl      LAB_2ea2_074a
    or      dh, 0x1
LAB_2ea2_074a:
    mov     ax, word ptr [si+0x8]
    cmp     ax, word ptr cs:[sprite1.sprite_left2]
    jge     LAB_2ea2_0757
    or      dl, 0x2
LAB_2ea2_0757:
    cmp     ax, word ptr cs:[sprite1.sprite_widthsum]
    jl      LAB_2ea2_0761
    or      dl, 0x1
LAB_2ea2_0761:
    test    dh, dl
    jz      LAB_2ea2_076a
    and     dl, dh
    jmp     near ptr LAB_2ea2_057b
LAB_2ea2_076a:
    or      dl, dh
    jz      LAB_2ea2_0780
    xor     dh, dh
    mov     word ptr [bp-0x2], dx
    jmp     near ptr LAB_2ea2_028d
LAB_2ea2_0776:
    test    word ptr [bp-0x2], 0x1
    jz      LAB_2ea2_0780
    jmp     near ptr LAB_2ea2_05ff
LAB_2ea2_0780:
    jmp     near ptr LAB_2ea2_02b9
LAB_2ea2_0783:
    mov     byte ptr [si+0x12], 0x1
    cmp     cx, dx
    jnz     LAB_2ea2_078f
    mov     byte ptr [si+0x12], 0x9
LAB_2ea2_078f:
    jle     LAB_2ea2_079d
    mov     byte ptr [si+0x12], 0x0
    mov     word ptr [si+0x2], dx
    mov     word ptr [si+0x8], cx
    xchg    dx, cx
LAB_2ea2_079d:
    cmp     byte ptr [bp+var_4], 0x0
    jnz     LAB_2ea2_07c4
    mov     bx, word ptr cs:[sprite1.sprite_top]
    cmp     ax, bx
    jge     LAB_2ea2_07cd
    mov     al, 0x4
    mov     word ptr [si+0x6], bx
    mov     word ptr [si+0xa], bx
LAB_2ea2_07b4:
    mov     byte ptr [si+0x13], al
    mov     word ptr [si+0xe], 0x0
    xor     ah, ah
    pop     di
    pop     si
    mov     sp, bp
    pop     bp
    retf
LAB_2ea2_07c4:
    sub     dx, cx
    inc     dx
    mov     word ptr [si+0xe], dx
    jmp     near ptr LAB_2ea2_02b9
LAB_2ea2_07cd:
    mov     bx, word ptr cs:[sprite1.sprite_height]
    cmp     ax, bx
    jl      LAB_2ea2_07e0
    mov     al, 0x8
    mov     word ptr [si+0x6], bx
    mov     word ptr [si+0xa], bx
    jmp     LAB_2ea2_07b4
LAB_2ea2_07e0:
    mov     ax, dx
    sub     ax, cx
    inc     ax
    mov     word ptr [si+0xe], ax
    cmp     dx, word ptr cs:[sprite1.sprite_left2]
    jge     LAB_2ea2_07fb
    dec     word ptr [si+0xa]
    mov     word ptr [si+0x16], 0x1
    mov     al, 0x2
    jmp     LAB_2ea2_07b4
LAB_2ea2_07fb:
    cmp     cx, word ptr cs:[sprite1.sprite_widthsum]
    jl      LAB_2ea2_080e
    dec     word ptr [si+0xa]
    mov     word ptr [si+0x1a], 0x1
    mov     al, 0x1
    jmp     LAB_2ea2_07b4
LAB_2ea2_080e:
    mov     ax, word ptr cs:[sprite1.sprite_left2]
    mov     bx, ax
    sub     ax, cx
    jle     LAB_2ea2_081e
    mov     word ptr [si+0x2], bx
    sub     word ptr [si+0xe], ax
LAB_2ea2_081e:
    mov     ax, dx
    mov     bx, word ptr cs:[sprite1.sprite_widthsum]
    dec     bx
    sub     ax, bx
    jle     LAB_2ea2_0830
    sub     word ptr [si+0xe], ax
    mov     word ptr [si+0x8], bx
LAB_2ea2_0830:
    jmp     near ptr LAB_2ea2_02b9
LAB_2ea2_0833:
    mov     cx, word ptr [si+0xa]
    sar     cx, 0x1
    mov     ax, word ptr [si+0x6]
    sar     ax, 0x1
    sub     cx, ax
    sar     cx, 0x1
    mov     dx, word ptr [si+0x8]
    sar     dx, 0x1
    mov     ax, word ptr [si+0x2]
    sar     ax, 0x1
    sub     dx, ax
    sar     dx, 0x1
LAB_2ea2_084f:
    cmp     word ptr [si+0x6], 0xc180
    jg      LAB_2ea2_0890
LAB_2ea2_0856:
    mov     ax, word ptr [si+0x6]
    add     ax, cx
    mov     word ptr [si+0x6], ax
    mov     bx, ax
    sub     ax, word ptr cs:[sprite1.sprite_top]
    jle     LAB_2ea2_088b
    cmp     ax, cx
    jle     LAB_2ea2_086d
    mov     ax, cx
LAB_2ea2_086d:
    sub     bx, word ptr cs:[sprite1.sprite_height]
    jle     LAB_2ea2_0878
    sub     ax, bx
    jle     LAB_2ea2_088b
LAB_2ea2_0878:
    mov     bx, word ptr [si+0x2]
    cmp     bx, word ptr cs:[sprite1.sprite_left2]
    jge     LAB_2ea2_0888
    add     word ptr [si+0x14], ax
    jmp     LAB_2ea2_088b
    db 0x90
LAB_2ea2_0888:
    add     word ptr [si+0x18], ax
LAB_2ea2_088b:
    add     word ptr [si+0x2], dx
    jmp     LAB_2ea2_084f
LAB_2ea2_0890:
    cmp     word ptr [si+0xa], 0x3e80
    jge     LAB_2ea2_08b6
    cmp     word ptr [si+0x2], 0xc180
    jle     LAB_2ea2_0856
    cmp     word ptr [si+0x2], 0x3e80
    jge     LAB_2ea2_0856
    cmp     word ptr [si+0x8], 0xc180
    jle     LAB_2ea2_08b6
    cmp     word ptr [si+0x8], 0x3e80
    jge     LAB_2ea2_08b6
    jmp     near ptr LAB_2ea2_018d
LAB_2ea2_08b6:
    mov     ax, word ptr [si+0xa]
    sub     ax, cx
    mov     word ptr [si+0xa], ax
    mov     bx, ax
    sub     ax, word ptr cs:[sprite1.sprite_height]
    inc     ax
    jge     LAB_2ea2_08ef
    neg     ax
    cmp     ax, cx
    jle     LAB_2ea2_08d0
    mov     ax, cx
LAB_2ea2_08d0:
    sub     bx, word ptr cs:[sprite1.sprite_top]
    inc     bx
    jge     LAB_2ea2_08dc
    add     ax, bx
    jle     LAB_2ea2_08ef
LAB_2ea2_08dc:
    mov     bx, word ptr [si+0x8]
    cmp     bx, word ptr cs:[sprite1.sprite_left2]
    jge     LAB_2ea2_08ec
    add     word ptr [si+0x16], ax
    jmp     LAB_2ea2_08ef
    db 0x90
LAB_2ea2_08ec:
    add     word ptr [si+0x1a], ax
LAB_2ea2_08ef:
    sub     word ptr [si+0x8], dx
    jmp     LAB_2ea2_0890
draw_line_related_asm_ endp

; int __cdecl16far parse_shape2d_helper(int param_1, int param_2)
parse_shape2d_helper_asm_ proc far
    param_1    = word ptr    6
    param_2    = word ptr    8

    push    bp
    mov     bp, sp
    mov     ax, word ptr [bp+param_2]
    xor     dx, dx
    shl     ax, 0x1
    rcl     dx, 0x1
    shl     ax, 0x1
    rcl     dx, 0x1
    shl     ax, 0x1
    rcl     dx, 0x1
    shl     ax, 0x1
    rcl     dx, 0x1
    add     ax, word ptr [bp+param_1]
    adc     dx, 0x0
    pop     bp
    retf
parse_shape2d_helper_asm_ endp

; uint __cdecl16far parse_shape2d_helper2(uint param_1)
parse_shape2d_helper2_asm_ proc far
    param_1    = word ptr    6

    push    bp
    mov     bp, sp
    mov     bx, word ptr [bp+0x8]
    mov     dx, word ptr [bp+param_1]
    mov     ax, dx
    shr     bx, 0x1
    rcr     dx, 0x1
    shr     bx, 0x1
    rcr     dx, 0x1
    shr     bx, 0x1
    rcr     dx, 0x1
    shr     bx, 0x1
    rcr     dx, 0x1
    and     ax, 0xf
    pop     bp
    retf
parse_shape2d_helper2_asm_ endp
word_2F354:
    dw 0x0000
word_2F356:
    dw 0x0000
word_2F358:
    dw 0x0000
word_2F35A:
    dw 0x0000

; void __stdcall16near criterr_interrupt_handler(void)
criterr_interrupt_handler_asm_ proc near
    push    bx
    push    dx
    push    cx
    push    si
    push    di
    push    ds
    push    es
    push    bp
    mov     ax, ss
    mov     ds, ax
    mov     bx, offset word_2F358
    call    dword ptr cs:[bx]
    pop     bp
    pop     es
    pop     ds
    pop     di
    pop     si
    pop     cx
    pop     dx
    pop     bx
    iret
criterr_interrupt_handler_asm_ endp

; void __cdecl16far set_criterr_handler(void * func_cb)
set_criterr_handler_asm_ proc far
    func_cb    = dword ptr   6

    push    bp
    mov     bp, sp
    push    ds
    push    cs
    mov     ax, offset criterr_exithandler
    push    ax
    call    far ptr add_exit_handler
    add     sp, 0x4
    mov     ax, word ptr [bp+func_cb]
    mov     word ptr cs:[word_2F358], ax
    mov     ax, word ptr [bp+func_cb+2]
    mov     word ptr cs:[word_2F35A], ax
    xor     ax, ax
    mov     es, ax
    mov     bx, 0x90
    mov     ax, word ptr es:[bx]
    mov     word ptr cs:[word_2F354], ax
    mov     ax, word ptr es:[bx+0x2]
    mov     word ptr cs:[word_2F356], ax
    mov     dx, offset criterr_interrupt_handler
    mov     ax, cs
    mov     ds, ax
    mov     al, 0x24
    mov     ah, 0x25
    int     0x21                               ; DOS - SET INTERRUPT VECTOR
                                               ; AL = interrupt number
                                               ; DS:DX = new vector to be used for specified interrupt
    pop     ds
    pop     bp
    retf
set_criterr_handler_asm_ endp

; void __cdecl16far criterr_exithandler(void)
criterr_exithandler_asm_ proc far
    push    ds
    mov     ax, word ptr cs:[word_2F356]
    sub     ax, word ptr cs:[word_2F354]
    jz      LAB_2ea2_09b8
    mov     dx, word ptr cs:[word_2F354]
    mov     ds, word ptr cs:[word_2F356]
    mov     al, 0x24
    mov     ah, 0x25
    int     0x21                               ; DOS - SET INTERRUPT VECTOR
                                               ; AL = interrupt number
                                               ; DS:DX = new vector to be used for specified interrupt
LAB_2ea2_09b8:
    pop     ds
    retf
criterr_exithandler_asm_ endp

; void __cdecl16far preRender_unk(uint colour, uint unk1, uint vertlinecount, POINT2D * vertlines, uint unk2)
preRender_unk_asm_ proc far
    var_A      = byte ptr  -10
    colour     = word ptr    6
    unk1       = word ptr    8
    vertlinecount = word ptr   10
    vertlines  = word ptr   12
    unk2       = word ptr   14

    push    bp
    mov     bp, sp
    sub     sp, 0x7d0
    push    si
    push    di
    mov     si, word ptr [bp+unk2]
    mov     byte ptr [bp+var_A], 0x1
    jmp     LAB_2ea2_09dd
    db 0x90
    push    bp
    mov     bp, sp
    sub     sp, 0x7d0
    push    si
    push    di
    mov     si, word ptr [bp+0xe]
    mov     byte ptr [bp-0xa], 0x0
LAB_2ea2_09dd:
    mov     ax, word ptr [bp+colour]
    mov     word ptr [word_4031E], ax
    mov     ax, word ptr [bp+vertlinecount]
    mov     word ptr [word_40320], ax
    mov     ax, word ptr [bp+unk1]
    mov     word ptr [bp+colour], ax
    mov     ax, word ptr [bp+vertlines]
    mov     word ptr [bp+unk1], ax
    mov     ax, offset draw_unknown_lines
    mov     word ptr [spritefunc], ax
    mov     ax, offset preRender_line
    mov     word ptr [imagefunc], ax
    jmp     near ptr offset loc_3180A
preRender_unk_asm_ endp

; void __cdecl16far nopsub_2F424(uint color, uint unk1, uint vertlinecount, POINT2D * vertlines, uint unk2)
nopsub_2F424_asm_ proc far
    var_A      = byte ptr  -10
    color      = word ptr    6
    unk1       = word ptr    8
    vertlinecount = word ptr   10
    vertlines  = word ptr   12
    unk2       = word ptr   14

    push    bp
    mov     bp, sp
    sub     sp, 0x7d0
    push    si
    push    di
    lea     si, [bp+unk2]
    mov     byte ptr [bp+var_A], 0x0
    jmp     LAB_2ea2_09dd
nopsub_2F424_asm_ endp

; void __cdecl16far nopsub_2F436(uint color, uint unk1, uint vertlinecount, POINT2D * vertlines, uint unk2)
nopsub_2F436_asm_ proc far
    var_A      = byte ptr  -10
    color      = word ptr    6
    unk1       = word ptr    8
    vertlinecount = word ptr   10
    vertlines  = word ptr   12
    unk2       = word ptr   14

    push    bp
    mov     bp, sp
    sub     sp, 0x7d0
    push    si
    push    di
    lea     si, [bp+unk2]
    mov     byte ptr [bp+var_A], 0x1
    jmp     LAB_2ea2_09dd
nopsub_2F436_asm_ endp
; these could be interpolation tables? 
; each entry in the table points at arrays which grows by one 
; each array has values going from 0->FFFF  
len_off_2F44A:
    dw 0x0032
off_2F44A:
    dw PTR_WORD_2ea2_135c_2ea2_0a8c
    dw PTR_WORD_2ea2_135c_2ea2_0a8c
    dw PTR_WORD_2ea2_135c_2ea2_0a8c
    dw WORD_2ea2_0a8e
    dw WORD_2ea2_0a92
    dw WORD_2ea2_0a98
    dw WORD_2ea2_0aa0
    dw WORD_2ea2_0aaa
    dw WORD_2ea2_0ab6
    dw WORD_2ea2_0ac4
    dw WORD_2ea2_0ad4
    dw WORD_2ea2_0ae6
    dw WORD_2ea2_0afa
    dw WORD_2ea2_0b10
    dw WORD_2ea2_0b28
    dw WORD_2ea2_0b42
    dw WORD_2ea2_0b5e
    dw WORD_2ea2_0b7c
    dw WORD_2ea2_0b9c
    dw WORD_2ea2_0bbe
    dw WORD_2ea2_0be2
    dw WORD_2ea2_0c08
    dw WORD_2ea2_0c30
    dw WORD_2ea2_0c5a
    dw WORD_2ea2_0c86
    dw WORD_2ea2_0cb4
    dw WORD_2ea2_0ce4
    dw WORD_2ea2_0d16
    dw WORD_2ea2_0d4a
    dw WORD_2ea2_0d80
    dw WORD_2ea2_0db8
    dw WORD_2ea2_0df2
    dw WORD_2ea2_0e2e
    dw WORD_2ea2_0e6c
    dw WORD_2ea2_0eac
    dw WORD_2ea2_0eee
    dw WORD_2ea2_0f32
    dw WORD_2ea2_0f78
    dw WORD_2ea2_0fc0
    dw WORD_2ea2_100a
    dw WORD_2ea2_1056
    dw WORD_2ea2_10a4
    dw WORD_2ea2_10f4
    dw WORD_2ea2_1146
    dw WORD_2ea2_119a
    dw WORD_2ea2_11f0
    dw WORD_2ea2_1248
    dw WORD_2ea2_12a2
    dw WORD_2ea2_12fe
PTR_WORD_2ea2_135c_2ea2_0a8c:
    dw WORD_2ea2_135c
WORD_2ea2_0a8e:
    dw 0x8000
    dw 0x5555
WORD_2ea2_0a92:
    dw 0xAAAA
    dw 0x4000
    dw 0x8000
WORD_2ea2_0a98:
    dw 0xC000
    dw 0x3333
    dw 0x6666
    dw 0x9999
WORD_2ea2_0aa0:
    dw 0xCCCC
    dw 0x2AAA
    dw 0x5555
    dw 0x8000
    dw 0xAAAA
WORD_2ea2_0aaa:
    dw 0xD555
    dw 0x2492
    dw 0x4924
    dw 0x6DB6
    dw 0x9249
    dw 0xB6DB
WORD_2ea2_0ab6:
    dw 0xDB6D
    dw 0x2000
    dw 0x4000
    dw 0x6000
    dw 0x8000
    dw 0xA000
    dw 0xC000
WORD_2ea2_0ac4:
    dw 0xE000
    dw 0x1C71
    dw 0x38E3
    dw 0x5555
    dw 0x71C7
    dw 0x8E38
    dw 0xAAAA
    dw 0xC71C
WORD_2ea2_0ad4:
    dw 0xE38E
    dw 0x1999
    dw 0x3333
    dw 0x4CCC
    dw 0x6666
    dw 0x8000
    dw 0x9999
    dw 0xB333
    dw 0xCCCC
WORD_2ea2_0ae6:
    dw 0xE666
    dw 0x1745
    dw 0x2E8B
    dw 0x45D1
    dw 0x5D17
    dw 0x745D
    dw 0x8BA2
caseD_7:
    dw 0xA2E8
    dw 0xBA2E
    dw 0xD174
WORD_2ea2_0afa:
    dw 0xE8BA
    dw 0x1555
    dw 0x2AAA
    dw 0x4000
    dw 0x5555
    dw 0x6AAA
    dw 0x8000
    dw 0x9555
caseD_5:
    dw 0xAAAA
    dw 0xC000
    dw 0xD555
WORD_2ea2_0b10:
    dw 0xEAAA
    dw 0x13B1
    dw 0x2762
    dw 0x3B13
    dw 0x4EC4
    dw 0x6276
    dw 0x7627
    dw 0x89D8
    dw 0x9D89
    dw 0xB13B
    dw 0xC4EC
    dw 0xD89D
WORD_2ea2_0b28:
    dw 0xEC4E
    dw 0x1249
    dw 0x2492
    dw 0x36DB
    dw 0x4924
    dw 0x5B6D
    dw 0x6DB6
    dw 0x8000
    dw 0x9249
    dw 0xA492
    dw 0xB6DB
    dw 0xC924
    dw 0xDB6D
WORD_2ea2_0b42:
    dw 0xEDB6
    dw 0x1111
    dw 0x2222
    dw 0x3333
    dw 0x4444
    dw 0x5555
    dw 0x6666
    dw 0x7777
    dw 0x8888
    dw 0x9999
    dw 0xAAAA
    dw 0xBBBB
    dw 0xCCCC
    dw 0xDDDD
WORD_2ea2_0b5e:
    dw 0xEEEE
    dw 0x1000
    dw 0x2000
    dw 0x3000
    dw 0x4000
    dw 0x5000
    dw 0x6000
    dw 0x7000
    dw 0x8000
    dw 0x9000
    dw 0xA000
    dw 0xB000
    dw 0xC000
    dw 0xD000
    dw 0xE000
WORD_2ea2_0b7c:
    dw 0xF000
    dw 0x0F0F
    dw 0x1E1E
    dw 0x2D2D
    dw 0x3C3C
    dw 0x4B4B
    dw 0x5A5A
    dw 0x6969
    dw 0x7878
    dw 0x8787
    dw 0x9696
    dw 0xA5A5
    dw 0xB4B4
    dw 0xC3C3
    dw 0xD2D2
    dw 0xE1E1
WORD_2ea2_0b9c:
    dw 0xF0F0
    dw 0x0E38
    dw 0x1C71
    dw 0x2AAA
    dw 0x38E3
    dw 0x471C
    dw 0x5555
    dw 0x638E
    dw 0x71C7
    dw 0x8000
    dw 0x8E38
    dw 0x9C71
    dw 0xAAAA
    dw 0xB8E3
    dw 0xC71C
    dw 0xD555
    dw 0xE38E
WORD_2ea2_0bbe:
    dw 0xF1C7
    dw 0x0D79
    dw 0x1AF2
    dw 0x286B
    dw 0x35E5
    dw 0x435E
    dw 0x50D7
    dw 0x5E50
    dw 0x6BCA
    dw 0x7943
    dw 0x86BC
    dw 0x9435
    dw 0xA1AF
    dw 0xAF28
    dw 0xBCA1
    dw 0xCA1A
    dw 0xD794
    dw 0xE50D
WORD_2ea2_0be2:
    dw 0xF286
    dw 0x0CCC
    dw 0x1999
    dw 0x2666
    dw 0x3333
    dw 0x4000
    dw 0x4CCC
    dw 0x5999
    dw 0x6666
    dw 0x7333
    dw 0x8000
    dw 0x8CCC
    dw 0x9999
    dw 0xA666
    dw 0xB333
    dw 0xC000
    dw 0xCCCC
    dw 0xD999
    dw 0xE666
WORD_2ea2_0c08:
    dw 0xF333
    dw 0x0C30
    dw 0x1861
    dw 0x2492
    dw 0x30C3
    dw 0x3CF3
    dw 0x4924
    dw 0x5555
    dw 0x6186
    dw 0x6DB6
    dw 0x79E7
    dw 0x8618
    dw 0x9249
    dw 0x9E79
    dw 0xAAAA
    dw 0xB6DB
    dw 0xC30C
    dw 0xCF3C
    dw 0xDB6D
    dw 0xE79E
WORD_2ea2_0c30:
    dw 0xF3CF
    dw 0x0BA2
    dw 0x1745
    dw 0x22E8
    dw 0x2E8B
    dw 0x3A2E
    dw 0x45D1
    dw 0x5174
    dw 0x5D17
    dw 0x68BA
    dw 0x745D
    dw 0x8000
    dw 0x8BA2
    dw 0x9745
    dw 0xA2E8
    dw 0xAE8B
    dw 0xBA2E
    dw 0xC5D1
    dw 0xD174
    dw 0xDD17
    dw 0xE8BA
WORD_2ea2_0c5a:
    dw 0xF45D
    dw 0x0B21
    dw 0x1642
    dw 0x2164
    dw 0x2C85
    dw 0x37A6
    dw 0x42C8
    dw 0x4DE9
    dw 0x590B
    dw 0x642C
    dw 0x6F4D
    dw 0x7A6F
    dw 0x8590
    dw 0x90B2
    dw 0x9BD3
    dw 0xA6F4
    dw 0xB216
    dw 0xBD37
    dw 0xC859
    dw 0xD37A
    dw 0xDE9B
    dw 0xE9BD
WORD_2ea2_0c86:
    dw 0xF4DE
    dw 0x0AAA
    dw 0x1555
    dw 0x2000
    dw 0x2AAA
    dw 0x3555
    dw 0x4000
    dw 0x4AAA
    dw 0x5555
    dw 0x6000
    dw 0x6AAA
    dw 0x7555
    dw 0x8000
    dw 0x8AAA
    dw 0x9555
    dw 0xA000
    dw 0xAAAA
    dw 0xB555
    dw 0xC000
    dw 0xCAAA
    dw 0xD555
    dw 0xE000
    dw 0xEAAA
WORD_2ea2_0cb4:
    dw 0xF555
    dw 0x0A3D
    dw 0x147A
    dw 0x1EB8
    dw 0x28F5
    dw 0x3333
    dw 0x3D70
    dw 0x47AE
    dw 0x51EB
    dw 0x5C28
    dw 0x6666
    dw 0x70A3
    dw 0x7AE1
    dw 0x851E
    dw 0x8F5C
    dw 0x9999
    dw 0xA3D7
    dw 0xAE14
    dw 0xB851
    dw 0xC28F
    dw 0xCCCC
    dw 0xD70A
    dw 0xE147
    dw 0xEB85
WORD_2ea2_0ce4:
    dw 0xF5C2
    dw 0x09D8
    dw 0x13B1
    dw 0x1D89
    dw 0x2762
    dw 0x313B
    dw 0x3B13
    dw 0x44EC
    dw 0x4EC4
    dw 0x589D
    dw 0x6276
    dw 0x6C4E
    dw 0x7627
    dw 0x8000
    dw 0x89D8
    dw 0x93B1
    dw 0x9D89
    dw 0xA762
    dw 0xB13B
    dw 0xBB13
    dw 0xC4EC
    dw 0xCEC4
    dw 0xD89D
    dw 0xE276
    dw 0xEC4E
WORD_2ea2_0d16:
    dw 0xF627
    dw 0x097B
    dw 0x12F6
    dw 0x1C71
    dw 0x25ED
    dw 0x2F68
    dw 0x38E3
    dw 0x425E
    dw 0x4BDA
    dw 0x5555
    dw 0x5ED0
    dw 0x684B
    dw 0x71C7
    dw 0x7B42
    dw 0x84BD
    dw 0x8E38
    dw 0x97B4
    dw 0xA12F
    dw 0xAAAA
    dw 0xB425
    dw 0xBDA1
    dw 0xC71C
    dw 0xD097
    dw 0xDA12
    dw 0xE38E
    dw 0xED09
WORD_2ea2_0d4a:
    dw 0xF684
    dw 0x0924
    dw 0x1249
    dw 0x1B6D
    dw 0x2492
    dw 0x2DB6
    dw 0x36DB
    dw 0x4000
    dw 0x4924
    dw 0x5249
    dw 0x5B6D
    dw 0x6492
    dw 0x6DB6
    dw 0x76DB
    dw 0x8000
    dw 0x8924
    dw 0x9249
    dw 0x9B6D
    dw 0xA492
    dw 0xADB6
    dw 0xB6DB
    dw 0xC000
    dw 0xC924
    dw 0xD249
    dw 0xDB6D
    dw 0xE492
    dw 0xEDB6
WORD_2ea2_0d80:
    dw 0xF6DB
    dw 0x08D3
    dw 0x11A7
    dw 0x1A7B
    dw 0x234F
    dw 0x2C23
    dw 0x34F7
    dw 0x3DCB
    dw 0x469E
    dw 0x4F72
    dw 0x5846
    dw 0x611A
    dw 0x69EE
    dw 0x72C2
    dw 0x7B96
    dw 0x8469
    dw 0x8D3D
    dw 0x9611
    dw 0x9EE5
    dw 0xA7B9
    dw 0xB08D
    dw 0xB961
    dw 0xC234
    dw 0xCB08
    dw 0xD3DC
    dw 0xDCB0
    dw 0xE584
    dw 0xEE58
WORD_2ea2_0db8:
    dw 0xF72C
    dw 0x0888
    dw 0x1111
    dw 0x1999
    dw 0x2222
    dw 0x2AAA
    dw 0x3333
    dw 0x3BBB
    dw 0x4444
    dw 0x4CCC
    dw 0x5555
    dw 0x5DDD
    dw 0x6666
    dw 0x6EEE
    dw 0x7777
    dw 0x8000
    dw 0x8888
    dw 0x9111
    dw 0x9999
    dw 0xA222
    dw 0xAAAA
    dw 0xB333
    dw 0xBBBB
    dw 0xC444
    dw 0xCCCC
    dw 0xD555
    dw 0xDDDD
    dw 0xE666
    dw 0xEEEE
WORD_2ea2_0df2:
    dw 0xF777
    dw 0x0842
    dw 0x1084
    dw 0x18C6
    dw 0x2108
    dw 0x294A
    dw 0x318C
    dw 0x39CE
    dw 0x4210
    dw 0x4A52
    dw 0x5294
    dw 0x5AD6
    dw 0x6318
    dw 0x6B5A
    dw 0x739C
    dw 0x7BDE
    dw 0x8421
    dw 0x8C63
    dw 0x94A5
    dw 0x9CE7
    dw 0xA529
    dw 0xAD6B
    dw 0xB5AD
    dw 0xBDEF
    dw 0xC631
    dw 0xCE73
    dw 0xD6B5
    dw 0xDEF7
    dw 0xE739
    dw 0xEF7B
WORD_2ea2_0e2e:
    dw 0xF7BD
    dw 0x0800
    dw 0x1000
    dw 0x1800
    dw 0x2000
    dw 0x2800
    dw 0x3000
    dw 0x3800
    dw 0x4000
    dw 0x4800
    dw 0x5000
    dw 0x5800
    dw 0x6000
    dw 0x6800
    dw 0x7000
    dw 0x7800
    dw 0x8000
    dw 0x8800
    dw 0x9000
    dw 0x9800
    dw 0xA000
    dw 0xA800
    dw 0xB000
    dw 0xB800
    dw 0xC000
    dw 0xC800
    dw 0xD000
    dw 0xD800
    dw 0xE000
    dw 0xE800
    dw 0xF000
WORD_2ea2_0e6c:
    dw 0xF800
    dw 0x07C1
    dw 0x0F83
    dw 0x1745
    dw 0x1F07
    dw 0x26C9
    dw 0x2E8B
    dw 0x364D
    dw 0x3E0F
    dw 0x45D1
    dw 0x4D93
    dw 0x5555
    dw 0x5D17
    dw 0x64D9
    dw 0x6C9B
    dw 0x745D
    dw 0x7C1F
    dw 0x83E0
    dw 0x8BA2
    dw 0x9364
    dw 0x9B26
    dw 0xA2E8
    dw 0xAAAA
    dw 0xB26C
    dw 0xBA2E
    dw 0xC1F0
    dw 0xC9B2
    dw 0xD174
    dw 0xD936
    dw 0xE0F8
    dw 0xE8BA
    dw 0xF07C
WORD_2ea2_0eac:
    dw 0xF83E
    dw 0x0787
    dw 0x0F0F
    dw 0x1696
    dw 0x1E1E
    dw 0x25A5
    dw 0x2D2D
    dw 0x34B4
    dw 0x3C3C
    dw 0x43C3
    dw 0x4B4B
    dw 0x52D2
    dw 0x5A5A
    dw 0x61E1
    dw 0x6969
    dw 0x70F0
    dw 0x7878
    dw 0x8000
    dw 0x8787
    dw 0x8F0F
    dw 0x9696
    dw 0x9E1E
    dw 0xA5A5
    dw 0xAD2D
    dw 0xB4B4
    dw 0xBC3C
    dw 0xC3C3
    dw 0xCB4B
    dw 0xD2D2
    dw 0xDA5A
    dw 0xE1E1
    dw 0xE969
    dw 0xF0F0
WORD_2ea2_0eee:
    dw 0xF878
    dw 0x0750
    dw 0x0EA0
    dw 0x15F1
    dw 0x1D41
    dw 0x2492
    dw 0x2BE2
    dw 0x3333
    dw 0x3A83
    dw 0x41D4
    dw 0x4924
    dw 0x5075
    dw 0x57C5
    dw 0x5F15
    dw 0x6666
    dw 0x6DB6
    dw 0x7507
    dw 0x7C57
    dw 0x83A8
    dw 0x8AF8
    dw 0x9249
    dw 0x9999
    dw 0xA0EA
    dw 0xA83A
    dw 0xAF8A
    dw 0xB6DB
    dw 0xBE2B
    dw 0xC57C
    dw 0xCCCC
    dw 0xD41D
    dw 0xDB6D
    dw 0xE2BE
    dw 0xEA0E
    dw 0xF15F
WORD_2ea2_0f32:
    dw 0xF8AF
    dw 0x071C
    dw 0x0E38
    dw 0x1555
    dw 0x1C71
    dw 0x238E
    dw 0x2AAA
    dw 0x31C7
    dw 0x38E3
    dw 0x4000
    dw 0x471C
    dw 0x4E38
    dw 0x5555
    dw 0x5C71
    dw 0x638E
    dw 0x6AAA
    dw 0x71C7
    dw 0x78E3
    dw 0x8000
    dw 0x871C
    dw 0x8E38
    dw 0x9555
    dw 0x9C71
    dw 0xA38E
    dw 0xAAAA
    dw 0xB1C7
    dw 0xB8E3
    dw 0xC000
    dw 0xC71C
    dw 0xCE38
    dw 0xD555
    dw 0xDC71
    dw 0xE38E
    dw 0xEAAA
    dw 0xF1C7
WORD_2ea2_0f78:
    dw 0xF8E3
    dw 0x06EB
    dw 0x0DD6
    dw 0x14C1
    dw 0x1BAC
    dw 0x2298
    dw 0x2983
    dw 0x306E
    dw 0x3759
    dw 0x3E45
    dw 0x4530
    dw 0x4C1B
    dw 0x5306
    dw 0x59F2
    dw 0x60DD
    dw 0x67C8
    dw 0x6EB3
    dw 0x759F
    dw 0x7C8A
    dw 0x8375
    dw 0x8A60
    dw 0x914C
    dw 0x9837
    dw 0x9F22
    dw 0xA60D
    dw 0xACF9
    dw 0xB3E4
    dw 0xBACF
    dw 0xC1BA
    dw 0xC8A6
    dw 0xCF91
    dw 0xD67C
    dw 0xDD67
    dw 0xE453
    dw 0xEB3E
    dw 0xF229
WORD_2ea2_0fc0:
    dw 0xF914
    dw 0x06BC
    dw 0x0D79
    dw 0x1435
    dw 0x1AF2
    dw 0x21AF
    dw 0x286B
    dw 0x2F28
    dw 0x35E5
    dw 0x3CA1
    dw 0x435E
    dw 0x4A1A
    dw 0x50D7
    dw 0x5794
    dw 0x5E50
    dw 0x650D
    dw 0x6BCA
    dw 0x7286
    dw 0x7943
    dw 0x8000
    dw 0x86BC
    dw 0x8D79
    dw 0x9435
    dw 0x9AF2
    dw 0xA1AF
    dw 0xA86B
    dw 0xAF28
    dw 0xB5E5
    dw 0xBCA1
    dw 0xC35E
    dw 0xCA1A
    dw 0xD0D7
    dw 0xD794
    dw 0xDE50
    dw 0xE50D
    dw 0xEBCA
    dw 0xF286
WORD_2ea2_100a:
    dw 0xF943
    dw 0x0690
    dw 0x0D20
    dw 0x13B1
    dw 0x1A41
    dw 0x20D2
    dw 0x2762
    dw 0x2DF2
    dw 0x3483
    dw 0x3B13
    dw 0x41A4
    dw 0x4834
    dw 0x4EC4
    dw 0x5555
    dw 0x5BE5
    dw 0x6276
    dw 0x6906
    dw 0x6F96
    dw 0x7627
    dw 0x7CB7
    dw 0x8348
    dw 0x89D8
    dw 0x9069
    dw 0x96F9
    dw 0x9D89
    dw 0xA41A
    dw 0xAAAA
    dw 0xB13B
    dw 0xB7CB
    dw 0xBE5B
    dw 0xC4EC
    dw 0xCB7C
    dw 0xD20D
    dw 0xD89D
    dw 0xDF2D
    dw 0xE5BE
    dw 0xEC4E
    dw 0xF2DF
WORD_2ea2_1056:
    dw 0xF96F
    dw 0x0666
    dw 0x0CCC
    dw 0x1333
    dw 0x1999
    dw 0x2000
    dw 0x2666
    dw 0x2CCC
    dw 0x3333
    dw 0x3999
    dw 0x4000
    dw 0x4666
    dw 0x4CCC
    dw 0x5333
    dw 0x5999
    dw 0x6000
    dw 0x6666
    dw 0x6CCC
    dw 0x7333
    dw 0x7999
    dw 0x8000
    dw 0x8666
    dw 0x8CCC
    dw 0x9333
    dw 0x9999
    dw 0xA000
    dw 0xA666
    dw 0xACCC
    dw 0xB333
    dw 0xB999
    dw 0xC000
    dw 0xC666
    dw 0xCCCC
    dw 0xD333
    dw 0xD999
    dw 0xE000
    dw 0xE666
    dw 0xECCC
    dw 0xF333
WORD_2ea2_10a4:
    dw 0xF999
    dw 0x063E
    dw 0x0C7C
    dw 0x12BB
    dw 0x18F9
    dw 0x1F38
    dw 0x2576
    dw 0x2BB5
    dw 0x31F3
    dw 0x3831
    dw 0x3E70
    dw 0x44AE
    dw 0x4AED
    dw 0x512B
    dw 0x576A
    dw 0x5DA8
    dw 0x63E7
    dw 0x6A25
    dw 0x7063
    dw 0x76A2
    dw 0x7CE0
    dw 0x831F
    dw 0x895D
    dw 0x8F9C
    dw 0x95DA
    dw 0x9C18
    dw 0xA257
    dw 0xA895
    dw 0xAED4
    dw 0xB512
    dw 0xBB51
    dw 0xC18F
    dw 0xC7CE
    dw 0xCE0C
    dw 0xD44A
    dw 0xDA89
    dw 0xE0C7
    dw 0xE706
    dw 0xED44
    dw 0xF383
WORD_2ea2_10f4:
    dw 0xF9C1
    dw 0x0618
    dw 0x0C30
    dw 0x1249
    dw 0x1861
    dw 0x1E79
    dw 0x2492
    dw 0x2AAA
    dw 0x30C3
    dw 0x36DB
    dw 0x3CF3
    dw 0x430C
    dw 0x4924
    dw 0x4F3C
    dw 0x5555
    dw 0x5B6D
    dw 0x6186
    dw 0x679E
    dw 0x6DB6
    dw 0x73CF
    dw 0x79E7
    dw 0x8000
    dw 0x8618
    dw 0x8C30
    dw 0x9249
    dw 0x9861
    dw 0x9E79
    dw 0xA492
    dw 0xAAAA
    dw 0xB0C3
    dw 0xB6DB
    dw 0xBCF3
    dw 0xC30C
    dw 0xC924
    dw 0xCF3C
    dw 0xD555
    dw 0xDB6D
    dw 0xE186
    dw 0xE79E
    dw 0xEDB6
    dw 0xF3CF
WORD_2ea2_1146:
    dw 0xF9E7
    dw 0x05F4
    dw 0x0BE8
    dw 0x11DC
    dw 0x17D0
    dw 0x1DC4
    dw 0x23B8
    dw 0x29AC
    dw 0x2FA0
    dw 0x3594
    dw 0x3B88
    dw 0x417D
    dw 0x4771
    dw 0x4D65
    dw 0x5359
    dw 0x594D
    dw 0x5F41
    dw 0x6535
    dw 0x6B29
    dw 0x711D
    dw 0x7711
    dw 0x7D05
    dw 0x82FA
    dw 0x88EE
    dw 0x8EE2
    dw 0x94D6
    dw 0x9ACA
    dw 0xA0BE
    dw 0xA6B2
    dw 0xACA6
    dw 0xB29A
    dw 0xB88E
    dw 0xBE82
    dw 0xC477
    dw 0xCA6B
    dw 0xD05F
    dw 0xD653
    dw 0xDC47
    dw 0xE23B
    dw 0xE82F
    dw 0xEE23
    dw 0xF417
WORD_2ea2_119a:
    dw 0xFA0B
    dw 0x05D1
    dw 0x0BA2
    dw 0x1174
    dw 0x1745
    dw 0x1D17
    dw 0x22E8
    dw 0x28BA
    dw 0x2E8B
    dw 0x345D
    dw 0x3A2E
    dw 0x4000
    dw 0x45D1
    dw 0x4BA2
    dw 0x5174
    dw 0x5745
    dw 0x5D17
    dw 0x62E8
    dw 0x68BA
    dw 0x6E8B
    dw 0x745D
    dw 0x7A2E
    dw 0x8000
    dw 0x85D1
    dw 0x8BA2
    dw 0x9174
    dw 0x9745
    dw 0x9D17
    dw 0xA2E8
    dw 0xA8BA
    dw 0xAE8B
    dw 0xB45D
    dw 0xBA2E
    dw 0xC000
    dw 0xC5D1
    dw 0xCBA2
    dw 0xD174
    dw 0xD745
    dw 0xDD17
    dw 0xE2E8
    dw 0xE8BA
    dw 0xEE8B
    dw 0xF45D
WORD_2ea2_11f0:
    dw 0xFA2E
    dw 0x05B0
    dw 0x0B60
    dw 0x1111
    dw 0x16C1
    dw 0x1C71
    dw 0x2222
    dw 0x27D2
    dw 0x2D82
    dw 0x3333
    dw 0x38E3
    dw 0x3E93
    dw 0x4444
    dw 0x49F4
    dw 0x4FA4
    dw 0x5555
    dw 0x5B05
    dw 0x60B6
    dw 0x6666
    dw 0x6C16
    dw 0x71C7
    dw 0x7777
    dw 0x7D27
    dw 0x82D8
    dw 0x8888
    dw 0x8E38
    dw 0x93E9
    dw 0x9999
    dw 0x9F49
    dw 0xA4FA
    dw 0xAAAA
    dw 0xB05B
    dw 0xB60B
    dw 0xBBBB
    dw 0xC16C
    dw 0xC71C
    dw 0xCCCC
    dw 0xD27D
    dw 0xD82D
    dw 0xDDDD
    dw 0xE38E
    dw 0xE93E
    dw 0xEEEE
    dw 0xF49F
WORD_2ea2_1248:
    dw 0xFA4F
    dw 0x0590
    dw 0x0B21
    dw 0x10B2
    dw 0x1642
    dw 0x1BD3
    dw 0x2164
    dw 0x26F4
    dw 0x2C85
    dw 0x3216
    dw 0x37A6
    dw 0x3D37
    dw 0x42C8
    dw 0x4859
    dw 0x4DE9
    dw 0x537A
    dw 0x590B
    dw 0x5E9B
    dw 0x642C
    dw 0x69BD
    dw 0x6F4D
    dw 0x74DE
    dw 0x7A6F
    dw 0x8000
    dw 0x8590
    dw 0x8B21
    dw 0x90B2
    dw 0x9642
    dw 0x9BD3
    dw 0xA164
    dw 0xA6F4
    dw 0xAC85
    dw 0xB216
    dw 0xB7A6
    dw 0xBD37
    dw 0xC2C8
    dw 0xC859
    dw 0xCDE9
    dw 0xD37A
    dw 0xD90B
    dw 0xDE9B
    dw 0xE42C
    dw 0xE9BD
    dw 0xEF4D
    dw 0xF4DE
WORD_2ea2_12a2:
    dw 0xFA6F
    dw 0x0572
    dw 0x0AE4
    dw 0x1057
    dw 0x15C9
    dw 0x1B3B
    dw 0x20AE
    dw 0x2620
    dw 0x2B93
    dw 0x3105
    dw 0x3677
    dw 0x3BEA
    dw 0x415C
    dw 0x46CE
    dw 0x4C41
    dw 0x51B3
    dw 0x5726
    dw 0x5C98
    dw 0x620A
    dw 0x677D
    dw 0x6CEF
    dw 0x7262
    dw 0x77D4
    dw 0x7D46
    dw 0x82B9
    dw 0x882B
    dw 0x8D9D
    dw 0x9310
    dw 0x9882
    dw 0x9DF5
    dw 0xA367
    dw 0xA8D9
    dw 0xAE4C
    dw 0xB3BE
    dw 0xB931
    dw 0xBEA3
    dw 0xC415
    dw 0xC988
    dw 0xCEFA
    dw 0xD46C
    dw 0xD9DF
    dw 0xDF51
    dw 0xE4C4
    dw 0xEA36
    dw 0xEFA8
    dw 0xF51B
WORD_2ea2_12fe:
    dw 0xFA8D
    dw 0x0555
    dw 0x0AAA
    dw 0x1000
    dw 0x1555
    dw 0x1AAA
    dw 0x2000
    dw 0x2555
    dw 0x2AAA
    dw 0x3000
    dw 0x3555
    dw 0x3AAA
    dw 0x4000
    dw 0x4555
    dw 0x4AAA
    dw 0x5000
    dw 0x5555
    dw 0x5AAA
    dw 0x6000
    dw 0x6555
    dw 0x6AAA
    dw 0x7000
    dw 0x7555
    dw 0x7AAA
    dw 0x8000
    dw 0x8555
    dw 0x8AAA
    dw 0x9000
    dw 0x9555
    dw 0x9AAA
    dw 0xA000
    dw 0xA555
    dw 0xAAAA
    dw 0xB000
    dw 0xB555
    dw 0xBAAA
    dw 0xC000
    dw 0xC555
    dw 0xCAAA
    dw 0xD000
    dw 0xD555
    dw 0xDAAA
    dw 0xE000
    dw 0xE555
    dw 0xEAAA
    dw 0xF000
    dw 0xF555
WORD_2ea2_135c:
    dw 0xFAAA
    dw 0x0539
    dw 0x0A72
    dw 0x0FAC
    dw 0x14E5
    dw 0x1A1F
    dw 0x1F58
    dw 0x2492
    dw 0x29CB
    dw 0x2F05
    dw 0x343E
    dw 0x3978
    dw 0x3EB1
    dw 0x43EB
    dw 0x4924
    dw 0x4E5E
    dw 0x5397
    dw 0x58D0
    dw 0x5E0A
    dw 0x6343
    dw 0x687D
    dw 0x6DB6
    dw 0x72F0
    dw 0x7829
    dw 0x7D63
    dw 0x829C
    dw 0x87D6
    dw 0x8D0F
    dw 0x9249
    dw 0x9782
    dw 0x9CBC
    dw 0xA1F5
    dw 0xA72F
    dw 0xAC68
    dw 0xB1A1
    dw 0xB6DB
    dw 0xBC14
    dw 0xC14E
    dw 0xC687
    dw 0xCBC1
    dw 0xD0FA
    dw 0xD634
    dw 0xDB6D
    dw 0xE0A7
    dw 0xE5E0
    dw 0xEB1A
    dw 0xF053
    dw 0xF58D
    dw 0xFAC6

; void __cdecl16far preRender_line(int x1_, int y1_, int x2_, int y2_, uint colour)
preRender_line_asm_ proc far
    var_1C     = byte ptr  -28
    x1_        = word ptr    6
    y1_        = word ptr    8
    x2_        = word ptr   10
    y2_        = word ptr   12
    colour     = word ptr   14

    push    bp
    mov     bp, sp
    sub     sp, 0x1c
    mov     ax, word ptr [bp+colour]
    lea     bx, [bp+var_1C]                    ; var_1C is some kind of struct sizeof 0x1C
    mov     word ptr [bx+0x10], ax
    push    bx
    push    word ptr [bp+y2_]
    push    word ptr [bp+x2_]
    push    word ptr [bp+y1_]
    push    word ptr [bp+x1_]
    call    far ptr draw_line_related
    add     sp, 0xa
    or      ax, ax
    jnz     LAB_2ea2_13f8
    lea     bx, [bp+var_1C]
    cmp     word ptr [bx+0xe], 0x0
    jle     LAB_2ea2_13f8
    push    bx
; NOP: Many sorts of lines 
; and frames (2D and 3D) 
; are missing.  
    call    far ptr putpixel_line1_maybe
    add     sp, 0x2
LAB_2ea2_13f8:
    mov     sp, bp
    pop     bp
    retf
preRender_line_asm_ endp

; void __cdecl16far add_exit_handler(void * func_cb)
add_exit_handler_asm_ proc far
    func_cb    = dword ptr   6

    push    bp
    mov     bp, sp
    mov     ax, word ptr [bp+func_cb]
    mov     cx, 0xa
    mov     bx, offset exitlistfuncs
    mov     dx, word ptr [bp+func_cb+2]
LAB_2ea2_140b:
    cmp     word ptr [bx], ax
    jnz     LAB_2ea2_1414
    cmp     word ptr [bx+0x2], dx
    jz      LAB_2ea2_1437
LAB_2ea2_1414:
    cmp     word ptr [bx+0x2], 0x0
    jz      LAB_2ea2_1428
    add     bx, 0x4
    loop    LAB_2ea2_140b
    mov     ax, offset aExitListOverflow
    push    ax
    call    far ptr fatal_error
LAB_2ea2_1428:
    mov     word ptr [bx+0x2], 0x0
    mov     word ptr [bx], ax
    mov     word ptr [bx+0x6], 0x0
    mov     word ptr [bx+0x2], dx
LAB_2ea2_1437:
    pop     bp
    retf
add_exit_handler_asm_ endp

; void __cdecl16far call_exitlist(void)
call_exitlist_asm_ proc far
    push    di
    mov     di, 0x28
LAB_2ea2_143d:
    mov     ax, word ptr [di+(exitlistfuncs+1*2)]
    or      ax, ax
    jz      LAB_2ea2_144b
    push    di
    call    dword ptr [di+exitlistfuncs]
    pop     di
LAB_2ea2_144b:
    sub     di, 0x4
    jl      LAB_2ea2_1452
    jmp     LAB_2ea2_143d
LAB_2ea2_1452:
    pop     di
    retf
call_exitlist_asm_ endp

; undefined2 __stdcall16near call_exitlist2(void)
call_exitlist2_asm_ proc near
    call    far ptr call_exitlist
    xor     ax, ax
    push    ax
    call    far ptr libsub_quit_to_dos_alt
call_exitlist2_asm_ endp
    db 0

; uint __cdecl16far file_paras(char * filename, int is_fatal)
file_paras_asm_ proc far
    var_fatal  = word ptr   -6
    var_length = word ptr   -4
    var_filehandle = word ptr   -2
    filename   = word ptr    6
    is_fatal   = word ptr    8

    push    bp
    mov     bp, sp
    sub     sp, 0x6
    push    ds
    push    si
    push    di
    mov     ax, word ptr [bp+is_fatal]
    mov     word ptr [bp+var_fatal], ax
    jmp     _file_paras
    db 0x90
file_paras_asm_ endp

; int __stdcall16near file_paras_nofatal(void)
file_paras_nofatal_asm_ proc near
    var_6      = word ptr   -6

    push    bp
    mov     bp, sp
    sub     sp, 0x6
    push    ds
    push    si
    push    di
    mov     word ptr [bp+var_6], 0x0
    jmp     _file_paras
file_paras_nofatal_asm_ endp
    db 0x90

; uint __stdcall16near file_paras_fatal(void)
file_paras_fatal_asm_ proc near
    var_fatal  = word ptr   -6

    push    bp
    mov     bp, sp
    sub     sp, 0x6
    push    ds
    push    si
    push    di
    mov     word ptr [bp+var_fatal], 0x1
file_paras_fatal_asm_ endp
_file_paras:
    mov     dx, word ptr [bp+filename]
    mov     ah, 0x3d
    xor     al, al
    int     0x21                               ; DOS - 2+ - OPEN DISK FILE WITH HANDLE
                                               ; DS:DX -> ASCIZ filename
                                               ; AL = access mode
                                               ; 0 - read
    jnc     LAB_2ea2_14bd
    cmp     word ptr [bp+var_fatal], 0x0
    jnz     LAB_2ea2_14ad
    xor     ax, ax
    pop     di
    pop     si
    pop     ds
    mov     sp, bp
    pop     bp
    retf
LAB_2ea2_14ad:
    mov     ax, offset aSFileError_1
    mov     bx, ss
    mov     ds, bx
    push    word ptr [bp+filename]
    push    ax
    call    far ptr fatal_error
LAB_2ea2_14bd:
    mov     word ptr [bp+var_filehandle], ax
    mov     bx, ax
    sub     cx, cx
    sub     dx, dx
    mov     ax, 0x4202
    int     0x21                               ; DOS - 2+ - MOVE FILE READ/WRITE POINTER (LSEEK)
                                               ; AL = method: offset from end of file
    push    dx
    push    ax
    sub     dx, dx
    mov     ax, 0x4200
    int     0x21                               ; DOS - 2+ - MOVE FILE READ/WRITE POINTER (LSEEK)
                                               ; AL = method: offset from beginning of file
    pop     ax
    pop     dx
    xor     bx, bx
    test    ax, 0xf
    jz      LAB_2ea2_14e0
    mov     bx, 0x1
LAB_2ea2_14e0:
    shr     dx, 0x1
    rcr     ax, 0x1
    shr     dx, 0x1
    rcr     ax, 0x1
    shr     dx, 0x1
    rcr     ax, 0x1
    shr     dx, 0x1
    rcr     ax, 0x1
    add     ax, bx
    mov     word ptr [bp+var_length], ax
    mov     bx, word ptr [bp+var_filehandle]
    mov     ah, 0x3e
    int     0x21                               ; DOS - 2+ - CLOSE A FILE WITH HANDLE
                                               ; BX = file handle
    mov     ax, word ptr [bp+var_length]
    pop     di
    pop     si
    pop     ds
    mov     sp, bp
    pop     bp
    retf

; uint __cdecl16far file_decomp_paras(char * filename, int is_fatal)
file_decomp_paras_asm_ proc far
    var_fatal  = word ptr   -8
    var_6      = byte ptr   -6
    var_5      = word ptr   -5
    var_filehandle = word ptr   -3
    filename   = word ptr    6
    is_fatal   = word ptr    8

    push    bp
    mov     bp, sp
    sub     sp, 0x8
    push    ds
    push    si
    push    di
    mov     ax, word ptr [bp+is_fatal]
    mov     word ptr [bp+var_fatal], ax
    jmp     _file_decomp_paras
    db 0x90
file_decomp_paras_asm_ endp

; int __stdcall16near file_decomp_paras_nofatal(void)
file_decomp_paras_nofatal_asm_ proc near
    var_fatal  = word ptr   -8

    push    bp
    mov     bp, sp
    sub     sp, 0x8
    push    ds
    push    si
    push    di
    mov     word ptr [bp+var_fatal], 0x0
    jmp     _file_decomp_paras
file_decomp_paras_nofatal_asm_ endp
    db 0x90

; uint __stdcall16near file_decomp_paras_fatal(void)
file_decomp_paras_fatal_asm_ proc near
    var_fatal  = word ptr   -8

    push    bp
    mov     bp, sp
    sub     sp, 0x8
    push    ds
    push    si
    push    di
    mov     word ptr [bp+var_fatal], 0x1
file_decomp_paras_fatal_asm_ endp
_file_decomp_paras:
    mov     dx, word ptr [bp+filename]
    mov     dx, word ptr [bp+filename]
    mov     ah, 0x3d
    xor     al, al
    int     0x21                               ; DOS - 2+ - OPEN DISK FILE WITH HANDLE
                                               ; DS:DX -> ASCIZ filename
                                               ; AL = access mode
                                               ; 0 - read
    jnc     LAB_2ea2_1548
    jmp     LAB_2ea2_1595
    db 0x90
LAB_2ea2_1548:
    mov     word ptr [bp+var_filehandle+1], ax
    mov     bx, word ptr [bp+var_filehandle+1]
    lea     dx, [bp+var_6]
    mov     cx, 0x4
    mov     ah, 0x3f
    int     0x21                               ; DOS - 2+ - READ FROM FILE WITH HANDLE
                                               ; BX = file handle, CX = number of bytes to read
                                               ; DS:DX -> buffer
    cmp     ax, cx
    jnz     LAB_2ea2_158e
    mov     bx, word ptr [bp+var_filehandle+1]
    mov     ah, 0x3e
    int     0x21                               ; DOS - 2+ - CLOSE A FILE WITH HANDLE
                                               ; BX = file handle
    mov     ax, word ptr [bp+var_5]
    mov     dx, word ptr [bp+var_filehandle]
    xor     dh, dh
    xor     bx, bx
    test    ax, 0xf
    jz      LAB_2ea2_1575
    mov     bx, 0x1
LAB_2ea2_1575:
    shr     dx, 0x1
    rcr     ax, 0x1
    shr     dx, 0x1
    rcr     ax, 0x1
    shr     dx, 0x1
    rcr     ax, 0x1
    shr     dx, 0x1
    rcr     ax, 0x1
    add     ax, bx
    pop     di
    pop     si
    pop     ds
    mov     sp, bp
    pop     bp
    retf
LAB_2ea2_158e:
    mov     bx, word ptr [bp+var_filehandle+1]
    mov     ah, 0x3e
    int     0x21                               ; DOS - 2+ - CLOSE A FILE WITH HANDLE
                                               ; BX = file handle
LAB_2ea2_1595:
    cmp     word ptr [bp+var_fatal], 0x0
    jnz     LAB_2ea2_15a4
    xor     ax, ax
    pop     di
    pop     si
    pop     ds
    mov     sp, bp
    pop     bp
    retf
LAB_2ea2_15a4:
    mov     ax, offset aSFileError_1
    mov     bx, ss
    mov     ds, bx
    push    word ptr [bp+filename]
    push    ax
    call    far ptr fatal_error

; char * __cdecl16far file_find(char * query)
file_find_asm_ proc far
    query      = word ptr    6

    push    bp
    mov     bp, sp
    push    ds
    push    si
    push    di
    mov     dx, offset dtatransbuffer
    mov     ah, 0x1a
    int     0x21                               ; DOS - SET DISK TRANSFER AREA ADDRESS
                                               ; DS:DX -> disk transfer buffer
    mov     dx, word ptr [bp+query]
    mov     cl, 0x6
    mov     ah, 0x4e
    int     0x21                               ; DOS - 2+ - FIND FIRST ASCIZ (FINDFIRST)
                                               ; CX = search attributes
                                               ; DS:DX -> ASCIZ filespec
                                               ; (drive, path, and wildcards allowed)
    jc      _file_find_err
    mov     di, offset foundfile
    mov     word ptr [foundfileptr], di
    mov     si, word ptr [bp+query]
    mov     cx, 0x57
    mov     ax, ds
    mov     es, ax
LAB_2ea2_15dd:
    lodsb
    stosb
    cmp     al, 0x0
caseD_2:
    jz      _file_find_ok
    cmp     al, 0x3a
    jz      LAB_2ea2_15eb
    cmp     al, 0x5c
    jnz     LAB_2ea2_15ef
LAB_2ea2_15eb:
    mov     word ptr [foundfileptr], di
LAB_2ea2_15ef:
    loop    LAB_2ea2_15dd
_file_find_ok:
    mov     ax, ds
    mov     es, ax
    mov     si, offset foundfilepath
    mov     di, word ptr [foundfileptr]
    mov     cx, 0xd
    cld
    rep movsb
    mov     ax, offset foundfile
LAB_2ea2_1605:
    pop     di
    pop     si
    pop     ds
    pop     bp
    retf
_file_find_err:
    xor     ax, ax
    jmp     LAB_2ea2_1605
file_find_asm_ endp

; char * __stdcall16near file_find_next(void)
file_find_next_asm_ proc near
    push    bp
    mov     bp, sp
    push    ds
    push    si
    push    di
    mov     dx, offset dtatransbuffer
    mov     ah, 0x1a
    int     0x21                               ; DOS - SET DISK TRANSFER AREA ADDRESS
                                               ; DS:DX -> disk transfer buffer
    mov     ah, 0x4f
    int     0x21                               ; DOS - 2+ - FIND NEXT ASCIZ (FINDNEXT)
                                               ; [DTA] = data block from
                                               ; last AH = 4Eh/4Fh call
    jc      _file_find_err
    jmp     _file_find_ok
file_find_next_asm_ endp
    db 0

; ******************************************************************************
; * dbg: fixedmult
; ******************************************************************************
;  
; Formely called scale_value. 
; Computes the product between the 
; two arguments and divides it by 
; 2^14 = 16384. 2^14 is a 
; normalization value for cosines 
; and sines given by sinetable.  

; short __cdecl16far multiply_and_scale(short a1, short a2)
multiply_and_scale_asm_ proc far
    a1         = word ptr    6
    a2         = word ptr    8

    push    bp
    mov     bp, sp
    mov     ax, word ptr [bp+a1]
    imul    word ptr [bp+a2]
    shl     ax, 0x1
    rcl     dx, 0x1
    shl     ax, 0x1
    rcl     dx, 0x1
    shl     ax, 0x1
    adc     dx, 0x0
    mov     ax, dx
    pop     bp
    retf
multiply_and_scale_asm_ endp

; void __cdecl16far video_set_mode4(void)
video_set_mode4_asm_ proc far
    push    di
    mov     byte ptr [byte_3F85A], 0x1
    mov     ax, 0x40
    mov     es, ax
    mov     ax, es:[0x10]
    and     ax, 0xffcf
    or      ax, 0x20
    mov     es:[0x10], ax
    mov     ah, 0x0
    mov     al, 0x4
    int     0x10                               ; - VIDEO - SET VIDEO MODE
                                               ; AL = mode
    mov     al, 0x3
    mov     dx, 0x3bf
    out     dx, al                             ; Printer Status Bits:
                                               ; 3: 0=printer signals an error
                                               ; 4: 1=printer is selected
                                               ; 5: 1=out of paper
                                               ; 6: 0=ready for next character
                                               ; 7: 0=busy or offline or error
    mov     al, 0x2
    mov     dx, 0x3b8
    out     dx, al
    mov     cx, 0xc
    mov     dx, 0x3b4
    xor     bx, bx
LAB_2ea2_1671:
    mov     al, bl
    out     dx, al                             ; Video: CRT cntrlr addr
                                               ; horizontal total
    inc     dx
    mov     al, byte ptr [bx+byte_3F85C]
    out     dx, al                             ; Video: CRT controller internal registers
    dec     dx
    inc     bx
    loop    LAB_2ea2_1671
    cld
    mov     ax, 0xb800
    mov     es, ax
    xor     di, di
    mov     cx, 0x4000
    xor     ax, ax
    rep stosw
    mov     al, 0x8a
    mov     dx, 0x3b8
    out     dx, al
    pop     di
    retf
video_set_mode4_asm_ endp
    db 0

; ******************************************************************************
; * dbg: inthypot
; ******************************************************************************

; int __cdecl16far int_hypot(int z_, int y_)
int_hypot_asm_ proc far
    z_         = word ptr    6
    y_         = word ptr    8

    push    bp
    mov     bp, sp
    push    word ptr [bp+y_]
    push    word ptr [bp+z_]
    call    far ptr int_atan2
    add     sp, 0x4
    or      ax, ax
    jge     LAB_2ea2_16ad
    neg     ax
LAB_2ea2_16ad:
    cmp     ax, 0x100
    jl      LAB_2ea2_16b7
    sub     ax, 0x200
    neg     ax
LAB_2ea2_16b7:
    cmp     ax, 0x80
    jg      LAB_2ea2_16de
    push    ax
    call    far ptr int_cos
    add     sp, 0x2
    mov     bx, ax
    mov     dx, word ptr [bp+y_]
    or      dx, dx
    jge     LAB_2ea2_16d0
    neg     dx
; All of this mess 
; is just to split 
; _x in two bytes 
; so that it can be 
; divided by the 
; cosine.  
LAB_2ea2_16d0:
    xor     ax, ax
    sar     dx, 0x1
    rcr     ax, 0x1
    sar     dx, 0x1
    rcr     ax, 0x1
    div     bx
    pop     bp
    retf
LAB_2ea2_16de:
    push    ax
    call    far ptr int_sin
    add     sp, 0x2
    mov     bx, ax
    mov     dx, word ptr [bp+z_]
    or      dx, dx
    jge     LAB_2ea2_16f2
    neg     dx
LAB_2ea2_16f2:
    xor     ax, ax
    sar     dx, 0x1
    rcr     ax, 0x1
    sar     dx, 0x1
    rcr     ax, 0x1
    div     bx
    pop     bp
    retf
int_hypot_asm_ endp

; void __cdecl16far video_set_mode7(void)
video_set_mode7_asm_ proc far
    push    di
    cmp     byte ptr [byte_3F85A], 0x0
    jnz     LAB_2ea2_170f
    call    far ptr set_bios_mode3
    pop     di
    retf
LAB_2ea2_170f:
    mov     ax, 0x40
    mov     es, ax
    mov     ax, es:[0x10]
    and     ax, 0xffcf
    or      ax, 0x30
    mov     es:[0x10], ax
    mov     al, 0x3
    mov     dx, 0x3bf
    out     dx, al                             ; Printer Status Bits:
                                               ; 3: 0=printer signals an error
                                               ; 4: 1=printer is selected
                                               ; 5: 1=out of paper
                                               ; 6: 0=ready for next character
                                               ; 7: 0=busy or offline or error
    mov     al, 0x20
    mov     dx, 0x3b8
    out     dx, al
    mov     cx, 0xc
    mov     dx, 0x3b4
    xor     bx, bx
LAB_2ea2_1736:
    mov     al, bl
    out     dx, al                             ; Video: CRT cntrlr addr
                                               ; horizontal total
    inc     dx
    mov     al, byte ptr [bx+byte_3F868]
    out     dx, al                             ; Video: CRT controller internal registers
    dec     dx
    inc     bx
    loop    LAB_2ea2_1736
    cld
    mov     ax, 0xb800
    mov     es, ax
    xor     di, di
    mov     cx, 0x4000
    xor     ax, ax
    rep stosw
    mov     al, 0x28
    mov     dx, 0x3b8
    out     dx, al
    mov     ah, 0x0
    mov     al, 0x7
    int     0x10                               ; - VIDEO - SET VIDEO MODE
                                               ; AL = mode
    pop     di
    retf
video_set_mode7_asm_ endp

; void __stdcall16near nopsub_30180(void)
nopsub_30180_asm_ proc near
    push    bp
    mov     bp, sp
    mov     dx, 0x2e9c
    mov     word ptr [word_3F884], 0x5
    mov     word ptr [word_3F886], 0x5
    mov     word ptr [word_3F882], 0x64
    mov     byte ptr [byte_3F880], 0x1
    jmp     LAB_2ea2_17dd
nopsub_30180_asm_ endp
    db 0x90

; void __cdecl16far timer_setup_interrupt(void)
timer_setup_interrupt_asm_ proc far
    push    bp
    mov     dx, 0x2e9c                         ; 11977. afaict this is used as freq-parameter, which gives
                                               ; 1193180 / 11977 = ca99.6 = ca 100 ??
    mov     word ptr [word_3F884], 0x5
    mov     word ptr [word_3F886], 0x5
    mov     byte ptr [byte_3F880], 0x0
    mov     byte ptr [byte_3F881], 0x1
    jmp     LAB_2ea2_17dd
    db 0x90
    push    bp
    mov     bp, sp
    mov     dx, 0x1
    xor     ax, ax
    idiv    word ptr [bp+0x6]
    mov     word ptr [word_3F884], ax
    mov     word ptr [word_3F886], ax
    mov     dx, word ptr [bp+0x6]
    mov     byte ptr [byte_3F880], 0x0
    mov     byte ptr [byte_3F881], 0x1
    jmp     LAB_2ea2_17dd
    db 0x90
    push    bp
    mov     bp, sp
    mov     dx, 0x1
    xor     ax, ax
    idiv    word ptr [bp+0x6]
    mov     word ptr [word_3F884], ax
    mov     word ptr [word_3F886], ax
    mov     dx, word ptr [bp+0x6]
    mov     word ptr [word_3F882], 0x64
    mov     byte ptr [byte_3F880], 0x1
LAB_2ea2_17dd:
    cli
    mov     byte ptr [byte_3F88C], 0x0
    mov     word ptr [timerintr], 0x0
    mov     word ptr [timerintr+2], 0x0
    sti
    in      al, 0x61                           ; PC/XT PPI port B bits:
                                               ; 0: Tmr 2 gate  OR 03H=spkr ON
                                               ; 1: Tmr 2 data   AND 0fcH=spkr OFF
                                               ; 3: 1=read high switches
                                               ; 4: 0=enable RAM parity checking
                                               ; 5: 0=enable I/O channel check
                                               ; 6: 0=hold keyboard clock low
                                               ; 7: 0=enable kbrd
    and     al, 0xfc
    out     0x61, al                           ; PC/XT PPI port B bits:
                                               ; 0: Tmr 2 gate  OR 03H=spkr ON
                                               ; 1: Tmr 2 data   AND 0fcH=spkr OFF
                                               ; 3: 1=read high switches
                                               ; 4: 0=enable RAM parity checking
                                               ; 5: 0=enable I/O channel check
                                               ; 6: 0=hold keyboard clock low
                                               ; 7: 0=enable kbrd
    mov     al, 0xb6
    out     0x43, al                           ; Timer 8253-5 (AT: 8254.2).
    in      al, 0x21                           ; Interrupt controller, 8259A.
    or      al, 0x3
    out     0x21, al                           ; Interrupt controller, 8259A.
    xor     ax, ax
    mov     es, ax
    cli
    mov     ax, es:[0x20]
    cmp     ax, 0x1909
    jz      LAB_2ea2_1811
    mov     word ptr [dword_3F874], ax
LAB_2ea2_1811:
    mov     ax, es:[0x22]
    mov     bx, cs
    cmp     ax, bx
    jz      LAB_2ea2_182a
    mov     word ptr [dword_3F874+2], ax
    mov     word ptr es:[0x20], offset timer_intr_callback
    mov     word ptr es:[0x22], cs
LAB_2ea2_182a:
    in      al, 0x21                           ; Interrupt controller, 8259A.
    and     al, 0xfc
    out     0x21, al                           ; Interrupt controller, 8259A.
    sti
    mov     al, dl
    out     0x40, al                           ; Timer 8253-5 (AT: 8254.2).
    mov     al, dh
    out     0x40, al                           ; Timer 8253-5 (AT: 8254.2).
    push    cs
    mov     ax, offset audio_stop_unk
    push    ax
    call    far ptr add_exit_handler
    add     sp, 0x4
    pop     bp
    retf
timer_setup_interrupt_asm_ endp

; void __cdecl16far audio_stop_unk(void)
audio_stop_unk_asm_ proc far
    xor     ax, ax
    mov     es, ax
    mov     ax, es:[0x22]
    mov     dx, cs
    cmp     ax, dx
    jz      LAB_2ea2_1857
    retf
LAB_2ea2_1857:
    mov     ax, es:[0x20]
    cmp     ax, 0x1909
    jz      LAB_2ea2_1861
    retf
LAB_2ea2_1861:
    in      al, 0x21                           ; Interrupt controller, 8259A.
    or      al, 0x3
    out     0x21, al                           ; Interrupt controller, 8259A.
    cli
    mov     ax, word ptr [dword_3F874]
    mov     es:[0x20], ax
    mov     ax, word ptr [dword_3F874+2]
    mov     es:[0x22], ax
    in      al, 0x21                           ; Interrupt controller, 8259A.
    and     al, 0xfc
    out     0x21, al                           ; Interrupt controller, 8259A.
    sti
    mov     al, 0x0
    out     0x40, al                           ; Timer 8253-5 (AT: 8254.2).
    out     0x40, al                           ; Timer 8253-5 (AT: 8254.2).
    in      al, 0x61                           ; PC/XT PPI port B bits:
                                               ; 0: Tmr 2 gate  OR 03H=spkr ON
                                               ; 1: Tmr 2 data   AND 0fcH=spkr OFF
                                               ; 3: 1=read high switches
                                               ; 4: 0=enable RAM parity checking
                                               ; 5: 0=enable I/O channel check
                                               ; 6: 0=hold keyboard clock low
                                               ; 7: 0=enable kbrd
    and     al, 0xfc
    out     0x61, al                           ; PC/XT PPI port B bits:
                                               ; 0: Tmr 2 gate  OR 03H=spkr ON
                                               ; 1: Tmr 2 data   AND 0fcH=spkr OFF
                                               ; 3: 1=read high switches
                                               ; 4: 0=enable RAM parity checking
                                               ; 5: 0=enable I/O channel check
                                               ; 6: 0=hold keyboard clock low
                                               ; 7: 0=enable kbrd
    retf
audio_stop_unk_asm_ endp

; void __cdecl16far timer_reg_callback(void * func_ptr)
timer_reg_callback_asm_ proc far
    func_ptr   = dword ptr   6

    push    bp
    mov     bp, sp
    mov     cx, 0x5
    mov     bx, offset timerintr
LAB_2ea2_1893:
    cmp     word ptr [bx+0x2], 0x0
    jz      LAB_2ea2_18a7
    add     bx, 0x4
    loop    LAB_2ea2_1893
    mov     ax, offset aNoRoomLeftOnTimerInterru
    push    ax
    call    far ptr fatal_error
LAB_2ea2_18a7:
    mov     ax, word ptr [bp+func_ptr]
    mov     word ptr [bx], ax
    mov     word ptr [bx+0x2], 0x0
    mov     ax, word ptr [bp+func_ptr+2]
    mov     word ptr [bx+0x2], ax
    mov     word ptr [bx+0x6], 0x0
    pop     bp
    retf
timer_reg_callback_asm_ endp

; undefined __cdecl16far timer_remove_callback(int param_1, int param_2)
timer_remove_callback_asm_ proc far
    param_1    = word ptr    6
    param_2    = word ptr    8

    push    bp
    mov     bp, sp
    mov     cx, 0x5
    mov     bx, offset timerintr
    mov     ax, word ptr [bp+param_1]
    mov     dx, word ptr [bp+param_2]
LAB_2ea2_18cd:
    cmp     word ptr [bx], ax
    jnz     LAB_2ea2_18d6
    cmp     word ptr [bx+0x2], dx
    jz      LAB_2ea2_18dd
LAB_2ea2_18d6:
    add     bx, 0x4
    loop    LAB_2ea2_18cd
    pop     bp
    retf
LAB_2ea2_18dd:
    cli
    dec     cx
    jz      LAB_2ea2_18f1
LAB_2ea2_18e1:
    mov     ax, word ptr [bx+0x4]
    mov     word ptr [bx], ax
    mov     ax, word ptr [bx+0x6]
    mov     word ptr [bx+0x2], ax
    add     bx, 0x4
    loop    LAB_2ea2_18e1
LAB_2ea2_18f1:
    mov     word ptr [bx], 0x0
    mov     word ptr [bx+0x2], 0x0
    sti
    pop     bp
    retf
timer_remove_callback_asm_ endp

; bool __cdecl16far compare_ds_ss(void)
compare_ds_ss_asm_ proc far
    xor     ax, ax
    mov     bx, ss
    mov     dx, ds
    cmp     bx, dx
    jnz     LAB_2ea2_1908
    inc     ax
LAB_2ea2_1908:
    retf
compare_ds_ss_asm_ endp

; undefined4 __stdcall16near timer_intr_callback(void)
timer_intr_callback_asm_ proc near
    cli
    push    ds
    push    es
    push    ax
    push    bx
    push    cx
    push    dx
    push    si
    push    di
    push    bp
; <REPLACE>
    mov     ax, seg dseg
; </REPLACE>
;    mov     ax, 0x3b77
    mov     ds, ax
    sti
    dec     word ptr [word_3F886]
    jg      LAB_2ea2_193c
    inc     word ptr [word_3F87C]
    jnz     LAB_2ea2_1929
    inc     word ptr [word_3F87E]
LAB_2ea2_1929:
    mov     ax, word ptr [word_3F884]
    mov     word ptr [word_3F886], ax
    cmp     byte ptr [byte_3F881], 0x0
    jz      LAB_2ea2_193c
    call    near ptr sub_303BA
    jmp     LAB_2ea2_1940
    db 0x90
LAB_2ea2_193c:
    mov     al, 0x20
    out     0x20, al                           ; Interrupt controller, 8259A.
LAB_2ea2_1940:
    cmp     byte ptr [word_3F88E], 0x0
    jnz     LAB_2ea2_1985
    inc     word ptr [timer_callback_counter]
    jnz     LAB_2ea2_1951
    inc     word ptr [timer_callback_counter+2]
LAB_2ea2_1951:
    xor     di, di
    cli
    cmp     byte ptr [byte_3F88C], 0x0
    jnz     LAB_2ea2_1972
    mov     byte ptr [byte_3F88C], 0x1
    sti
LAB_2ea2_1961:
    mov     ax, word ptr [di+timerintr+2]
    or      ax, ax
    jz      LAB_2ea2_1985
    call    dword ptr [di+timerintr]
    add     di, 0x4
    jmp     LAB_2ea2_1961
LAB_2ea2_1972:
    inc     word ptr [word_3F88A]
    mov     ax, word ptr [word_3F88A]
    cmp     word ptr [word_3F888], ax
    jge     LAB_2ea2_1990
    mov     word ptr [word_3F888], ax
    jmp     LAB_2ea2_1990
    db 0x90
LAB_2ea2_1985:
    mov     byte ptr [byte_3F88C], 0x0
    mov     word ptr [word_3F88A], 0x0
LAB_2ea2_1990:
    pop     bp
    pop     di
    pop     si
    pop     dx
    pop     cx
    pop     bx
    pop     ax
    pop     es
    pop     ds
    iret
timer_intr_callback_asm_ endp

; void __cdecl16near sub_303BA(void)
sub_303BA_asm_ proc near
    cmp     byte ptr [byte_3F880], 0x0
    jz      LAB_2ea2_19b1
    dec     word ptr [word_3F882]
    jg      LAB_2ea2_19b1
    mov     byte ptr [byte_3F880], 0x0
    mov     byte ptr [byte_3F881], 0x0
LAB_2ea2_19b1:
    pushf
    call    dword ptr [dword_3F874]
    ret
sub_303BA_asm_ endp
    db 0

; void __cdecl16far set_bios_mode3(void)
set_bios_mode3_asm_ proc far
    xor     ax, ax
    push    ax
    call    far ptr video_clear_color
    add     sp, 0x2
    mov     ax, 0x40
    mov     es, ax
    mov     ax, es:[0x10]
    and     ax, 0xffcf
    or      ax, 0x10
    mov     es:[0x10], ax
    mov     ah, 0x0
caseD_0:
    mov     al, 0x3
    int     0x10                               ; - VIDEO - SET VIDEO MODE
                                               ; AL = mode
    mov     ah, 0xb
    mov     bx, 0x0
    int     0x10                               ; - VIDEO - SET COLOR PALETTE
                                               ; BH = 00h, BL = border color
                                               ; BH = 01h, BL = palette (0-3)
    retf
set_bios_mode3_asm_ endp

; ******************************************************************************
; * dbg: interpretkey
; ******************************************************************************

; uint __cdecl16far kb_parse_key(uint keycode)
kb_parse_key_asm_ proc far
    keycode    = word ptr    6

    push    bp
    mov     bp, sp
    cli
    cmp     byte ptr [in_kb_parse_key], 0x0
    jz      LAB_2ea2_19f2
    sti
    pop     bp
    retf
LAB_2ea2_19f2:
    mov     byte ptr [in_kb_parse_key], 0x1
    sti
    mov     bx, word ptr [bp+keycode]
    or      bl, bl
    jz      LAB_2ea2_1a21
    and     bx, 0x7f
    mov     word ptr [bp+keycode], bx
    mov     bl, byte ptr [bx+callbackflags]
LAB_2ea2_1a09:
    dec     bx
    jl      LAB_2ea2_1a34
    shl     bx, 0x1
    push    di
    push    si
    shl     bx, 0x1
    call    dword ptr [bx+callbacks]
    pop     si
    pop     di
    xor     ax, ax
    mov     byte ptr [in_kb_parse_key], 0x0
    pop     bp
    retf
LAB_2ea2_1a21:
    mov     bl, bh
    xor     bh, bh
    cmp     bx, 0x84
    jl      LAB_2ea2_1a2e
    mov     bx, 0x84
LAB_2ea2_1a2e:
    mov     bl, byte ptr [bx+callbackflags2]
    jmp     LAB_2ea2_1a09
LAB_2ea2_1a34:
    mov     ax, word ptr [bp+keycode]
    mov     byte ptr [in_kb_parse_key], 0x0
    pop     bp
    retf
kb_parse_key_asm_ endp

; void __cdecl16far kb_reg_callback(uint keycode, void * func_cb)
kb_reg_callback_asm_ proc far
    keycode    = word ptr    6
    func_cb    = dword ptr  10

    push    bp
    mov     bp, sp
    mov     ax, word ptr [bp+0x8]
    mov     cx, 0x40
    mov     bx, offset callbacks
    mov     dx, word ptr [bp+func_cb]
LAB_2ea2_1a4d:
    cmp     word ptr [bx], ax
    jnz     LAB_2ea2_1a56
    cmp     word ptr [bx+0x2], dx
    jz      LAB_2ea2_1a68
LAB_2ea2_1a56:
    cmp     word ptr [bx+0x2], 0x0
    jz      LAB_2ea2_1a63
    add     bx, 0x4
    loop    LAB_2ea2_1a4d
    pop     bp
    retf
LAB_2ea2_1a63:
    mov     word ptr [bx], ax
    mov     word ptr [bx+0x2], dx
LAB_2ea2_1a68:
    mov     ax, 0x41
    sub     ax, cx
LAB_2ea2_1a6d:
    mov     bx, word ptr [bp+keycode]
    or      bl, bl
    jz      LAB_2ea2_1a7f
    cmp     bx, 0x7f
    jg      LAB_2ea2_1a7d
    mov     byte ptr [bx+callbackflags], al
LAB_2ea2_1a7d:
    pop     bp
    retf
LAB_2ea2_1a7f:
    mov     bl, bh
    xor     bh, bh
    cmp     bx, 0x84
    jg      LAB_2ea2_1a7d
    mov     byte ptr [bx+callbackflags2], al
    pop     bp
    retf
kb_reg_callback_asm_ endp

; undefined __stdcall16near nopsub_304AF(undefined2 param_1, uint param_2)
nopsub_304AF_asm_ proc near
    param_1    = word ptr    4
    param_2    = word ptr    6

    push    bp
    mov     bp, sp
    xor     ax, ax
    jmp     LAB_2ea2_1a6d
nopsub_304AF_asm_ endp

; uint __cdecl16far nopsub_304B6(void)
nopsub_304B6_asm_ proc far
    mov     ah, 0x1
    int     0x16                               ; KEYBOARD - CHECK BUFFER, DO NOT CLEAR
                                               ; Return: ZF clear if character in buffer
                                               ; AH = scan code, AL = character
                                               ; ZF set if no character in buffer
    jz      LAB_2ea2_1abb
    mov     ah, 0x0
    int     0x16                               ; KEYBOARD - READ CHAR FROM BUFFER, WAIT IF EMPTY
                                               ; Return: AH = scan code, AL = character
    or      al, al
    jz      LAB_2ea2_1aa6
caseD_9:
    xor     ah, ah
LAB_2ea2_1aa6:
    retf
    mov     ah, 0x1
    int     0x16                               ; KEYBOARD - CHECK BUFFER, DO NOT CLEAR
                                               ; Return: ZF clear if character in buffer
                                               ; AH = scan code, AL = character
                                               ; ZF set if no character in buffer
    jz      LAB_2ea2_1abb
    mov     ah, 0x0
    int     0x16                               ; KEYBOARD - READ CHAR FROM BUFFER, WAIT IF EMPTY
                                               ; Return: AH = scan code, AL = character
    push    ax
    call    far ptr kb_parse_key
    add     sp, 0x2
    retf
LAB_2ea2_1abb:
    call    far ptr get_joy_flags
    mov     bx, ax
    test    ax, 0x30
    jz      LAB_2ea2_1acd
    mov     ax, 0xd
    jmp     LAB_2ea2_1ad6
    db 0x90
LAB_2ea2_1acd:
    and     bx, 0xf
    shl     bx, 0x1
    mov     ax, word ptr [bx+0x4372]
LAB_2ea2_1ad6:
    cmp     ax, word ptr [word_3FB02]
    jnz     LAB_2ea2_1adf
LAB_2ea2_1adc:
    xor     ax, ax
    retf
LAB_2ea2_1adf:
    cmp     ax, word ptr [word_3FB04]
    jnz     LAB_2ea2_1aef
    dec     byte ptr [byte_3FB06]
    jg      LAB_2ea2_1adc
    mov     word ptr [word_3FB02], ax
    retf
LAB_2ea2_1aef:
    mov     byte ptr [byte_3FB06], 0x3
    mov     word ptr [word_3FB04], ax
    jmp     LAB_2ea2_1adc
nopsub_304B6_asm_ endp

; ******************************************************************************
; * dbg: normkeyi
; ******************************************************************************

; uint __cdecl16far kb_get_char(void)
kb_get_char_asm_ proc far
    mov     ah, 0x1
    int     0x16                               ; KEYBOARD - CHECK BUFFER, DO NOT CLEAR
                                               ; Return: ZF clear if character in buffer
                                               ; AH = scan code, AL = character
                                               ; ZF set if no character in buffer
    jnz     LAB_2ea2_1b02
    xor     ax, ax
    retf
LAB_2ea2_1b02:
    mov     bx, ss
    mov     cx, ds
    cmp     bx, cx
    jnz     LAB_2ea2_1b17
    mov     ah, 0x0
    int     0x16                               ; KEYBOARD - READ CHAR FROM BUFFER, WAIT IF EMPTY
                                               ; Return: AH = scan code, AL = character
    push    ax
    call    far ptr kb_parse_key
    add     sp, 0x2
LAB_2ea2_1b17:
    retf
kb_get_char_asm_ endp

; uint __cdecl16far get_kb_or_joy_flags(void)
get_kb_or_joy_flags_asm_ proc far
    xor     ax, ax
    xor     bx, bx
    mov     bl, byte ptr [kbscancodes]
    cmp     byte ptr [bx+kbinput], 0x0
    jz      LAB_2ea2_1b29
    or      al, 0x10
LAB_2ea2_1b29:
    mov     bl, byte ptr [(kbscancodes+1)]
    cmp     byte ptr [bx+kbinput], 0x0
    jz      LAB_2ea2_1b36
    or      al, 0x20
LAB_2ea2_1b36:
    mov     bl, byte ptr [(kbscancodes+2)]
    cmp     byte ptr [bx+kbinput], 0x0
    jz      LAB_2ea2_1b43
    or      al, 0x9
LAB_2ea2_1b43:
    mov     bl, byte ptr [(kbscancodes+3)]
    cmp     byte ptr [bx+kbinput], 0x0
    jz      LAB_2ea2_1b50
    or      al, 0x1
LAB_2ea2_1b50:
    mov     bl, byte ptr [(kbscancodes+4)]
    cmp     byte ptr [bx+kbinput], 0x0
    jz      LAB_2ea2_1b5d
    or      al, 0x5
LAB_2ea2_1b5d:
    mov     bl, byte ptr [(kbscancodes+5)]
    cmp     byte ptr [bx+kbinput], 0x0
    jz      LAB_2ea2_1b6a
    or      al, 0x4
LAB_2ea2_1b6a:
    mov     bl, byte ptr [(kbscancodes+6)]
    cmp     byte ptr [bx+kbinput], 0x0
    jz      LAB_2ea2_1b77
    or      al, 0x6
LAB_2ea2_1b77:
    mov     bl, byte ptr [(kbscancodes+7)]
    cmp     byte ptr [bx+kbinput], 0x0
    jz      LAB_2ea2_1b84
    or      al, 0x2
LAB_2ea2_1b84:
    mov     bl, byte ptr [(kbscancodes+8)]
    cmp     byte ptr [bx+kbinput], 0x0
    jz      LAB_2ea2_1b91
    or      al, 0xa
LAB_2ea2_1b91:
    mov     bl, byte ptr [(kbscancodes+9)]
    cmp     byte ptr [bx+kbinput], 0x0
    jz      LAB_2ea2_1b9e
    or      al, 0x8
LAB_2ea2_1b9e:
    or      ax, ax
    jnz     LAB_2ea2_1ba7
    call    far ptr get_joy_flags
LAB_2ea2_1ba7:
    retf
get_kb_or_joy_flags_asm_ endp

; byte __cdecl16far nopsub_305C8(void)
nopsub_305C8_asm_ proc far
    xor     cx, cx
    xor     bx, bx
    mov     bl, byte ptr [kbscancodes]
    cmp     byte ptr [bx+kbinput], 0x0
    jz      LAB_2ea2_1bba
    or      cl, 0x10
LAB_2ea2_1bba:
    mov     bl, byte ptr [(kbscancodes+1)]
    cmp     byte ptr [bx+kbinput], 0x0
    jz      LAB_2ea2_1bc8
    or      cl, 0x20
LAB_2ea2_1bc8:
    xor     ax, ax
    mov     dx, 0x201
    test    byte ptr [byte_3FE00], 0x1
    jz      LAB_2ea2_1bd9
    in      al, dx                             ; Game I/O port
                                               ; bits 0-3: Coordinates (resistive, time-dependent inputs)
                                               ; bits 4-7: Buttons/Triggers (digital inputs)
    not     al
    and     al, 0x30
LAB_2ea2_1bd9:
    or      ax, cx
    retf
nopsub_305C8_asm_ endp

; byte __cdecl16far get_joy_flags(void)
get_joy_flags_asm_ proc far
    test    byte ptr [byte_3FE00], 0x1
    jnz     LAB_2ea2_1be6
    xor     ax, ax
    retf
LAB_2ea2_1be6:
    mov     byte ptr [joyinput], 0x0
    mov     dx, 0x201
    in      al, dx                             ; Game I/O port
                                               ; bits 0-3: Coordinates (resistive, time-dependent inputs)
                                               ; bits 4-7: Buttons/Triggers (digital inputs)
    mov     byte ptr [joybutton], al
    mov     bl, 0x3
    mov     word ptr [joyflag1], 0x50
    mov     word ptr [joyflag2], 0x50
    cli
    out     dx, al                             ; Game I/O port
                                               ; bits 0-3: Coordinates (resistive, time-dependent inputs)
                                               ; bits 4-7: Buttons/Triggers (digital inputs)
    mov     cx, 0x14
LAB_2ea2_1c05:
    loop    LAB_2ea2_1c05
    mov     cx, 0x0
LAB_2ea2_1c0a:
    in      al, dx                             ; Game I/O port
                                               ; bits 0-3: Coordinates (resistive, time-dependent inputs)
                                               ; bits 4-7: Buttons/Triggers (digital inputs)
    and     al, bl
    xor     al, bl
    jnz     LAB_2ea2_1c1b
    inc     cx
    cmp     cx, 0xfa0
    jl      LAB_2ea2_1c0a
    jmp     LAB_2ea2_1c38
    db 0x90
LAB_2ea2_1c1b:
    test    al, 0x1
    jnz     LAB_2ea2_1c2f
LAB_2ea2_1c1f:
    test    al, 0x2
    jz      LAB_2ea2_1c0a
    mov     word ptr [joyflag2], cx
    and     bl, 0x1
    jnz     LAB_2ea2_1c0a
    jmp     LAB_2ea2_1c38
    db 0x90
LAB_2ea2_1c2f:
    mov     word ptr [joyflag1], cx
    and     bl, 0x2
    jnz     LAB_2ea2_1c1f
LAB_2ea2_1c38:
    sti
    mov     ax, word ptr [joyflag1]
    cmp     ax, word ptr [word_3FB18]
    jge     LAB_2ea2_1c91
    dec     word ptr [word_3FB20]
    jle     LAB_2ea2_1c54
    cmp     ax, word ptr [word_3FB1A]
    jl      LAB_2ea2_1cc5
    mov     word ptr [word_3FB1A], ax
    jmp     LAB_2ea2_1cc5
    db 0x90
LAB_2ea2_1c54:
    mov     bx, word ptr [word_3FB1A]
    mov     word ptr [word_3FB18], bx
    mov     bx, word ptr [word_3FB1C]
LAB_2ea2_1c60:
    sub     bx, word ptr [word_3FB18]
    jle     LAB_2ea2_1c70
    xor     dx, dx
    mov     ax, 0x4000
    div     bx
    mov     word ptr [word_3FB34], ax
LAB_2ea2_1c70:
    mov     ax, bx
    mov     dx, 0x201
    shr     ax, 0x1
    mov     bx, ax
    shr     bx, 0x1
    add     ax, word ptr [word_3FB18]
    add     ax, bx
    mov     word ptr [word_3FB24], ax
    sub     ax, bx
    sub     ax, bx
    mov     word ptr [word_3FB22], ax
    mov     ax, word ptr [joyflag1]
    jmp     LAB_2ea2_1cb3
    db 0x90
LAB_2ea2_1c91:
    cmp     ax, word ptr [word_3FB1C]
    jle     LAB_2ea2_1cb3
    dec     word ptr [word_3FB20]
    jle     LAB_2ea2_1ca9
    cmp     ax, word ptr [word_3FB1E]
    jge     LAB_2ea2_1cc5
    mov     word ptr [word_3FB1E], ax
    jmp     LAB_2ea2_1cc5
    db 0x90
LAB_2ea2_1ca9:
    mov     bx, word ptr [word_3FB1E]
    mov     word ptr [word_3FB1C], bx
    jmp     LAB_2ea2_1c60
LAB_2ea2_1cb3:
    mov     word ptr [word_3FB20], 0x14
    mov     word ptr [word_3FB1E], 0x4e20
    mov     word ptr [word_3FB1A], 0x0
LAB_2ea2_1cc5:
    cmp     ax, word ptr [word_3FB22]
    jl      LAB_2ea2_1d2e
    cmp     ax, word ptr [word_3FB24]
    jl      LAB_2ea2_1cd6
    or      byte ptr [joyinput], 0x4
LAB_2ea2_1cd6:
    mov     ax, word ptr [joyflag2]
    cmp     ax, word ptr [word_3FB26]
    jnc     LAB_2ea2_1d35
    dec     word ptr [word_3FB2E]
    jle     LAB_2ea2_1cf1
    cmp     ax, word ptr [word_3FB28]
    jl      LAB_2ea2_1d69
    mov     word ptr [word_3FB28], ax
    jmp     LAB_2ea2_1d69
    db 0x90
LAB_2ea2_1cf1:
    mov     bx, word ptr [word_3FB28]
    mov     word ptr [word_3FB26], bx
    mov     bx, word ptr [word_3FB2A]
LAB_2ea2_1cfd:
    sub     bx, word ptr [word_3FB26]
    jle     LAB_2ea2_1d0d
    xor     dx, dx
    mov     ax, 0x4000
    div     bx
    mov     word ptr [word_3FB36], ax
LAB_2ea2_1d0d:
    mov     ax, bx
    mov     dx, 0x201
    shr     ax, 0x1
    mov     bx, ax
    shr     bx, 0x1
    add     ax, word ptr [word_3FB26]
    add     ax, bx
    mov     word ptr [word_3FB32], ax
    sub     ax, bx
    sub     ax, bx
    mov     word ptr [word_3FB30], ax
    mov     ax, word ptr [joyflag2]
    jmp     LAB_2ea2_1d57
    db 0x90
LAB_2ea2_1d2e:
    or      byte ptr [joyinput], 0x8
    jmp     LAB_2ea2_1cd6
LAB_2ea2_1d35:
    cmp     ax, word ptr [word_3FB2A]
    jle     LAB_2ea2_1d57
    dec     word ptr [word_3FB2E]
    jz      LAB_2ea2_1d4d
    cmp     ax, word ptr [word_3FB2C]
    jge     LAB_2ea2_1d69
    mov     word ptr [word_3FB2C], ax
    jmp     LAB_2ea2_1d69
    db 0x90
LAB_2ea2_1d4d:
    mov     bx, word ptr [word_3FB2C]
    mov     word ptr [word_3FB2A], bx
    jmp     LAB_2ea2_1cfd
LAB_2ea2_1d57:
    mov     word ptr [word_3FB2E], 0x14
    mov     word ptr [word_3FB2C], 0x4e20
    mov     word ptr [word_3FB28], 0x0
LAB_2ea2_1d69:
    cmp     ax, word ptr [word_3FB30]
    jc      LAB_2ea2_1d8d
    cmp     ax, word ptr [word_3FB32]
    jc      LAB_2ea2_1d7a
    or      byte ptr [joyinput], 0x2
LAB_2ea2_1d7a:
    in      al, dx                             ; Game I/O port
                                               ; bits 0-3: Coordinates (resistive, time-dependent inputs)
                                               ; bits 4-7: Buttons/Triggers (digital inputs)
    and     al, byte ptr [joybutton]
    and     al, 0x30
    xor     al, 0x30
    or      byte ptr [joyinput], al
    mov     al, byte ptr [joyinput]
    xor     ah, ah
    retf
LAB_2ea2_1d8d:
    or      byte ptr [joyinput], 0x1
    jmp     LAB_2ea2_1d7a
get_joy_flags_asm_ endp

; void __cdecl16far sub_307B4(void)
sub_307B4_asm_ proc far
    mov     byte ptr [byte_3FE00], 0x1
    mov     word ptr [word_3FB18], 0x50
    mov     word ptr [word_3FB1C], 0x0
    mov     word ptr [word_3FB26], 0x50
    mov     word ptr [word_3FB2A], 0x0
    retf
sub_307B4_asm_ endp

; byte __cdecl16far sub_307D2(uint param_1)
sub_307D2_asm_ proc far
    param_1    = word ptr    6

    push    bp
    mov     bp, sp
    mov     bx, word ptr [bp+param_1]
    and     bx, 0xf
    mov     al, byte ptr [bx+byte_3FB38]
    xor     ah, ah
    pop     bp
    retf
sub_307D2_asm_ endp

; int __cdecl16far sub_307E3(void)
sub_307E3_asm_ proc far
    mov     ax, word ptr [joyflag1]
    sub     ax, word ptr [word_3FB18]
    jge     LAB_2ea2_1dce
    xor     ax, ax
LAB_2ea2_1dce:
    mul     word ptr [word_3FB34]
    mov     al, ah
    mov     ah, dl
    sub     ax, 0x1f
    retf
sub_307E3_asm_ endp

; int __cdecl16far nopsub_307FA(void)
nopsub_307FA_asm_ proc far
    mov     ax, word ptr [joyflag2]
    sub     ax, word ptr [word_3FB26]
    jge     LAB_2ea2_1de5
    xor     ax, ax
LAB_2ea2_1de5:
    mul     word ptr [word_3FB36]
    mov     al, ah
    mov     ah, dl
    sub     ax, 0x1f
    retf
nopsub_307FA_asm_ endp
    db 0

; void __cdecl16far kb_init_interrupt(void)
kb_init_interrupt_asm_ proc far
    push    di
    in      al, 0x21                           ; Interrupt controller, 8259A.
    mov     ah, al
    or      al, 0x3
    out     0x21, al                           ; Interrupt controller, 8259A.
    xor     bx, bx
    mov     es, bx
    mov     bx, word ptr es:[0x24]             ; 24h = func ofs for keyboard action
    cmp     bx, offset kb_int9_handler
    jz      LAB_2ea2_1e41
    mov     word ptr [old_kb_intr_ofs], bx
    mov     bx, word ptr es:[0x26]             ; 26h - func seg for keyboard action
    mov     word ptr [old_kb_intr_seg], bx
    mov     word ptr es:[0x24], offset kb_int9_handler
    mov     word ptr es:[0x26], cs
    mov     bx, word ptr es:[0x58]             ; 58h - func ofs for bios keyboard
    mov     word ptr [old_kb_intr_bios_ofs], bx
    mov     bx, word ptr es:[0x5a]             ; 5Ah - func seg for bios keyboard
    mov     word ptr [old_kb_intr_bios_seg], bx
    mov     word ptr es:[0x58], offset kb_int16_handler
    mov     word ptr es:[0x5a], cs
LAB_2ea2_1e41:
    mov     al, ah
    out     0x21, al                           ; Interrupt controller, 8259A.
    mov     ax, ds
    mov     es, ax
    mov     di, offset kbinput
    mov     cx, 0x5a
    xor     ax, ax
    cld
    rep stosb
    push    cs
    mov     ax, offset kb_exit_handler
    push    ax
    call    far ptr add_exit_handler
    add     sp, 0x4
    pop     di
    retf
kb_init_interrupt_asm_ endp

; byte __cdecl16far kb_exit_handler(void)
kb_exit_handler_asm_ proc far
    in      al, 0x21                           ; Interrupt controller, 8259A.
    mov     ah, al
    or      al, 0x3
    out     0x21, al                           ; Interrupt controller, 8259A.
    xor     bx, bx
    mov     es, bx
    mov     bx, word ptr [old_kb_intr_ofs]
    or      bx, bx
    jz      LAB_2ea2_1ea1
    mov     word ptr es:[0x24], bx
    mov     bx, word ptr [old_kb_intr_seg]
    mov     word ptr es:[0x26], bx
    mov     bx, word ptr [old_kb_intr_bios_ofs]
    mov     word ptr es:[0x58], bx
    mov     bx, word ptr [old_kb_intr_bios_seg]
    mov     word ptr es:[0x5a], bx
    mov     al, es:[0x417]
    and     al, 0xf0
    mov     es:[0x417], al
LAB_2ea2_1ea1:
    mov     al, ah
    out     0x21, al                           ; Interrupt controller, 8259A.
    retf
kb_exit_handler_asm_ endp

; void * __stdcall16near kb_int9_handler(void)
kb_int9_handler_asm_ proc near
    sti
    push    ax
    push    bx
    push    cx
    push    dx
    push    ds
; <REPLACE>
    mov     ax, seg dseg
; </REPLACE>
;    mov     ax, 0x3b77
    mov     ds, ax
    in      al, 0x60                           ; AT Keyboard controller 8042.
    push    ax
    in      al, 0x61                           ; PC/XT PPI port B bits:
                                               ; 0: Tmr 2 gate  OR 03H=spkr ON
                                               ; 1: Tmr 2 data   AND 0fcH=spkr OFF
                                               ; 3: 1=read high switches
                                               ; 4: 0=enable RAM parity checking
                                               ; 5: 0=enable I/O channel check
                                               ; 6: 0=hold keyboard clock low
                                               ; 7: 0=enable kbrd
    mov     ah, al
    or      al, 0x80
    out     0x61, al                           ; PC/XT PPI port B bits:
                                               ; 0: Tmr 2 gate  OR 03H=spkr ON
                                               ; 1: Tmr 2 data   AND 0fcH=spkr OFF
                                               ; 3: 1=read high switches
                                               ; 4: 0=enable RAM parity checking
                                               ; 5: 0=enable I/O channel check
                                               ; 6: 0=hold keyboard clock low
                                               ; 7: 0=enable kbrd
    xchg    al, ah
    out     0x61, al                           ; PC/XT PPI port B bits:
                                               ; 0: Tmr 2 gate  OR 03H=spkr ON
                                               ; 1: Tmr 2 data   AND 0fcH=spkr OFF
                                               ; 3: 1=read high switches
                                               ; 4: 0=enable RAM parity checking
                                               ; 5: 0=enable I/O channel check
                                               ; 6: 0=hold keyboard clock low
                                               ; 7: 0=enable kbrd
    pop     ax
    test    al, 0x80
    jz      LAB_2ea2_1ed4
    and     al, 0x7f
    jmp     near ptr LAB_2ea2_1f72             ; .. do some stuff, then end
LAB_2ea2_1eca:
    mov     al, 0x20
    out     0x20, al                           ; Interrupt controller, 8259A.
    pop     ds
    pop     dx
    pop     cx
    pop     bx
    pop     ax
    iret
LAB_2ea2_1ed4:
    xor     ah, ah
    mov     bx, ax
    cmp     bx, 0x5a                           ; keymaps are 91 bytes
    jc      LAB_2ea2_1edf
    xor     bx, bx
LAB_2ea2_1edf:
    mov     word ptr [kblastinput], bx
    mov     byte ptr [bx+kbinput], 0x1
    test    byte ptr [(kbinput+56)], 0x1
    jnz     LAB_2ea2_1f66                      ; test keymap5
    test    byte ptr [(kbinput+29)], 0x1
    jnz     LAB_2ea2_1f60                      ; test keymap4
    test    byte ptr [(kbinput+42)], 0x1
    jnz     LAB_2ea2_1f5a                      ; test keymap2
    test    byte ptr [(kbinput+54)], 0x1
    jnz     LAB_2ea2_1f5a                      ; test keymap2
    test    byte ptr [(kbinput+58)], 0x1
    jnz     LAB_2ea2_1f6c                      ; test keymap3
    mov     al, byte ptr [bx+keymap1]
LAB_2ea2_1f0f:
    test    al, 0x80
    jnz     LAB_2ea2_1f4c
    xor     ah, ah
LAB_2ea2_1f15:
    mov     bx, word ptr [kb_intr_data]
    cli
    mov     word ptr [bx+kb_intr_data_array], ax
    add     bx, 0x2
    cmp     bx, word ptr [kb_intr_data3]
    jc      LAB_2ea2_1f29
    xor     bx, bx
LAB_2ea2_1f29:
    mov     word ptr [kb_intr_data], bx
    mov     bx, word ptr [kb_intr_data4]
    add     bx, 0x2
    cmp     bx, word ptr [kb_intr_data3]
    jbe     LAB_2ea2_1f44
    mov     bx, word ptr [kb_intr_data3]
    mov     ax, word ptr [kb_intr_data]
    mov     word ptr [kb_intr_data2], ax
LAB_2ea2_1f44:
    mov     word ptr [kb_intr_data4], bx
    sti
    jmp     near ptr LAB_2ea2_1eca
LAB_2ea2_1f4c:
    mov     ah, al
    xor     al, al
    cmp     ah, 0x85
    jc      LAB_2ea2_1f58
    and     ah, 0x7f
LAB_2ea2_1f58:
    jmp     LAB_2ea2_1f15
LAB_2ea2_1f5a:
    mov     al, byte ptr [bx+keymap2]
    jmp     LAB_2ea2_1f0f
LAB_2ea2_1f60:
    mov     al, byte ptr [bx+keymap4]
    jmp     LAB_2ea2_1f0f
LAB_2ea2_1f66:
    mov     al, byte ptr [bx+keymap5]
    jmp     LAB_2ea2_1f0f
LAB_2ea2_1f6c:
    mov     al, byte ptr [bx+keymap3]
    jmp     LAB_2ea2_1f0f
LAB_2ea2_1f72:
    xor     ah, ah
    mov     bx, ax
    cmp     bx, 0x5a
    jc      LAB_2ea2_1f7d
    xor     bx, bx
LAB_2ea2_1f7d:
    mov     byte ptr [bx+kbinput], 0x0
    jmp     near ptr LAB_2ea2_1eca
kb_int9_handler_asm_ endp

; ******************************************************************************
; * Handles text input.
; ******************************************************************************

; void * __stdcall16far kb_int16_handler(void)
kb_int16_handler_asm_ proc far
    push    bx
    push    ds
; <REPLACE>
    mov     bx, seg dseg
; </REPLACE>
;    mov     bx, 0x3b77
    mov     ds, bx
    cmp     ah, 0x0
    jz      LAB_2ea2_1fa3
    cmp     ah, 0x1
    jz      LAB_2ea2_1fcf
    cmp     ah, 0x2
    jz      LAB_2ea2_1fe4
LAB_2ea2_1f9b:
    xor     ax, ax
LAB_2ea2_1f9d:
    sti
    pop     ds
    pop     bx
    retf    0x2
LAB_2ea2_1fa3:
    cli
    cmp     word ptr [kb_intr_data4], 0x0
    jz      LAB_2ea2_1f9b
    mov     bx, word ptr [kb_intr_data2]
    mov     ax, word ptr [bx+kb_intr_data_array]
    add     bx, 0x2
    cmp     bx, word ptr [kb_intr_data3]
    jc      LAB_2ea2_1fbe
    xor     bx, bx
LAB_2ea2_1fbe:
    mov     word ptr [kb_intr_data2], bx
    mov     bx, word ptr [kb_intr_data4]
    sub     bx, 0x2
    mov     word ptr [kb_intr_data4], bx
    jmp     LAB_2ea2_1f9d
LAB_2ea2_1fcf:
    cmp     word ptr [kb_intr_data4], 0x0
    jz      LAB_2ea2_1f9b
    sti
    mov     bx, word ptr [kb_intr_data2]
    mov     ax, word ptr [bx+kb_intr_data_array]
    pop     ds
    pop     bx
    retf    0x2
LAB_2ea2_1fe4:
    mov     al, byte ptr [(kbinput+42)]
    or      al, byte ptr [(kbinput+54)]
    jmp     LAB_2ea2_1f9d
kb_int16_handler_asm_ endp

; uint __cdecl16far kb_get_key_state(uint keycode)
kb_get_key_state_asm_ proc far
    keycode    = word ptr    6

    push    bp
    mov     bp, sp
    mov     bx, word ptr [bp+keycode]
    mov     al, byte ptr [bx+kbinput]
    xor     ah, ah
    pop     bp
    retf
kb_get_key_state_asm_ endp
    db 0

; uint __cdecl16far kb_call_readchar_callback(void)
kb_call_readchar_callback_asm_ proc far
    call    dword ptr [readchar_callback_ptr]
    retf
kb_call_readchar_callback_asm_ endp

; uint __cdecl16far kb_read_char(void)
kb_read_char_asm_ proc far
    mov     ah, 0x1
    int     0x16                               ; KEYBOARD - CHECK BUFFER, DO NOT CLEAR
                                               ; Return: ZF clear if character in buffer
                                               ; AH = scan code, AL = character
                                               ; ZF set if no character in buffer
    jnz     LAB_2ea2_200a
    xor     ax, ax
    retf
LAB_2ea2_200a:
    mov     ah, 0x0
    int     0x16                               ; KEYBOARD - READ CHAR FROM BUFFER, WAIT IF EMPTY
                                               ; Return: AH = scan code, AL = character
    or      al, al
    jz      LAB_2ea2_2014
    xor     ah, ah
LAB_2ea2_2014:
    retf
kb_read_char_asm_ endp

; uint __cdecl16far kb_checking(void)
kb_checking_asm_ proc far
    mov     ah, 0x1
    int     0x16                               ; KEYBOARD - CHECK BUFFER, DO NOT CLEAR
                                               ; Return: ZF clear if character in buffer
                                               ; AH = scan code, AL = character
                                               ; ZF set if no character in buffer
    jnz     LAB_2ea2_201d
    xor     ax, ax
LAB_2ea2_201d:
    or      al, al
    jz      LAB_2ea2_2023
    xor     ah, ah
LAB_2ea2_2023:
    retf
kb_checking_asm_ endp

; void __cdecl16far nopsub_kb_set_readchar_callback(void * funcptr)
nopsub_kb_set_readchar_callback_asm_ proc far
    funcptr    = dword ptr   6

    push    bp
    mov     bp, sp
    mov     ax, word ptr [bp+funcptr]
    mov     word ptr [readchar_callback_ptr], ax
    mov     ax, word ptr [bp+funcptr+2]
    mov     word ptr [readchar_callback_ptr+2], ax
    pop     bp
    retf
nopsub_kb_set_readchar_callback_asm_ endp

; undefined * __cdecl16far nopsub_kb_get_readchar_callback(void)
nopsub_kb_get_readchar_callback_asm_ proc far
    mov     ax, word ptr [readchar_callback_ptr]
    mov     dx, word ptr [readchar_callback_ptr+2]
    retf
nopsub_kb_get_readchar_callback_asm_ endp

; void __cdecl16far flush_stdin(void)
flush_stdin_asm_ proc far
    call    far ptr kb_call_readchar_callback
    cmp     ax, 0x0
    jz      flush_stdin
    retf
flush_stdin_asm_ endp

; uint __cdecl16far kb_check(void)
kb_check_asm_ proc far
    mov     ah, 0x1
    int     0x16                               ; KEYBOARD - CHECK BUFFER, DO NOT CLEAR
                                               ; Return: ZF clear if character in buffer
                                               ; AH = scan code, AL = character
                                               ; ZF set if no character in buffer
    jnz     LAB_2ea2_2051
    xor     ax, ax
    retf
LAB_2ea2_2051:
    mov     ah, 0x0
    int     0x16                               ; KEYBOARD - READ CHAR FROM BUFFER, WAIT IF EMPTY
                                               ; Return: AH = scan code, AL = character
    jmp     kb_check
kb_check_asm_ endp

; int __cdecl16far nopsub_30A77(void)
nopsub_30A77_asm_ proc far
    call    far ptr kb_call_readchar_callback
    cmp     ax, 0x0
    jnz     LAB_2ea2_2076
    call    far ptr timer_get_counter
    cmp     dx, word ptr [timer_copy_unk+2]
    jc      nopsub_30A77
    ja      LAB_2ea2_2074
    cmp     ax, word ptr [timer_copy_unk]
    jc      nopsub_30A77
LAB_2ea2_2074:
    xor     ax, ax
LAB_2ea2_2076:
    retf
nopsub_30A77_asm_ endp

; int __cdecl16far nopsub_30A97(uint param_1, int param_2)
nopsub_30A97_asm_ proc far
    var_4      = word ptr   -4
    var_2      = word ptr   -2
    param_1    = word ptr    6
    param_2    = word ptr    8

    push    bp
    mov     bp, sp
    sub     sp, 0x4
    call    far ptr timer_get_counter
    add     ax, word ptr [bp+param_1]
    adc     dx, word ptr [bp+param_2]
    mov     word ptr [bp+var_4], ax
    mov     word ptr [bp+var_2], dx
LAB_2ea2_208e:
    call    far ptr kb_call_readchar_callback
    cmp     ax, 0x0
    jnz     LAB_2ea2_20ab
    call    far ptr timer_get_counter
    cmp     dx, word ptr [bp+var_2]
    jc      LAB_2ea2_208e
    ja      LAB_2ea2_20a9
    cmp     ax, word ptr [bp+var_4]
    jc      LAB_2ea2_208e
LAB_2ea2_20a9:
    xor     ax, ax
LAB_2ea2_20ab:
    mov     sp, bp
    pop     bp
    retf
nopsub_30A97_asm_ endp
    db 0

; void * __stdcall16near file_read(char * filename, void * dst, int is_fatal)
file_read_asm_ proc near
    var_fatal  = word ptr   -8
    filename   = word ptr    4
    dst        = dword ptr   8
    is_fatal   = word ptr   12

    push    bp
    mov     bp, sp
    sub     sp, 0x8
    push    ds
    mov     ax, word ptr [bp+is_fatal]
    mov     word ptr [bp+var_fatal], ax
    jmp     _file_read
file_read_asm_ endp
    db 0x90

; void * __stdcall16near file_read_nofatal(char * filename, void * dst)
file_read_nofatal_asm_ proc near
    var_fatal  = word ptr   -8
    filename   = word ptr    4
    dst        = dword ptr   8

    push    bp
    mov     bp, sp
    sub     sp, 0x8
    push    ds
    mov     word ptr [bp+var_fatal], 0x0
    jmp     _file_read
file_read_nofatal_asm_ endp
    db 0x90

; void * __cdecl16far file_read_fatal(char * filename, void * dst)
file_read_fatal_asm_ proc far
    var_fatal  = word ptr   -8
    var_curseg = word ptr   -6
    var_curoff = word ptr   -4
    var_filehandle = word ptr   -2
    filename   = word ptr    6
    dst        = dword ptr   8

    push    bp
    mov     bp, sp
    sub     sp, 0x8
    push    ds
    mov     word ptr [bp+var_fatal], 0x1
_file_read:
    mov     ax, word ptr [bp+dst]
    mov     word ptr [bp+var_curoff], ax
    mov     ax, word ptr [bp+dst+2]
    mov     word ptr [bp+var_curseg], ax
    mov     dx, word ptr [bp+filename]
    xor     al, al
    mov     ah, 0x3d
    int     0x21                               ; DOS - 2+ - OPEN DISK FILE WITH HANDLE
                                               ; DS:DX -> ASCIZ filename
                                               ; AL = access mode
                                               ; 0 - read
    jc      error
    mov     word ptr [bp+var_filehandle], ax
readloop:
    mov     ds, word ptr [bp+var_curseg]
    mov     dx, word ptr [bp+var_curoff]
    mov     cx, 0x4000
    mov     bx, word ptr [bp+var_filehandle]
    mov     ah, 0x3f
    int     0x21                               ; DOS - 2+ - READ FROM FILE WITH HANDLE
                                               ; BX = file handle, CX = number of bytes to read
                                               ; DS:DX -> buffer
    jc      error
    add     word ptr [bp+var_curseg], 0x400
    cmp     ax, 0x4000
    jz      readloop
    mov     bx, word ptr [bp+var_filehandle]
    mov     ah, 0x3e
    int     0x21                               ; DOS - 2+ - CLOSE A FILE WITH HANDLE
                                               ; BX = file handle
    mov     ax, word ptr [bp+dst]
    mov     dx, word ptr [bp+dst+2]
    pop     ds
    mov     sp, bp
    pop     bp
    retf
error:
    cmp     word ptr [bp+var_fatal], 0x0
    jnz     fatal
    xor     ax, ax
    xor     dx, dx
    pop     ds
    mov     sp, bp
    pop     bp
    retf
fatal:
    mov     ax, offset aSFileError
    mov     bx, ss
    mov     ds, bx
    push    word ptr [bp+filename]
    push    ax
    call    far ptr fatal_error
file_read_fatal_asm_ endp

; ulong __cdecl16far file_decomp_rle(void * src, void * dst, uint decomp_paras)
file_decomp_rle_asm_ proc far
    var_lenlo  = word ptr  -26
    var_lenhi  = word ptr  -24
    var_16     = word ptr  -22
    var_14     = word ptr  -20
    var_esclen = word ptr  -18
    src        = dword ptr   6
    dst        = dword ptr  10
    decomp_paras = word ptr   14

    push    bp
    mov     bp, sp
    push    ds
    push    si
    push    di
    sub     sp, 0x116
    cld
    mov     ax, ds
    mov     es, ax
    mov     si, word ptr [bp+src]
    mov     ds, word ptr [bp+src+2]
    mov     ax, word ptr [si+0x1]
    mov     word ptr [bp+var_lenlo], ax
    mov     al, byte ptr [si+0x3]
    xor     ah, ah
    mov     word ptr [bp+var_lenhi], ax
    add     si, 0x4                            ; Skip header + unused byte
    mov     cx, 0x8
    lea     di, [bp+var_16]                    ; Read 8 words
    rep movsw
    mov     si, word ptr [bp+src]              ; Reset source pos
    add     si, 0x9
    mov     dx, word ptr [bp+var_esclen]
    and     dx, 0x7f                           ; Escape codes length mask
    add     si, dx
    mov     word ptr [bp+src], si              ; Skip escape codes
    cmp     byte ptr [bp+var_esclen], 0x80     ; Skip seq pass flag
    ja      skip_seq_pass
    call    near ptr file_decomp_rle_seq
    mov     word ptr [bp+var_16], ax
    mov     word ptr [bp+var_14], dx
    mov     si, ax                             ; paras = len / 16
    shr     dx, 0x1
    rcr     ax, 0x1
    shr     dx, 0x1
    rcr     ax, 0x1
    shr     dx, 0x1
    rcr     ax, 0x1
    shr     dx, 0x1
    rcr     ax, 0x1
    test    si, 0xf
    jz      no_remainder
    inc     ax
no_remainder:
    push    ax                                 ; paras
    mov     bx, word ptr [bp+decomp_paras]
    sub     bx, ax
    add     bx, word ptr [bp+dst+2]
    mov     word ptr [bp+src+2], bx
    push    bx
    push    word ptr [bp+dst+2]
    call    far ptr copy_paras_reverse
    add     sp, 0x6
    xor     si, si
    mov     word ptr [bp+src], si
skip_seq_pass:
    call    near ptr file_decomp_rle_single
    mov     ax, word ptr [bp+var_lenlo]        ; Return length
    mov     dx, word ptr [bp+var_lenhi]
    add     sp, 0x116
    pop     di
    pop     si
    pop     ds
    pop     bp
    retf
file_decomp_rle_asm_ endp

; ulong __cdecl16near file_decomp_rle_single(void)
file_decomp_rle_single_asm_ proc near
    mov     cx, 0x80
    lea     di, [bp+0xfee4]
    mov     ax, ss
    mov     es, ax
    mov     ds, ax
    xor     ax, ax
    rep stosw
    mov     cl, byte ptr [bp-0x12]
    and     cx, 0x7f
    lea     si, [bp-0x11]
    lea     di, [bp+0xfee4]
    xor     ax, ax
    xor     bh, bh
LAB_2ea2_21fa:
    inc     ax
    mov     bl, byte ptr [si]
    mov     byte ptr [bx+di], al
    inc     si
    loop    LAB_2ea2_21fa
    mov     ds, word ptr [bp+0x8]
    mov     si, word ptr [bp+0x6]
    mov     es, word ptr [bp+0xc]
    xor     di, di
    mov     dx, word ptr [bp-0x16]
    mov     ax, word ptr [bp-0x14]
    mov     word ptr [bp-0x1c], ax
LAB_2ea2_2216:
    cmp     si, 0x8000
    jbe     LAB_2ea2_221f
    jmp     LAB_2ea2_2293
    db 0x90
LAB_2ea2_221f:
    cmp     di, 0x8000
    jbe     LAB_2ea2_2228
    jmp     LAB_2ea2_22a1
    db 0x90
LAB_2ea2_2228:
    lodsb
    xor     ah, ah
    lea     bx, [bp+0xfee4]
    add     bx, ax
    mov     cl, byte ptr ss:[bx]
    test    cl, 0xff
    jnz     LAB_2ea2_2248
    stosb
    dec     dx
    jnz     LAB_2ea2_2216
    cmp     word ptr [bp-0x1c], 0x0
    jz      LAB_2ea2_226a
    dec     word ptr [bp-0x1c]
    jmp     LAB_2ea2_2216
LAB_2ea2_2248:
    xor     ch, ch
    cmp     cl, 0x1
    jz      LAB_2ea2_227a
    cmp     cl, 0x3
    jz      LAB_2ea2_2285
    dec     cx
    lodsb
    rep stosb
    sub     dx, 0x2
LAB_2ea2_225b:
    mov     ax, word ptr [bp-0x1c]
    sbb     ax, 0x0
    mov     word ptr [bp-0x1c], ax
    or      ax, dx
    jz      LAB_2ea2_226a
    jmp     LAB_2ea2_2216
LAB_2ea2_226a:
    mov     dx, es
    sub     dx, word ptr [bp+0xc]
    mov     ax, 0x10
    mul     dx
    add     ax, di
    adc     dx, 0x0
    ret
LAB_2ea2_227a:
    lodsb
    mov     cl, al
    lodsb
    rep stosb
    sub     dx, 0x3
    jmp     LAB_2ea2_225b
LAB_2ea2_2285:
    lodsb
    mov     cl, al
    lodsb
    mov     ch, al
    lodsb
    rep stosb
    sub     dx, 0x4
    jmp     LAB_2ea2_225b
LAB_2ea2_2293:
    sub     si, 0x8000
    mov     ax, ds
    add     ax, 0x800
    mov     ds, ax
    jmp     near ptr LAB_2ea2_221f
LAB_2ea2_22a1:
    sub     di, 0x8000
    mov     ax, es
    add     ax, 0x800
    mov     es, ax
    jmp     near ptr LAB_2ea2_2228
file_decomp_rle_single_asm_ endp

; ulong __cdecl16near file_decomp_rle_seq(void)
file_decomp_rle_seq_asm_ proc near
    cmp     byte ptr [bp-0x12], 0x1            ; file_decomp_rle::var_esclen
    jnz     has_codes
    ret
has_codes:
    mov     ds, word ptr [bp+0x8]              ; file_decomp_rle::arg_srcseg
    mov     si, word ptr [bp+0x6]              ; file_decomp_rle::arg_srcoff
    mov     es, word ptr [bp+0xc]              ; file_decomp_rle::var_dstoff
    xor     di, di
    mov     bx, word ptr [bp-0x16]
    mov     ax, word ptr [bp-0x14]
    mov     word ptr [bp-0x1c], ax
    mov     ah, byte ptr [bp-0x10]
LAB_2ea2_22cd:
    cmp     si, 0x8000
    ja      LAB_2ea2_22ed
LAB_2ea2_22d3:
    cmp     di, 0x8000
    ja      LAB_2ea2_22fb
LAB_2ea2_22d9:
    lodsb
    cmp     al, ah
    jz      LAB_2ea2_2319
    stosb
    dec     bx
    jnz     LAB_2ea2_22cd
    cmp     word ptr [bp-0x1c], 0x0
    jz      LAB_2ea2_2309
    dec     word ptr [bp-0x1c]
    jmp     LAB_2ea2_22cd
LAB_2ea2_22ed:
    sub     si, 0x8000
    mov     dx, ds
    add     dx, 0x800
    mov     ds, dx
    jmp     LAB_2ea2_22d3
LAB_2ea2_22fb:
    sub     di, 0x8000
    mov     dx, es
    add     dx, 0x800
    mov     es, dx
    jmp     LAB_2ea2_22d9
LAB_2ea2_2309:
    mov     dx, es
    sub     dx, word ptr [bp+0xc]
    mov     ax, 0x10
    mul     dx
    add     ax, di
    adc     dx, 0x0
    ret
LAB_2ea2_2319:
    mov     dx, di
LAB_2ea2_231b:
    lodsb
    cmp     al, ah
    jz      LAB_2ea2_2329
    stosb
    dec     bx
    jnz     LAB_2ea2_231b
    dec     word ptr [bp-0x1c]
    jmp     LAB_2ea2_231b
LAB_2ea2_2329:
    lodsb
    push    si
    push    ds
    mov     cx, es
    mov     ds, cx
    mov     si, dx
    mov     cx, di
    sub     cx, dx
    mov     dl, al
    dec     dl
LAB_2ea2_233a:
    push    cx
    push    si
    push    ds
    rep movsb
    pop     ds
    pop     si
    pop     cx
    dec     dl
    jnz     LAB_2ea2_233a
    pop     ds
    pop     si
    sub     bx, 0x3
    sbb     word ptr [bp-0x1c], 0x0
    mov     dx, word ptr [bp-0x1c]
    or      dx, bx
    jz      LAB_2ea2_2309
    jmp     near ptr LAB_2ea2_22cd
file_decomp_rle_seq_asm_ endp

; void * __cdecl16far file_load_binary(char * filename, int is_fatal)
file_load_binary_asm_ proc far
    var_fatal  = word ptr   -2
    filename   = word ptr    8
    is_fatal   = word ptr   10

    push    bp
    mov     bp, sp
    sub     sp, 0x2
    mov     ax, word ptr [bp+filename]
    mov     word ptr [bp+var_fatal], ax
    jmp     _file_load_binary
file_load_binary_asm_ endp
    db 0x90

; void * __cdecl16far file_load_binary_nofatal(char * filename)
file_load_binary_nofatal_asm_ proc far
    var_fatal  = word ptr   -2
    filename   = word ptr    6

    push    bp
    mov     bp, sp
    sub     sp, 0x2
    mov     word ptr [bp+var_fatal], 0x0
    jmp     _file_load_binary
    db 0x90
    push    bp
    mov     bp, sp
    sub     sp, 0x2
    mov     word ptr [bp-0x2], 0x1
_file_load_binary:
    push    word ptr [bp+filename]
    call    far ptr mmgr_get_chunk_by_name
    add     sp, 0x2
    or      dx, dx
    jnz     LAB_2ea2_23be
    push    word ptr [bp+var_fatal]
    push    word ptr [bp+filename]
    call    far ptr file_paras
    add     sp, 0x4
    or      ax, ax
    jz      emptyfile
    push    ax
    push    word ptr [bp+filename]
    call    far ptr mmgr_alloc_pages
    add     sp, 0x4
    push    word ptr [bp+var_fatal]
    push    dx
    push    ax
    push    word ptr [bp+filename]
    call    far ptr file_read
    add     sp, 0x8
LAB_2ea2_23be:
    mov     sp, bp
    pop     bp
    retf
emptyfile:
    xor     dx, dx
    jmp     LAB_2ea2_23be
file_load_binary_nofatal_asm_ endp

; void * __stdcall16near file_decomp(char * filename, int is_fatal)
file_decomp_asm_ proc near
    var_fatal  = word ptr  -12
    filename   = word ptr    4
    is_fatal   = word ptr    6

    push    bp
    mov     bp, sp
    sub     sp, 0xc
    push    si
    push    di
    mov     ax, word ptr [bp+0x8]
    mov     word ptr [bp+var_fatal], ax
    jmp     _file_decomp
file_decomp_asm_ endp
    db 0x90

; void * __stdcall16near file_decomp_nofatal(char * filename)
file_decomp_nofatal_asm_ proc near
    var_fatal  = word ptr  -12
    filename   = word ptr    4

    push    bp
    mov     bp, sp
    sub     sp, 0xc
    push    si
    push    di
    mov     word ptr [bp+var_fatal], 0x0
    jmp     _file_decomp
file_decomp_nofatal_asm_ endp
    db 0x90

; void * __cdecl16far file_decomp_fatal(char * filename)
file_decomp_fatal_asm_ proc far
    var_fatal  = word ptr  -12
    var_nextsrcseg = word ptr  -10
    var_passes = word ptr   -8
    var_decomp_paras = word ptr   -6
    var_dstseg = word ptr   -4
    var_dstoff = word ptr   -2
    filename   = word ptr    6

    push    bp
    mov     bp, sp
    sub     sp, 0xc
    push    si
    push    di
    mov     word ptr [bp+var_fatal], 0x1
_file_decomp:
    push    word ptr [bp+filename]
    call    far ptr mmgr_get_chunk_by_name
    add     sp, 0x2
    or      dx, dx
    jz      fd_not_found
    pop     di
    pop     si
    mov     sp, bp
    pop     bp
    retf
LAB_2ea2_2409:
    jmp     near ptr LAB_2ea2_24ef
fd_not_found:
    push    word ptr [bp+var_fatal]
    push    word ptr [bp+filename]
    call    far ptr file_decomp_paras
    add     sp, 0x4
    or      ax, ax
    jz      LAB_2ea2_2409
    add     ax, 0x4
    mov     word ptr [bp+var_decomp_paras], ax
    push    ax
    push    word ptr [bp+filename]
    call    far ptr mmgr_alloc_pages
    add     sp, 0x4
    mov     word ptr [bp+var_dstoff], ax
    mov     word ptr [bp+var_dstseg], dx
    push    word ptr [bp+var_fatal]
    push    word ptr [bp+filename]
    call    far ptr file_paras
    add     sp, 0x4
    or      ax, ax
    jz      LAB_2ea2_2409
    mov     dx, word ptr [bp+var_decomp_paras]
    sub     dx, ax
    add     dx, word ptr [bp+var_dstseg]
    push    word ptr [bp+var_fatal]
    push    dx
    push    word ptr [bp+var_dstoff]
    push    word ptr [bp+filename]
    call    far ptr file_read
    add     sp, 0x8
    or      dx, dx
    jz      LAB_2ea2_2409
    mov     word ptr [bp+var_passes], 0x1
    mov     ds, dx
    mov     si, ax
    mov     al, byte ptr [si]
    test    al, 0x80
    jz      decompress_subfile
    and     ax, 0x7f
    mov     word ptr [bp+var_passes], ax
    add     si, 0x4
decompress_subfile:
    push    word ptr [bp+var_decomp_paras]
    push    word ptr [bp+var_dstseg]
    push    word ptr [bp+var_dstoff]
    push    ds
    mov     bl, byte ptr [si]
    dec     bl
    jl      LAB_2ea2_24ec
    cmp     bl, 0x2
    jge     LAB_2ea2_24ec
    push    si
    xor     bh, bh
    shl     bx, 0x1
; <REPLACE>
    mov     ax, seg dseg
; </REPLACE>
;    mov     ax, 0x3b77
    mov     ds, ax
    shl     bx, 0x1
    call    dword ptr cs:[bx+off_compression_type]
    add     sp, 0xa
    dec     word ptr [bp+var_passes]
    jle     fd_done
    mov     si, ax
    shr     dx, 0x1
    rcr     ax, 0x1
    shr     dx, 0x1
    rcr     ax, 0x1
    shr     dx, 0x1
    rcr     ax, 0x1
    shr     dx, 0x1
    rcr     ax, 0x1
    test    si, 0xf
    jz      LAB_2ea2_24c5
    inc     ax
LAB_2ea2_24c5:
    push    ax
    mov     bx, word ptr [bp+var_decomp_paras]
    sub     bx, ax
    add     bx, word ptr [bp+var_dstseg]
    mov     word ptr [bp+var_nextsrcseg], bx
    push    bx
    push    word ptr [bp+var_dstseg]
    call    far ptr copy_paras_reverse
    add     sp, 0x6
    mov     ds, word ptr [bp+var_nextsrcseg]
    xor     si, si
    jmp     decompress_subfile
off_compression_type:
    dd seg012:file_decomp_rle
    dd seg012:file_decomp_vle
LAB_2ea2_24ec:
    add     sp, 0x8
LAB_2ea2_24ef:
    cmp     word ptr [bp+var_fatal], 0x0
    jnz     LAB_2ea2_24ff
    xor     ax, ax
    xor     dx, dx
    pop     di
    pop     si
    mov     sp, bp
    pop     bp
    retf
LAB_2ea2_24ff:
    mov     bx, ss
    mov     ds, bx
    push    word ptr [bp+filename]
    mov     ax, offset aSInvalidPackTy
    push    ax
    call    far ptr fatal_error
fd_done:
    mov     ax, word ptr [bp+var_decomp_paras]
    sub     ax, 0x4
    push    ax
    push    word ptr [bp+var_dstseg]
    push    word ptr [bp+var_dstoff]
    call    far ptr mmgr_resize_memory
    add     sp, 0x6
    mov     ax, word ptr [bp+var_dstoff]
    mov     dx, word ptr [bp+var_dstseg]
    pop     di
    pop     si
    mov     sp, bp
    pop     bp
    retf
file_decomp_fatal_asm_ endp
    push    bp
    mov     bp, sp
    sub     sp, 0xc
    push    si
    push    di
    mov     ax, word ptr [bp+0xc]
    mov     word ptr [bp-0xc], ax
    jmp     LAB_2ea2_255e
    db 0x90
    push    bp
    mov     bp, sp
    sub     sp, 0xc
    push    si
    push    di
    mov     word ptr [bp-0xc], 0x0
    jmp     LAB_2ea2_255e
    db 0x90
    push    bp
    mov     bp, sp
    sub     sp, 0xc
    push    si
switchdataD_3000_0f78:
    push    di
    mov     word ptr [bp-0xc], 0x1
LAB_2ea2_255e:
    push    word ptr [bp-0xc]
    push    word ptr [bp+0x6]
    call    far ptr file_decomp_fatal
    add     sp, 0x4
    pop     di
    pop     si
    mov     sp, bp
    pop     bp
    retf

; void * __stdcall16near locate_shape_nofatal(void * data, char * name_)
locate_shape_nofatal_asm_ proc near
    data       = dword ptr   4
    name_      = word ptr    8

    push    bp
    mov     bp, sp
    push    ds
    push    si
    push    di
    xor     dx, dx
    jmp     _alt_locate_resource
locate_shape_nofatal_asm_ endp
    db 0x90

; void * __stdcall16near locate_shape_fatal(void * data, char * name_)
locate_shape_fatal_asm_ proc near
    data       = dword ptr   4
    name_      = word ptr    8

    push    bp
    mov     bp, sp
    push    ds
    push    si
    push    di
    mov     dx, 0x1
    jmp     _alt_locate_resource
locate_shape_fatal_asm_ endp
    db 0x90

; void * __cdecl16far locate_sound_fatal(void * data, char * name_)
locate_sound_fatal_asm_ proc far
    data       = dword ptr   6
    name_      = word ptr   10

    push    bp
    mov     bp, sp
    push    ds
    push    si
    push    di
    mov     dx, 0x2
_alt_locate_resource:
    cld
    mov     ds, word ptr [bp+data+2]
    mov     si, word ptr [bp+data]
; <REPLACE>
    mov     ax, seg dseg
; </REPLACE>
;    mov     ax, 0x3b77
    mov     es, ax
    mov     di, word ptr [bp+name_]
    mov     cx, 0x4
    mov     bx, 0x0
LAB_2ea2_25a7:
    cmp     byte ptr es:[bx+di], 0x0
    jz      LAB_2ea2_2604
    inc     bx
    loop    LAB_2ea2_25a7
LAB_2ea2_25b0:
    mov     ax, word ptr [si+0x4]
    or      ax, ax
    jz      _end_of_locate
    add     si, 0x6
    mov     bx, si
LAB_2ea2_25bc:
    mov     si, bx
    mov     di, word ptr [bp+name_]
    mov     cx, 0x4
LAB_2ea2_25c4:
    cmpsb
    jnz     LAB_2ea2_25cc
    loop    LAB_2ea2_25c4
    jmp     _found_resource
    db 0x90
LAB_2ea2_25cc:
    cmp     byte ptr [si-0x1], 0x0
    jnz     LAB_2ea2_25d9
    cmp     byte ptr es:[di-0x1], 0x20
    jz      _found_resource
LAB_2ea2_25d9:
    add     bx, 0x4
    dec     ax
    jge     LAB_2ea2_25bc
_end_of_locate:
    cmp     dx, 0x1
    jl      LAB_2ea2_25ff
    jg      LAB_2ea2_25ec
    mov     dx, offset aLocateshape4_4sShapeNotF
    jmp     LAB_2ea2_25ef
    db 0x90
LAB_2ea2_25ec:
    mov     dx, offset aLocatesound4_4sSoundNotF
LAB_2ea2_25ef:
; <REPLACE>
    mov     ax, seg dseg
; </REPLACE>
;    mov     ax, 0x3b77
    mov     ds, ax
    push    word ptr [bp+name_]
    push    dx
    call    far ptr fatal_error
    db 0xCD
    db 0x20
LAB_2ea2_25ff:
    xor     ax, ax
    jmp     LAB_2ea2_2655
    db 0x90
LAB_2ea2_2604:
    mov     byte ptr es:[bx+di], 0x20
    inc     bx
    loop    LAB_2ea2_2604
    jmp     LAB_2ea2_25b0
_found_resource:
    mov     si, word ptr [bp+data]
    mov     ax, word ptr [si+0x4]
    shl     ax, 0x1
    shl     ax, 0x1
    add     bx, ax
    shl     ax, 0x1
    add     ax, 0x6
    mov     cx, ds
    xor     dx, dx
    shl     cx, 0x1
caseD_df:
    rcl     dx, 0x1
    shl     cx, 0x1
    rcl     dx, 0x1
    shl     cx, 0x1
    rcl     dx, 0x1
    shl     cx, 0x1
    rcl     dx, 0x1
    add     ax, cx
    adc     dx, 0x0
    add     ax, word ptr [bx]
    adc     dx, word ptr [bx+0x2]
    mov     bx, ax
    and     bx, 0xf
    shr     dx, 0x1
    rcr     ax, 0x1
    shr     dx, 0x1
    rcr     ax, 0x1
    shr     dx, 0x1
    rcr     ax, 0x1
    shr     dx, 0x1
    rcr     ax, 0x1
    mov     dx, ax
    mov     ax, bx
LAB_2ea2_2655:
    pop     di
    pop     si
    pop     ds
    pop     bp
    retf
locate_sound_fatal_asm_ endp

; void __cdecl16far mmgr_alloc_resmem(uint size_)
mmgr_alloc_resmem_asm_ proc far
    size_      = word ptr    6

    push    bp
    mov     bp, sp
    push    si
    push    di
    mov     ax, 0x3000
    int     0x21                               ; DOS - GET DOS VERSION
                                               ; Return: AL = major version number (00h for DOS 1.x)
    mov     bx, cs
    cmp     al, 0x3
    jl      LAB_2ea2_266e
    mov     ah, 0x62
    int     0x21                               ; DOS - 3+ - GET PSP ADDRESS
LAB_2ea2_266e:
    mov     word ptr [pspofs], bx
    mov     word ptr [pspseg], ds
    cmp     word ptr [mem_last_para], 0x0
    jnz     LAB_2ea2_26ad
    mov     bx, 0x64
    mov     ah, 0x48
    int     0x21                               ; DOS - 2+ - ALLOCATE MEMORY
                                               ; BX = number of 16-byte paragraphs desired
    mov     si, word ptr [resptr1]
    mov     word ptr [si+0xe], ax
    mov     word ptr [mem_first_para], ax
    mov     es, ax
    mov     bx, word ptr [bp+size_]
    sub     bx, word ptr [si+0xe]
    mov     ah, 0x4a
    int     0x21                               ; DOS - 2+ - ADJUST MEMORY BLOCK SIZE (SETBLOCK)
                                               ; ES = segment address of block to change
                                               ; BX = new size in paragraphs
    mov     ah, 0x4a
    int     0x21                               ; DOS - 2+ - ADJUST MEMORY BLOCK SIZE (SETBLOCK)
                                               ; ES = segment address of block to change
                                               ; BX = new size in paragraphs
    mov     ax, word ptr [mem_first_para]
    add     ax, bx
    mov     si, word ptr [resendptr2]
    mov     word ptr [si+0xe], ax
    mov     word ptr [mem_last_para], ax
LAB_2ea2_26ad:
    mov     si, word ptr [resendptr2]
    mov     word ptr [resendptr1], si
    mov     si, word ptr [resptr1]
    mov     word ptr [resptr2], si
LAB_2ea2_26bd:
    add     si, 0x12
    cmp     si, word ptr [resendptr2]
    jz      LAB_2ea2_26cd
    mov     word ptr [si+0x10], 0x0
    jmp     LAB_2ea2_26bd
LAB_2ea2_26cd:
    pop     di
    pop     si
    pop     bp
    retf
mmgr_alloc_resmem_asm_ endp

; void __cdecl16far mmgr_alloc_a000(void)
mmgr_alloc_a000_asm_ proc far
    mov     ax, 0xa000
    push    ax
    call    far ptr mmgr_alloc_resmem
    add     sp, 0x2
    retf
mmgr_alloc_a000_asm_ endp

; undefined __cdecl16far nopsub_310FE(int param_1)
nopsub_310FE_asm_ proc far
    param_1    = word ptr    6

    push    bp
    mov     bp, sp
    mov     ax, 0xa000
    push    ax
    call    far ptr mmgr_alloc_resmem
    add     sp, 0x2
    mov     ax, word ptr [bp+param_1]
    mov     bx, word ptr [resendptr2]
    sub     word ptr [bx+0xe], ax
    sub     word ptr [mem_last_para], ax
    pop     bp
    retf
nopsub_310FE_asm_ endp

; undefined __stdcall16near nopsub_3111D(undefined2 param_1, int param_2)
nopsub_3111D_asm_ proc near
    param_1    = word ptr    4
    param_2    = word ptr    6

    push    bp
    mov     bp, sp
    push    si
    push    di
    mov     word ptr [pspofs], cs
    mov     word ptr [pspseg], ds
    cmp     word ptr [mem_last_para], 0x0
    jnz     LAB_2ea2_26ad
    mov     bx, word ptr [bp+param_2]
    mov     ah, 0x48
    int     0x21                               ; DOS - 2+ - ALLOCATE MEMORY
                                               ; BX = number of 16-byte paragraphs desired
    jnc     LAB_2ea2_271e
    mov     ah, 0x48
    int     0x21                               ; DOS - 2+ - ALLOCATE MEMORY
                                               ; BX = number of 16-byte paragraphs desired
LAB_2ea2_271e:
    mov     si, word ptr [resptr1]
    mov     word ptr [si+0xe], ax
    mov     word ptr [mem_first_para], ax
    add     ax, bx
    mov     si, word ptr [resendptr2]
    mov     word ptr [si+0xe], ax
    mov     word ptr [mem_last_para], ax
    jmp     near ptr LAB_2ea2_26ad
nopsub_3111D_asm_ endp

; int __cdecl16far nopsub_31157(void)
nopsub_31157_asm_ proc far
    mov     bx, word ptr [resendptr1]
    mov     ax, word ptr [bx+0xe]
    mov     bx, word ptr [resptr2]
    sub     ax, word ptr [bx+0xe]
    sub     ax, word ptr [bx+0xc]
    retf
nopsub_31157_asm_ endp

; int __cdecl16far nopsub_31169(void)
nopsub_31169_asm_ proc far
    mov     bx, word ptr [resptr2]
    mov     ax, word ptr [bx+0xe]
    add     ax, word ptr [bx+0xc]
    mov     bx, word ptr [resptr1]
    sub     ax, word ptr [bx+0xe]
    retf
nopsub_31169_asm_ endp

; uint __cdecl16far mmgr_get_ofs_diff(void)
mmgr_get_ofs_diff_asm_ proc far
    mov     bx, word ptr [resendptr2]
    mov     ax, word ptr [bx+0xe]
    mov     bx, word ptr [resptr2]
    sub     ax, word ptr [bx+0xe]
    sub     ax, word ptr [bx+0xc]
    retf
mmgr_get_ofs_diff_asm_ endp

; void __cdecl16far mmgr_copy_paras(ushort src_seg, ushort dst_seg, uint paras)
mmgr_copy_paras_asm_ proc far
    src_seg    = word ptr    6
    dst_seg    = word ptr    8
    paras      = word ptr   10

    push    bp
    mov     bp, sp
    push    ds
    push    si
    push    di
    cld
    mov     ds, word ptr [bp+src_seg]
    mov     es, word ptr [bp+dst_seg]
    mov     bx, word ptr [bp+paras]
LAB_2ea2_277d:
    or      bx, bx
    jz      LAB_2ea2_27b0
    mov     cx, 0x8000
    mov     ax, bx
    sub     bx, 0x1000
    jnc     LAB_2ea2_279a
    add     bx, 0x1000
    shl     bx, 0x1
    shl     bx, 0x1
    shl     bx, 0x1
    mov     cx, bx
    xor     bx, bx
LAB_2ea2_279a:
    xor     si, si
    xor     di, di
    rep movsw
    mov     ax, ds
    add     ax, 0x1000
    mov     ds, ax
    mov     ax, es
    add     ax, 0x1000
    mov     es, ax
    jmp     LAB_2ea2_277d
LAB_2ea2_27b0:
    pop     di
    pop     si
    pop     ds
    pop     bp
    retf
mmgr_copy_paras_asm_ endp

; void __cdecl16far copy_paras_reverse(ushort src_seg, ushort dst_seg, ushort paras)
copy_paras_reverse_asm_ proc far
    src_seg    = word ptr    6
    dst_seg    = word ptr    8
    paras      = word ptr   10

    push    bp
    mov     bp, sp
    push    ds
    push    si
    push    di
    std
    mov     bx, word ptr [bp+paras]
    mov     ax, word ptr [bp+src_seg]
    add     ax, bx
    mov     ds, ax
    mov     ax, word ptr [bp+dst_seg]
    add     ax, bx
    mov     es, ax
LAB_2ea2_27cd:
    or      bx, bx
    jz      LAB_2ea2_2802
    mov     cx, 0x1000
    sub     bx, 0x1000
    jnc     LAB_2ea2_27e2
    add     bx, 0x1000
    mov     cx, bx
    xor     bx, bx
LAB_2ea2_27e2:
    mov     ax, ds
    sub     ax, cx
    mov     ds, ax
    mov     ax, es
    sub     ax, cx
    mov     es, ax
    shl     cx, 0x1
    shl     cx, 0x1
    shl     cx, 0x1
    mov     ax, cx
    shl     ax, 0x1
    dec     ax
    dec     ax
    mov     si, ax
    mov     di, ax
    rep movsw
    jmp     LAB_2ea2_27cd
LAB_2ea2_2802:
    cld
    pop     di
    pop     si
    pop     ds
    pop     bp
    retf
copy_paras_reverse_asm_ endp

; char * __cdecl16far mmgr_path_to_name(char * filename)
mmgr_path_to_name_asm_ proc far
    filename   = word ptr    6

    push    bp
    mov     bp, sp
    push    si
    mov     si, word ptr [bp+filename]
    mov     bx, si
    cld
LAB_2ea2_2812:
    lodsb
    or      al, al
    jz      LAB_2ea2_2823
    cmp     al, 0x3a
    jz      LAB_2ea2_281f
    cmp     al, 0x5c
    jnz     LAB_2ea2_2812
LAB_2ea2_281f:
    mov     bx, si
    jmp     LAB_2ea2_2812
LAB_2ea2_2823:
    mov     ax, bx
    pop     si
    pop     bp
    retf
mmgr_path_to_name_asm_ endp

; void * __cdecl16far mmgr_alloc_pages(char * name_, int pages)
mmgr_alloc_pages_asm_ proc far
    name_      = word ptr    6
    pages      = word ptr    8

    push    bp
    mov     bp, sp
    push    si
    push    di
    mov     di, word ptr [resptr2]
    mov     si, word ptr [resendptr1]
    mov     dx, word ptr [di+0xe]
    add     dx, word ptr [di+0xc]
    add     di, 0x12
    cmp     si, di
    jbe     LAB_2ea2_2887
LAB_2ea2_2842:
    mov     word ptr [resptr2], di
    push    word ptr [bp+name_]
    call    far ptr mmgr_path_to_name
    add     sp, 0x2
    mov     si, ax
    xor     bx, bx
    mov     cx, 0xc
LAB_2ea2_2858:
    mov     al, byte ptr [bx+si]
    mov     byte ptr [bx+di], al
    inc     bx
    loop    LAB_2ea2_2858
    mov     si, word ptr [resendptr1]
    mov     ax, word ptr [bp+pages]
    mov     word ptr [di+0xe], dx
    mov     word ptr [di+0xc], ax
    mov     word ptr [di+0x10], 0x2
    add     ax, dx
    cmp     ax, word ptr [resmaxsize]
    jc      LAB_2ea2_287c
    mov     word ptr [resmaxsize], ax
LAB_2ea2_287c:
    cmp     ax, word ptr [si+0xe]
    ja      LAB_2ea2_28a2
LAB_2ea2_2881:
    xor     ax, ax
    pop     di
    pop     si
    pop     bp
    retf
LAB_2ea2_2887:
    cmp     si, word ptr [resendptr2]
    jz      LAB_2ea2_2896
    add     si, 0x12
    mov     word ptr [resendptr1], si
    jmp     LAB_2ea2_2842
LAB_2ea2_2896:
    push    word ptr [bp+name_]
    mov     ax, offset aReservememoryO
    push    ax
    call    far ptr fatal_error
LAB_2ea2_28a2:
    mov     si, word ptr [resendptr1]
    mov     di, word ptr [resptr2]
    mov     ax, word ptr [di+0xe]
    add     ax, word ptr [di+0xc]
switchdataD_3000_12d0:
    cmp     ax, word ptr [si+0xe]
    jbe     LAB_2ea2_2881
    cmp     si, word ptr [resendptr2]
    jz      LAB_2ea2_28c9
    mov     word ptr [si+0x10], 0x0
    add     si, 0x12
    mov     word ptr [resendptr1], si
    jmp     switchdataD_3000_12d0
LAB_2ea2_28c9:
    mov     bx, word ptr [resmaxsize]
    push    bx
    push    word ptr [di+0xc]
    push    word ptr [bp+name_]
    mov     ax, offset aReservememoryOutOfMemory
    push    ax
    call    far ptr fatal_error
mmgr_alloc_pages_asm_ endp

; void __cdecl16far mmgr_find_free(void)
mmgr_find_free_asm_ proc far
    push    si
    push    di
    push    dx
    mov     si, word ptr [resendptr2]
    mov     di, si
    xor     dx, dx
LAB_2ea2_28e8:
    test    word ptr [si+0x10], 0x1
    jnz     LAB_2ea2_28f5
    add     dx, word ptr [si+0xc]
    jmp     LAB_2ea2_28fc
    db 0x90
LAB_2ea2_28f5:
    or      dx, dx
    jnz     LAB_2ea2_2910
LAB_2ea2_28f9:
    sub     di, 0x12
LAB_2ea2_28fc:
    sub     si, 0x12
    cmp     si, word ptr [resendptr1]
    jnc     LAB_2ea2_28e8
    add     di, 0x12
    mov     word ptr [resendptr1], di
    pop     dx
    pop     di
    pop     si
    retf
LAB_2ea2_2910:
    mov     bx, word ptr [si+0xc]
    push    bx
    add     di, 0x12
    mov     ax, word ptr [di+0xe]
    sub     ax, bx
    push    ax
    push    word ptr [si+0xe]
    sub     di, 0x12
    mov     word ptr [di+0xc], bx
    mov     word ptr [di+0xe], ax
    mov     cx, word ptr [si+0x10]
    mov     word ptr [si+0x10], 0x0
    mov     word ptr [di+0x10], cx
    xor     bx, bx
    mov     cx, 0xc
LAB_2ea2_2939:
    mov     al, byte ptr [bx+si]
    mov     byte ptr [bx+di], al
    inc     bx
    loop    LAB_2ea2_2939
    call    far ptr copy_paras_reverse
    add     sp, 0x6
    jmp     LAB_2ea2_28f9
mmgr_find_free_asm_ endp

; void * __cdecl16far mmgr_get_chunk_by_name(char * name_)
mmgr_get_chunk_by_name_asm_ proc far
    name_      = word ptr    6

    push    bp
    mov     bp, sp
    push    si
    push    di
    mov     si, word ptr [resendptr1]
    push    word ptr [bp+name_]
    call    far ptr mmgr_path_to_name
    add     sp, 0x2
    mov     di, ax
LAB_2ea2_2960:
    xor     bx, bx
    cmp     word ptr [si+0x10], 0x0
    jz      LAB_2ea2_298e
LAB_2ea2_2968:
    mov     al, byte ptr [bx+di]
    or      al, al
    jz      LAB_2ea2_297b
    cmp     al, byte ptr [bx+si]
    jnz     LAB_2ea2_2985
    inc     bx
    cmp     bx, 0xc
    jl      LAB_2ea2_2968
    jmp     LAB_2ea2_2996
    db 0x90
LAB_2ea2_297b:
    cmp     byte ptr [bx+si], 0x2e
    jz      LAB_2ea2_2996
    cmp     byte ptr [bx+si], 0x0
    jz      LAB_2ea2_2996
LAB_2ea2_2985:
    add     si, 0x12
    cmp     si, word ptr [resendptr2]
    jc      LAB_2ea2_2960
LAB_2ea2_298e:
    xor     dx, dx
LAB_2ea2_2990:
    xor     ax, ax
    pop     di
    pop     si
    pop     bp
    retf
LAB_2ea2_2996:
    mov     di, word ptr [resptr2]
    mov     dx, word ptr [di+0xe]
    add     dx, word ptr [di+0xc]
    add     di, 0x12
    mov     word ptr [resptr2], di
    mov     ax, word ptr [si+0xc]
    push    ax
    push    dx
    push    word ptr [si+0xe]
    mov     word ptr [si+0x10], 0x0
    mov     word ptr [di+0xe], dx
    mov     word ptr [di+0xc], ax
    mov     word ptr [di+0x10], 0x2
    xor     bx, bx
    mov     cx, 0xc
LAB_2ea2_29c4:
    mov     al, byte ptr [bx+si]
    mov     byte ptr [bx+di], al
    inc     bx
    loop    LAB_2ea2_29c4
    cmp     di, word ptr [resendptr1]
    jnz     LAB_2ea2_29d6
    add     word ptr [resendptr1], 0x12
LAB_2ea2_29d6:
    call    far ptr mmgr_copy_paras
    add     sp, 0x6
    mov     si, word ptr [resendptr1]
    mov     di, word ptr [resptr2]
    mov     ax, word ptr [di+0xe]
    add     ax, word ptr [di+0xc]
LAB_2ea2_29ec:
    cmp     ax, word ptr [si+0xe]
    jbe     LAB_2ea2_29ff
    mov     word ptr [si+0x10], 0x0
    add     si, 0x12
    mov     word ptr [resendptr1], si
    jmp     LAB_2ea2_29ec
LAB_2ea2_29ff:
    call    far ptr mmgr_find_free
    mov     dx, word ptr [di+0xe]
    jmp     LAB_2ea2_2990
mmgr_get_chunk_by_name_asm_ endp

; undefined2 __cdecl16far nopsub_31429(char * param_1)
nopsub_31429_asm_ proc far
    param_1    = word ptr    6

    push    bp
    mov     bp, sp
    push    si
    push    di
    mov     si, word ptr [resendptr1]
    push    word ptr [bp+param_1]
    call    far ptr mmgr_path_to_name
    add     sp, 0x2
    mov     di, ax
LAB_2ea2_2a1f:
    xor     bx, bx
    cmp     word ptr [si+0x10], 0x0
    jz      LAB_2ea2_2a4d
LAB_2ea2_2a27:
    mov     al, byte ptr [bx+di]
    or      al, al
    jz      LAB_2ea2_2a3a
    cmp     al, byte ptr [bx+si]
    jnz     LAB_2ea2_2a44
    inc     bx
    cmp     bx, 0xc
    jl      LAB_2ea2_2a27
    jmp     LAB_2ea2_2a55
    db 0x90
LAB_2ea2_2a3a:
    cmp     byte ptr [bx+si], 0x2e
    jz      LAB_2ea2_2a55
    cmp     byte ptr [bx+si], 0x0
    jz      LAB_2ea2_2a55
LAB_2ea2_2a44:
    add     si, 0x12
    cmp     si, word ptr [resendptr2]
    jc      LAB_2ea2_2a1f
LAB_2ea2_2a4d:
    xor     dx, dx
    xor     ax, ax
    pop     di
    pop     si
    pop     bp
    retf
LAB_2ea2_2a55:
    mov     ax, 0x1
    pop     di
    pop     si
    pop     bp
    retf
nopsub_31429_asm_ endp

; void * __cdecl16far mmgr_free(void * data)
mmgr_free_asm_ proc far
    data       = dword ptr   6

    push    bp
    mov     bp, sp
    push    si
    push    di
    mov     ax, word ptr [bp+data+2]
    mov     si, word ptr [resptr2]
LAB_2ea2_2a68:
    cmp     si, word ptr [resptr1]
    jz      loc_31498
    cmp     ax, word ptr [si+0xe]
    jz      LAB_2ea2_2a84
    sub     si, 0x12
    jmp     LAB_2ea2_2a68
loc_31498:
    push    word ptr [bp+0x8]
    mov     ax, offset aMemoryManagerB
    push    ax
    call    far ptr fatal_error
LAB_2ea2_2a84:
    mov     word ptr [bp+data+2], 0x0
    mov     word ptr [si+0x10], 0x0
    cmp     si, word ptr [resptr2]
    jz      LAB_2ea2_2aae
    mov     bx, word ptr [resptr2]
    mov     di, word ptr [resendptr1]
    cmp     si, di
    jz      LAB_2ea2_2ae8
    mov     ax, word ptr [di+0xe]
    sub     ax, word ptr [bx+0xe]
    sub     ax, word ptr [bx+0xc]
    cmp     ax, word ptr [si+0xc]
    jc      LAB_2ea2_2ae8
LAB_2ea2_2aae:
    mov     bx, word ptr [si+0xc]
    push    bx
    mov     di, word ptr [resendptr1]
    mov     ax, word ptr [di+0xe]
    sub     ax, bx
    push    ax
    mov     word ptr [bp+data+2], ax
    push    word ptr [si+0xe]
    sub     di, 0x12
    mov     word ptr [resendptr1], di
    mov     word ptr [di+0xe], ax
    mov     word ptr [di+0xc], bx
    mov     word ptr [di+0x10], 0x1
    mov     cx, 0xc
    xor     bx, bx
LAB_2ea2_2ad9:
    mov     al, byte ptr [bx+si]
    mov     byte ptr [bx+di], al
    inc     bx
    loop    LAB_2ea2_2ad9
    call    far ptr copy_paras_reverse
    add     sp, 0x6
LAB_2ea2_2ae8:
    cmp     si, word ptr [resptr2]
    jnz     LAB_2ea2_2afb
LAB_2ea2_2aee:
    sub     si, 0x12
    cmp     word ptr [si+0x10], 0x0
    jz      LAB_2ea2_2aee
    mov     word ptr [resptr2], si
LAB_2ea2_2afb:
    mov     ax, word ptr [bp+data]
    mov     dx, word ptr [bp+data+2]
    pop     di
    pop     si
    pop     bp
    retf
mmgr_free_asm_ endp

; undefined2 __cdecl16far nopsub_31525(undefined2 param_1, int param_2)
nopsub_31525_asm_ proc far
    var_4      = word ptr   -4
    var_2      = word ptr   -2
    param_1    = word ptr    6
    param_2    = word ptr    8

    push    bp
    mov     bp, sp
    sub     sp, 0x6
    push    si
    push    di
    mov     ax, word ptr [bp+param_2]
    mov     si, word ptr [resptr2]
LAB_2ea2_2b14:
    cmp     si, word ptr [resptr1]
    jz      LAB_2ea2_2b24
    cmp     ax, word ptr [si+0xe]
    jz      LAB_2ea2_2b27
    sub     si, 0x12
    jmp     LAB_2ea2_2b14
LAB_2ea2_2b24:
    jmp     near ptr loc_31498
LAB_2ea2_2b27:
    mov     word ptr [bp+param_2], 0x0
    mov     word ptr [si+0x10], 0x0
    cmp     si, word ptr [resptr2]
    jz      LAB_2ea2_2b50
    mov     bx, word ptr [resptr2]
    mov     di, word ptr [resendptr2]
    mov     ax, word ptr [di+0xe]
    sub     ax, word ptr [bx+0xe]
    sub     ax, word ptr [bx+0xc]
    cmp     ax, word ptr [si+0xc]
    ja      LAB_2ea2_2b50
    jmp     near ptr LAB_2ea2_2c02
LAB_2ea2_2b50:
    mov     di, word ptr [resptr2]
    mov     ax, word ptr [di+0xe]
    add     ax, word ptr [di+0xc]
    mov     word ptr [bp+var_2], ax
    mov     word ptr [bp+var_4], 0x0
    mov     di, word ptr [resendptr1]
LAB_2ea2_2b66:
    cmp     di, word ptr [resendptr2]
    jz      LAB_2ea2_2bc9
    mov     ax, word ptr [di+0xe]
    sub     ax, word ptr [si+0xc]
    cmp     word ptr [bp+var_2], ax
    ja      LAB_2ea2_2bc4
    mov     bx, di
    sub     bx, 0x12
    cmp     bx, word ptr [resptr2]
    jz      LAB_2ea2_2bc4
    cmp     word ptr [bp+var_4], 0x0
    jnz     LAB_2ea2_2b91
    mov     word ptr [resendptr1], bx
    mov     word ptr [bp+var_4], 0x1
LAB_2ea2_2b91:
    mov     ax, word ptr [di+0x10]
    mov     word ptr [bx+0x10], ax
    mov     ax, word ptr [di+0xc]
    mov     word ptr [bx+0xc], ax
    push    ax
    mov     ax, word ptr [di+0xe]
    sub     ax, word ptr [si+0xc]
    mov     word ptr [bx+0xe], ax
    push    ax
    push    word ptr [di+0xe]
    mov     cx, 0xc
LAB_2ea2_2bae:
    mov     al, byte ptr [di]
    mov     byte ptr [bx], al
    inc     bx
    inc     di
    loop    LAB_2ea2_2bae
    sub     di, 0xc
    sub     bx, 0xc
    call    far ptr mmgr_copy_paras
    add     sp, 0x6
LAB_2ea2_2bc4:
    add     di, 0x12
    jmp     LAB_2ea2_2b66
LAB_2ea2_2bc9:
    mov     ax, word ptr [di+0xe]
    sub     di, 0x12
    cmp     word ptr [bp+var_4], 0x0
    jnz     LAB_2ea2_2bd9
    mov     word ptr [resendptr1], di
LAB_2ea2_2bd9:
    mov     bx, word ptr [si+0xc]
    mov     word ptr [di+0xc], bx
    push    bx
    sub     ax, bx
    mov     word ptr [di+0xe], ax
    push    ax
    push    word ptr [si+0xe]
    mov     word ptr [di+0x10], 0x1
    mov     cx, 0xc
    xor     bx, bx
LAB_2ea2_2bf3:
    mov     al, byte ptr [bx+si]
    mov     byte ptr [bx+di], al
    inc     bx
    loop    LAB_2ea2_2bf3
    call    far ptr copy_paras_reverse
    add     sp, 0x6
LAB_2ea2_2c02:
    cmp     si, word ptr [resptr2]
    jnz     LAB_2ea2_2c15
LAB_2ea2_2c08:
    sub     si, 0x12
    cmp     word ptr [si+0x10], 0x0
    jz      LAB_2ea2_2c08
    mov     word ptr [resptr2], si
LAB_2ea2_2c15:
    mov     ax, word ptr [bp+param_1]
    mov     dx, word ptr [bp+param_2]
    pop     di
    pop     si
    mov     sp, bp
    pop     bp
    retf
nopsub_31525_asm_ endp

; void __cdecl16far mmgr_release(void * data)
mmgr_release_asm_ proc far
    data       = dword ptr   6

    push    bp
    mov     bp, sp
    push    si
    push    di
    mov     ax, word ptr [bp+data+2]
    mov     si, word ptr [resptr2]
LAB_2ea2_2c2d:
    cmp     si, word ptr [resptr1]
    jz      LAB_2ea2_2c3d
    cmp     ax, word ptr [si+0xe]
    jz      LAB_2ea2_2c40
    sub     si, 0x12
    jmp     LAB_2ea2_2c2d
LAB_2ea2_2c3d:
    jmp     near ptr loc_31498
LAB_2ea2_2c40:
    mov     word ptr [si+0x10], 0x0
    cmp     si, word ptr [resptr2]
    jnz     LAB_2ea2_2c58
LAB_2ea2_2c4b:
    sub     si, 0x12
    cmp     word ptr [si+0x10], 0x0
    jz      LAB_2ea2_2c4b
    mov     word ptr [resptr2], si
LAB_2ea2_2c58:
    pop     di
    pop     si
    pop     bp
    retf
mmgr_release_asm_ endp

; uint __cdecl16far mmgr_get_chunk_size(void * data)
mmgr_get_chunk_size_asm_ proc far
    data       = dword ptr   6

    push    bp
    mov     bp, sp
    push    si
    push    di
    mov     ax, word ptr [bp+data+2]
    mov     si, word ptr [resptr2]
LAB_2ea2_2c68:
    cmp     si, word ptr [resptr1]
    jz      LAB_2ea2_2c78
    cmp     ax, word ptr [si+0xe]
    jz      LAB_2ea2_2c7b
    sub     si, 0x12
    jmp     LAB_2ea2_2c68
LAB_2ea2_2c78:
    jmp     near ptr loc_31498
LAB_2ea2_2c7b:
    mov     ax, word ptr [si+0xc]
    pop     di
    pop     si
    pop     bp
    retf
mmgr_get_chunk_size_asm_ endp

; uint __cdecl16far mmgr_resize_memory(void * data, uint size_)
mmgr_resize_memory_asm_ proc far
    data       = dword ptr   6
    size_      = word ptr   10

    push    bp
    mov     bp, sp
    push    si
    push    di
    mov     ax, word ptr [bp+data+2]
    mov     si, word ptr [resptr2]
LAB_2ea2_2c8e:
    cmp     si, word ptr [resptr1]
    jz      LAB_2ea2_2c9e
    cmp     ax, word ptr [si+0xe]
    jz      LAB_2ea2_2ca1
    sub     si, 0x12
    jmp     LAB_2ea2_2c8e
LAB_2ea2_2c9e:
    jmp     near ptr loc_31498
LAB_2ea2_2ca1:
    mov     ax, word ptr [bp+size_]
    cmp     ax, word ptr [si+0xc]
    ja      LAB_2ea2_2cb0
    mov     word ptr [si+0xc], ax
    pop     di
    pop     si
    pop     bp
    retf
LAB_2ea2_2cb0:
    cmp     si, word ptr [resptr2]
    jnz     LAB_2ea2_2cd4
    mov     word ptr [si+0xc], ax
    mov     di, word ptr [resendptr1]
    add     ax, word ptr [si+0xe]
    cmp     ax, word ptr [resmaxsize]
    jc      LAB_2ea2_2cc9
    mov     word ptr [resmaxsize], ax
LAB_2ea2_2cc9:
    cmp     ax, word ptr [di+0xe]
    ja      LAB_2ea2_2cdd
LAB_2ea2_2cce:
    xor     ax, ax
    pop     di
    pop     si
    pop     bp
    retf
LAB_2ea2_2cd4:
    mov     ax, offset aResizememoryCa
    push    ax
    call    far ptr fatal_error
LAB_2ea2_2cdd:
    mov     si, word ptr [resendptr1]
    mov     di, word ptr [resptr2]
    mov     ax, word ptr [di+0xe]
    add     ax, word ptr [di+0xc]
LAB_2ea2_2ceb:
    cmp     ax, word ptr [si+0xe]
    jbe     LAB_2ea2_2cce
    cmp     si, word ptr [resendptr2]
    jz      LAB_2ea2_2d04
    mov     word ptr [si+0x10], 0x0
    add     si, 0x12
    mov     word ptr [resendptr1], si
    jmp     LAB_2ea2_2ceb
LAB_2ea2_2d04:
    mov     bx, word ptr [resmaxsize]
    push    bx
    mov     ax, offset aResizememoryNo
    push    ax
    call    far ptr fatal_error
mmgr_resize_memory_asm_ endp

; void * __cdecl16far mmgr_op_unk(void * data)
mmgr_op_unk_asm_ proc far
    data       = dword ptr   6

    push    bp
    mov     bp, sp
    push    si
    push    di
    mov     ax, word ptr [bp+data+2]
    mov     si, word ptr [resptr2]
LAB_2ea2_2d1e:
    cmp     si, word ptr [resptr1]
    jz      LAB_2ea2_2d2e
    cmp     ax, word ptr [si+0xe]
    jz      LAB_2ea2_2d31
    sub     si, 0x12
    jmp     LAB_2ea2_2d1e
LAB_2ea2_2d2e:
    jmp     near ptr loc_31498
LAB_2ea2_2d31:
    mov     di, si
    sub     di, 0x12
    cmp     word ptr [di+0x10], 0x0
    jnz     LAB_2ea2_2d8d
LAB_2ea2_2d3c:
    sub     di, 0x12
    cmp     word ptr [di+0x10], 0x0
    jz      LAB_2ea2_2d3c
    mov     word ptr [si+0x10], 0x0
    mov     bx, word ptr [si+0xc]
    push    bx
    mov     ax, word ptr [di+0xe]
    add     ax, word ptr [di+0xc]
    push    ax
    push    word ptr [si+0xe]
    add     di, 0x12
    cmp     si, word ptr [resptr2]
    jnz     LAB_2ea2_2d65
    mov     word ptr [resptr2], di
LAB_2ea2_2d65:
    mov     word ptr [di+0xe], ax
    mov     word ptr [di+0xc], bx
    mov     word ptr [di+0x10], 0x2
    mov     cx, 0xc
    xor     bx, bx
LAB_2ea2_2d75:
    mov     al, byte ptr [bx+si]
    mov     byte ptr [bx+di], al
    inc     bx
    loop    LAB_2ea2_2d75
    call    far ptr mmgr_copy_paras
    add     sp, 0x6
LAB_2ea2_2d84:
    mov     dx, word ptr [di+0xe]
    xor     ax, ax
    pop     di
    pop     si
    pop     bp
    retf
LAB_2ea2_2d8d:
    mov     di, si
    jmp     LAB_2ea2_2d84
mmgr_op_unk_asm_ endp
    db 0

; void __cdecl16far preRender_default(uint colour, uint vertlinecount, POINT2D * vertlines)
preRender_default_asm_ proc far
    var_A      = byte ptr  -10
    colour     = word ptr    6
    vertlinecount = word ptr    8
    vertlines  = word ptr   10

    push    bp
    mov     bp, sp
    sub     sp, 0x7d0
    push    si
    push    di
    mov     byte ptr [bp+var_A], 0x1
    jmp     LAB_2ea2_2dae
preRender_default_asm_ endp

; void __cdecl16far preRender_default_alt(uint colour, uint vertlinecount, POINT2D * vertlines)
preRender_default_alt_asm_ proc far
    var_A      = byte ptr  -10
    colour     = word ptr    6
    vertlinecount = word ptr    8
    vertlines  = word ptr   10

    push    bp
    mov     bp, sp
    sub     sp, 0x7d0
    push    si
    push    di
    mov     byte ptr [bp+var_A], 0x0
LAB_2ea2_2dae:
    mov     ax, offset draw_filled_lines
    mov     word ptr [spritefunc], ax
    mov     ax, offset preRender_line
    mov     word ptr [imagefunc], ax
    mov     si, word ptr [bp+vertlines]
    jmp     loc_3180A
preRender_default_alt_asm_ endp

; undefined __cdecl16far skybox_op_helper(uint color, uint vertlinecount, POINT2D * vertlines)
skybox_op_helper_asm_ proc far
    var_A      = byte ptr  -10
    color      = word ptr    6
    vertlinecount = word ptr    8
    vertlines  = word ptr   10

    push    bp
    mov     bp, sp
    sub     sp, 0x7d0
    push    si
    push    di
    mov     byte ptr [bp+var_A], 0x1
    jmp     LAB_2ea2_2ddb
skybox_op_helper_asm_ endp

; void __cdecl16far preRender_wheel_helper4(uint color, uint vertlinecount, POINT2D * vertlines)
preRender_wheel_helper4_asm_ proc far
    var_7D0    = word ptr  -2000
    var_798    = word ptr  -1944
    var_3D8    = word ptr  -984
    var_18     = word ptr  -24
    var_16     = word ptr  -22
    var_14     = word ptr  -20
    var_12     = word ptr  -18
    var_10     = word ptr  -16
    var_E      = word ptr  -14
    var_C      = byte ptr  -12
    var_A      = byte ptr  -10
    var_8      = word ptr   -8
    var_vertlineptr = word ptr   -6
    var_4      = word ptr   -4
    var_2      = word ptr   -2
    color      = word ptr    6
    vertlinecount = word ptr    8
    vertlines  = word ptr   10

    push    bp
    mov     bp, sp
    sub     sp, 0x7d0
    push    si
    push    di
    mov     byte ptr [bp+var_A], 0x0
LAB_2ea2_2ddb:
    mov     ax, offset draw_filled_lines
    mov     word ptr [spritefunc], ax
    mov     ax, offset preRender_line
    mov     word ptr [imagefunc], ax
    lea     si, [bp+vertlines]
loc_3180A:
    mov     word ptr [bp+var_vertlineptr], si
    mov     cx, word ptr [bp+vertlinecount]
    mov     ax, cx
    dec     ax
    shl     ax, 0x1
    shl     ax, 0x1
    add     ax, si
    mov     word ptr [bp+var_8], ax
    cld
    mov     ax, ss
    mov     es, ax
    lea     ax, [bp+var_798]
    mov     word ptr [bp+var_18], ax
    mov     ax, word ptr cs:[sprite1.sprite_left2]
    mov     word ptr [bp+var_2], ax
    mov     ax, word ptr cs:[sprite1.sprite_widthsum]
    dec     ax
    mov     word ptr [bp+var_4], ax
    mov     ax, word ptr [si+0x2]
    mov     word ptr [bp+var_E], ax
    mov     word ptr [bp+var_12], ax
    mov     bx, word ptr [si]
    mov     dx, bx
    mov     word ptr [bp+var_10], si
    mov     word ptr [bp+var_14], si
    add     si, 0x4
    dec     cx
    jnz     LAB_2ea2_2e4d
    push    word ptr [bp+color]
    mov     si, word ptr [bp+var_vertlineptr]
    push    word ptr [si+0x2]
    push    word ptr [si]
    push    word ptr [si+0x2]
    push    word ptr [si]
    call    dword ptr [imagefunc]
    add     sp, 0xa
    pop     di
    pop     si
    mov     sp, bp
    pop     bp
    retf
LAB_2ea2_2e4d:
    mov     ax, word ptr [si+0x2]
    cmp     ax, word ptr [bp+var_E]
    jg      LAB_2ea2_2e5b
    mov     word ptr [bp+var_E], ax
    mov     word ptr [bp+var_10], si
LAB_2ea2_2e5b:
    cmp     ax, word ptr [bp+var_12]
    jle     LAB_2ea2_2e66
    mov     word ptr [bp+var_12], ax
    mov     word ptr [bp+var_14], si
LAB_2ea2_2e66:
    mov     ax, word ptr [si]
    cmp     ax, bx
    jge     LAB_2ea2_2e6e
    mov     bx, ax
LAB_2ea2_2e6e:
    cmp     ax, dx
    jle     LAB_2ea2_2e74
    mov     dx, ax
LAB_2ea2_2e74:
    add     si, 0x4
    loop    LAB_2ea2_2e4d
    cmp     dx, word ptr [bp+var_2]
    jl      LAB_2ea2_2ed0
    cmp     bx, word ptr [bp+var_4]
    jge     LAB_2ea2_2ed0
    mov     ax, word ptr [bp+var_12]
    cmp     ax, word ptr cs:[sprite1.sprite_top]
    jl      LAB_2ea2_2ed0
    mov     cx, word ptr [bp+var_E]
    cmp     cx, word ptr cs:[sprite1.sprite_height]
    jge     LAB_2ea2_2ed0
    mov     byte ptr [bp+var_C], 0x0
    cmp     dx, word ptr [bp+var_4]
    jg      LAB_2ea2_2eb3
    cmp     bx, word ptr [bp+var_2]
    jl      LAB_2ea2_2eb3
    cmp     ax, word ptr cs:[sprite1.sprite_height]
    jge     LAB_2ea2_2eb3
    cmp     cx, word ptr cs:[sprite1.sprite_top]
    jge     LAB_2ea2_2eb7
LAB_2ea2_2eb3:
    mov     byte ptr [bp+var_C], 0x1
LAB_2ea2_2eb7:
    cmp     ax, cx
    jz      LAB_2ea2_2ebf
    cmp     dx, bx
    jnz     LAB_2ea2_2ed6
LAB_2ea2_2ebf:
    push    word ptr [bp+color]
    mov     si, word ptr [bp+var_vertlineptr]
    push    ax
    push    dx
    push    cx
    push    bx
    call    dword ptr [imagefunc]
    add     sp, 0xa
LAB_2ea2_2ed0:
    pop     di
    pop     si
    mov     sp, bp
    pop     bp
    retf
LAB_2ea2_2ed6:
    lea     si, [bp+var_7D0]
    mov     di, word ptr [bp+var_10]
LAB_2ea2_2edd:
    mov     ax, word ptr [di+0x2]
    mov     cx, word ptr [di]
    add     di, 0x4
    cmp     di, word ptr [bp+var_8]
    jbe     LAB_2ea2_2eed
    mov     di, word ptr [bp+var_vertlineptr]
LAB_2ea2_2eed:
    mov     dx, word ptr [di+0x2]
    cmp     dx, ax
    jle     LAB_2ea2_2f1f
    push    si
    push    dx
    push    word ptr [di]
    push    ax
    push    cx
    cmp     byte ptr [bp+var_C], 0x0
    jz      LAB_2ea2_2f0e
    call    far ptr draw_line_related
    mov     word ptr [bp+var_16], di
    call    near ptr preRender_helper
    jmp     LAB_2ea2_2f19
    db 0x90
LAB_2ea2_2f0e:
    call    far ptr draw_line_related_alt
    mov     word ptr [bp+var_16], di
    call    near ptr preRender_helper2
LAB_2ea2_2f19:
    mov     di, word ptr [bp+var_16]
    add     sp, 0xa
LAB_2ea2_2f1f:
    cmp     di, word ptr [bp+var_14]
    jnz     LAB_2ea2_2edd
    mov     di, word ptr [bp+var_10]
LAB_2ea2_2f27:
    mov     ax, word ptr [di+0x2]
    mov     cx, word ptr [di]
    sub     di, 0x4
    cmp     di, word ptr [bp+var_vertlineptr]
    jnc     LAB_2ea2_2f37
    mov     di, word ptr [bp+var_8]
LAB_2ea2_2f37:
    mov     dx, word ptr [di+0x2]
    cmp     dx, ax
    jle     LAB_2ea2_2f63
    push    si
    push    dx
    push    word ptr [di]
    push    ax
    push    cx
    cmp     byte ptr [bp+var_C], 0x0
    jz      LAB_2ea2_2f52
    call    far ptr draw_line_related
    jmp     LAB_2ea2_2f57
    db 0x90
LAB_2ea2_2f52:
    call    far ptr draw_line_related_alt
LAB_2ea2_2f57:
    mov     word ptr [bp+var_16], di
    call    near ptr preRender_helper3
    mov     di, word ptr [bp+var_16]
    add     sp, 0xa
LAB_2ea2_2f63:
    cmp     di, word ptr [bp+var_14]
    jnz     LAB_2ea2_2f27
    mov     ax, word ptr [bp+var_12]
    cmp     ax, word ptr cs:[sprite1.sprite_height]
    jl      LAB_2ea2_2f77
    mov     ax, word ptr cs:[sprite1.sprite_height]
    dec     ax
LAB_2ea2_2f77:
    mov     bx, word ptr [bp+var_E]
    cmp     bx, word ptr cs:[sprite1.sprite_top]
    jge     LAB_2ea2_2f86
    mov     bx, word ptr cs:[sprite1.sprite_top]
LAB_2ea2_2f86:
    sub     ax, bx
    jle     LAB_2ea2_2fa7
    inc     ax
    push    word ptr [bp+color]
    push    ax
    push    bx
    shl     bx, 0x1
    lea     ax, [bp+var_3D8]
    add     ax, bx
    push    ax
    lea     ax, [bp+var_798]
    add     ax, bx
    push    ax
    call    dword ptr [spritefunc]
    add     sp, 0xa
LAB_2ea2_2fa7:
    pop     di
    pop     si
    mov     sp, bp
    pop     bp
    retf
preRender_wheel_helper4_asm_ endp

; void __stdcall16near preRender_helper(void)
preRender_helper_asm_ proc near
    var_18     = word ptr  -24

    mov     cx, word ptr [si+0x14]
    or      cx, cx
    jle     LAB_2ea2_2fd9
    mov     di, word ptr [si+0x6]
    mov     dx, word ptr [si+0x4]
    add     dx, 0x8000
    adc     di, 0x0
    sub     di, cx
    shl     di, 0x1
    add     di, word ptr [bp-0x18]
    mov     ax, word ptr cs:[sprite1.sprite_left2]
    push    cx
    push    di
    rep stosw
    pop     di
    pop     cx
    add     di, 0x3c0
    dec     ax
    rep stosw
LAB_2ea2_2fd9:
    mov     cx, word ptr [si+0x18]
    or      cx, cx
    jle     LAB_2ea2_3005
    mov     di, word ptr [si+0x6]
    mov     dx, word ptr [si+0x4]
    add     dx, 0x8000
    adc     di, 0x0
    sub     di, cx
    shl     di, 0x1
    add     di, word ptr [bp-0x18]
    mov     ax, word ptr cs:[sprite1.sprite_widthsum]
    push    cx
    push    di
    rep stosw
    pop     di
    pop     cx
    add     di, 0x3c0
    dec     ax
    rep stosw
LAB_2ea2_3005:
    mov     cx, word ptr [si+0x16]
    or      cx, cx
    jle     LAB_2ea2_3026
    mov     di, word ptr [si+0xa]
    inc     di
    shl     di, 0x1
    add     di, word ptr [bp-0x18]
    mov     ax, word ptr cs:[sprite1.sprite_left2]
    push    cx
    push    di
    rep stosw
    pop     di
    pop     cx
    add     di, 0x3c0
    dec     ax
    rep stosw
LAB_2ea2_3026:
    mov     cx, word ptr [si+0x1a]
    or      cx, cx
    jle     preRender_helper2
    mov     di, word ptr [si+0xa]
    inc     di
    shl     di, 0x1
    add     di, word ptr [bp-0x18]
    mov     ax, word ptr cs:[sprite1.sprite_widthsum]
    push    cx
    push    di
    rep stosw
    pop     di
    pop     cx
    add     di, 0x3c0
    dec     ax
    rep stosw
preRender_helper_asm_ endp

; void __cdecl16near preRender_helper2(void)
preRender_helper2_asm_ proc near
    var_18     = word ptr  -22

    mov     cx, word ptr [si+0xe]
    or      cx, cx
    jle     LAB_2ea2_3083
    mov     di, word ptr [si+0x6]
    shl     di, 0x1
    add     di, word ptr [bp-0x18]
    mov     bl, byte ptr [si+0x12]
    xor     bh, bh
    shl     bx, 0x1
    jmp     word ptr cs:[bx+off_31A82]
off_31A82:
    dw LAB_2ea2_3083
    dw LAB_2ea2_3083
    dw LAB_2ea2_3076
    dw LAB_2ea2_3084
    dw LAB_2ea2_3093
    dw LAB_2ea2_30a2
    dw LAB_2ea2_30c1
    dw LAB_2ea2_30e0
    dw LAB_2ea2_310c
    dw LAB_2ea2_3083
LAB_2ea2_3076:
    mov     cx, word ptr [si+0xe]
    mov     ax, word ptr [si+0x2]
LAB_2ea2_307c:
    mov     word ptr [di+0x3c0], ax
    stosw
    loop    LAB_2ea2_307c
LAB_2ea2_3083:
    ret
LAB_2ea2_3084:
    mov     cx, word ptr [si+0xe]
    mov     ax, word ptr [si+0x2]
LAB_2ea2_308a:
    mov     word ptr [di+0x3c0], ax
    stosw
    dec     ax
    loop    LAB_2ea2_308a
    ret
LAB_2ea2_3093:
    mov     cx, word ptr [si+0xe]
    mov     ax, word ptr [si+0x2]
LAB_2ea2_3099:
    mov     word ptr [di+0x3c0], ax
    stosw
    inc     ax
    loop    LAB_2ea2_3099
    ret
LAB_2ea2_30a2:
    mov     cx, word ptr [si+0xe]
    mov     ax, word ptr [si+0x2]
    mov     dx, word ptr [si]
    add     dx, 0x8000
    adc     ax, 0x0
    mov     bx, word ptr [si+0xc]
LAB_2ea2_30b4:
    mov     word ptr [di+0x3c0], ax
    stosw
    sub     dx, bx
    sbb     ax, 0x0
    loop    LAB_2ea2_30b4
    ret
LAB_2ea2_30c1:
    mov     cx, word ptr [si+0xe]
    mov     ax, word ptr [si+0x2]
    mov     dx, word ptr [si]
    add     dx, 0x8000
    adc     ax, 0x0
    mov     bx, word ptr [si+0xc]
LAB_2ea2_30d3:
    mov     word ptr [di+0x3c0], ax
    stosw
    add     dx, bx
    adc     ax, 0x0
    loop    LAB_2ea2_30d3
    ret
LAB_2ea2_30e0:
    mov     cx, word ptr [si+0xe]
    mov     ax, word ptr [si+0x2]
    mov     bx, word ptr [si+0xc]
    mov     dx, word ptr [si+0x4]
    add     dx, 0x8000
    jnc     LAB_2ea2_30f5
    add     di, 0x2
LAB_2ea2_30f5:
    mov     word ptr [di+0x3c0], ax
LAB_2ea2_30f9:
    add     dx, bx
    jnc     LAB_2ea2_3105
    stosw
    dec     ax
    loop    LAB_2ea2_30f5
    sub     di, 0x2
    ret
LAB_2ea2_3105:
    dec     ax
    loop    LAB_2ea2_30f9
    inc     ax
    mov     word ptr [di], ax
    ret
LAB_2ea2_310c:
    mov     cx, word ptr [si+0xe]
    mov     ax, word ptr [si+0x2]
    mov     bx, word ptr [si+0xc]
    mov     dx, word ptr [si+0x4]
    add     dx, 0x8000
    jnc     LAB_2ea2_3121
    add     di, 0x2
LAB_2ea2_3121:
    mov     word ptr [di], ax
LAB_2ea2_3123:
    add     dx, bx
    jnc     LAB_2ea2_3135
    mov     word ptr [di+0x3c0], ax
    add     di, 0x2
    inc     ax
    loop    LAB_2ea2_3121
    sub     di, 0x2
    ret
LAB_2ea2_3135:
    inc     ax
    loop    LAB_2ea2_3123
    dec     ax
    mov     word ptr [di+0x3c0], ax
    ret
preRender_helper2_asm_ endp

; void __cdecl16near preRender_helper3(void)
preRender_helper3_asm_ proc near
    var_18     = word ptr  -22
    var_C      = byte ptr  -10
    var_A      = byte ptr   -8

    mov     cx, word ptr [si+0xe]
    or      cx, cx
    jle     LAB_2ea2_3188
    mov     di, word ptr [si+0x6]
    shl     di, 0x1
    add     di, word ptr [bp-0x18]
    mov     bl, byte ptr [si+0x12]
    xor     bh, bh
    shl     bx, 0x1
    cmp     byte ptr [bp-0xa], 0x0             ; var_A is 1 when calling prerender_default, or 0 when calling prerender_default_alt
                                               ; uses a different jump table here, otherwise everything else is similar yes?
    jnz     LAB_2ea2_315f
    jmp     word ptr cs:[bx+off_31CF7]
LAB_2ea2_315f:
    jmp     word ptr cs:[bx+off_31B84]
off_31B84:
    dw LAB_2ea2_3083
    dw LAB_2ea2_3083
    dw LAB_2ea2_3178
    dw LAB_2ea2_3197
    dw LAB_2ea2_31bb
    dw LAB_2ea2_31df
    dw LAB_2ea2_3217
    dw LAB_2ea2_324f
    dw LAB_2ea2_3291
    dw LAB_2ea2_3083
LAB_2ea2_3178:
    mov     ax, word ptr [si+0x2]
LAB_2ea2_317b:
    cmp     word ptr [di+0x3c0], ax
    jl      LAB_2ea2_318b
    cmp     word ptr [di], ax
    jle     LAB_2ea2_318f
    stosw
    loop    LAB_2ea2_317b
LAB_2ea2_3188:
    jmp     near ptr LAB_2ea2_3499
LAB_2ea2_318b:
    mov     word ptr [di+0x3c0], ax
LAB_2ea2_318f:
    add     di, 0x2
    loop    LAB_2ea2_317b
    jmp     near ptr LAB_2ea2_3499
LAB_2ea2_3197:
    mov     cx, word ptr [si+0xe]
    mov     ax, word ptr [si+0x2]
LAB_2ea2_319d:
    cmp     word ptr [di+0x3c0], ax
    jl      LAB_2ea2_31ae
    cmp     word ptr [di], ax
    jle     LAB_2ea2_31b2
    stosw
    dec     ax
    loop    LAB_2ea2_319d
    jmp     near ptr LAB_2ea2_3499
LAB_2ea2_31ae:
    mov     word ptr [di+0x3c0], ax
LAB_2ea2_31b2:
    add     di, 0x2
    dec     ax
    loop    LAB_2ea2_319d
    jmp     near ptr LAB_2ea2_3499
LAB_2ea2_31bb:
    mov     cx, word ptr [si+0xe]
    mov     ax, word ptr [si+0x2]
LAB_2ea2_31c1:
    cmp     word ptr [di+0x3c0], ax
    jl      LAB_2ea2_31d2
    cmp     word ptr [di], ax
    jle     LAB_2ea2_31d6
    stosw
    inc     ax
    loop    LAB_2ea2_31c1
    jmp     near ptr LAB_2ea2_3499
LAB_2ea2_31d2:
    mov     word ptr [di+0x3c0], ax
LAB_2ea2_31d6:
    add     di, 0x2
    inc     ax
    loop    LAB_2ea2_31c1
    jmp     near ptr LAB_2ea2_3499
LAB_2ea2_31df:
    mov     cx, word ptr [si+0xe]
    mov     ax, word ptr [si+0x2]
    mov     dx, word ptr [si]
    add     dx, 0x8000
    adc     ax, 0x0
    mov     bx, word ptr [si+0xc]
LAB_2ea2_31f1:
    cmp     word ptr [di+0x3c0], ax
    jl      LAB_2ea2_3206
    cmp     word ptr [di], ax
    jle     LAB_2ea2_320a
    stosw
    sub     dx, bx
    sbb     ax, 0x0
    loop    LAB_2ea2_31f1
    jmp     near ptr LAB_2ea2_3499
LAB_2ea2_3206:
    mov     word ptr [di+0x3c0], ax
LAB_2ea2_320a:
    add     di, 0x2
    sub     dx, bx
    sbb     ax, 0x0
    loop    LAB_2ea2_31f1
    jmp     near ptr LAB_2ea2_3499
LAB_2ea2_3217:
    mov     cx, word ptr [si+0xe]
    mov     ax, word ptr [si+0x2]
    mov     dx, word ptr [si]
    add     dx, 0x8000
    adc     ax, 0x0
    mov     bx, word ptr [si+0xc]
LAB_2ea2_3229:
    cmp     word ptr [di+0x3c0], ax
    jl      LAB_2ea2_323e
    cmp     word ptr [di], ax
    jle     LAB_2ea2_3242
    stosw
    add     dx, bx
    adc     ax, 0x0
    loop    LAB_2ea2_3229
    jmp     near ptr LAB_2ea2_3499
LAB_2ea2_323e:
    mov     word ptr [di+0x3c0], ax
LAB_2ea2_3242:
    add     di, 0x2
    add     dx, bx
    adc     ax, 0x0
    loop    LAB_2ea2_3229
    jmp     near ptr LAB_2ea2_3499
LAB_2ea2_324f:
    mov     cx, word ptr [si+0xe]
    mov     ax, word ptr [si+0x2]
    mov     bx, word ptr [si+0xc]
    mov     dx, word ptr [si+0x4]
    add     dx, 0x8000
    jnc     LAB_2ea2_3264
    add     di, 0x2
LAB_2ea2_3264:
    cmp     word ptr [di+0x3c0], ax
    jge     LAB_2ea2_326e
    mov     word ptr [di+0x3c0], ax
LAB_2ea2_326e:
    add     dx, bx
    jnc     LAB_2ea2_3284
    cmp     word ptr [di], ax
    jle     LAB_2ea2_3278
    mov     word ptr [di], ax
LAB_2ea2_3278:
    add     di, 0x2
    dec     ax
    loop    LAB_2ea2_3264
    sub     di, 0x2
    jmp     near ptr LAB_2ea2_3499
LAB_2ea2_3284:
    dec     ax
    loop    LAB_2ea2_326e
    inc     ax
    cmp     word ptr [di], ax
    jle     LAB_2ea2_328e
    mov     word ptr [di], ax
LAB_2ea2_328e:
    jmp     near ptr LAB_2ea2_3499
LAB_2ea2_3291:
    mov     cx, word ptr [si+0xe]
    mov     ax, word ptr [si+0x2]
    mov     bx, word ptr [si+0xc]
    mov     dx, word ptr [si+0x4]
    add     dx, 0x8000
    jnc     LAB_2ea2_32a6
    add     di, 0x2
LAB_2ea2_32a6:
    cmp     word ptr [di], ax
    jle     LAB_2ea2_32ac
    mov     word ptr [di], ax
LAB_2ea2_32ac:
    add     dx, bx
    jnc     LAB_2ea2_32c6
    cmp     word ptr [di+0x3c0], ax
    jge     LAB_2ea2_32ba
    mov     word ptr [di+0x3c0], ax
LAB_2ea2_32ba:
    add     di, 0x2
    inc     ax
    loop    LAB_2ea2_32a6
    sub     di, 0x2
    jmp     near ptr LAB_2ea2_3499
LAB_2ea2_32c6:
    inc     ax
    loop    LAB_2ea2_32ac
    dec     ax
    cmp     word ptr [di+0x3c0], ax
    jge     LAB_2ea2_328e
    mov     word ptr [di+0x3c0], ax
    jmp     near ptr LAB_2ea2_3499
off_31CF7:
    dw LAB_2ea2_3083
    dw LAB_2ea2_3083
    dw LAB_2ea2_32eb
    dw LAB_2ea2_3311
    dw LAB_2ea2_333c
    dw LAB_2ea2_3367
    dw LAB_2ea2_33aa
    dw LAB_2ea2_33ed
    dw LAB_2ea2_3441
    dw LAB_2ea2_3083
LAB_2ea2_32eb:
    mov     cx, word ptr [si+0xe]
    mov     ax, word ptr [si+0x2]
LAB_2ea2_32f1:
    cmp     word ptr [di], ax
    jg      LAB_2ea2_3303
    cmp     word ptr [di+0x3c0], ax
    jl      LAB_2ea2_3308
    add     di, 0x2
    loop    LAB_2ea2_32f1
    jmp     near ptr LAB_2ea2_3499
LAB_2ea2_3303:
    rep stosw
    jmp     near ptr LAB_2ea2_3499
LAB_2ea2_3308:
    add     di, 0x3c0
    rep stosw
    jmp     near ptr LAB_2ea2_3499
LAB_2ea2_3311:
    mov     cx, word ptr [si+0xe]
    mov     ax, word ptr [si+0x2]
LAB_2ea2_3317:
    cmp     word ptr [di], ax
    jg      LAB_2ea2_332a
    cmp     word ptr [di+0x3c0], ax
    jl      LAB_2ea2_3331
    add     di, 0x2
    dec     ax
    loop    LAB_2ea2_3317
    jmp     near ptr LAB_2ea2_3499
LAB_2ea2_332a:
    stosw
    dec     ax
    loop    LAB_2ea2_332a
    jmp     near ptr LAB_2ea2_3499
LAB_2ea2_3331:
    add     di, 0x3c0
LAB_2ea2_3335:
    stosw
    dec     ax
    loop    LAB_2ea2_3335
    jmp     near ptr LAB_2ea2_3499
LAB_2ea2_333c:
    mov     cx, word ptr [si+0xe]
    mov     ax, word ptr [si+0x2]
LAB_2ea2_3342:
    cmp     word ptr [di], ax
    jg      LAB_2ea2_3355
    cmp     word ptr [di+0x3c0], ax
    jl      LAB_2ea2_335c
    add     di, 0x2
    inc     ax
    loop    LAB_2ea2_3342
    jmp     near ptr LAB_2ea2_3499
LAB_2ea2_3355:
    stosw
    inc     ax
    loop    LAB_2ea2_3355
    jmp     near ptr LAB_2ea2_3499
LAB_2ea2_335c:
    add     di, 0x3c0
LAB_2ea2_3360:
    stosw
    inc     ax
    loop    LAB_2ea2_3360
    jmp     near ptr LAB_2ea2_3499
LAB_2ea2_3367:
    mov     cx, word ptr [si+0xe]
    mov     ax, word ptr [si+0x2]
    mov     dx, word ptr [si]
    add     dx, 0x8000
    adc     ax, 0x0
    mov     bx, word ptr [si+0xc]
LAB_2ea2_3379:
    cmp     word ptr [di], ax
    jg      LAB_2ea2_3390
    cmp     word ptr [di+0x3c0], ax
    jl      LAB_2ea2_339b
    add     di, 0x2
    sub     dx, bx
    sbb     ax, 0x0
    loop    LAB_2ea2_3379
    jmp     near ptr LAB_2ea2_3499
LAB_2ea2_3390:
    stosw
    sub     dx, bx
    sbb     ax, 0x0
    loop    LAB_2ea2_3390
    jmp     near ptr LAB_2ea2_3499
LAB_2ea2_339b:
    add     di, 0x3c0
LAB_2ea2_339f:
    stosw
    sub     dx, bx
    sbb     ax, 0x0
    loop    LAB_2ea2_339f
    jmp     near ptr LAB_2ea2_3499
LAB_2ea2_33aa:
    mov     cx, word ptr [si+0xe]
    mov     ax, word ptr [si+0x2]
    mov     dx, word ptr [si]
    add     dx, 0x8000
    adc     ax, 0x0
    mov     bx, word ptr [si+0xc]
LAB_2ea2_33bc:
    cmp     word ptr [di], ax
    jg      LAB_2ea2_33d3
    cmp     word ptr [di+0x3c0], ax
    jl      LAB_2ea2_33de
    add     di, 0x2
    add     dx, bx
    adc     ax, 0x0
    loop    LAB_2ea2_33bc
    jmp     near ptr LAB_2ea2_3499
LAB_2ea2_33d3:
    stosw
    add     dx, bx
    adc     ax, 0x0
    loop    LAB_2ea2_33d3
    jmp     near ptr LAB_2ea2_3499
LAB_2ea2_33de:
    add     di, 0x3c0
LAB_2ea2_33e2:
    stosw
    add     dx, bx
    adc     ax, 0x0
    loop    LAB_2ea2_33e2
    jmp     near ptr LAB_2ea2_3499
LAB_2ea2_33ed:
    mov     cx, word ptr [si+0xe]
    mov     ax, word ptr [si+0x2]
    mov     bx, word ptr [si+0xc]
    mov     dx, word ptr [si+0x4]
    add     dx, 0x8000
    jnc     LAB_2ea2_3402
    add     di, 0x2
LAB_2ea2_3402:
    cmp     word ptr [di+0x3c0], ax
    jl      LAB_2ea2_3419
    add     dx, bx
    jnc     LAB_2ea2_3413
    cmp     word ptr [di], ax
    jg      LAB_2ea2_3431
    add     di, 0x2
LAB_2ea2_3413:
    dec     ax
    loop    LAB_2ea2_3402
    jmp     near ptr LAB_2ea2_3499
LAB_2ea2_3419:
    add     di, 0x3c0
LAB_2ea2_341d:
    stosw
LAB_2ea2_341e:
    dec     ax
    add     dx, bx
    jnc     LAB_2ea2_3428
    loop    LAB_2ea2_341d
    jmp     LAB_2ea2_3499
    db 0x90
LAB_2ea2_3428:
    loop    LAB_2ea2_341e
    jmp     LAB_2ea2_3499
    db 0x90
LAB_2ea2_342d:
    add     dx, bx
    jnc     LAB_2ea2_3438
LAB_2ea2_3431:
    stosw
    dec     ax
    loop    LAB_2ea2_342d
    jmp     LAB_2ea2_3499
    db 0x90
LAB_2ea2_3438:
    dec     ax
    loop    LAB_2ea2_342d
    inc     ax
    mov     word ptr [di], ax
    jmp     LAB_2ea2_3499
    db 0x90
LAB_2ea2_3441:
    mov     cx, word ptr [si+0xe]
    mov     ax, word ptr [si+0x2]
    mov     bx, word ptr [si+0xc]
    mov     dx, word ptr [si+0x4]
    add     dx, 0x8000
    jnc     LAB_2ea2_3456
    add     di, 0x2
LAB_2ea2_3456:
    cmp     word ptr [di], ax
    jg      LAB_2ea2_3492
    add     dx, bx
    jnc     LAB_2ea2_3467
    cmp     word ptr [di+0x3c0], ax
    jl      LAB_2ea2_346d
    add     di, 0x2
LAB_2ea2_3467:
    inc     ax
    loop    LAB_2ea2_3456
    jmp     LAB_2ea2_3499
    db 0x90
LAB_2ea2_346d:
    add     di, 0x3c0
LAB_2ea2_3471:
    mov     word ptr [di], ax
LAB_2ea2_3473:
    inc     ax
    add     dx, bx
    jnc     LAB_2ea2_3483
    add     di, 0x2
    loop    LAB_2ea2_3471
    dec     ax
    mov     word ptr [di], ax
    jmp     LAB_2ea2_3499
    db 0x90
LAB_2ea2_3483:
    loop    LAB_2ea2_3473
    add     di, 0x2
    dec     ax
    mov     word ptr [di], ax
    jmp     LAB_2ea2_3499
    db 0x90
LAB_2ea2_348e:
    add     dx, bx
    jnc     LAB_2ea2_3493
LAB_2ea2_3492:
    stosw
LAB_2ea2_3493:
    inc     ax
    loop    LAB_2ea2_348e
    jmp     LAB_2ea2_3499
    db 0x90
LAB_2ea2_3499:
    cmp     byte ptr [bp-0xc], 0x0
    jnz     LAB_2ea2_34a0
    ret
LAB_2ea2_34a0:
    mov     cx, word ptr [si+0x14]
    or      cx, cx
    jle     LAB_2ea2_34c1
    mov     di, word ptr [si+0x6]
    mov     dx, word ptr [si+0x4]
    add     dx, 0x8000
    adc     di, 0x0
    sub     di, cx
    shl     di, 0x1
    add     di, word ptr [bp-0x18]
    mov     ax, word ptr cs:[sprite1.sprite_left2]
    rep stosw
LAB_2ea2_34c1:
    mov     cx, word ptr [si+0x18]
    or      cx, cx
    jle     LAB_2ea2_34e7
    mov     di, word ptr [si+0x6]
    mov     dx, word ptr [si+0x4]
    add     dx, 0x8000
    adc     di, 0x0
    sub     di, cx
    shl     di, 0x1
    add     di, word ptr [bp-0x18]
    add     di, 0x3c0
    mov     ax, word ptr cs:[sprite1.sprite_widthsum]
    dec     ax
    rep stosw
LAB_2ea2_34e7:
    mov     cx, word ptr [si+0x16]
    or      cx, cx
    jle     LAB_2ea2_34fd
    mov     di, word ptr [si+0xa]
    inc     di
    shl     di, 0x1
    add     di, word ptr [bp-0x18]
    mov     ax, word ptr cs:[sprite1.sprite_left2]
    rep stosw
LAB_2ea2_34fd:
    mov     cx, word ptr [si+0x1a]
    or      cx, cx
    jle     LAB_2ea2_3518
    mov     di, word ptr [si+0xa]
    inc     di
    shl     di, 0x1
    add     di, word ptr [bp-0x18]
    add     di, 0x3c0
    mov     ax, word ptr cs:[sprite1.sprite_widthsum]
    dec     ax
    rep stosw
LAB_2ea2_3518:
    ret
preRender_helper3_asm_ endp

; undefined __cdecl16far nopsub_31F39(undefined2 param_1, int param_2, int param_3)
nopsub_31F39_asm_ proc far
    var_7D0    = word ptr  -2000
    var_798    = byte ptr  -1944
    var_3D8    = byte ptr  -984
    var_18     = word ptr  -24
    var_16     = word ptr  -22
    var_14     = word ptr  -20
    var_12     = word ptr  -18
    var_10     = word ptr  -16
    var_E      = word ptr  -14
    var_C      = byte ptr  -12
    var_A      = byte ptr  -10
    var_8      = word ptr   -8
    var_6      = word ptr   -6
    var_4      = word ptr   -4
    var_2      = word ptr   -2
    param_1    = word ptr    6
    param_2    = word ptr    8
    param_3    = word ptr   10

    push    bp
    mov     bp, sp
    sub     sp, 0x7d0
    push    si
    push    di
    mov     byte ptr [bp+var_A], 0x1
    mov     ax, offset draw_filled_lines
    mov     word ptr [spritefunc], ax
    mov     ax, 0x49a0
    mov     word ptr [imagefunc], ax
    jmp     LAB_2ea2_354e
    db 0x90
nopsub_31F39_asm_ endp

; undefined __stdcall16near nopsub_31F55(undefined2 param_1, undefined2 param_2, int param_3, int param_4)
nopsub_31F55_asm_ proc near
    var_A      = byte ptr  -10
    param_1    = word ptr    4
    param_2    = word ptr    6
    param_3    = word ptr    8
    param_4    = word ptr   10

    push    bp
    mov     bp, sp
    sub     sp, 0x7d0
    push    si
    push    di
    mov     byte ptr [bp+var_A], 0x0
    mov     ax, offset draw_filled_lines
    mov     word ptr [spritefunc], ax
    mov     ax, 0x49a0
    mov     word ptr [imagefunc], ax
nopsub_31F55_asm_ endp
LAB_2ea2_354e:
    lea     si, [bp+0xa]
    mov     word ptr [bp+var_6], si
    mov     cx, word ptr [bp+0x8]
    mov     ax, cx
    dec     ax
    shl     ax, 0x1
    add     ax, si
    mov     word ptr [bp+var_8], ax
    cld
    mov     ax, ss
    mov     es, ax
    lea     ax, [bp+var_798]
    mov     word ptr [bp+var_18], ax
    mov     ax, word ptr cs:[sprite1.sprite_left2]
    mov     word ptr [bp+var_2], ax
    mov     ax, word ptr cs:[sprite1.sprite_widthsum]
    dec     ax
    mov     word ptr [bp+var_4], ax
    mov     di, word ptr [si]
    mov     ax, word ptr [di+0x6]
    sub     ax, word ptr [di+0x14]
    sub     ax, word ptr [di+0x18]
    mov     word ptr [bp+var_E], ax
    mov     ax, word ptr [di+0xa]
    add     ax, word ptr [di+0x16]
    add     ax, word ptr [di+0x1a]
    mov     word ptr [bp+var_12], ax
    mov     word ptr [bp+var_7D0], 0x3
    mov     bx, word ptr [di+0x2]
    mov     dx, word ptr [di+0x8]
    cmp     bx, dx
    jle     LAB_2ea2_35a8
    xchg    dx, bx
LAB_2ea2_35a8:
    mov     word ptr [bp+var_10], si
    mov     word ptr [bp+var_14], si
    add     si, 0x2
    dec     cx
    jnz     LAB_2ea2_35c8
    mov     ax, word ptr [bp+0x6]
    mov     word ptr [bp+di+0x6], ax
    push    di
    call    dword ptr [imagefunc]
    add     sp, 0x2
    pop     di
    pop     si
    mov     sp, bp
    pop     bp
    retf
LAB_2ea2_35c8:
    mov     di, word ptr [si]
    mov     ax, word ptr [di+0x6]
    sub     ax, word ptr [di+0x14]
    sub     ax, word ptr [di+0x18]
    cmp     ax, word ptr [bp+var_E]
    jg      LAB_2ea2_35f0
    jnz     LAB_2ea2_35e2
    test    word ptr [bp+var_7D0], 0x1
    jz      LAB_2ea2_35f5
LAB_2ea2_35e2:
    mov     word ptr [bp+var_E], ax
    mov     word ptr [bp+var_10], si
    or      word ptr [bp+var_7D0], 0x1
    jmp     LAB_2ea2_35f5
    db 0x90
LAB_2ea2_35f0:
    and     word ptr [bp+var_7D0], 0x2
LAB_2ea2_35f5:
    mov     ax, word ptr [di+0xa]
    add     ax, word ptr [di+0x16]
    add     ax, word ptr [di+0x1a]
    cmp     ax, word ptr [bp+var_12]
    jl      LAB_2ea2_361b
    jnz     LAB_2ea2_360d
    test    word ptr [bp+var_7D0], 0x2
    jnz     LAB_2ea2_3620
LAB_2ea2_360d:
    mov     word ptr [bp+var_12], ax
    mov     word ptr [bp+var_14], si
    or      word ptr [bp+var_7D0], 0x2
    jmp     LAB_2ea2_3620
    db 0x90
LAB_2ea2_361b:
    and     word ptr [bp+var_7D0], 0x1
LAB_2ea2_3620:
    mov     ax, word ptr [di+0x2]
    cmp     ax, bx
    jge     LAB_2ea2_3629
    mov     bx, ax
LAB_2ea2_3629:
    cmp     ax, dx
    jle     LAB_2ea2_362f
    mov     dx, ax
LAB_2ea2_362f:
    mov     ax, word ptr [di+0x8]
    cmp     ax, bx
    jge     LAB_2ea2_3638
    mov     bx, ax
LAB_2ea2_3638:
    cmp     ax, dx
    jle     LAB_2ea2_363e
    mov     dx, ax
LAB_2ea2_363e:
    add     si, 0x2
    loop    LAB_2ea2_35c8
    cmp     dx, word ptr [bp+var_2]
    jl      LAB_2ea2_3696
    cmp     bx, word ptr [bp+var_4]
    jge     LAB_2ea2_3696
    mov     ax, word ptr [bp+var_12]
    cmp     ax, word ptr cs:[sprite1.sprite_top]
    jl      LAB_2ea2_3696
    mov     cx, word ptr [bp+var_E]
    cmp     cx, word ptr cs:[sprite1.sprite_height]
    jge     LAB_2ea2_3696
    mov     byte ptr [bp+var_C], 0x0
    cmp     dx, word ptr [bp+var_4]
    jg      LAB_2ea2_367d
    cmp     bx, word ptr [bp+var_2]
    jl      LAB_2ea2_367d
    cmp     ax, word ptr cs:[sprite1.sprite_height]
    jge     LAB_2ea2_367d
    cmp     cx, word ptr cs:[sprite1.sprite_top]
    jge     LAB_2ea2_3681
LAB_2ea2_367d:
    mov     byte ptr [bp+var_C], 0x1
LAB_2ea2_3681:
    cmp     ax, cx
    jz      LAB_2ea2_3689
    cmp     dx, bx
    jnz     LAB_2ea2_369c
LAB_2ea2_3689:
    mov     si, word ptr [bp+var_6]
    mov     di, word ptr [si]
    push    di
    call    dword ptr [imagefunc]
    add     sp, 0x2
LAB_2ea2_3696:
    pop     di
    pop     si
    mov     sp, bp
    pop     bp
    retf
LAB_2ea2_369c:
    mov     di, word ptr [bp+var_10]
LAB_2ea2_369f:
    mov     si, word ptr [di]
    cmp     byte ptr [si+0x12], 0x2
    jl      LAB_2ea2_36bc
    mov     word ptr [bp+var_16], di
    cmp     byte ptr [bp+var_C], 0x0
    jz      LAB_2ea2_36b6
    call    near ptr preRender_helper
    jmp     LAB_2ea2_36b9
    db 0x90
LAB_2ea2_36b6:
    call    near ptr preRender_helper2
LAB_2ea2_36b9:
    mov     di, word ptr [bp+var_16]
LAB_2ea2_36bc:
    cmp     di, word ptr [bp+var_14]
    jz      LAB_2ea2_36ce
    add     di, 0x2
    cmp     di, word ptr [bp+var_8]
    jbe     LAB_2ea2_369f
    mov     di, word ptr [bp+var_6]
    jmp     LAB_2ea2_369f
LAB_2ea2_36ce:
    mov     di, word ptr [bp+var_10]
LAB_2ea2_36d1:
    sub     di, 0x2
    cmp     di, word ptr [bp+var_6]
    jnc     LAB_2ea2_36dc
    mov     di, word ptr [bp+var_8]
LAB_2ea2_36dc:
    cmp     di, word ptr [bp+var_14]
    jz      LAB_2ea2_36f4
    mov     si, word ptr [di]
    cmp     byte ptr [si+0x12], 0x2
    jl      LAB_2ea2_36d1
    mov     word ptr [bp+var_16], di
    call    near ptr preRender_helper3
    mov     di, word ptr [bp+var_16]
    jmp     LAB_2ea2_36d1
LAB_2ea2_36f4:
    mov     ax, word ptr [bp+var_12]
    cmp     ax, word ptr cs:[sprite1.sprite_height]
    jl      LAB_2ea2_3703
    mov     ax, word ptr cs:[sprite1.sprite_height]
    dec     ax
LAB_2ea2_3703:
    mov     bx, word ptr [bp+var_E]
    cmp     bx, word ptr cs:[sprite1.sprite_top]
    jge     LAB_2ea2_3712
    mov     bx, word ptr cs:[sprite1.sprite_top]
LAB_2ea2_3712:
    sub     ax, bx
    jle     LAB_2ea2_3733
    inc     ax
    push    word ptr [bp+0x6]
    push    ax
    push    bx
    shl     bx, 0x1
    lea     ax, [bp+var_3D8]
    add     ax, bx
    push    ax
    lea     ax, [bp+var_798]
    add     ax, bx
    push    ax
    call    dword ptr [spritefunc]
    add     sp, 0xa
LAB_2ea2_3733:
    pop     di
    pop     si
    mov     sp, bp
    pop     bp
    retf
    db 0

; undefined __cdecl16far nopsub_3215A(void)
nopsub_3215A_asm_ proc far
    push    di
    mov     ax, 0xb000
    mov     es, ax
    xor     di, di
    mov     cx, 0x7d0
    xor     ax, ax
    cld
    rep stosw
    pop     di
    retf
nopsub_3215A_asm_ endp

; undefined __cdecl16far nopsub_3216C(void)
nopsub_3216C_asm_ proc far
    push    si
    push    di
    push    ds
    mov     al, byte ptr [byte_4032A]
    mov     bl, 0xa0
    mul     bl
    mov     si, ax
    mov     di, si
    add     si, 0xa0
    mov     ax, 0x18
    sub     al, byte ptr [byte_4032A]
    mov     bl, 0x50
    mul     bl
    mov     cx, ax
    mov     ax, es
    mov     ds, ax
    cld
    rep movsw
    xor     ax, ax
    mov     cx, 0x50
    rep stosw
    pop     ds
    pop     di
    pop     si
    retf
nopsub_3216C_asm_ endp

; undefined __cdecl16far nopsub_debug_print(char * fmt, ...)
nopsub_debug_print_asm_ proc far
    fmt        = word ptr    6

    pop     ax
    mov     word ptr [word_40332], ax
    pop     ax
    mov     word ptr [word_40334], ax
    mov     ax, 0x4bc6
    push    ax                                 ; char *
    call    far ptr _sprintf
    add     sp, 0x2
    mov     byte ptr [byte_4032B], 0x1
    mov     ax, word ptr [word_4032E]
    mov     word ptr [word_40330], ax
LAB_2ea2_379c:
    mov     ax, word ptr [word_40334]
    push    ax
    mov     ax, word ptr [word_40332]
    push    ax
    push    si
    mov     ax, 0xb000
    mov     es, ax
    mov     si, 0x4bc6
    mov     dh, byte ptr [byte_4032C]
LAB_2ea2_37b1:
    mov     dl, byte ptr [si]
    inc     si
    or      dl, dl
    jz      LAB_2ea2_37dd
    cmp     dl, 0x20
    jl      LAB_2ea2_37ec
    mov     bx, word ptr [word_40330]
    cmp     bx, 0xfa0
    jl      LAB_2ea2_37d3
    call    far ptr nopsub_3216C
    mov     bx, 0xf00
    mov     word ptr [word_40330], bx
LAB_2ea2_37d3:
    mov     word ptr es:[bx], dx
    add     word ptr [word_40330], 0x2
    jmp     LAB_2ea2_37b1
LAB_2ea2_37dd:
    cmp     byte ptr [byte_4032B], 0x0
    jz      LAB_2ea2_37ea
    mov     ax, word ptr [word_40330]
    mov     word ptr [word_4032E], ax
LAB_2ea2_37ea:
    pop     si
    retf
LAB_2ea2_37ec:
    cmp     dl, 0xa
    jnz     LAB_2ea2_381a
    cmp     word ptr [word_40330], 0xf00
    jle     LAB_2ea2_3806
    call    far ptr nopsub_3216C
    mov     word ptr [word_40330], 0xf00
    jmp     LAB_2ea2_37b1
LAB_2ea2_3806:
    mov     ax, word ptr [word_40330]
    mov     bx, 0xa0
    div     bl
    xor     ah, ah
    mul     bl
    add     ax, 0xa0
    mov     word ptr [word_40330], ax
    jmp     LAB_2ea2_37b1
LAB_2ea2_381a:
    cmp     dl, 0x8
    jnz     LAB_2ea2_382d
    cmp     word ptr [word_40330], 0x0
    jz      LAB_2ea2_37b1
    sub     word ptr [word_40330], 0x2
    jmp     LAB_2ea2_37b1
LAB_2ea2_382d:
    cmp     dl, 0xc
    jnz     LAB_2ea2_3840
    call    far ptr nopsub_3215A
    mov     word ptr [word_40330], 0x0
    jmp     near ptr LAB_2ea2_37b1
LAB_2ea2_3840:
    cmp     dl, 0x9
    jnz     LAB_2ea2_384f
    add     word ptr [word_40330], 0x10
    and     word ptr [word_40330], 0xfff0
LAB_2ea2_384f:
    jmp     near ptr LAB_2ea2_37b1
    pop     ax
    mov     word ptr [word_40332], ax
    pop     ax
    mov     word ptr [word_40334], ax
    pop     dx
    pop     ax
    mov     bx, 0xa0
    mul     bl
    add     ax, dx
    mov     word ptr [word_40330], ax
    mov     ax, 0x4bc6
    push    ax                                 ; char *
    call    far ptr _sprintf
    sub     sp, 0x2
    mov     byte ptr [byte_4032B], 0x0
    jmp     near ptr LAB_2ea2_379c
    push    bp
    mov     bp, sp
    mov     ax, word ptr [bp+0x6]
    cmp     ax, 0x0
    jge     LAB_2ea2_3887
    xor     ax, ax
LAB_2ea2_3887:
    cmp     ax, 0x18
    jle     LAB_2ea2_388f
    mov     ax, 0x18
LAB_2ea2_388f:
    mov     byte ptr [byte_4032A], al
    pop     bp
    retf
nopsub_debug_print_asm_ endp

; undefined __cdecl16far nopsub_322B4(byte param_1)
nopsub_322B4_asm_ proc far
    param_1    = byte ptr    6

    push    bp
    mov     bp, sp
    mov     ax, word ptr [bp+param_1]
    mov     byte ptr [byte_4032C], al
    pop     bp
    retf
nopsub_322B4_asm_ endp
    db 0

; undefined __cdecl16far nopsub_322C0(word param_1, word param_2)
nopsub_322C0_asm_ proc far
    param_1    = word ptr    6
    param_2    = word ptr    8

    push    bp
    mov     bp, sp
    mov     ax, word ptr [bp+param_1]
    mov     word ptr [projectiondata4], ax
    add     ax, word ptr [projectiondata3]
    mov     word ptr [projectiondata5], ax
    mov     ax, word ptr [bp+param_2]
    mov     word ptr [projectiondata7], ax
    add     ax, word ptr [projectiondata6]
    mov     word ptr [projectiondata8], ax
    pop     bp
    retf
nopsub_322C0_asm_ endp

; undefined __stdcall16near nopsub_322DF(undefined2 param_1, word param_2, word param_3, uint param_4, uint param_5)
nopsub_322DF_asm_ proc near
    param_1    = word ptr    4
    param_2    = word ptr    6
    param_3    = word ptr    8
    param_4    = word ptr   10
    param_5    = word ptr   12

    push    bp
    mov     bp, sp
    push    si
    push    di
    mov     ax, word ptr [bp+param_2]
    mov     word ptr [projectiondata1], ax
    mov     ax, word ptr [bp+param_3]
    mov     word ptr [projectiondata2], ax
    jmp     LAB_2ea2_3914
nopsub_322DF_asm_ endp
    db 0x90

; void __cdecl16far set_projection(int i1, int i2, int i3, int i4)
set_projection_asm_ proc far
    i1         = word ptr    6
    i2         = word ptr    8
    i3         = word ptr   10
    i4         = word ptr   12

    push    bp
    mov     bp, sp
    push    si
    push    di
    mov     ax, word ptr [bp+i1]
    xor     dh, dh
    mov     dl, ah
    mov     ah, al
    xor     al, al
    mov     cx, 0x3
LAB_2ea2_38e6:
    shl     ax, 0x1
    rcl     dx, 0x1
    loop    LAB_2ea2_38e6
    mov     cx, 0x168
    div     cx
    shr     ax, 0x1
    mov     word ptr [projectiondata1], ax
    mov     ax, word ptr [bp+i2]
    xor     dh, dh
    mov     dl, ah
    mov     ah, al
    xor     al, al
    mov     cx, 0x3
LAB_2ea2_3904:
    shl     ax, 0x1
    rcl     dx, 0x1
    loop    LAB_2ea2_3904
    mov     cx, 0x168
    div     cx
    shr     ax, 0x1
    mov     word ptr [projectiondata2], ax
LAB_2ea2_3914:
    mov     ax, word ptr [bp+i3]
    shr     ax, 0x1
    mov     word ptr [projectiondata3], ax
    add     ax, word ptr [projectiondata4]
    mov     word ptr [projectiondata5], ax
    mov     ax, word ptr [bp+i4]
    shr     ax, 0x1
    mov     word ptr [projectiondata6], ax
    add     ax, word ptr [projectiondata7]
    mov     word ptr [projectiondata8], ax
    push    word ptr [projectiondata1]
    call    far ptr int_cos
    add     sp, 0x2
    mul     word ptr [projectiondata3]
    mov     si, ax
    mov     di, dx
    push    word ptr [projectiondata1]
    call    far ptr int_sin
    add     sp, 0x2
    mov     cx, ax
    mov     dx, di
    mov     ax, si
    div     cx
    mov     word ptr [projectiondata9], ax
;  
;   
    mov     bx, word ptr [projectiondata2]
    or      bx, bx
    jz      LAB_2ea2_3994
    push    word ptr [projectiondata2]
    call    far ptr int_cos
    add     sp, 0x2
    mul     word ptr [projectiondata6]
    mov     si, ax
    mov     di, dx
    push    word ptr [projectiondata2]
    call    far ptr int_sin
    add     sp, 0x2
    mov     cx, ax
    mov     dx, di
    mov     ax, si
    div     cx
    mov     word ptr [projectiondata10], ax
    pop     di
    pop     si
    pop     bp
    retf
LAB_2ea2_3994:
    mov     bx, ax
    shr     bx, 0x1
    shr     bx, 0x1
    shr     bx, 0x1
    sub     ax, bx
    shr     bx, 0x1
    sub     ax, bx
    mov     word ptr [projectiondata10], ax
    push    word ptr [projectiondata6]
    push    ax
    call    far ptr int_atan2
    add     sp, 0x4
    mov     word ptr [projectiondata2], ax
    pop     di
    pop     si
    pop     bp
    retf
set_projection_asm_ endp
; returns something like x/z, y/z  

; void __cdecl16far vector_to_point(VECTOR * invec, POINT2D * outpt)
vector_to_point_asm_ proc far
    invec      = word ptr    6
    outpt      = word ptr    8

    push    bp
    mov     bp, sp
    push    di
    push    si
    mov     si, word ptr [bp+invec]
    mov     di, word ptr [bp+outpt]
    mov     cx, word ptr [si+0x4]
    or      cx, cx
    jle     LAB_2ea2_3a11
    mov     ax, word ptr [si]
    or      ax, ax
    jl      LAB_2ea2_39ef
    mul     word ptr [projectiondata9]
    mov     bx, dx
    shl     bx, 0x1
    or      ax, ax
    jge     LAB_2ea2_39de
    inc     bx
LAB_2ea2_39de:
    cmp     cx, bx
    jle     LAB_2ea2_3a20
    div     cx
    add     ax, word ptr [projectiondata5]
    jo      LAB_2ea2_3a1c
    mov     word ptr [di], ax
    jmp     LAB_2ea2_3a2d
    db 0x90
LAB_2ea2_39ef:
    neg     ax
    mul     word ptr [projectiondata9]
    mov     bx, dx
    shl     bx, 0x1
    or      ax, ax
    jge     LAB_2ea2_39fe
    inc     bx
LAB_2ea2_39fe:
    cmp     cx, bx
    jle     LAB_2ea2_3a28
    div     cx
    neg     ax
    add     ax, word ptr [projectiondata5]
    jo      LAB_2ea2_3a1c
    mov     word ptr [di], ax
    jmp     LAB_2ea2_3a2d
    db 0x90
LAB_2ea2_3a11:
    mov     ax, 0x8000
    mov     word ptr [di], ax
    mov     word ptr [di+0x2], ax
    jmp     LAB_2ea2_3a52
    db 0x90
LAB_2ea2_3a1c:
    or      ax, ax
    jge     LAB_2ea2_3a28
LAB_2ea2_3a20:
    mov     ax, 0x7d00
    mov     word ptr [di], ax
    jmp     LAB_2ea2_3a2d
    db 0x90
LAB_2ea2_3a28:
    mov     ax, 0x8300
    mov     word ptr [di], ax
LAB_2ea2_3a2d:
    mov     ax, word ptr [si+0x2]
    or      ax, ax
    jl      LAB_2ea2_3a56
    mul     word ptr [projectiondata10]
    mov     bx, dx
    shl     bx, 0x1
    or      ax, ax
    jge     LAB_2ea2_3a41
    inc     bx
LAB_2ea2_3a41:
    cmp     cx, bx
    jle     LAB_2ea2_3a7a
    div     cx
    neg     ax
    add     ax, word ptr [projectiondata8]
    jo      LAB_2ea2_3a76
    mov     word ptr [di+0x2], ax
LAB_2ea2_3a52:
    pop     si
    pop     di
    pop     bp
    retf
LAB_2ea2_3a56:
    neg     ax
    mul     word ptr [projectiondata10]
    mov     bx, dx
    shl     bx, 0x1
    or      ax, ax
    jge     LAB_2ea2_3a65
    inc     bx
LAB_2ea2_3a65:
    cmp     cx, bx
    jle     LAB_2ea2_3a82
    div     cx
    add     ax, word ptr [projectiondata8]
    jo      LAB_2ea2_3a76
    mov     word ptr [di+0x2], ax
    jmp     LAB_2ea2_3a52
LAB_2ea2_3a76:
    or      ax, ax
    jl      LAB_2ea2_3a82
LAB_2ea2_3a7a:
    mov     ax, 0x8300
    mov     word ptr [di+0x2], ax
    jmp     LAB_2ea2_3a52
LAB_2ea2_3a82:
    mov     ax, 0x7d00
    mov     word ptr [di+0x2], ax
    jmp     LAB_2ea2_3a52
vector_to_point_asm_ endp

; void __cdecl16far sprite_free_wnd(SPRITE * wndsprite_)
sprite_free_wnd_asm_ proc far
    wndsprite_ = dword ptr   6

    push    bp
    mov     bp, sp
    push    ds
    push    si
    push    di
    mov     es, word ptr [bp+wndsprite_+2]
    mov     di, word ptr [bp+wndsprite_]
    mov     ds, word ptr es:[di+0x2]
    mov     si, word ptr es:[di]
    mov     ax, word ptr [si+0x2]
    add     ax, 0xf
    shl     ax, 0x1
    mov     dx, ax
    add     dx, di
    mov     bx, word ptr cs:[next_wnd_def]
    cmp     bx, dx
    jnz     LAB_2ea2_3acc
    sub     bx, ax
    mov     word ptr cs:[next_wnd_def], bx
    push    ds
    push    si
    mov     ax, ss
    mov     ds, ax
    call    far ptr mmgr_release
    add     sp, 0x4
    pop     di
    pop     si
    pop     ds
    pop     bp
    retf
LAB_2ea2_3acc:
    mov     ax, ss
    mov     ds, ax
    lea     ax, [aWindowReleased]
    push    ax
    call    far ptr fatal_error
sprite_free_wnd_asm_ endp

; uint __cdecl16far file_write_nofatal(char * filename, void * src, ulong length_)
file_write_nofatal_asm_ proc far
    var_fatal  = word ptr   -4
    filename   = word ptr    6
    src        = dword ptr  10
    length_    = dword ptr  14

    push    bp
    mov     bp, sp
    sub     sp, 0x6
    push    ds
    push    si
    push    di
    mov     word ptr [bp+var_fatal], 0x0
    jmp     _file_write
file_write_nofatal_asm_ endp
    db 0x90

; uint __cdecl16far file_write_fatal(char * filename, void * src, ulong length_)
file_write_fatal_asm_ proc far
    var_errno  = word ptr   -6
    var_fatal  = word ptr   -4
    var_filehandle = word ptr   -2
    filename   = word ptr    6
    src        = dword ptr  10
    length_    = dword ptr  14

    push    bp
    mov     bp, sp
    sub     sp, 0x6
    push    ds
    push    si
    push    di
    mov     word ptr [bp+var_fatal], 0x1
_file_write:
    mov     dx, word ptr [bp+filename]
    xor     cx, cx
    mov     ah, 0x3c
    int     0x21                               ; DOS - 2+ - CREATE A FILE WITH HANDLE (CREAT)
                                               ; CX = attributes for file
                                               ; DS:DX -> ASCIZ filename (may include drive and path)
    jc      LAB_2ea2_3b50
    mov     word ptr [bp+var_filehandle], ax
LAB_2ea2_3b07:
    cmp     word ptr [bp+src+2], 0x0
    jnz     LAB_2ea2_3b13
    cmp     word ptr [bp+length_], 0x0
    jz      LAB_2ea2_3b7e
LAB_2ea2_3b13:
    mov     cx, 0x4000
    mov     ax, word ptr [bp+src+2]
    sub     word ptr [bp+src+2], cx
    sbb     word ptr [bp+length_], 0x0
    jnc     LAB_2ea2_3b33
    mov     cx, word ptr [bp+src+2]
    mov     word ptr [bp+src+2], 0x0
    mov     word ptr [bp+length_], 0x0
    add     cx, 0x4000
LAB_2ea2_3b33:
    mov     ds, word ptr [bp+src]
    mov     dx, word ptr [bp+0x8]
    mov     bx, word ptr [bp+var_filehandle]
    mov     ah, 0x40
    int     0x21                               ; DOS - 2+ - WRITE TO FILE WITH HANDLE
                                               ; BX = file handle, CX = number of bytes to write, DS:DX -> buffer
    jc      LAB_2ea2_3b50
    cmp     ax, cx
    jnz     LAB_2ea2_3b4d
    add     word ptr [bp+src], 0x400
    jmp     LAB_2ea2_3b07
LAB_2ea2_3b4d:
    mov     ax, 0x1
LAB_2ea2_3b50:
    mov     word ptr [bp+var_errno], ax
    mov     bx, word ptr [bp+var_filehandle]
    mov     ah, 0x3e
    int     0x21                               ; DOS - 2+ - CLOSE A FILE WITH HANDLE
                                               ; BX = file handle
    mov     ax, ss
    mov     ds, ax
    mov     dx, word ptr [bp+filename]
    mov     ah, 0x41
    int     0x21                               ; DOS - 2+ - DELETE A FILE (UNLINK)
                                               ; DS:DX -> ASCIZ pathname of file to delete (no wildcards allowed)
    mov     ax, word ptr [bp+var_errno]
    cmp     word ptr [bp+var_fatal], 0x0
    jnz     LAB_2ea2_3b87
    mov     ax, ss
    mov     ds, ax
    mov     ax, offset aSFileError_0
    push    word ptr [bp+filename]
    push    ax
    call    far ptr fatal_error
LAB_2ea2_3b7e:
    mov     bx, word ptr [bp+var_filehandle]
    mov     ah, 0x3e
    int     0x21                               ; DOS - 2+ - CLOSE A FILE WITH HANDLE
                                               ; BX = file handle
    xor     ax, ax
LAB_2ea2_3b87:
    pop     di
    pop     si
    pop     ds
    mov     sp, bp
    pop     bp
    retf
file_write_fatal_asm_ endp

; void __cdecl16far video_add_exithandler(void)
video_add_exithandler_asm_ proc far
    cmp     byte ptr [currentvideomode], 0x0
    jnz     LAB_2ea2_3bb5
    mov     ah, 0xf
    int     0x10                               ; - VIDEO - GET CURRENT VIDEO MODE
                                               ; Return: AH = number of columns on screen
                                               ; AL = current video mode
                                               ; BH = current active display page
    mov     byte ptr [currentvideomode], al
    mov     ax, 0x40
    mov     es, ax
    mov     al, es:[0x10]
    mov     byte ptr [byte_403F3], al
    push    cs
    mov     ax, offset video_on_exit
    push    ax
    call    far ptr add_exit_handler
    add     sp, 0x4
LAB_2ea2_3bb5:
    retf
video_add_exithandler_asm_ endp

; void __cdecl16far video_on_exit(void)
video_on_exit_asm_ proc far
    mov     ax, 0x40
    mov     es, ax
    mov     al, byte ptr [byte_403F3]
    mov     es:[0x10], al
    mov     ah, 0x0
    mov     al, byte ptr [currentvideomode]
    int     0x10                               ; - VIDEO - SET VIDEO MODE
                                               ; AL = mode
    mov     ax, 0x40
    mov     es, ax
    mov     al, byte ptr [byte_403F3]
    mov     es:[0x10], al
    and     al, 0x30
    cmp     al, 0x30
    jnz     LAB_2ea2_3be6
    xor     ax, ax
    push    ax
    call    far ptr video_clear_color
    add     sp, 0x2
LAB_2ea2_3be6:
    mov     ah, 0xb
    mov     bx, 0x0
    int     0x10                               ; - VIDEO -
    retf
video_on_exit_asm_ endp

; void __cdecl16far sprite_copy_both_to_arg(SPRITE * dst)
sprite_copy_both_to_arg_asm_ proc far
    dst        = word ptr    6

    push    bp
    mov     bp, sp
    push    ds
    push    di
    push    si
    lea     si, [sprite1]
    mov     di, word ptr [bp+dst]
    mov     ax, ds
    mov     es, ax
    mov     ax, cs
    mov     ds, ax
    cld
    mov     cx, 0x1e
    rep movsw
    pop     si
    pop     di
    pop     ds
    pop     bp
    retf
sprite_copy_both_to_arg_asm_ endp

; void __cdecl16far sprite_copy_arg_to_both(SPRITE * src)
sprite_copy_arg_to_both_asm_ proc far
    src        = word ptr    6

    push    bp
    mov     bp, sp
    push    ds
    push    di
    push    si
    mov     si, word ptr [bp+src]
    mov     ax, cs
    mov     es, ax
    lea     di, [sprite1]
    cld
    mov     cx, 0x1e
caseD_3:
    rep movsw
    pop     si
    pop     di
    pop     ds
    pop     bp
    retf
sprite_copy_arg_to_both_asm_ endp

; ushort __cdecl16far file_get_res_shape_count(void * memchunk_)
file_get_res_shape_count_asm_ proc far
    memchunk_  = dword ptr   6

    push    bp
    mov     bp, sp
    push    si
    mov     es, word ptr [bp+memchunk_+2]
    mov     si, word ptr [bp+memchunk_]
    mov     ax, word ptr es:[si+0x4]
    pop     si
    pop     bp
    retf
file_get_res_shape_count_asm_ endp

; SHAPE2D * __cdecl16far file_get_shape2d(void * memchunk_, int idx)
file_get_shape2d_asm_ proc far
    memchunk_  = dword ptr   6
    idx        = word ptr   10

    push    bp
    mov     bp, sp
    push    si
    mov     es, word ptr [bp+memchunk_+2]
    mov     si, word ptr [bp+memchunk_]
    mov     ax, word ptr es:[si+0x4]           ; number of objects in resource file
    shl     ax, 0x1
    shl     ax, 0x1
    mov     bx, word ptr [bp+idx]              ; index
    shl     bx, 0x1
    shl     bx, 0x1
    add     bx, ax                             ; bx = index<<2 + count<<2
    add     bx, 0x6                            ; bx += 6
    shl     ax, 0x1                            ; ax = index<<2 << 1
    add     ax, 0x6                            ; ax += 6
    mov     cx, es
    xor     dx, dx
    shl     cx, 0x1
    rcl     dx, 0x1
    shl     cx, 0x1
    rcl     dx, 0x1
    shl     cx, 0x1
    rcl     dx, 0x1
    shl     cx, 0x1
    rcl     dx, 0x1
    add     ax, cx
    adc     dx, 0x0
    add     ax, word ptr es:[bx]
    adc     dx, word ptr es:[bx+0x2]
    mov     bx, ax
    and     bx, 0xf
    shr     dx, 0x1
    rcr     ax, 0x1
    shr     dx, 0x1
    rcr     ax, 0x1
    shr     dx, 0x1
    rcr     ax, 0x1
    shr     dx, 0x1
    rcr     ax, 0x1
    mov     dx, ax
    mov     ax, bx
    pop     si
    pop     bp
    retf
file_get_shape2d_asm_ endp

; undefined __cdecl16far nopsub_326BA(int param_1, undefined2 param_2, int param_3, undefined2 * param_4)
nopsub_326BA_asm_ proc far
    param_1    = word ptr    6
    param_2    = word ptr    8
    param_3    = word ptr   10
    param_4    = word ptr   12

    push    bp
    mov     bp, sp
    push    si
    mov     es, word ptr [bp+param_2]
    mov     si, word ptr [bp+param_1]
    mov     bx, word ptr [bp+param_3]
    shl     bx, 0x1
    shl     bx, 0x1
    mov     ax, word ptr es:[bx+si+0x6]
    mov     dx, word ptr es:[bx+si+0x8]
    mov     si, word ptr [bp+param_4]
    mov     word ptr [si], ax
    mov     word ptr [si+0x2], dx
    pop     si
    pop     bp
    retf
nopsub_326BA_asm_ endp

; ******************************************************************************
; * Returns a sine from a given angle. 
; * Please note there is a 4000h factor 
; * included in the sine!!
; * dbg: intsin
; ******************************************************************************

; short __cdecl16far int_sin(ushort s)
int_sin_asm_ proc far
    s          = word ptr    6

    push    bp
    mov     bp, sp
    mov     ax, word ptr [bp+s]
code_int_sin_main:
    mov     bl, ah
    xor     ah, ah
    and     bx, 0x3                            ; constrain angles to [0, 2pi]
    shl     bx, 0x1
    jmp     word ptr cs:[bx+off_326F2]
off_326F2:
    dw LAB_2ea2_3cda
    dw LAB_2ea2_3ce4
    dw LAB_2ea2_3cf1
    dw LAB_2ea2_3cfd
LAB_2ea2_3cda:
    mov     bx, ax
    shl     bx, 0x1
    mov     ax, word ptr [bx+sinetable]
    pop     bp
    retf
LAB_2ea2_3ce4:
    mov     bx, 0x100
    sub     bx, ax
    shl     bx, 0x1
    mov     ax, word ptr [bx+sinetable]
    pop     bp
    retf
LAB_2ea2_3cf1:
    mov     bx, ax
    shl     bx, 0x1
    mov     ax, word ptr [bx+sinetable]
    neg     ax
    pop     bp
    retf
LAB_2ea2_3cfd:
    mov     bx, 0x100
    sub     bx, ax
    shl     bx, 0x1
    mov     ax, word ptr [bx+sinetable]
    neg     ax
    pop     bp
    retf

; ******************************************************************************
; * dbg: intcos
; ******************************************************************************
int_sin_asm_ endp

; short __cdecl16far int_cos(ushort s)
int_cos_asm_ proc far
    s          = word ptr    6

    push    bp
    mov     bp, sp
    mov     ax, word ptr [bp+s]
    add     ax, 0x100
    jmp     code_int_sin_main
int_cos_asm_ endp
    db 0

; undefined2 __cdecl16far nopsub_32738(undefined2 param_1, undefined2 param_2, uint param_3)
nopsub_32738_asm_ proc far
    param_1    = word ptr    6
    param_2    = word ptr    8
    param_3    = word ptr   10

    push    bp
    mov     bp, sp
    mov     dx, word ptr [bp+param_2]
    mov     ax, word ptr [bp+param_1]
    div     word ptr [bp+param_3]
    pop     bp
    retf
nopsub_32738_asm_ endp

; int __cdecl16far nopsub_32746(int param_1)
nopsub_32746_asm_ proc far
    param_1    = word ptr    6

    push    bp
    mov     bp, sp
    mov     ax, word ptr [projectiondata9]
    mul     word ptr [bp+param_1]
    pop     bp
    retf
nopsub_32746_asm_ endp

; int __cdecl16far nopsub_32751(int param_1)
nopsub_32751_asm_ proc far
    param_1    = word ptr    6

    push    bp
    mov     bp, sp
    mov     ax, word ptr [projectiondata10]
    mul     word ptr [bp+param_1]
    pop     bp
    retf
nopsub_32751_asm_ endp
; Formerly transformed_shape_op_helper2

; uint __cdecl16far projectiondata9_times_ratio(uint param_1, uint param_2)
projectiondata9_times_ratio_asm_ proc far
    param_1    = word ptr    6
    param_2    = word ptr    8

    push    bp
    mov     bp, sp
    mov     ax, word ptr [projectiondata9]
    mul     word ptr [bp+param_1]
    div     word ptr [bp+param_2]
    pop     bp
    retf
projectiondata9_times_ratio_asm_ endp

; undefined2 __cdecl16far nopsub_3276A(uint param_1, uint param_2)
nopsub_3276A_asm_ proc far
    param_1    = word ptr    6
    param_2    = word ptr    8

    push    bp
    mov     bp, sp
    mov     ax, word ptr [projectiondata10]
    mul     word ptr [bp+param_1]
    div     word ptr [bp+param_2]
    pop     bp
    retf
nopsub_3276A_asm_ endp

; ulong __cdecl16far timer_get_counter(void)
timer_get_counter_asm_ proc far
    cli
    mov     ax, word ptr [timer_callback_counter]
    mov     dx, word ptr [timer_callback_counter+2]
    sti
    retf
timer_get_counter_asm_ endp

; ulong __cdecl16far timer_custom_delta(ulong ticks)
timer_custom_delta_asm_ proc far
    ticks      = dword ptr   8

    push    bp
    mov     bp, sp
    mov     bx, word ptr [bp+0x6]
    mov     cx, word ptr [bp+ticks]
    cli
    mov     ax, word ptr [timer_callback_counter]
    mov     dx, word ptr [timer_callback_counter+2]
    sti
    sub     ax, bx
    sbb     dx, cx
    pop     bp
    retf
timer_custom_delta_asm_ endp

; ulong __cdecl16far timer_get_delta(void)
timer_get_delta_asm_ proc far
    mov     bx, word ptr [last_timer_callback_counter]
    mov     cx, word ptr [last_timer_callback_counter+2]
    cli
    mov     ax, word ptr [timer_callback_counter]
    mov     dx, word ptr [timer_callback_counter+2]
    sti
    mov     word ptr [last_timer_callback_counter], ax
    mov     word ptr [last_timer_callback_counter+2], dx
    sub     ax, bx
    sbb     dx, cx
    retf
timer_get_delta_asm_ endp

; void __cdecl16far timer_reset(void)
timer_reset_asm_ proc far
    xor     ax, ax
    mov     word ptr [timer_callback_counter], ax
    mov     word ptr [timer_callback_counter+2], ax
    retf
timer_reset_asm_ endp

; ulong __cdecl16far timer_copy_counter(ulong ticks)
timer_copy_counter_asm_ proc far
    ticks      = dword ptr   6

    push    bp                                 ; Stores a copy of the timer counter with the given ticks added.
    mov     bp, sp
    call    far ptr timer_get_counter
    add     ax, word ptr [bp+ticks]
    adc     dx, word ptr [bp+ticks+2]
    mov     word ptr [timer_copy_unk], ax
    mov     word ptr [timer_copy_unk+2], dx
    pop     bp
    retf
timer_copy_counter_asm_ endp

; ulong __cdecl16far timer_wait_for_dx(void)
timer_wait_for_dx_asm_ proc far
    call    far ptr timer_get_counter
    cmp     dx, word ptr [timer_copy_unk+2]
    jc      timer_wait_for_dx
    ja      LAB_2ea2_3dca
    cmp     ax, word ptr [timer_copy_unk]
    jc      timer_wait_for_dx
LAB_2ea2_3dca:
    retf
timer_wait_for_dx_asm_ endp

; bool __cdecl16far timer_compare_dx(void)
timer_compare_dx_asm_ proc far
    call    far ptr timer_get_counter
    cmp     dx, word ptr [timer_copy_unk+2]
    jc      LAB_2ea2_3de2
    ja      LAB_2ea2_3dde
    cmp     ax, word ptr [timer_copy_unk]
    jc      LAB_2ea2_3de2
LAB_2ea2_3dde:
    mov     ax, 0x1
    retf
LAB_2ea2_3de2:
    xor     ax, ax
    retf
timer_compare_dx_asm_ endp

; ulong __cdecl16far timer_get_counter_unk(ulong ticks)
timer_get_counter_unk_asm_ proc far
    var_4      = word ptr   -4
    var_2      = word ptr   -2
    ticks      = dword ptr   6

    push    bp
    mov     bp, sp
    sub     sp, 0x4
    call    far ptr timer_get_counter
    add     ax, word ptr [bp+ticks]
    adc     dx, word ptr [bp+ticks+2]
    mov     word ptr [bp+var_4], ax
    mov     word ptr [bp+var_2], dx
LAB_2ea2_3dfc:
    call    far ptr timer_get_counter
    cmp     dx, word ptr [bp+var_2]
    jc      LAB_2ea2_3dfc
    ja      LAB_2ea2_3e0d
    cmp     ax, word ptr [bp+var_4]
    jc      LAB_2ea2_3dfc
LAB_2ea2_3e0d:
    mov     sp, bp
    pop     bp
    retf
timer_get_counter_unk_asm_ endp
    db 0

; int __cdecl16far font_op(char * str_)
font_op_asm_ proc far
    str_       = dword ptr   6

    push    bp
    mov     bp, sp
    push    si
    push    di
    mov     dx, word ptr [bp+str_+2]
    or      dx, dx
    jnz     LAB_2ea2_3e2a
    xor     ax, ax
    jmp     SUB_2ea2_3e62
font_op_asm_ endp
    db 0x90

; int __cdecl16far font_op2(char * str_)
font_op2_asm_ proc far
    str_       = word ptr    6

    push    bp
    mov     bp, sp
    push    si
    push    di
    xor     dx, dx
LAB_2ea2_3e2a:
    mov     es, word ptr [fontdefptr2+2]
    mov     si, word ptr [bp+str_]
    xor     ax, ax
    mov     cl, byte ptr es:[0x14]
    mov     di, word ptr es:[0x10]
LAB_2ea2_3e3d:
    mov     bl, byte ptr [si]
    or      bl, bl
    jz      SUB_2ea2_3e62
    inc     si
    xor     bh, bh
    shl     bx, 0x1
    mov     bx, word ptr es:[bx+0x16]
    or      bx, bx
    jz      LAB_2ea2_3e3d
    or      cl, cl
    jz      LAB_2ea2_3e5b
    mov     bl, byte ptr es:[bx]
    xor     bh, bh
    mov     di, bx
LAB_2ea2_3e5b:
    add     ax, di
    dec     dx
    jz      SUB_2ea2_3e62
    jmp     LAB_2ea2_3e3d
font_op2_asm_ endp
SUB_2ea2_3e62:
    pop     di
    pop     si
    pop     bp
    retf

; void __cdecl16far preRender_patterned(uint unk, uint colour, uint vertlinecount, POINT2D * vertlines, int * param_5)
preRender_patterned_asm_ proc far
    var_A      = byte ptr  -10
    unk        = word ptr    6
    colour     = word ptr    8
    vertlinecount = word ptr   10
    vertlines  = word ptr   12
    param_5    = word ptr   14

    push    bp
    mov     bp, sp
    sub     sp, 0x7d0
    push    si
    push    di
    mov     si, word ptr [bp+vertlines]
    mov     byte ptr [bp+var_A], 0x1
    jmp     LAB_2ea2_3e88
    push    bp
    mov     bp, sp
    sub     sp, 0x7d0
    push    si
    push    di
    mov     si, word ptr [bp+0xc]
    mov     byte ptr [bp-0xa], 0x0
LAB_2ea2_3e88:
    mov     ax, word ptr [bp+unk]
    mov     word ptr [word_4031E], ax
    mov     ax, word ptr [bp+colour]
    mov     word ptr [bp+unk], ax
    mov     ax, word ptr [bp+vertlinecount]
    mov     word ptr [bp+colour], ax
    mov     ax, offset draw_patterned_lines
    mov     word ptr [spritefunc], ax
    mov     ax, offset preRender_line
    mov     word ptr [imagefunc], ax
    jmp     near ptr loc_3180A
preRender_patterned_asm_ endp

; undefined __cdecl16far nopsub_328C9(undefined2 param_1, word param_2, undefined2 param_3, int param_4, int param_5, int param_6)
nopsub_328C9_asm_ proc far
    var_A      = byte ptr  -10
    param_1    = word ptr    6
    param_2    = word ptr    8
    param_3    = word ptr   10
    param_4    = word ptr   12
    param_5    = word ptr   14
    param_6    = word ptr   16

    push    bp
    mov     bp, sp
    sub     sp, 0x7d0
    push    si
    push    di
    lea     si, [bp+param_4]
    mov     byte ptr [bp+var_A], 0x1
    jmp     LAB_2ea2_3e88
nopsub_328C9_asm_ endp

; undefined __cdecl16far nopsub_328DB(undefined2 param_1, word param_2, undefined2 param_3, int param_4, int param_5, int param_6)
nopsub_328DB_asm_ proc far
    var_A      = byte ptr  -10
    param_1    = word ptr    6
    param_2    = word ptr    8
    param_3    = word ptr   10
    param_4    = word ptr   12
    param_5    = word ptr   14
    param_6    = word ptr   16

    push    bp
    mov     bp, sp
    sub     sp, 0x7d0
    push    si
    push    di
    lea     si, [bp+param_4]
    mov     byte ptr [bp+var_A], 0x0
    jmp     LAB_2ea2_3e88
nopsub_328DB_asm_ endp
    db 0

; ******************************************************************************
; * dbg: transform
; ******************************************************************************

; int __cdecl16far vec_transform(VECTOR * invec, MATRIX * mat, VECTOR * outvec)
vec_transform_asm_ proc far
    invec      = word ptr    6
    mat        = word ptr    8
    outvec     = word ptr   10

    push    bp
    mov     bp, sp
    push    si
    push    di
    mov     bx, word ptr [bp+mat]
    mov     si, word ptr [bp+invec]
    mov     di, word ptr [bp+outvec]
    xor     dx, dx
    mov     ax, word ptr [bx]
    or      ax, ax
    jz      LAB_2ea2_3ef4
    mov     cx, word ptr [si]
    or      cx, cx
    jz      LAB_2ea2_3ef4
    imul    cx
    shl     ax, 0x1
    rcl     dx, 0x1
    shl     ax, 0x1
    rcl     dx, 0x1
LAB_2ea2_3ef4:
    mov     word ptr [di], dx
    mov     ax, word ptr [bx+0x6]
    or      ax, ax
    jz      LAB_2ea2_3f10
    mov     cx, word ptr [si+0x2]
    or      cx, cx
    jz      LAB_2ea2_3f10
    imul    cx
    shl     ax, 0x1
    rcl     dx, 0x1
    shl     ax, 0x1
    rcl     dx, 0x1
    add     word ptr [di], dx
LAB_2ea2_3f10:
    mov     ax, word ptr [bx+0xc]
    or      ax, ax
    jz      LAB_2ea2_3f2a
    mov     cx, word ptr [si+0x4]
    or      cx, cx
    jz      LAB_2ea2_3f2a
    imul    cx
    shl     ax, 0x1
    rcl     dx, 0x1
    shl     ax, 0x1
    rcl     dx, 0x1
    add     word ptr [di], dx
LAB_2ea2_3f2a:
    xor     dx, dx
    mov     ax, word ptr [bx+0x2]
    or      ax, ax
    jz      LAB_2ea2_3f43
    mov     cx, word ptr [si]
    or      cx, cx
    jz      LAB_2ea2_3f43
    imul    cx
    shl     ax, 0x1
    rcl     dx, 0x1
    shl     ax, 0x1
    rcl     dx, 0x1
LAB_2ea2_3f43:
    mov     word ptr [di+0x2], dx
    mov     ax, word ptr [bx+0x8]
    or      ax, ax
    jz      LAB_2ea2_3f61
    mov     cx, word ptr [si+0x2]
    or      cx, cx
    jz      LAB_2ea2_3f61
    imul    cx
    shl     ax, 0x1
    rcl     dx, 0x1
    shl     ax, 0x1
    rcl     dx, 0x1
    add     word ptr [di+0x2], dx
LAB_2ea2_3f61:
    mov     ax, word ptr [bx+0xe]
    or      ax, ax
    jz      LAB_2ea2_3f7c
    mov     cx, word ptr [si+0x4]
    or      cx, cx
    jz      LAB_2ea2_3f7c
    imul    cx
    shl     ax, 0x1
    rcl     dx, 0x1
    shl     ax, 0x1
    rcl     dx, 0x1
    add     word ptr [di+0x2], dx
LAB_2ea2_3f7c:
    xor     dx, dx
    mov     ax, word ptr [bx+0x4]
    or      ax, ax
    jz      LAB_2ea2_3f95
    mov     cx, word ptr [si]
    or      cx, cx
    jz      LAB_2ea2_3f95
    imul    cx
    shl     ax, 0x1
    rcl     dx, 0x1
    shl     ax, 0x1
    rcl     dx, 0x1
LAB_2ea2_3f95:
    mov     word ptr [di+0x4], dx
    mov     ax, word ptr [bx+0xa]
    or      ax, ax
    jz      LAB_2ea2_3fb3
    mov     cx, word ptr [si+0x2]
    or      cx, cx
    jz      LAB_2ea2_3fb3
    imul    cx
    shl     ax, 0x1
    rcl     dx, 0x1
    shl     ax, 0x1
    rcl     dx, 0x1
    add     word ptr [di+0x4], dx
LAB_2ea2_3fb3:
    mov     ax, word ptr [bx+0x10]
    or      ax, ax
    jz      LAB_2ea2_3fce
    mov     cx, word ptr [si+0x4]
    or      cx, cx
    jz      LAB_2ea2_3fce
    imul    cx
    shl     ax, 0x1
    rcl     dx, 0x1
    shl     ax, 0x1
    rcl     dx, 0x1
    add     word ptr [di+0x4], dx
LAB_2ea2_3fce:
    pop     di
    pop     si
    pop     bp
    retf
vec_transform_asm_ endp

; int __cdecl16far mat_multiply(MATRIX * rmat, MATRIX * lmat, MATRIX * outmat)
mat_multiply_asm_ proc far
    rmat       = word ptr    6
    lmat       = word ptr    8
    outmat     = word ptr   10

    push    bp
    mov     bp, sp
    push    si
    push    di
    mov     si, word ptr [bp+rmat]
    mov     bx, word ptr [bp+lmat]
    mov     di, word ptr [bp+outmat]
    mov     cx, 0x9
LAB_2ea2_3fe3:
    xor     dx, dx
    mov     ax, word ptr [si]
    or      ax, ax
    jz      LAB_2ea2_3ffa
    cmp     word ptr [bx], 0x0
    jz      LAB_2ea2_3ffa
    imul    word ptr [bx]
    shl     ax, 0x1
    rcl     dx, 0x1
    shl     ax, 0x1
    rcl     dx, 0x1
LAB_2ea2_3ffa:
    mov     word ptr [di], dx
    mov     ax, word ptr [si+0x2]
    or      ax, ax
    jz      LAB_2ea2_4016
    cmp     word ptr [bx+0x6], 0x0
    jz      LAB_2ea2_4016
    imul    word ptr [bx+0x6]
    shl     ax, 0x1
    rcl     dx, 0x1
    shl     ax, 0x1
    rcl     dx, 0x1
    add     word ptr [di], dx
LAB_2ea2_4016:
    mov     ax, word ptr [si+0x4]
    or      ax, ax
    jz      LAB_2ea2_4030
    cmp     word ptr [bx+0xc], 0x0
    jz      LAB_2ea2_4030
    imul    word ptr [bx+0xc]
    shl     ax, 0x1
    rcl     dx, 0x1
    shl     ax, 0x1
    rcl     dx, 0x1
    add     word ptr [di], dx
LAB_2ea2_4030:
    add     di, 0x2
    cmp     cx, 0x7
    jz      LAB_2ea2_4046
    cmp     cx, 0x4
    jz      LAB_2ea2_4046
    add     bx, 0x2
    loop    LAB_2ea2_3fe3
    pop     di
    pop     si
    pop     bp
    retf
LAB_2ea2_4046:
    sub     bx, 0x4
    add     si, 0x6
    loop    LAB_2ea2_3fe3
    pop     di
    pop     si
    pop     bp
    retf
mat_multiply_asm_ endp
; Creates inverted 3x3 matrix  

; void __cdecl16far mat_invert(MATRIX * inmat, MATRIX * outmat)
mat_invert_asm_ proc far
    inmat      = word ptr    6
    outmat     = word ptr    8

    push    bp
    mov     bp, sp
    push    si
    push    di
    mov     si, word ptr [bp+inmat]
    mov     di, word ptr [bp+outmat]
    mov     cx, 0x9
    cmp     si, di
    jnz     LAB_2ea2_4083
    mov     ax, word ptr [si+0x2]
    xchg    word ptr [si+0x6], ax
    mov     word ptr [si+0x2], ax
    mov     ax, word ptr [si+0x4]
    xchg    word ptr [si+0xc], ax
    mov     word ptr [si+0x4], ax
    mov     ax, word ptr [si+0xa]
    xchg    word ptr [si+0xe], ax
    mov     word ptr [si+0xa], ax
    pop     di
    pop     si
    pop     bp
    retf
LAB_2ea2_4083:
    mov     ax, word ptr [si]
    mov     word ptr [di], ax
    mov     ax, word ptr [si+0x2]
    mov     word ptr [di+0x6], ax
    mov     ax, word ptr [si+0x4]
    mov     word ptr [di+0xc], ax
    mov     ax, word ptr [si+0x6]
    mov     word ptr [di+0x2], ax
    mov     ax, word ptr [si+0x8]
    mov     word ptr [di+0x8], ax
    mov     ax, word ptr [si+0xa]
    mov     word ptr [di+0xe], ax
    mov     ax, word ptr [si+0xc]
    mov     word ptr [di+0x4], ax
    mov     ax, word ptr [si+0xe]
    mov     word ptr [di+0xa], ax
    mov     ax, word ptr [si+0x10]
    mov     word ptr [di+0x10], ax
    pop     di
    pop     si
    pop     bp
    retf
mat_invert_asm_ endp
    db 0
fliphandlers:
    dw fliptype0
    dw fliptype1
    dw fliptype2
; enumerates shapes in an uncompressed shape resource  
; and flips x/y/interlaced depending on shape flags  

; void __cdecl16far file_unflip_shape2d(void * memchunk_, void * mempages)
file_unflip_shape2d_asm_ proc far
    var_height = word ptr  -14
    var_width  = word ptr  -12
    var_A      = word ptr  -10
    var_8      = word ptr   -8
    var_numshapes = word ptr   -6
    var_counter = word ptr   -4
    var_2      = word ptr   -2
    memchunk_  = dword ptr   6
    mempages   = dword ptr  10

    push    bp
    mov     bp, sp
    sub     sp, 0xe
    push    ds
    push    si
    push    di
    cld
    mov     ax, word ptr [bp+memchunk_+2]
    mov     ds, ax
    mov     ax, word ptr [bp+memchunk_]
    mov     si, ax
    mov     ax, word ptr [bp+mempages+2]
    mov     word ptr [bp+var_A], ax
    mov     ax, word ptr [bp+mempages]
    mov     word ptr [bp+var_8], ax
    mov     bx, word ptr [si+0x4]              ; number of shapes in binary
    mov     word ptr [bp+var_2], bx
    mov     word ptr [bp+var_counter], 0x0
LAB_2ea2_40ed:
    push    word ptr [bp+var_counter]
    push    word ptr [bp+memchunk_+2]
    push    word ptr [bp+memchunk_]
; <REPLACE>
    mov     ax, seg dseg
; </REPLACE>
;    mov     ax, 0x3b77
    mov     ds, ax
    call    far ptr file_get_shape2d           ; get shape in binary at index
    add     sp, 0x6
    mov     word ptr [bp+var_numshapes], ax
    mov     si, ax
    mov     ds, dx
    mov     di, word ptr [bp+var_8]
    mov     es, word ptr [bp+var_A]
    mov     al, byte ptr [si+0xf]              ; unk6 = is flipped
    and     al, 0xf0
    jnz     LAB_2ea2_412e
    mov     al, byte ptr [si+0xe]              ; (unk4 >> 4) = fliptype, 1..3
    shr     al, 0x1
    shr     al, 0x1
    shr     al, 0x1
    shr     al, 0x1
    jz      LAB_2ea2_412e
    cmp     al, 0x4
    jc      LAB_2ea2_413f
    mov     ax, 0x1
    jmp     LAB_2ea2_4138
    db 0x90
LAB_2ea2_412e:
    inc     word ptr [bp+var_counter]
    dec     word ptr [bp+var_2]
    jg      LAB_2ea2_40ed
    xor     ax, ax
LAB_2ea2_4138:
    pop     di
    pop     si
    pop     ds
    mov     sp, bp
    pop     bp
    retf
LAB_2ea2_413f:
    mov     dx, word ptr [si]
    mov     word ptr [bp+var_width], dx
    mov     dx, word ptr [si+0x2]
    mov     word ptr [bp+var_height], dx
    xor     dx, dx
    xor     ah, ah
    mov     bx, ax
    dec     bx
    shl     bx, 0x1
switchD:
    jmp     word ptr cs:[bx+fliphandlers]      ; jump to flip type handler
file_unflip_shape2d_asm_ endp
fliptype0:
    mov     bx, si
    add     bx, 0x10
    add     bx, dx
    mov     cx, word ptr [bp-0xc]
LAB_2ea2_4162:
    mov     al, byte ptr [bx]
    stosb
    add     bx, word ptr [bp-0xe]
    loop    LAB_2ea2_4162
    inc     dx
    cmp     dx, word ptr [bp-0xe]
    jnz     fliptype0
    jmp     near ptr LAB_2ea2_41f5
fliptype1:
    mov     bx, dx
    shr     bx, 0x1
    add     bx, 0x10
    add     bx, si
    mov     cx, word ptr [bp-0xc]
LAB_2ea2_417f:
    mov     al, byte ptr [bx]
    stosb
    add     bx, word ptr [bp-0xe]
    loop    LAB_2ea2_417f
    add     di, word ptr [bp-0xc]
    inc     dx
    inc     dx
    cmp     dx, word ptr [bp-0xe]
    jc      fliptype1
    mov     dx, 0x1
    mov     di, word ptr [bp-0x8]
    add     di, word ptr [bp-0xc]
LAB_2ea2_419a:
    mov     bx, dx
    add     bx, word ptr [bp-0xe]
    shr     bx, 0x1
    add     bx, 0x10
    add     bx, si
    mov     cx, word ptr [bp-0xc]
LAB_2ea2_41a9:
    mov     al, byte ptr [bx]
    stosb
    add     bx, word ptr [bp-0xe]
    loop    LAB_2ea2_41a9
    add     di, word ptr [bp-0xc]
    inc     dx
    inc     dx
    cmp     dx, word ptr [bp-0xe]
    jc      LAB_2ea2_419a
    jmp     LAB_2ea2_41f5
    db 0x90
fliptype2:
    mov     bx, dx
    shr     bx, 0x1
    add     bx, 0x10
    add     bx, word ptr [bp-0x6]
    mov     cx, word ptr [bp-0xc]
    mov     si, word ptr [bp-0xe]
    shr     si, 0x1
    adc     si, 0x0
LAB_2ea2_41d3:
    mov     al, byte ptr [bx]
    stosb
    add     bx, si
    loop    LAB_2ea2_41d3
    inc     dx
    cmp     dx, word ptr [bp-0xe]
    jz      LAB_2ea2_41f5
    mov     cx, word ptr [bp-0xc]
    mov     si, word ptr [bp-0xe]
    shr     si, 0x1
LAB_2ea2_41e8:
    mov     al, byte ptr [bx]
    stosb
    add     bx, si
    loop    LAB_2ea2_41e8
    inc     dx
    cmp     dx, word ptr [bp-0xe]
    jnz     fliptype2
LAB_2ea2_41f5:
    mov     di, word ptr [bp-0x6]
    mov     ax, ds
    mov     es, ax
    add     di, 0x10
    mov     si, word ptr [bp-0x8]
    mov     ds, word ptr [bp-0xa]
    mov     ax, word ptr [bp-0xc]
    mul     word ptr [bp-0xe]
    mov     cx, ax
    shr     cx, 0x1
    jc      LAB_2ea2_4216
    rep movsw
    jmp     near ptr LAB_2ea2_412e
LAB_2ea2_4216:
    rep movsw
    movsb
    jmp     near ptr LAB_2ea2_412e
vle_esc1:
    dw 16 dup (0x0000)
vle_esc2:
    db 16 dup (0x00)
    db 16 dup (0x00)
BYTE_ARRAY_2ea2_425c:
    db 256 dup (0x00)

; ulong __cdecl16far file_decomp_vle(void * src, void * dst)
file_decomp_vle_asm_ proc far
    var_lengths = byte ptr  -528
    var_symbols = byte ptr  -272
    var_codoff = word ptr  -14
    var_codlen = word ptr  -10
    var_lenhi  = word ptr   -8
    var_lenlo  = word ptr   -6
    var_lenlefthi = word ptr   -4
    var_lenleftlo = word ptr   -2
    src        = dword ptr   6
    dst        = dword ptr  10

    push    bp
    mov     bp, sp
    sub     sp, 0xe
    push    di
    push    si
    push    ds
    cld
    sub     sp, 0x200
    mov     ds, word ptr [bp+src+2]
    mov     si, word ptr [bp+src]
    mov     ax, word ptr [si+0x1]
    mov     word ptr [bp+var_lenleftlo], ax
    mov     word ptr [bp+var_lenlo], ax
    mov     al, byte ptr [si+0x3]
    xor     ah, ah
    mov     word ptr [bp+var_lenlefthi], ax
    mov     word ptr [bp+var_lenhi], ax
    mov     al, byte ptr [si+0x4]
    xor     ah, ah
    mov     word ptr [bp+var_codlen], ax
    and     ax, 0x7f
    add     si, 0x5
    mov     word ptr [bp+var_codoff], si
    lea     cx, [BYTE_ARRAY_2ea2_425c]
    shl     ax, 0x1
    mov     di, ax
    xor     bx, bx
    xor     dx, dx
gen_esc:
    mov     word ptr cs:[bx+vle_esc1], cx
    shl     dx, 0x1
    sub     word ptr cs:[bx+vle_esc1], dx
    lodsb
    xor     ah, ah
    add     dx, ax
    add     cx, ax
    or      ax, ax
    jz      LAB_2ea2_43b8
LAB_2ea2_43b8:
    mov     word ptr cs:[bx+vle_esc2], dx
    add     bx, 0x2
    cmp     bx, di
    jl      gen_esc
    sub     cx, 0x425c
    mov     ax, cs
    mov     es, ax
    mov     di, 0x425c
    rep movsb
    push    si
    mov     bx, word ptr [bp+var_codlen]
    mov     bh, bl
    cmp     bh, 0x8
    jle     LAB_2ea2_43de
    mov     bh, 0x8
LAB_2ea2_43de:
    xor     si, si
    mov     bl, 0x1
    mov     cl, 0x80
    mov     di, word ptr cs:[vle_esc1]
LAB_2ea2_43e9:
    xchg    word ptr [bp+var_codoff], si
    lodsb
    xchg    word ptr [bp+var_codoff], si
    mov     dh, al
    or      al, al
    jz      LAB_2ea2_4409
LAB_2ea2_43f6:
    mov     ch, cl
    mov     dl, byte ptr cs:[di]
    inc     di
LAB_2ea2_43fc:
    mov     byte ptr [bp+si+0xfef0], dl
    mov     byte ptr [bp+si+0xfdf0], bl
    inc     si
    dec     ch
    jnz     LAB_2ea2_43fc
LAB_2ea2_4409:
    dec     dh
    jg      LAB_2ea2_43f6
    shr     cl, 0x1
    inc     bl
    cmp     bl, bh
    jle     LAB_2ea2_43e9
pad_lens:
    mov     byte ptr [bp+si+0xfdf0], 0x40
    inc     si
    cmp     si, 0x100
    jnz     pad_lens
    pop     si
    mov     bx, si
    mov     es, word ptr [bp+dst+2]
    mov     di, word ptr [bp+dst]
    mov     dl, byte ptr [bx]
    inc     bx
    mov     dh, byte ptr [bx]
    inc     bx
    mov     ah, 0x8
    test    word ptr [bp+var_codlen], 0x80
    jz      LAB_2ea2_443c
    jmp     near ptr LAB_2ea2_4507
LAB_2ea2_443c:
    mov     si, dx
    and     si, 0xff
    mov     cl, byte ptr [bp+si+0xfdf0]
    cmp     cl, 0x8
    ja      len_gt_8bit
    mov     al, byte ptr [bp+si+0xfef0]
    stosb
    cmp     cl, ah
    jle     LAB_2ea2_445f
    xchg    ah, cl
    rol     dx, cl
    xchg    ah, cl
    sub     cl, ah
    jmp     LAB_2ea2_4480
    db 0x90
LAB_2ea2_445f:
    rol     dx, cl
    sub     ah, cl
    or      di, di
    jz      LAB_2ea2_4474
LAB_2ea2_4467:
    dec     word ptr [bp+var_lenleftlo]
    jnz     LAB_2ea2_443c
    dec     word ptr [bp+var_lenlefthi]
    jge     LAB_2ea2_443c
    jmp     near ptr LAB_2ea2_44f6
LAB_2ea2_4474:
    mov     di, es
    add     di, 0x1000
    mov     es, di
    xor     di, di
    jmp     LAB_2ea2_4467
LAB_2ea2_4480:
    mov     dh, byte ptr [bx]
    inc     bx
    jz      LAB_2ea2_4489
LAB_2ea2_4485:
    mov     ah, 0x8
    jmp     LAB_2ea2_445f
LAB_2ea2_4489:
    mov     bx, ds
    add     bx, 0x1000
    mov     ds, bx
    xor     bx, bx
    jmp     LAB_2ea2_4485
len_gt_8bit:
    push    si
    push    bp
    mov     si, bx
    mov     bp, 0xe
    mov     bh, dh
    xor     dh, dh
    xor     ch, ch
LAB_2ea2_44a2:
    cmp     ah, 0x0
    jz      LAB_2ea2_44e1
LAB_2ea2_44a7:
    cmp     ch, 0x0
    jz      LAB_2ea2_44b4
    mov     dh, bh
    mov     bx, si
    pop     bp
    pop     si
    jmp     LAB_2ea2_445f
LAB_2ea2_44b4:
    shl     bh, 0x1
    rcl     dx, 0x1
    sub     ah, 0x1
    add     bp, 0x2
    cmp     dx, word ptr cs:[bp+vle_esc2]
    jnc     LAB_2ea2_44a2
    add     dx, word ptr cs:[bp+vle_esc1]
    mov     bp, dx
    mov     al, byte ptr cs:[bp+0x0]
    stosb
    mov     dh, bh
    mov     cl, ah
    rol     dx, cl
    mov     cl, 0x8
    sub     cl, ah
    mov     ah, 0x0
    mov     ch, 0x1
    jmp     LAB_2ea2_44a2
LAB_2ea2_44e1:
    mov     bh, byte ptr [si]
    inc     si
    jz      LAB_2ea2_44ea
LAB_2ea2_44e6:
    mov     ah, 0x8
    jmp     LAB_2ea2_44a7
LAB_2ea2_44ea:
    mov     si, ds
    add     si, 0x1000
    mov     ds, si
    xor     si, si
    jmp     LAB_2ea2_44e6
LAB_2ea2_44f6:
    mov     ax, word ptr [bp+var_lenlo]
    mov     dx, word ptr [bp+var_lenhi]
    add     sp, 0x200
    pop     ds
    pop     si
    pop     di
    mov     sp, bp
    pop     bp
    retf
LAB_2ea2_4507:
    mov     si, dx
    and     si, 0xff
    mov     cl, byte ptr [bp+si+0xfdf0]
    cmp     cl, 0x8
    ja      LAB_2ea2_4563
    mov     al, byte ptr [bp+si+0xfef0]
    add     al, ch
    stosb
    cmp     cl, ah
    jle     LAB_2ea2_452c
    xchg    ah, cl
    rol     dx, cl
    xchg    ah, cl
    sub     cl, ah
    jmp     LAB_2ea2_454e
    db 0x90
LAB_2ea2_452c:
    rol     dx, cl
    sub     ah, cl
    or      di, di
    jz      LAB_2ea2_4542
LAB_2ea2_4534:
    mov     ch, al
    dec     word ptr [bp+var_lenleftlo]
    jnz     LAB_2ea2_4507
    dec     word ptr [bp+var_lenlefthi]
    jge     LAB_2ea2_4507
    jmp     LAB_2ea2_44f6
LAB_2ea2_4542:
    mov     di, es
    add     di, 0x1000
    mov     es, di
    xor     di, di
    jmp     LAB_2ea2_4534
LAB_2ea2_454e:
    mov     dh, byte ptr [bx]
    inc     bx
    jz      LAB_2ea2_4557
LAB_2ea2_4553:
    mov     ah, 0x8
    jmp     LAB_2ea2_452c
LAB_2ea2_4557:
    mov     bx, ds
    add     bx, 0x1000
    mov     ds, bx
    xor     bx, bx
    jmp     LAB_2ea2_4553
LAB_2ea2_4563:
    push    si
    push    bp
    mov     si, bx
    mov     bp, 0xe
    mov     bh, dh
    xor     dh, dh
    mov     word ptr [bp-0xe], 0x0
LAB_2ea2_4573:
    cmp     ah, 0x0
    jz      LAB_2ea2_45b8
LAB_2ea2_4578:
    cmp     word ptr [bp-0xe], 0x0
    jz      LAB_2ea2_4586
    mov     dh, bh
    mov     bx, si
    pop     bp
    pop     si
    jmp     LAB_2ea2_452c
LAB_2ea2_4586:
    shl     bh, 0x1
    rcl     dx, 0x1
    sub     ah, 0x1
    add     bp, 0x2
    cmp     dx, word ptr cs:[bp+vle_esc2]
    jnc     LAB_2ea2_4573
    add     dx, word ptr cs:[bp+vle_esc1]
    mov     bp, dx
    mov     al, byte ptr cs:[bp+0x0]
    add     al, ch
    stosb
    mov     dh, bh
    mov     cl, ah
    rol     dx, cl
    mov     cl, 0x8
    sub     cl, ah
    mov     ah, 0x0
    mov     word ptr [bp-0xe], 0x1
    jmp     LAB_2ea2_4573
LAB_2ea2_45b8:
    mov     bh, byte ptr [si]
    inc     si
    jz      LAB_2ea2_45c1
LAB_2ea2_45bd:
    mov     ah, 0x8
    jmp     LAB_2ea2_4578
LAB_2ea2_45c1:
    mov     si, ds
    add     si, 0x1000
    mov     ds, si
    xor     si, si
    jmp     LAB_2ea2_45bd
file_decomp_vle_asm_ endp
    db 0

; undefined __cdecl16far nopsub_32FEE(void)
nopsub_32FEE_asm_ proc far
    mov     dx, 0x3da
LAB_2ea2_45d1:
    in      al, dx                             ; Video status bits:
                                               ; 0: retrace.  1=display is in vert or horiz retrace.
                                               ; 1: 1=light pen is triggered; 0=armed
                                               ; 2: 1=light pen switch is open; 0=closed
                                               ; 3: 1=vertical sync pulse is occurring.
    test    al, 0x8
    jnz     LAB_2ea2_45d1
LAB_2ea2_45d6:
    in      al, dx                             ; Video status bits:
                                               ; 0: retrace.  1=display is in vert or horiz retrace.
                                               ; 1: 1=light pen is triggered; 0=armed
                                               ; 2: 1=light pen switch is open; 0=closed
                                               ; 3: 1=vertical sync pulse is occurring.
    test    al, 0x8
    jz      LAB_2ea2_45d6
    retf
nopsub_32FEE_asm_ endp

; byte __cdecl16far video_get_status(void)
video_get_status_asm_ proc far
    mov     dx, 0x3da
    in      al, dx                             ; Video status bits:
                                               ; 0: retrace.  1=display is in vert or horiz retrace.
                                               ; 1: 1=light pen is triggered; 0=armed
                                               ; 2: 1=light pen switch is open; 0=closed
                                               ; 3: 1=vertical sync pulse is occurring.
    and     al, 0x8
    xor     ah, ah
    retf
video_get_status_asm_ endp
    db 0

; undefined __stdcall16near nopsub_33006(undefined2 param_1, int * param_2, int * param_3, int * param_4)
nopsub_33006_asm_ proc near
    param_1    = word ptr    4
    param_2    = word ptr    6
    param_3    = word ptr    8
    param_4    = word ptr   10

    push    bp
    mov     bp, sp
    sub     sp, 0x4
    push    si
    push    di
    mov     ax, word ptr [word_404E92]
    jmp     LAB_2ea2_45ff
nopsub_33006_asm_ endp
    db 0x90

; void __cdecl16far vector_op_unk(VECTOR * vec1, VECTOR * vec2, VECTOR * outvec, int i)
vector_op_unk_asm_ proc far
    var_4      = word ptr   -4
    var_2      = word ptr   -2
    vec1       = word ptr    6
    vec2       = word ptr    8
    outvec     = word ptr   10
    i          = word ptr   12

    push    bp
    mov     bp, sp
    sub     sp, 0x4
    push    si
    push    di
    mov     ax, word ptr [bp+i]
LAB_2ea2_45ff:
    mov     si, word ptr [bp+vec1]
    mov     bx, word ptr [bp+vec2]
    mov     di, word ptr [bp+outvec]
    mov     word ptr [di+0x4], ax
    sub     ax, word ptr [bx+0x4]
    mov     word ptr [bp+var_4], ax
    mov     ax, word ptr [si+0x4]
    sub     ax, word ptr [bx+0x4]
    or      ax, ax
    jge     LAB_2ea2_4620
    shr     word ptr [bp+var_4], 0x1
    shr     ax, 0x1
LAB_2ea2_4620:
    mov     word ptr [bp+var_2], ax
    mov     ax, word ptr [si]
    sub     ax, word ptr [bx]
    imul    word ptr [bp+var_4]
    idiv    word ptr [bp+var_2]
    add     ax, word ptr [bx]
    mov     word ptr [di], ax
;  
;   
    mov     ax, word ptr [si+0x2]
    sub     ax, word ptr [bx+0x2]
    imul    word ptr [bp+var_4]
    idiv    word ptr [bp+var_2]
    add     ax, word ptr [bx+0x2]
    mov     word ptr [di+0x2], ax
    pop     di
    pop     si
    mov     sp, bp
    pop     bp
    retf
vector_op_unk_asm_ endp
    push    bp
    mov     bp, sp
    mov     ax, word ptr [bp+0x6]
    mov     word ptr [word_404E92], ax

; undefined __cdecl16far preRender_sphere(word param_1, word param_2, uint param_3, uint colour)
preRender_sphere_asm_ proc far
    var_79A    = byte ptr  -1946
    var_3DA    = byte ptr  -986
    var_1A     = word ptr  -26
    var_18     = word ptr  -24
    var_16     = word ptr  -22
    var_14     = word ptr  -20
    var_12     = word ptr  -18
    var_10     = word ptr  -16
    var_E      = word ptr  -14
    var_C      = word ptr  -12
    var_A      = word ptr  -10
    var_8      = word ptr   -8
    var_6      = word ptr   -6
    var_4      = word ptr   -4
    var_2      = word ptr   -2
    param_1    = word ptr    6
    param_2    = word ptr    8
    param_3    = word ptr   10
    colour     = word ptr   12

    push    bp
    mov     bp, sp
    sub     sp, 0x79a
    push    si
    push    di
    mov     dx, word ptr [bp+param_3]
    mov     ax, dx
    shr     ax, 0x1
    shr     ax, 0x1
    sub     dx, ax
    shr     ax, 0x1
    shr     ax, 0x1
    add     dx, ax
    or      dx, dx
    jg      LAB_2ea2_4676
    pop     di
    pop     si
    mov     sp, bp
    pop     bp
    retf
LAB_2ea2_4676:
    mov     word ptr [bp+var_6], dx
    mov     bx, dx
    shr     dx, 0x1
    jnz     LAB_2ea2_4696
    push    word ptr [bp+colour]
    push    word ptr [bp+param_2]
    push    word ptr [bp+param_1]
    call    far ptr putpixel_single_maybe
    add     sp, 0x6
LAB_2ea2_4690:
    pop     di
    pop     si
    mov     sp, bp
    pop     bp
    retf
LAB_2ea2_4696:
    sub     bx, dx
    mov     ax, word ptr cs:[sprite1.sprite_left2]
    mov     word ptr [bp+var_4], ax
    mov     ax, word ptr cs:[sprite1.sprite_widthsum]
    dec     ax
    mov     word ptr [bp+var_2], ax
    mov     cx, word ptr [bp+param_2]
    mov     ax, cx
    sub     ax, dx
    cmp     ax, word ptr cs:[sprite1.sprite_height]
    jge     LAB_2ea2_4690
    mov     word ptr [bp+var_14], ax
    add     cx, bx
    cmp     cx, word ptr cs:[sprite1.sprite_top]
    jle     LAB_2ea2_4690
    mov     dx, bx
    mov     ax, dx
    shr     ax, 0x1
    shr     ax, 0x1
    add     dx, ax
    mov     cx, word ptr [bp+param_1]
    mov     ax, cx
    sub     ax, dx
    cmp     ax, word ptr [bp+var_2]
    jg      LAB_2ea2_4690
    add     cx, dx
    cmp     cx, word ptr [bp+var_4]
    jl      LAB_2ea2_4690
    cmp     bx, word ptr [word_30F3C6]
    jl      LAB_2ea2_4728
    mov     ax, word ptr [bp+param_1]
    mov     word ptr [bp+var_12], ax
    mov     word ptr [bp+var_E], ax
    mov     dx, word ptr [bp+param_3]
    shr     dx, 0x1
    add     ax, dx
    mov     word ptr [bp+var_A], ax
    mov     ax, word ptr [bp+param_2]
    mov     word ptr [bp+var_10], ax
    mov     word ptr [bp+var_8], ax
    mov     dx, word ptr [bp+var_6]
    shr     dx, 0x1
    add     ax, dx
    mov     word ptr [bp+var_C], ax
    mov     dx, word ptr [bp+colour]
    lea     ax, [bp+var_12]
    add     sp, 0x780
    push    dx
    push    ax
    call    far ptr preRender_sphere_helper
    add     sp, 0x4
    sub     sp, 0x780
    pop     di
    pop     si
    mov     sp, bp
    pop     bp
    retf
LAB_2ea2_4728:
    shl     bx, 0x1
    mov     ax, word ptr [bx+off_30F3C8]
    mov     word ptr [bp+var_16], ax
    mov     ax, word ptr [bp+var_6]
    mov     word ptr [bp+var_1A], ax
    dec     ax
    shl     ax, 0x1
    mov     word ptr [bp+var_18], ax
    lea     si, [bp+var_3DA]
    lea     di, [bp+var_79A]
LAB_2ea2_4745:
    mov     bx, word ptr [bp+var_16]
    mov     dl, byte ptr [bx]
    inc     word ptr [bp+var_16]
    xor     dh, dh
    mov     bx, word ptr [bp+var_18]
    mov     ax, word ptr [bp+param_1]
    sub     ax, dx
    cmp     ax, word ptr [bp+var_2]
    jg      LAB_2ea2_478d
    cmp     ax, word ptr [bp+var_4]
    jge     LAB_2ea2_4764
    mov     ax, word ptr [bp+var_4]
LAB_2ea2_4764:
    mov     word ptr [si], ax
    mov     word ptr [bx+si], ax
    mov     ax, word ptr [bp+param_1]
    add     ax, dx
    cmp     ax, word ptr [bp+var_4]
    jl      LAB_2ea2_478d
    cmp     ax, word ptr [bp+var_2]
    jle     LAB_2ea2_477a
    mov     ax, word ptr [bp+var_2]
LAB_2ea2_477a:
    mov     word ptr [di], ax
    mov     word ptr [bx+di], ax
    add     si, 0x2
    add     di, 0x2
    sub     word ptr [bp+var_18], 0x4
    jge     LAB_2ea2_4745
    jmp     LAB_2ea2_47a0
    db 0x90
LAB_2ea2_478d:
    inc     word ptr [bp+var_14]
    sub     word ptr [bp+var_1A], 0x2
    sub     word ptr [bp+var_18], 0x4
    jge     LAB_2ea2_4745
    pop     di
    pop     si
    mov     sp, bp
    pop     bp
    retf
LAB_2ea2_47a0:
    xor     dx, dx
    mov     ax, word ptr cs:[sprite1.sprite_top]
    sub     ax, word ptr [bp+var_14]
    jle     LAB_2ea2_47b9
    sub     word ptr [bp+var_1A], ax
    shl     ax, 0x1
    mov     dx, ax
    mov     ax, word ptr cs:[sprite1.sprite_top]
    mov     word ptr [bp+var_14], ax
LAB_2ea2_47b9:
    mov     ax, word ptr [bp+var_14]
    add     ax, word ptr [bp+var_1A]
    sub     ax, word ptr cs:[sprite1.sprite_height]
    jle     LAB_2ea2_47c9
    sub     word ptr [bp+var_1A], ax
LAB_2ea2_47c9:
    push    word ptr [bp+colour]
    push    word ptr [bp+var_1A]
    push    word ptr [bp+var_14]
    lea     ax, [bp+var_79A]
    add     ax, dx
    push    ax
    lea     ax, [bp+var_3DA]
    add     ax, dx
    push    ax
    call    far ptr draw_filled_lines
    add     sp, 0xa
    pop     di
    pop     si
    mov     sp, bp
    pop     bp
    retf
preRender_sphere_asm_ endp

; undefined __cdecl16far nopsub_3320E(int param_1, undefined2 param_2, undefined2 param_3, undefined2 param_4, undefined2 param_5, undefined2 param_6)
nopsub_3320E_asm_ proc far
    param_1    = word ptr    6
    param_2    = word ptr    8
    param_3    = word ptr   10
    param_4    = word ptr   12
    param_5    = word ptr   14
    param_6    = word ptr   16

    push    bp
    mov     bp, sp
    push    ds
    push    si
    mov     ds, word ptr [bp+param_2]
    mov     si, word ptr [bp+param_1]
    mov     ax, word ptr [si+0x2]
    cmp     word ptr cs:[sprite1.sprite_bitmapptr+2], ax
    jnz     LAB_2ea2_483d
    mov     ax, word ptr [bp+param_3]
    mov     word ptr [si+0x1a], ax
    mov     word ptr cs:[sprite1.sprite_left2], ax
    mov     word ptr [si+0xc], ax
    mov     word ptr cs:[sprite1.sprite_left], ax
    mov     ax, word ptr [bp+param_4]
    mov     word ptr [si+0x1c], ax
    mov     word ptr cs:[sprite1.sprite_widthsum], ax
    mov     word ptr [si+0xe], ax
    mov     word ptr cs:[sprite1.sprite_right], ax
    mov     ax, word ptr [bp+param_5]
    mov     word ptr [si+0x10], ax
    mov     word ptr cs:[sprite1.sprite_top], ax
    mov     ax, word ptr [bp+param_6]
    mov     word ptr [si+0x12], ax
    mov     word ptr cs:[sprite1.sprite_height], ax
    pop     si
    pop     ds
    pop     bp
    retf
LAB_2ea2_483d:
    mov     ax, word ptr [bp+param_3]
    mov     word ptr [si+0x1a], ax
    mov     word ptr [si+0xc], ax
    mov     ax, word ptr [bp+param_4]
    mov     word ptr [si+0x1c], ax
    mov     word ptr [si+0xe], ax
    mov     ax, word ptr [bp+param_5]
    mov     word ptr [si+0x10], ax
    mov     ax, word ptr [bp+param_6]
    mov     word ptr [si+0x12], ax
    pop     si
    pop     ds
    pop     bp
    retf
nopsub_3320E_asm_ endp

; void __cdecl16far sprite_set_1_size(uint left, uint right, uint top, uint bottom)
sprite_set_1_size_asm_ proc far
    left       = word ptr    6
    right      = word ptr    8
    top        = word ptr   10
    bottom     = word ptr   12

    push    bp
    mov     bp, sp
    mov     ax, word ptr [bp+left]
    mov     word ptr cs:[sprite1.sprite_left2], ax
    mov     word ptr cs:[sprite1.sprite_left], ax
    mov     ax, word ptr [bp+right]
    mov     word ptr cs:[sprite1.sprite_widthsum], ax
    mov     word ptr cs:[sprite1.sprite_right], ax
    mov     ax, word ptr [bp+top]
    mov     word ptr cs:[sprite1.sprite_top], ax
    mov     ax, word ptr [bp+bottom]
    mov     word ptr cs:[sprite1.sprite_height], ax
    pop     bp
    retf
sprite_set_1_size_asm_ endp

; void __cdecl16far video_clear_color(undefined2 param_1)
video_clear_color_asm_ proc far
    param_1    = word ptr    6

    push    bp
    mov     bp, sp
    push    di
    mov     ax, 0xa000
    mov     es, ax
    mov     ax, word ptr [bp+param_1]
    mov     di, 0x0
    mov     cx, 0xfa00
    rep stosw
    pop     di
    pop     bp
    retf
video_clear_color_asm_ endp
    db 0

; void __cdecl16far sprite_clear_1_color(uchar color)
sprite_clear_1_color_asm_ proc far
    color      = byte ptr    6

    push    bp
    mov     bp, sp
    push    si
    push    di
    mov     ax, word ptr cs:[sprite1.sprite_bitmapptr+2]
    mov     es, ax
    mov     dx, word ptr cs:[sprite1.sprite_height]
    mov     bx, word ptr cs:[sprite1.sprite_top]
    sub     dx, bx
    jle     LAB_2ea2_48ed
    shl     bx, 0x1
    add     bx, word ptr cs:[sprite1.sprite_lineofs]
    mov     di, word ptr cs:[bx]
    add     di, word ptr cs:[sprite1.sprite_left]
    mov     bx, word ptr cs:[sprite1.sprite_right]
    sub     bx, word ptr cs:[sprite1.sprite_left]
    jle     LAB_2ea2_48ed
    mov     si, word ptr cs:[sprite1.sprite_pitch]
    sub     si, bx
    mov     al, byte ptr [bp+color]
    mov     ah, al
    shr     bx, 0x1
    jc      LAB_2ea2_48f1
LAB_2ea2_48e4:
    mov     cx, bx
    rep stosw
    add     di, si
    dec     dx
    jg      LAB_2ea2_48e4
LAB_2ea2_48ed:
    pop     di
    pop     si
    pop     bp
    retf
LAB_2ea2_48f1:
    jz      LAB_2ea2_4904
    jl      LAB_2ea2_48ed
    inc     si
LAB_2ea2_48f6:
    mov     cx, bx
    rep stosw
    mov     byte ptr es:[di], al
    add     di, si
    dec     dx
    jg      LAB_2ea2_48f6
    jmp     LAB_2ea2_48ed
LAB_2ea2_4904:
    inc     si
LAB_2ea2_4905:
    mov     byte ptr es:[di], al
    add     di, si
    dec     dx
    jg      LAB_2ea2_4905
    jmp     LAB_2ea2_48ed
sprite_clear_1_color_asm_ endp
    db 0

; undefined __stdcall16near nopsub_33330(undefined2 param_1, int * param_2, int * param_3, uint param_4, int param_5, byte param_6, undefined1 param_7, word param_8)
nopsub_33330_asm_ proc near
    param_1    = word ptr    4
    param_2    = word ptr    6
    param_3    = word ptr    8
    param_4    = word ptr   10
    param_5    = word ptr   12
    param_6    = byte ptr   14
    param_7    = byte ptr   16
    param_8    = word ptr   18

    push    bp
    mov     bp, sp
    push    si
    push    di
    mov     ax, word ptr [bp+param_8]
    mov     word ptr [word_4031E], ax
    mov     ax, word ptr [bp+param_7]
    mov     byte ptr [word_40320], al
    jmp     LAB_2ea2_4929
nopsub_33330_asm_ endp
    db 0x90

; undefined __cdecl16far draw_unknown_lines(int * param_1, int * param_2, int param_3, int param_4, uint color)
draw_unknown_lines_asm_ proc far
    param_1    = word ptr    6
    param_2    = word ptr    8
    param_3    = word ptr   10
    param_4    = word ptr   12
    color      = word ptr   14

    push    bp
    mov     bp, sp
    push    si
    push    di
LAB_2ea2_4929:
    cld
    mov     si, word ptr [bp+param_3]
    test    si, 0x1
    jnz     LAB_2ea2_493b
    mov     ax, word ptr [word_4031E]
    xchg    al, ah
    mov     word ptr [word_4031E], ax
LAB_2ea2_493b:
    mov     si, word ptr [bp+param_3]
    shl     si, 0x1
    add     si, word ptr cs:[sprite1.sprite_lineofs]
    mov     ax, word ptr cs:[sprite1.sprite_bitmapptr+2]
    mov     es, ax
    mov     al, byte ptr [bp+color]
LAB_2ea2_494e:
    mov     bx, word ptr [bp+param_2]
    mov     dx, word ptr [bx]
    mov     bx, word ptr [bp+param_1]
    mov     bx, word ptr [bx]
    mov     ah, byte ptr [word_4031E]
    mov     cl, bl
    and     cl, 0x7
    rol     ah, cl
    mov     cx, dx
    mov     dl, byte ptr [word_40320]
    sub     cx, bx
    inc     cx
    jle     LAB_2ea2_497a
    mov     di, word ptr cs:[si]
    add     di, bx
LAB_2ea2_4973:
    rol     ah, 0x1
    jc      LAB_2ea2_4998
    stosb
    loop    LAB_2ea2_4973
LAB_2ea2_497a:
    add     word ptr [bp+param_2], 0x2
    add     word ptr [bp+param_1], 0x2
    add     si, 0x2
    mov     dx, word ptr [word_4031E]
    xchg    dl, dh
    mov     word ptr [word_4031E], dx
    dec     word ptr [bp+param_4]
    jg      LAB_2ea2_494e
    pop     di
    pop     si
    pop     bp
    retf
LAB_2ea2_4998:
    mov     byte ptr es:[di], dl
    inc     di
    loop    LAB_2ea2_4973
    jmp     LAB_2ea2_497a
draw_unknown_lines_asm_ endp

; void __cdecl16far putpixel_line1_maybe(int param_1)
putpixel_line1_maybe_asm_ proc far
    var_E      = byte ptr  -14
    var_A      = word ptr  -10
    var_8      = word ptr   -8
    var_6      = word ptr   -6
    var_4      = word ptr   -4
    var_2      = word ptr   -2
    param_1    = word ptr    6

    push    bp
    mov     bp, sp
    sub     sp, 0xe
    push    si
    push    di
    mov     si, word ptr [bp+param_1]
    mov     ax, word ptr [si]
    mov     dx, word ptr [si+0x2]
    add     ax, 0x8000
    adc     dx, 0x0
    mov     word ptr [bp+var_2], ax
    mov     word ptr [bp+var_4], dx
    mov     ax, word ptr [si+0x4]
    mov     dx, word ptr [si+0x6]
    add     ax, 0x8000
    adc     dx, 0x0
    mov     word ptr [bp+var_6], ax
    mov     word ptr [bp+var_8], dx
    mov     al, byte ptr [si+0x10]
    mov     byte ptr [bp+var_E], al
    mov     ax, word ptr [si+0xc]
    mov     word ptr [bp+var_A], ax
    mov     ax, word ptr cs:[sprite1.sprite_bitmapptr+2]
    mov     es, ax
    mov     bx, word ptr [si+0x12]
    shl     bx, 0x1
    jmp     word ptr cs:[bx+off_3340A]
off_3340A:
    dw LAB_2ea2_49fe
    dw LAB_2ea2_49fe
    dw LAB_2ea2_4a38
    dw LAB_2ea2_4a5c
    dw LAB_2ea2_4a81
    dw LAB_2ea2_4aa6
    dw LAB_2ea2_4ad3
    dw LAB_2ea2_4b00
    dw LAB_2ea2_4b2c
    dw LAB_2ea2_4a1c
LAB_2ea2_49fe:
    mov     cx, word ptr [si+0xe]
    mov     al, byte ptr [bp-0xe]
    mov     di, word ptr [bp-0x8]
    shl     di, 0x1
    add     di, word ptr cs:[sprite1.sprite_lineofs]
    mov     di, word ptr cs:[di]
    add     di, word ptr [bp-0x4]
    rep stosb
    pop     di
    pop     si
    mov     sp, bp
    pop     bp
    retf
LAB_2ea2_4a1c:
    mov     al, byte ptr [bp-0xe]
    mov     di, word ptr [bp-0x8]
    shl     di, 0x1
    add     di, word ptr cs:[sprite1.sprite_lineofs]
    mov     di, word ptr cs:[di]
    add     di, word ptr [bp-0x4]
    mov     byte ptr es:[di], al
    pop     di
    pop     si
    mov     sp, bp
    pop     bp
    retf
LAB_2ea2_4a38:
    mov     cx, word ptr [si+0xe]
    mov     al, byte ptr [bp-0xe]
    mov     bx, word ptr [bp-0x4]
    mov     si, word ptr [si+0x6]
    shl     si, 0x1
    add     si, word ptr cs:[sprite1.sprite_lineofs]
LAB_2ea2_4a4b:
    mov     di, word ptr cs:[si]
    mov     byte ptr es:[bx+di], al
    add     si, 0x2
    loop    LAB_2ea2_4a4b
    pop     di
    pop     si
    mov     sp, bp
    pop     bp
    retf
LAB_2ea2_4a5c:
    mov     cx, word ptr [si+0xe]
    mov     al, byte ptr [bp-0xe]
    mov     si, word ptr [si+0x6]
    shl     si, 0x1
    add     si, word ptr cs:[sprite1.sprite_lineofs]
    mov     bx, word ptr [bp-0x4]
LAB_2ea2_4a6f:
    mov     di, word ptr cs:[si]
    mov     byte ptr es:[bx+di], al
    dec     bx
    add     si, 0x2
    loop    LAB_2ea2_4a6f
    pop     di
    pop     si
    mov     sp, bp
    pop     bp
    retf
LAB_2ea2_4a81:
    mov     cx, word ptr [si+0xe]
    mov     al, byte ptr [bp-0xe]
    mov     si, word ptr [si+0x6]
    shl     si, 0x1
    add     si, word ptr cs:[sprite1.sprite_lineofs]
    mov     bx, word ptr [bp-0x4]
LAB_2ea2_4a94:
    mov     di, word ptr cs:[si]
    mov     byte ptr es:[bx+di], al
    inc     bx
    add     si, 0x2
    loop    LAB_2ea2_4a94
    pop     di
    pop     si
    mov     sp, bp
    pop     bp
    retf
LAB_2ea2_4aa6:
    mov     cx, word ptr [si+0xe]
    mov     dx, word ptr [bp-0xa]
    mov     al, byte ptr [bp-0xe]
    mov     si, word ptr [si+0x6]
    shl     si, 0x1
    add     si, word ptr cs:[sprite1.sprite_lineofs]
    mov     bx, word ptr [bp-0x4]
LAB_2ea2_4abc:
    mov     di, word ptr cs:[si]
    mov     byte ptr es:[bx+di], al
    add     si, 0x2
    sub     word ptr [bp-0x2], dx
    sbb     bx, 0x0
    loop    LAB_2ea2_4abc
    pop     di
    pop     si
    mov     sp, bp
    pop     bp
    retf
LAB_2ea2_4ad3:
    mov     cx, word ptr [si+0xe]
    mov     dx, word ptr [bp-0xa]
    mov     al, byte ptr [bp-0xe]
    mov     si, word ptr [si+0x6]
    shl     si, 0x1
    add     si, word ptr cs:[sprite1.sprite_lineofs]
    mov     bx, word ptr [bp-0x4]
LAB_2ea2_4ae9:
    mov     di, word ptr cs:[si]
    mov     byte ptr es:[bx+di], al
    add     si, 0x2
    add     word ptr [bp-0x2], dx
    adc     bx, 0x0
    loop    LAB_2ea2_4ae9
    pop     di
    pop     si
    mov     sp, bp
    pop     bp
    retf
LAB_2ea2_4b00:
    mov     cx, word ptr [si+0xe]
    mov     dx, word ptr [bp-0xa]
    mov     al, byte ptr [bp-0xe]
    mov     bx, word ptr [bp-0x4]
LAB_2ea2_4b0c:
    mov     si, word ptr [bp-0x8]
    shl     si, 0x1
    add     si, word ptr cs:[sprite1.sprite_lineofs]
    mov     di, word ptr cs:[si]
    mov     byte ptr es:[bx+di], al
    dec     bx
    add     word ptr [bp-0x6], dx
    adc     word ptr [bp-0x8], 0x0
    loop    LAB_2ea2_4b0c
    pop     di
    pop     si
    mov     sp, bp
    pop     bp
    retf
LAB_2ea2_4b2c:
    mov     cx, word ptr [si+0xe]
    mov     dx, word ptr [bp-0xa]
    mov     al, byte ptr [bp-0xe]
    mov     bx, word ptr [bp-0x4]
LAB_2ea2_4b38:
    mov     si, word ptr [bp-0x8]
    shl     si, 0x1
    add     si, word ptr cs:[sprite1.sprite_lineofs]
    mov     di, word ptr cs:[si]
    mov     byte ptr es:[bx+di], al
    inc     bx
    add     word ptr [bp-0x6], dx
    adc     word ptr [bp-0x8], 0x0
    loop    LAB_2ea2_4b38
    pop     di
    pop     si
    mov     sp, bp
    pop     bp
    retf
putpixel_line1_maybe_asm_ endp

; void __cdecl16far sprite_1_unk2(int x_, int y_, int width_, int height_, uint colour)
sprite_1_unk2_asm_ proc far
    x_         = word ptr    6
    y_         = word ptr    8
    width_     = word ptr   10
    height_    = word ptr   12
    colour     = word ptr   14

    push    bp
    mov     bp, sp
    push    si
    push    di
    mov     dx, word ptr cs:[sprite1.sprite_left]
    mov     ax, dx
    sub     ax, word ptr [bp+x_]
    jle     LAB_2ea2_4b71
    mov     word ptr [bp+x_], dx
    sub     word ptr [bp+width_], ax
    jle     LAB_2ea2_4baf
LAB_2ea2_4b71:
    mov     ax, word ptr [bp+x_]
    add     ax, word ptr [bp+width_]
    sub     ax, word ptr cs:[sprite1.sprite_right]
    jle     LAB_2ea2_4b83
    sub     word ptr [bp+width_], ax
    jle     LAB_2ea2_4baf
LAB_2ea2_4b83:
    mov     ax, word ptr cs:[sprite1.sprite_top]
    sub     ax, word ptr [bp+y_]
    jle     LAB_2ea2_4b98
    sub     word ptr [bp+height_], ax
    jle     LAB_2ea2_4baf
    mov     ax, word ptr cs:[sprite1.sprite_top]
    mov     word ptr [bp+y_], ax
LAB_2ea2_4b98:
    mov     ax, word ptr [bp+y_]
    add     ax, word ptr [bp+height_]
    mov     bx, word ptr cs:[sprite1.sprite_height]
    sub     ax, bx
    jle     LAB_2ea2_4bb7
    sub     word ptr [bp+height_], ax
    jle     LAB_2ea2_4baf
    jmp     LAB_2ea2_4bb7
    db 0x90
LAB_2ea2_4baf:
    jmp     LAB_2ea2_4c02
sprite_1_unk2_asm_ endp
    db 0x90

; void __cdecl16far sprite_1_fill_rect(int x1_, int y1_, uint x2_, int y2_, uint colour)
sprite_1_fill_rect_asm_ proc far
    x1_        = word ptr    6
    y1_        = word ptr    8
    x2_        = word ptr   10
    y2_        = word ptr   12
    colour     = word ptr   14

    push    bp
    mov     bp, sp
    push    si
    push    di
LAB_2ea2_4bb7:
    cld
    cmp     word ptr [bp+x2_], 0x0
    jle     LAB_2ea2_4baf
    cmp     word ptr [bp+y2_], 0x0
    jle     LAB_2ea2_4baf
    mov     es, word ptr cs:[sprite1.sprite_bitmapptr+2]
    mov     al, byte ptr [bp+colour]
    mov     ah, al
    mov     dx, word ptr [bp+x1_]
    mov     si, word ptr [bp+y2_]
    mov     bx, word ptr [bp+y1_]
    shl     bx, 0x1
    add     bx, word ptr cs:[sprite1.sprite_lineofs]
    mov     di, word ptr cs:[bx]
    add     di, word ptr [bp+x1_]
    mov     dx, word ptr cs:[sprite1.sprite_pitch]
    sub     dx, word ptr [bp+x2_]
    mov     cx, word ptr [bp+x2_]
    sar     cx, 0x1
    mov     word ptr [bp+x2_], cx
    jc      LAB_2ea2_4c06
    jle     LAB_2ea2_4c02
LAB_2ea2_4bf8:
    mov     cx, word ptr [bp+x2_]
    rep stosw
    add     di, dx
    dec     si
    jg      LAB_2ea2_4bf8
LAB_2ea2_4c02:
    pop     di
    pop     si
    pop     bp
    retf
LAB_2ea2_4c06:
    jz      LAB_2ea2_4c1a
    jl      LAB_2ea2_4c02
    inc     dx
LAB_2ea2_4c0b:
    mov     cx, word ptr [bp+x2_]
    rep stosw
    mov     byte ptr es:[di], al
    add     di, dx
    dec     si
    jg      LAB_2ea2_4c0b
    jmp     LAB_2ea2_4c02
LAB_2ea2_4c1a:
    inc     dx
LAB_2ea2_4c1b:
    mov     byte ptr es:[di], al
    add     di, dx
    dec     si
    jg      LAB_2ea2_4c1b
    jmp     LAB_2ea2_4c02
sprite_1_fill_rect_asm_ endp
    db 0
BYTE_2ea2_4c26:
    db 0x0B
    db 5
    db 8
    db 2
    db 0xA
    db 4
    db 7
    db 1
    db 9
    db 3
    db 6
    db 0
BYTE_2ea2_4c32:
    db 0x01
    db 3
    db 0
    db 2
BYTE_2ea2_4c36:
    db 0x03
    db 1
    db 4
    db 2
    push    bp
    mov     bp, sp
    sub     sp, 0x16
    push    ds
    push    si
    push    di
    mov     ds, word ptr [bp+0x8]
    mov     si, word ptr [bp+0x6]
    mov     es, word ptr cs:[sprite1.sprite_bitmapptr+2]
    mov     ax, word ptr [bp+0xc]
    mov     word ptr [bp-0x2], ax
    mov     ax, word ptr [bp+0xe]
    jmp     LAB_2ea2_4c77
    db 0x90

; void __cdecl16far sprite_1_unk3(int * param_1, undefined2 param_2, word param_3)
sprite_1_unk3_asm_ proc far
    var_16     = word ptr  -22
    var_14     = word ptr  -20
    var_12     = word ptr  -18
    var_10     = word ptr  -16
    var_E      = word ptr  -14
    var_C      = word ptr  -12
    var_A      = word ptr  -10
    var_8      = word ptr   -8
    var_6      = word ptr   -6
    var_4      = word ptr   -4
    var_2      = word ptr   -2
    param_1    = word ptr    6
    param_2    = word ptr    8
    param_3    = word ptr   10

    push    bp
    mov     bp, sp
    sub     sp, 0x16
    push    ds
    push    si
    push    di
    mov     ds, word ptr [bp+param_2]
    mov     si, word ptr [bp+param_1]
    mov     es, word ptr cs:[sprite1.sprite_bitmapptr+2]
    mov     ax, word ptr [si+0x8]
    mov     word ptr [bp+var_2], ax
    mov     ax, word ptr [si+0xa]
LAB_2ea2_4c77:
    shl     ax, 0x1
    add     ax, word ptr cs:[sprite1.sprite_lineofs]
    mov     word ptr [bp+var_4], ax
    add     ax, word ptr [si+0x2]
    add     ax, word ptr [si+0x2]
    mov     word ptr [bp+var_6], ax
    mov     ax, word ptr [si]
    mov     word ptr [bp+var_8], ax
    mov     bx, 0xc
    mul     bx
    mov     word ptr [bp+var_A], ax
    add     si, 0x10
    mov     word ptr [bp+var_C], si
    mov     word ptr [bp+var_E], 0xb
LAB_2ea2_4ca2:
    mov     di, word ptr [bp+var_E]
    mov     cl, byte ptr cs:[di+BYTE_2ea2_4c26]
    xor     ch, ch
    mov     ax, word ptr [bp+var_8]
    mul     cx
    mov     word ptr [bp+var_10], ax
    shl     cx, 0x1
    add     cx, word ptr [bp+var_4]
    mov     word ptr [bp+var_12], cx
    mov     si, word ptr [bp+var_C]
    add     si, word ptr [bp+var_10]
    mov     bx, word ptr [bp+param_3]
    mov     word ptr [bp+var_16], bx
LAB_2ea2_4cc8:
    mov     di, word ptr [bp+var_12]
    cmp     di, word ptr [bp+var_6]
    jnc     LAB_2ea2_4d13
    mov     di, word ptr cs:[di]
    add     di, word ptr [bp+var_2]
    mov     cx, word ptr [bp+var_8]
    mov     word ptr [bp+var_14], si
    xor     ah, ah
    mov     bx, word ptr [bp+var_16]
LAB_2ea2_4ce1:
    and     bx, 0x3
    mov     al, byte ptr cs:[bx+BYTE_2ea2_4c32]
    sub     cx, ax
    jle     LAB_2ea2_4d04
    add     si, ax
    add     di, ax
    mov     al, byte ptr [si]
    mov     byte ptr es:[di], al
    mov     al, byte ptr cs:[bx+BYTE_2ea2_4c36]
    add     si, ax
    add     di, ax
    sub     cx, ax
    inc     bx
    jmp     LAB_2ea2_4ce1
LAB_2ea2_4d04:
    inc     word ptr [bp+var_16]
    add     word ptr [bp+var_12], 0x18
    mov     si, word ptr [bp+var_14]
    add     si, word ptr [bp+var_A]
    jmp     LAB_2ea2_4cc8
LAB_2ea2_4d13:
    inc     word ptr [bp+param_3]
    dec     word ptr [bp+var_E]
    jge     LAB_2ea2_4ca2
    pop     di
    pop     si
    pop     ds
    mov     sp, bp
    pop     bp
    retf
sprite_1_unk3_asm_ endp

; void __cdecl16far font_draw_text(char * str_, int x_, int y_)
font_draw_text_asm_ proc far
    var_4      = word ptr   -4
    var_2      = word ptr   -2
    str_       = word ptr    6
    x_         = word ptr    8
    y_         = word ptr   10

    push    bp
    mov     bp, sp
    sub     sp, 0x4
    push    ds
    push    si
    push    di
    mov     ds, word ptr [fontdefptr2+2]
    mov     ax, word ptr [bp+x_]
    mov     word ptr [aMsRunTimeLibraryCop], ax
    mov     ax, word ptr [bp+y_]
    mov     word ptr [(aMsRunTimeLibraryCop+2)], ax
    jmp     LAB_2ea2_4d4b
    db 0x90
    push    bp
    mov     bp, sp
    sub     sp, 0x4
    push    ds
    push    si
    push    di
    mov     ds, word ptr [fontdefptr2+2]
LAB_2ea2_4d4b:
    cld
    mov     es, word ptr cs:[sprite1.sprite_bitmapptr+2]
LAB_2ea2_4d51:
    mov     si, word ptr [bp+str_]
    mov     bl, byte ptr ss:[si]
    cmp     bl, 0x0
    jz      LAB_2ea2_4d86
    mov     al, bl
    inc     word ptr [bp+str_]
    xor     bh, bh
    shl     bx, 0x1
    add     bx, 0x16
    mov     si, word ptr [bx]
    cmp     si, 0x0
    jnz     LAB_2ea2_4d8d
    cmp     al, 0xd
    jz      LAB_2ea2_4d77
    cmp     al, 0xa
    jnz     LAB_2ea2_4d51
LAB_2ea2_4d77:
    mov     ax, word ptr [word_3B774]
    mov     word ptr [aMsRunTimeLibraryCop], ax
    mov     ax, word ptr [(aMsRunTimeLibraryCop+10)]
    add     word ptr [(aMsRunTimeLibraryCop+2)], ax
    jmp     LAB_2ea2_4d51
LAB_2ea2_4d86:
    pop     di
    pop     si
    pop     ds
    mov     sp, bp
    pop     bp
    retf
LAB_2ea2_4d8d:
    mov     ax, word ptr [aMsRunTimeLibraryCop]
    mov     word ptr [bp+var_2], ax
    cmp     byte ptr [(aMsRunTimeLibraryCop+12)], 0x0
    jz      LAB_2ea2_4dae
    mov     al, byte ptr [si]
    xor     ah, ah
    inc     si
    mov     word ptr [(aMsRunTimeLibraryCop+8)], ax
    add     ax, 0x7
    shr     ax, 0x1
    shr     ax, 0x1
    shr     ax, 0x1
    mov     byte ptr [(aMsRunTimeLibraryCop+4)], al
; I can't figure out how to make Ghidra put the ref label
; for dseg:0 inside the brackets, causing WASM to assemble
; an immediate operand instead of a memory offset.
LAB_2ea2_4dae:
; <REPLACE>
    mov     al, byte ptr [word_3B770]
; </REPLACE>
;    mov     al, byte ptr [0x0]
    mov     ah, byte ptr [word_3B772]
    mov     cx, word ptr [(aMsRunTimeLibraryCop+6)]
    mov     word ptr [bp+var_4], cx
    mov     bx, word ptr [(aMsRunTimeLibraryCop+2)]
    shl     bx, 0x1
    add     bx, word ptr cs:[sprite1.sprite_lineofs]
LAB_2ea2_4dc7:
    mov     di, word ptr cs:[bx]
    add     di, word ptr [bp+var_2]
    mov     dh, byte ptr [(aMsRunTimeLibraryCop+4)]
LAB_2ea2_4dd1:
    mov     cx, 0x8
    mov     dl, byte ptr [si]
LAB_2ea2_4dd6:
    shl     dl, 0x1
    jnc     LAB_2ea2_4ddd
    mov     byte ptr es:[di], al
LAB_2ea2_4ddd:
    inc     di
    loop    LAB_2ea2_4dd6
    inc     si
    dec     dh
    jg      LAB_2ea2_4dd1
    inc     bx
    inc     bx
    dec     word ptr [bp+var_4]
    jg      LAB_2ea2_4dc7
    mov     ax, word ptr [(aMsRunTimeLibraryCop+8)]
    add     word ptr [aMsRunTimeLibraryCop], ax
    jmp     near ptr LAB_2ea2_4d51
font_draw_text_asm_ endp

; void __cdecl16far video_set_mode_13h(void)
video_set_mode_13h_asm_ proc far
    call    far ptr video_add_exithandler
    mov     ax, 0x40
    mov     es, ax
    mov     ax, es:[0x10]
    and     ax, 0xffcf
    or      ax, 0x10
    mov     es:[0x10], ax
    mov     ah, 0xb
    mov     bx, 0x0
    int     0x10                               ; - VIDEO - SET COLOR PALETTE
                                               ; BH = 00h, BL = border color
                                               ; BH = 01h, BL = palette (0-3)
    mov     ah, 0x0
    mov     al, 0x13
    int     0x10                               ; - VIDEO - SET VIDEO MODE
                                               ; AL = mode
    xor     ax, ax
    push    ax
    push    ax
    call    far ptr video_clear_color
    add     sp, 0x4
    retf
video_set_mode_13h_asm_ endp

; void * __cdecl16far file_load_shape2d_res_fatal_thunk(char * filename)
file_load_shape2d_res_fatal_thunk_asm_ proc far
    filename   = word ptr    6

    jmp     far ptr file_load_shape2d_res_fatal
file_load_shape2d_res_fatal_thunk_asm_ endp

; void * __cdecl16far file_load_shape2d_res_nofatal_thunk(char * filename)
file_load_shape2d_res_nofatal_thunk_asm_ proc far
    filename   = word ptr    6

    jmp     far ptr file_load_shape2d_res_nofatal
file_load_shape2d_res_nofatal_thunk_asm_ endp

; void * __cdecl16far file_load_shape2d_res_thunk(char * filename, int is_fatal)
file_load_shape2d_res_thunk_asm_ proc far
    filename   = word ptr    6
    is_fatal   = word ptr    8

    jmp     far ptr file_load_shape2d_res
file_load_shape2d_res_thunk_asm_ endp

; void __cdecl16far parse_shape2d_thunk(void * memchunk_, void * mempages)
parse_shape2d_thunk_asm_ proc far
    memchunk_  = dword ptr   6
    mempages   = dword ptr  10

    jmp     far ptr parse_shape2d
parse_shape2d_thunk_asm_ endp

; void * __cdecl16far file_load_shape2d_fatal_thunk(char * filename)
file_load_shape2d_fatal_thunk_asm_ proc far
    filename   = word ptr    6

    jmp     far ptr file_load_shape2d_fatal
file_load_shape2d_fatal_thunk_asm_ endp

; void * __cdecl16far file_load_shape2d_nofatal_thunk(char * filename)
file_load_shape2d_nofatal_thunk_asm_ proc far
    filename   = word ptr    6

    jmp     far ptr file_load_shape2d_nofatal
file_load_shape2d_nofatal_thunk_asm_ endp

; void * __cdecl16far file_load_shape2d_thunk(char * filename, int is_fatal)
file_load_shape2d_thunk_asm_ proc far
    filename   = word ptr    6
    is_fatal   = word ptr    8

    jmp     far ptr file_load_shape2d
file_load_shape2d_thunk_asm_ endp
    db 0

; void __cdecl16far sprite_putimage_and_alt2(SHAPE2D * shape, int param_2, int param_3, int param_4)
sprite_putimage_and_alt2_asm_ proc far
    var_4      = word ptr   -4
    var_2      = word ptr   -2
    shape      = dword ptr   6
    param_2    = word ptr   10
    param_3    = word ptr   12
    param_4    = word ptr   14

    push    bp
    mov     bp, sp
    sub     sp, 0xe
    push    ds
    push    si
    push    di
    mov     ds, word ptr [bp+shape+2]
    mov     si, word ptr [bp+shape]
    mov     ax, word ptr [bp+param_2]
    sub     ax, word ptr [si+0x4]
    mov     word ptr [bp+var_2], ax
    mov     ax, word ptr [bp+param_3]
    sub     ax, word ptr [si+0x6]
    mov     word ptr [bp+var_4], ax
    jmp     LAB_2ea2_4ea9
sprite_putimage_and_alt2_asm_ endp
    db 0x90

; void __cdecl16far sprite_putimage_and(SHAPE2D * shape, int a, int b)
sprite_putimage_and_asm_ proc far
    var_E      = word ptr  -14
    var_C      = word ptr  -12
    var_A      = word ptr  -10
    var_8      = word ptr   -8
    var_6      = word ptr   -6
    var_4      = word ptr   -4
    var_2      = word ptr   -2
    shape      = dword ptr   6
    a          = word ptr   10
    b          = word ptr   12

    push    bp
    mov     bp, sp
    sub     sp, 0xe
    push    ds
    push    si
    push    di
    mov     ds, word ptr [bp+shape+2]
    mov     si, word ptr [bp+shape]
    mov     ax, word ptr [bp+a]
    mov     word ptr [bp+var_2], ax
    mov     ax, word ptr [bp+b]
    mov     word ptr [bp+var_4], ax
    jmp     LAB_2ea2_4ea9
    db 0x90
    push    bp
    mov     bp, sp
    sub     sp, 0xe
    push    ds
    push    si
    push    di
    mov     ds, word ptr [bp+0x8]
    mov     si, word ptr [bp+0x6]
    mov     ax, word ptr [si+0x8]
    mov     word ptr [bp-0x2], ax
    mov     ax, word ptr [si+0xa]
    mov     word ptr [bp-0x4], ax
LAB_2ea2_4ea9:
    mov     bx, word ptr [bp+var_4]
    mov     cx, word ptr [si+0x2]
    lea     dx, [si+0x10]
    mov     ax, bx
    cmp     ax, word ptr cs:[sprite1.sprite_top]
    jl      LAB_2ea2_4ecf
    add     ax, cx
    sub     ax, word ptr cs:[sprite1.sprite_height]
    jle     LAB_2ea2_4ef6
    sub     cx, ax
    jg      LAB_2ea2_4ef6
LAB_2ea2_4ec8:
    pop     di
    pop     si
    pop     ds
    mov     sp, bp
    pop     bp
    retf
LAB_2ea2_4ecf:
    mov     bx, word ptr cs:[sprite1.sprite_top]
    add     ax, cx
    sub     ax, bx
    jle     LAB_2ea2_4ec8
    xchg    ax, cx
    sub     ax, cx
    mov     word ptr [bp+var_8], dx
    mul     word ptr [si]
    mov     dx, word ptr [bp+var_8]
    add     dx, ax
    mov     ax, bx
    add     ax, cx
    sub     ax, word ptr cs:[sprite1.sprite_height]
    jle     LAB_2ea2_4ef6
    sub     cx, ax
    jle     LAB_2ea2_4ec8
LAB_2ea2_4ef6:
    mov     word ptr [bp+var_C], dx
    mov     word ptr [bp+var_A], cx
    mov     word ptr [bp+var_4], bx
    mov     cx, word ptr [si]
    xor     dx, dx
    mov     bx, word ptr [bp+var_2]
    mov     ax, bx
    cmp     ax, word ptr cs:[sprite1.sprite_left]
    jl      LAB_2ea2_4f21
    add     ax, cx
    sub     ax, word ptr cs:[sprite1.sprite_right]
    jl      LAB_2ea2_4f48
    sub     cx, ax
    jle     LAB_2ea2_4ec8
    mov     dx, ax
    jmp     LAB_2ea2_4f48
    db 0x90
LAB_2ea2_4f21:
    mov     bx, word ptr cs:[sprite1.sprite_left]
    add     ax, cx
    sub     ax, bx
    jle     LAB_2ea2_4ec8
    mov     si, cx
    sub     si, ax
    add     word ptr [bp+var_C], si
    mov     si, word ptr cs:[sprite1.sprite_right]
    sub     si, bx
    jle     LAB_2ea2_4ec8
    cmp     ax, si
    jl      LAB_2ea2_4f42
    mov     ax, si
LAB_2ea2_4f42:
    xchg    dx, cx
    sub     dx, ax
    add     cx, ax
LAB_2ea2_4f48:
    or      cx, cx
    jle     LAB_2ea2_4f91
    mov     word ptr [bp+var_6], cx
    mov     word ptr [bp+var_8], dx
    mov     word ptr [bp+var_2], bx
    cld
    mov     es, word ptr cs:[sprite1.sprite_bitmapptr+2]
    mov     bx, word ptr [bp+var_4]
    shl     bx, 0x1
    add     bx, word ptr cs:[sprite1.sprite_lineofs]
    mov     di, word ptr cs:[bx]
    add     di, word ptr [bp+var_2]
    mov     si, word ptr [bp+var_C]
    mov     dx, word ptr [bp+var_A]
    mov     bx, word ptr cs:[sprite1.sprite_pitch]
    sub     bx, word ptr [bp+var_6]
    cmp     word ptr [bp+var_8], 0x0
    jz      LAB_2ea2_4f94
LAB_2ea2_4f7f:
    mov     cx, word ptr [bp+var_6]
LAB_2ea2_4f82:
    lodsb
    and     byte ptr es:[di], al
    inc     di
    loop    LAB_2ea2_4f82
    add     si, word ptr [bp+var_8]
    add     di, bx
    dec     dx
    jg      LAB_2ea2_4f7f
LAB_2ea2_4f91:
    jmp     near ptr LAB_2ea2_4ec8
LAB_2ea2_4f94:
    mov     ax, word ptr [bp+var_6]
    shr     ax, 0x1
    mov     word ptr [bp+var_E], ax
    jnc     LAB_2ea2_4fb8
    jz      LAB_2ea2_4fcb
    inc     bx
LAB_2ea2_4fa1:
    mov     cx, word ptr [bp+var_E]
LAB_2ea2_4fa4:
    lodsw
    and     word ptr es:[di], ax
    inc     di
    inc     di
    loop    LAB_2ea2_4fa4
    lodsb
    and     byte ptr es:[di], al
    add     di, bx
    dec     dx
    jg      LAB_2ea2_4fa1
    jmp     near ptr LAB_2ea2_4ec8
LAB_2ea2_4fb8:
    mov     cx, word ptr [bp+var_E]
LAB_2ea2_4fbb:
    lodsw
    and     word ptr es:[di], ax
    inc     di
    inc     di
    loop    LAB_2ea2_4fbb
    add     di, bx
    dec     dx
    jg      LAB_2ea2_4fb8
    jmp     near ptr LAB_2ea2_4ec8
LAB_2ea2_4fcb:
    inc     bx
LAB_2ea2_4fcc:
    lodsb
    and     byte ptr es:[di], al
    add     di, bx
    inc     bx
    dec     dx
    jg      LAB_2ea2_4fcc
    jmp     near ptr LAB_2ea2_4ec8
sprite_putimage_and_asm_ endp
    db 0

; undefined __cdecl16far nopsub_339FA(undefined2 param_1, uint * param_2, undefined2 param_3, int param_4, int param_5)
nopsub_339FA_asm_ proc far
    var_4      = word ptr   -4
    var_2      = word ptr   -2
    param_1    = word ptr    6
    param_2    = word ptr    8
    param_3    = word ptr   10
    param_4    = word ptr   12
    param_5    = word ptr   14

    push    bp
    mov     bp, sp
    sub     sp, 0xa
    push    ds
    push    si
    push    di
    mov     ds, word ptr [bp+param_2]
    mov     si, word ptr [bp+param_1]
    mov     ax, word ptr [bp+param_3]
    sub     ax, word ptr [si+0x4]
    mov     word ptr [bp+var_2], ax
    mov     ax, word ptr [bp+param_4]
    sub     ax, word ptr [si+0x6]
    mov     word ptr [bp+var_4], ax
    jmp     LAB_2ea2_5037
nopsub_339FA_asm_ endp
    db 0x90

; void __cdecl16far putpixel_iconMask(uint * param_1, undefined2 param_2, int param_3, int param_4)
putpixel_iconMask_asm_ proc far
    var_6      = word ptr   -6
    var_4      = word ptr   -4
    var_2      = word ptr   -2
    param_1    = word ptr    6
    param_2    = word ptr    8
    param_3    = word ptr   10
    param_4    = word ptr   12

    push    bp
    mov     bp, sp
    sub     sp, 0xa
    push    ds
    push    si
    push    di
    mov     ds, word ptr [bp+param_2]
    mov     si, word ptr [bp+param_1]
    mov     ax, word ptr [bp+param_3]
    mov     word ptr [bp+var_2], ax
    mov     ax, word ptr [bp+param_4]
    mov     word ptr [bp+var_4], ax
    jmp     LAB_2ea2_5037
    db 0x90
    push    bp
    mov     bp, sp
    sub     sp, 0xa
    push    ds
    push    si
    push    di
    mov     ds, word ptr [bp+0x8]
    mov     si, word ptr [bp+0x6]
    mov     ax, word ptr [si+0x8]
    mov     word ptr [bp-0x2], ax
    mov     ax, word ptr [si+0xa]
    mov     word ptr [bp-0x4], ax
LAB_2ea2_5037:
    mov     bx, word ptr [bp+var_4]
    shl     bx, 0x1
    add     bx, word ptr cs:[sprite1.sprite_lineofs]
    mov     di, word ptr cs:[bx]
    add     di, word ptr [bp+var_2]
    mov     es, word ptr cs:[sprite1.sprite_bitmapptr+2]
    cld
    mov     dx, word ptr [si+0x2]
    mov     bx, word ptr cs:[sprite1.sprite_pitch]
    mov     ax, word ptr [si]
    sub     bx, ax
    add     si, 0x10
    shr     ax, 0x1
    mov     word ptr [bp+var_6], ax
    jnc     LAB_2ea2_5081
    jz      LAB_2ea2_5093
    inc     bx
LAB_2ea2_5066:
    mov     cx, word ptr [bp+var_6]
LAB_2ea2_5069:
    lodsw
    and     word ptr es:[di], ax
    inc     di
    inc     di
    loop    LAB_2ea2_5069
    lodsb
    and     byte ptr es:[di], al
    add     di, bx
    dec     dx
    jg      LAB_2ea2_5066
LAB_2ea2_507a:
    pop     di
    pop     si
    pop     ds
    mov     sp, bp
    pop     bp
    retf
LAB_2ea2_5081:
    mov     cx, word ptr [bp+var_6]
LAB_2ea2_5084:
    lodsw
    and     word ptr es:[di], ax
    inc     di
    inc     di
    loop    LAB_2ea2_5084
    add     di, bx
    dec     dx
    jg      LAB_2ea2_5081
    jmp     LAB_2ea2_507a
LAB_2ea2_5093:
    inc     bx
LAB_2ea2_5094:
    lodsb
    and     word ptr es:[di], ax
    add     di, bx
    dec     dx
    jg      LAB_2ea2_5094
    jmp     LAB_2ea2_507a
putpixel_iconMask_asm_ endp
    db 0

; undefined __cdecl16far nopsub_33AC0(undefined2 param_1, int * param_2, undefined2 param_3, int param_4, int param_5)
nopsub_33AC0_asm_ proc far
    var_4      = word ptr   -4
    var_2      = word ptr   -2
    param_1    = word ptr    6
    param_2    = word ptr    8
    param_3    = word ptr   10
    param_4    = word ptr   12
    param_5    = word ptr   14

    push    bp
    mov     bp, sp
    sub     sp, 0x10
    push    ds
    push    si
    push    di
    mov     ds, word ptr [bp+param_2]
    mov     si, word ptr [bp+param_1]
    mov     ax, word ptr [bp+param_3]
    sub     ax, word ptr [si+0x4]
    mov     word ptr [bp+var_2], ax
    mov     ax, word ptr [bp+param_4]
    sub     ax, word ptr [si+0x6]
    mov     word ptr [bp+var_4], ax
    jmp     LAB_2ea2_50fd
nopsub_33AC0_asm_ endp
    db 0x90

; undefined __cdecl16far nopsub_33AE4(undefined2 param_1, int * param_2, undefined2 param_3, int param_4, int param_5)
nopsub_33AE4_asm_ proc far
    var_4      = word ptr   -4
    var_2      = word ptr   -2
    param_1    = word ptr    6
    param_2    = word ptr    8
    param_3    = word ptr   10
    param_4    = word ptr   12
    param_5    = word ptr   14

    push    bp
    mov     bp, sp
    sub     sp, 0x10
    push    ds
    push    si
    push    di
    mov     ds, word ptr [bp+param_2]
    mov     si, word ptr [bp+param_1]
    mov     ax, word ptr [bp+param_3]
    mov     word ptr [bp+var_2], ax
    mov     ax, word ptr [bp+param_4]
    mov     word ptr [bp+var_4], ax
    jmp     LAB_2ea2_50fd
nopsub_33AE4_asm_ endp
    db 0x90

; void __cdecl16far shape2d_render_bmp_as_mask(void * data)
shape2d_render_bmp_as_mask_asm_ proc far
    var_10     = word ptr  -16
    var_E      = word ptr  -14
    var_6      = word ptr   -6
    var_4      = word ptr   -4
    var_2      = word ptr   -2
    data       = dword ptr   6

    push    bp
    mov     bp, sp
    sub     sp, 0x10
    push    ds
    push    si
    push    di
    mov     ds, word ptr [bp+data+2]
    mov     si, word ptr [bp+data]
    mov     ax, word ptr [si+0x8]
    mov     word ptr [bp+var_2], ax
    mov     ax, word ptr [si+0xa]
    mov     word ptr [bp+var_4], ax
LAB_2ea2_50fd:
    cld
    lea     ax, [si+0x10]
    mov     word ptr [bp+var_E], ax
    mov     ax, word ptr [si]
    mov     word ptr [bp+var_6], ax
    mov     bx, word ptr [bp+var_4]
    shl     bx, 0x1
    add     bx, word ptr cs:[sprite1.sprite_lineofs]
    mov     word ptr [bp+var_10], bx
    mov     di, word ptr cs:[bx]
    add     di, word ptr [bp+var_2]
    mov     ax, word ptr cs:[sprite1.sprite_bitmapptr+2]
    mov     es, ax
    mov     si, word ptr [bp+var_E]
    mov     dx, word ptr [bp+var_6]
LAB_2ea2_5128:
    lodsb
    or      al, al
    jg      LAB_2ea2_5136
    jl      LAB_2ea2_5156
    pop     di
    pop     si
    pop     ds
    mov     sp, bp
    pop     bp
    retf
LAB_2ea2_5136:
    mov     cl, al
    xor     ch, ch
    lodsb
LAB_2ea2_513b:
    and     byte ptr es:[di], al
    inc     di
    dec     dx
    jg      LAB_2ea2_5152
    add     word ptr [bp+var_10], 0x2
    mov     bx, word ptr [bp+var_10]
    mov     di, word ptr cs:[bx]
    add     di, word ptr [bp+var_2]
    mov     dx, word ptr [bp+var_6]
LAB_2ea2_5152:
    loop    LAB_2ea2_513b
    jmp     LAB_2ea2_5128
LAB_2ea2_5156:
    neg     al
    mov     cl, al
    xor     ch, ch
LAB_2ea2_515c:
    lodsb
    and     byte ptr es:[di], al
    inc     di
    dec     dx
    jg      LAB_2ea2_5174
    add     word ptr [bp+var_10], 0x2
    mov     bx, word ptr [bp+var_10]
    mov     di, word ptr cs:[bx]
    add     di, word ptr [bp+var_2]
    mov     dx, word ptr [bp+var_6]
LAB_2ea2_5174:
    loop    LAB_2ea2_515c
    jmp     LAB_2ea2_5128
shape2d_render_bmp_as_mask_asm_ endp

; undefined __cdecl16far nopsub_33B98(undefined2 param_1, int * param_2, undefined2 param_3, int param_4, int param_5)
nopsub_33B98_asm_ proc far
    var_4      = word ptr   -4
    var_2      = word ptr   -2
    param_1    = word ptr    6
    param_2    = word ptr    8
    param_3    = word ptr   10
    param_4    = word ptr   12
    param_5    = word ptr   14

    push    bp
    mov     bp, sp
    sub     sp, 0xe
    push    ds
    push    si
    push    di
    mov     ds, word ptr [bp+param_2]
    mov     si, word ptr [bp+param_1]
    mov     ax, word ptr [bp+param_3]
    sub     ax, word ptr [si+0x4]
    mov     word ptr [bp+var_2], ax
    mov     ax, word ptr [bp+param_4]
    sub     ax, word ptr [si+0x6]
    mov     word ptr [bp+var_4], ax
    jmp     LAB_2ea2_51d5
nopsub_33B98_asm_ endp
    db 0x90

; void __cdecl16far sprite_putimage_and_alt(SHAPE2D * param_1, undefined2 param_2, int param_3, int param_4)
sprite_putimage_and_alt_asm_ proc far
    var_4      = word ptr   -4
    var_2      = word ptr   -2
    param_1    = dword ptr   6
    param_2    = word ptr   10
    param_3    = word ptr   12
    param_4    = word ptr   14

    push    bp
    mov     bp, sp
    sub     sp, 0xe
    push    ds
    push    si
    push    di
    mov     ds, word ptr [bp+param_1+2]
    mov     si, word ptr [bp+param_1]
    mov     ax, word ptr [bp+param_2]
    mov     word ptr [bp+var_2], ax
    mov     ax, word ptr [bp+param_3]
    mov     word ptr [bp+var_4], ax
    jmp     LAB_2ea2_51d5
sprite_putimage_and_alt_asm_ endp
    db 0x90

; void __cdecl16far sprite_putimage(SHAPE2D * shape)
sprite_putimage_asm_ proc far
    var_E      = word ptr  -14
    var_bitmap = word ptr  -12
    var_A      = word ptr  -10
    var_8      = word ptr   -8
    var_6      = word ptr   -6
    shapey     = word ptr   -4
    shapex     = word ptr   -2
    shape      = dword ptr   6

    push    bp
    mov     bp, sp
    sub     sp, 0xe
    push    ds
    push    si
    push    di
    mov     ds, word ptr [bp+shape+2]
    mov     si, word ptr [bp+shape]
    mov     ax, word ptr [si+0x8]
    mov     word ptr [bp+shapex], ax
    mov     ax, word ptr [si+0xa]
    mov     word ptr [bp+shapey], ax
LAB_2ea2_51d5:
    mov     bx, word ptr [bp+shapey]
    mov     cx, word ptr [si+0x2]
    lea     dx, [si+0x10]
    mov     ax, bx
    cmp     ax, word ptr cs:[sprite1.sprite_top]
    jl      LAB_2ea2_51fb
    add     ax, cx
    sub     ax, word ptr cs:[sprite1.sprite_height]
    jle     LAB_2ea2_5222
    sub     cx, ax
    jg      LAB_2ea2_5222
LAB_2ea2_51f4:
    pop     di
    pop     si
    pop     ds
    mov     sp, bp
    pop     bp
    retf
LAB_2ea2_51fb:
    mov     bx, word ptr cs:[sprite1.sprite_top]
    add     ax, cx
    sub     ax, bx
    jle     LAB_2ea2_51f4
    xchg    ax, cx
    sub     ax, cx
    mov     word ptr [bp+var_8], dx
    mul     word ptr [si]
    mov     dx, word ptr [bp+var_8]
    add     dx, ax
    mov     ax, bx
    add     ax, cx
    sub     ax, word ptr cs:[sprite1.sprite_height]
    jle     LAB_2ea2_5222
    sub     cx, ax
    jle     LAB_2ea2_51f4
LAB_2ea2_5222:
    mov     word ptr [bp+var_bitmap], dx
    mov     word ptr [bp+var_A], cx
    mov     word ptr [bp+shapey], bx
    mov     cx, word ptr [si]
    xor     dx, dx
    mov     bx, word ptr [bp+shapex]
    mov     ax, bx
    cmp     ax, word ptr cs:[sprite1.sprite_left]
    jl      LAB_2ea2_524d
    add     ax, cx
    sub     ax, word ptr cs:[sprite1.sprite_right]
    jl      LAB_2ea2_5274
    sub     cx, ax
    jle     LAB_2ea2_51f4
    mov     dx, ax
    jmp     LAB_2ea2_5274
    db 0x90
LAB_2ea2_524d:
    mov     bx, word ptr cs:[sprite1.sprite_left]
    add     ax, cx
    sub     ax, bx
    jle     LAB_2ea2_51f4
    mov     si, cx
    sub     si, ax
    add     word ptr [bp+var_bitmap], si
    mov     si, word ptr cs:[sprite1.sprite_right]
    sub     si, bx
    jle     LAB_2ea2_51f4
    cmp     ax, si
    jl      LAB_2ea2_526e
    mov     ax, si
LAB_2ea2_526e:
    xchg    dx, cx
    sub     dx, ax
    add     cx, ax
LAB_2ea2_5274:
    or      cx, cx
    jle     LAB_2ea2_52b8
    mov     word ptr [bp+var_6], cx
    mov     word ptr [bp+var_8], dx
    mov     word ptr [bp+shapex], bx
    cld
    mov     es, word ptr cs:[sprite1.sprite_bitmapptr+2]
    mov     bx, word ptr [bp+shapey]
    shl     bx, 0x1
    add     bx, word ptr cs:[sprite1.sprite_lineofs]
    mov     di, word ptr cs:[bx]
    add     di, word ptr [bp+shapex]
    mov     si, word ptr [bp+var_bitmap]
    mov     dx, word ptr [bp+var_A]
    mov     bx, word ptr cs:[sprite1.sprite_pitch]
    sub     bx, word ptr [bp+var_6]
    cmp     word ptr [bp+var_8], 0x0
    jz      LAB_2ea2_52bb
LAB_2ea2_52ab:
    mov     cx, word ptr [bp+var_6]
    rep movsb
    add     si, word ptr [bp+var_8]
    add     di, bx
    dec     dx
    jg      LAB_2ea2_52ab
LAB_2ea2_52b8:
    jmp     near ptr LAB_2ea2_51f4
LAB_2ea2_52bb:
    mov     ax, word ptr [bp+var_6]
    shr     ax, 0x1
    mov     word ptr [bp+var_E], ax
    jnc     LAB_2ea2_52d5
    jz      LAB_2ea2_52e2
LAB_2ea2_52c7:
    mov     cx, word ptr [bp+var_E]
    rep movsw
    movsb
    add     di, bx
    dec     dx
    jg      LAB_2ea2_52c7
    jmp     near ptr LAB_2ea2_51f4
LAB_2ea2_52d5:
    mov     cx, word ptr [bp+var_E]
    rep movsw
    add     di, bx
    dec     dx
    jg      LAB_2ea2_52d5
    jmp     near ptr LAB_2ea2_51f4
LAB_2ea2_52e2:
    movsb
    add     di, bx
    inc     bx
    dec     dx
    jg      LAB_2ea2_52e2
    jmp     near ptr LAB_2ea2_51f4
sprite_putimage_asm_ endp

; undefined __cdecl16far nopsub_33D0C(undefined2 param_1, uint * param_2, undefined2 param_3, int param_4, int param_5)
nopsub_33D0C_asm_ proc far
    var_4      = word ptr   -4
    var_2      = word ptr   -2
    param_1    = word ptr    6
    param_2    = word ptr    8
    param_3    = word ptr   10
    param_4    = word ptr   12
    param_5    = word ptr   14

    push    bp
    mov     bp, sp
    sub     sp, 0xa
    push    ds
    push    si
    push    di
    mov     ds, word ptr [bp+param_2]
    mov     si, word ptr [bp+param_1]
    mov     ax, word ptr [bp+param_3]
    sub     ax, word ptr [si+0x4]
    mov     word ptr [bp+var_2], ax
    mov     ax, word ptr [bp+param_4]
    sub     ax, word ptr [si+0x6]
    mov     word ptr [bp+var_4], ax
    jmp     LAB_2ea2_5349
nopsub_33D0C_asm_ endp
    db 0x90

; void __stdcall16near sprite_shape_to_1(SHAPE2D * shape, undefined2 param_2, int param_3, int param_4)
sprite_shape_to_1_asm_ proc near
    var_4      = word ptr   -4
    var_2      = word ptr   -2
    shape      = dword ptr   4
    param_2    = word ptr    8
    param_3    = word ptr   10
    param_4    = word ptr   12

    push    bp
    mov     bp, sp
    sub     sp, 0xa
    push    ds
    push    si
    push    di
    mov     ds, word ptr [bp+param_2]
    mov     si, word ptr [bp+shape+2]
    mov     ax, word ptr [bp+param_3]
    mov     word ptr [bp+var_2], ax
    mov     ax, word ptr [bp+param_4]
    mov     word ptr [bp+var_4], ax
    jmp     LAB_2ea2_5349
sprite_shape_to_1_asm_ endp
    db 0x90

; void __cdecl16far sprite_shape_to_1_alt(SHAPE2D * shape)
sprite_shape_to_1_alt_asm_ proc far
    var_6      = word ptr   -6
    var_4      = word ptr   -4
    var_2      = word ptr   -2
    shape      = dword ptr   6

    push    bp
    mov     bp, sp
    sub     sp, 0xa
    push    ds
    push    si
    push    di
    mov     ds, word ptr [bp+shape+2]
    mov     si, word ptr [bp+shape]
    mov     ax, word ptr [si+0x8]
    mov     word ptr [bp+var_2], ax
    mov     ax, word ptr [si+0xa]
    mov     word ptr [bp+var_4], ax
LAB_2ea2_5349:
    mov     bx, word ptr [bp+var_4]
    shl     bx, 0x1
    add     bx, word ptr cs:[sprite1.sprite_lineofs]
    mov     di, word ptr cs:[bx]
    add     di, word ptr [bp+var_2]
    mov     es, word ptr cs:[sprite1.sprite_bitmapptr+2]
    cld
    mov     dx, word ptr [si+0x2]
    mov     bx, word ptr cs:[sprite1.sprite_pitch]
    mov     ax, word ptr [si]
    sub     bx, ax
    add     si, 0x10
    shr     ax, 0x1
    mov     word ptr [bp+var_6], ax
    jnc     LAB_2ea2_5389
    jz      LAB_2ea2_5395
LAB_2ea2_5377:
    mov     cx, word ptr [bp+var_6]
    rep movsw
    movsb
    add     di, bx
    dec     dx
    jg      LAB_2ea2_5377
LAB_2ea2_5382:
    pop     di
    pop     si
    pop     ds
    mov     sp, bp
    pop     bp
    retf
LAB_2ea2_5389:
    mov     cx, word ptr [bp+var_6]
    rep movsw
    add     di, bx
    dec     dx
    jg      LAB_2ea2_5389
    jmp     LAB_2ea2_5382
LAB_2ea2_5395:
    movsb
    add     di, bx
    dec     dx
    jg      LAB_2ea2_5395
    jmp     LAB_2ea2_5382
sprite_shape_to_1_alt_asm_ endp
    db 0

; undefined __cdecl16far nopsub_33DBE(undefined2 param_1, int * param_2, undefined2 param_3, int param_4, int param_5)
nopsub_33DBE_asm_ proc far
    var_4      = word ptr   -4
    var_2      = word ptr   -2
    param_1    = word ptr    6
    param_2    = word ptr    8
    param_3    = word ptr   10
    param_4    = word ptr   12
    param_5    = word ptr   14

    push    bp
    mov     bp, sp
    sub     sp, 0x10
    push    ds
    push    si
    push    di
    mov     ds, word ptr [bp+param_2]
    mov     si, word ptr [bp+param_1]
    mov     ax, word ptr [bp+param_3]
    sub     ax, word ptr [si+0x4]
    mov     word ptr [bp+var_2], ax
    mov     ax, word ptr [bp+param_4]
    sub     ax, word ptr [si+0x6]
    mov     word ptr [bp+var_4], ax
    jmp     LAB_2ea2_53fb
nopsub_33DBE_asm_ endp
    db 0x90

; void __cdecl16far shape2d_op_unk5(undefined2 param_1, int * param_2, undefined2 param_3, int param_4, int param_5)
shape2d_op_unk5_asm_ proc far
    var_4      = word ptr   -4
    var_2      = word ptr   -2
    param_1    = word ptr    6
    param_2    = word ptr    8
    param_3    = word ptr   10
    param_4    = word ptr   12
    param_5    = word ptr   14

    push    bp
    mov     bp, sp
    sub     sp, 0x10
    push    ds
    push    si
    push    di
    mov     ds, word ptr [bp+param_2]
    mov     si, word ptr [bp+param_1]
    mov     ax, word ptr [bp+param_3]
    mov     word ptr [bp+var_2], ax
    mov     ax, word ptr [bp+param_4]
    mov     word ptr [bp+var_4], ax
    jmp     LAB_2ea2_53fb                      ; goto shape2d_op_unk3
shape2d_op_unk5_asm_ endp
    db 0x90

; void __cdecl16far shape2d_op_unk(SHAPE2D * shape)
shape2d_op_unk_asm_ proc far
    var_10     = word ptr  -16
    var_E      = word ptr  -14
    var_6      = word ptr   -6
    var_4      = word ptr   -4
    var_2      = word ptr   -2
    shape      = dword ptr   6

    push    bp
    mov     bp, sp
    sub     sp, 0x10
    push    ds
    push    si
    push    di
    mov     ds, word ptr [bp+shape+2]
    mov     si, word ptr [bp+shape]
    mov     ax, word ptr [si+0x8]
    mov     word ptr [bp+var_2], ax
    mov     ax, word ptr [si+0xa]
    mov     word ptr [bp+var_4], ax
LAB_2ea2_53fb:
    cld
    lea     ax, [si+0x10]
    mov     word ptr [bp+var_E], ax
    mov     ax, word ptr [si]
    mov     word ptr [bp+var_6], ax
LAB_2ea2_5407:
    mov     bx, word ptr [bp+var_4]
    shl     bx, 0x1
    add     bx, word ptr cs:[sprite1.sprite_lineofs]
    mov     word ptr [bp+var_10], bx
    mov     di, word ptr cs:[bx]
    add     di, word ptr [bp+var_2]
    mov     ax, word ptr cs:[sprite1.sprite_bitmapptr+2]
    mov     es, ax
    mov     si, word ptr [bp+var_E]
    mov     dx, word ptr [bp+var_6]
LAB_2ea2_5426:
    lodsb
    or      al, al
    jg      LAB_2ea2_5434
    jl      LAB_2ea2_5451
    pop     di
    pop     si
    pop     ds
    mov     sp, bp
    pop     bp
    retf
LAB_2ea2_5434:
    mov     cl, al
    xor     ch, ch
    lodsb
LAB_2ea2_5439:
    stosb
    dec     dx
    jg      LAB_2ea2_544d
    add     word ptr [bp+var_10], 0x2
    mov     bx, word ptr [bp+var_10]
    mov     di, word ptr cs:[bx]
    add     di, word ptr [bp+var_2]
    mov     dx, word ptr [bp+var_6]
LAB_2ea2_544d:
    loop    LAB_2ea2_5439
    jmp     LAB_2ea2_5426
LAB_2ea2_5451:
    neg     al
    mov     cl, al
    xor     ch, ch
LAB_2ea2_5457:
    movsb
    dec     dx
    jg      LAB_2ea2_546b
    add     word ptr [bp+var_10], 0x2
    mov     bx, word ptr [bp+var_10]
    mov     di, word ptr cs:[bx]
    add     di, word ptr [bp+var_2]
    mov     dx, word ptr [bp+var_6]
LAB_2ea2_546b:
    loop    LAB_2ea2_5457
    jmp     LAB_2ea2_5426
shape2d_op_unk_asm_ endp
    db 0

; undefined __cdecl16far nopsub_33E90(undefined2 param_1, int * param_2, undefined2 param_3, int param_4, int param_5)
nopsub_33E90_asm_ proc far
    var_4      = word ptr   -4
    var_2      = word ptr   -2
    param_1    = word ptr    6
    param_2    = word ptr    8
    param_3    = word ptr   10
    param_4    = word ptr   12
    param_5    = word ptr   14

    push    bp
    mov     bp, sp
    sub     sp, 0x10
    push    ds
    push    si
    push    di
    mov     ds, word ptr [bp+param_2]
    mov     si, word ptr [bp+param_1]
    mov     ax, word ptr [bp+param_3]
    sub     ax, word ptr [si+0x4]
    mov     word ptr [bp+var_2], ax
    mov     ax, word ptr [bp+param_4]
    sub     ax, word ptr [si+0x6]
    mov     word ptr [bp+var_4], ax
    jmp     LAB_2ea2_54cd
nopsub_33E90_asm_ endp
    db 0x90

; void __cdecl16far shape2d_op_unk2(undefined2 param_1, int * param_2, undefined2 param_3, int param_4, int param_5)
shape2d_op_unk2_asm_ proc far
    var_4      = word ptr   -4
    var_2      = word ptr   -2
    param_1    = word ptr    6
    param_2    = word ptr    8
    param_3    = word ptr   10
    param_4    = word ptr   12
    param_5    = word ptr   14

    push    bp
    mov     bp, sp
    sub     sp, 0x10
    push    ds
    push    si
    push    di
    mov     ds, word ptr [bp+param_2]
    mov     si, word ptr [bp+param_1]
    mov     ax, word ptr [bp+param_3]
    mov     word ptr [bp+var_2], ax
    mov     ax, word ptr [bp+param_4]
    mov     word ptr [bp+var_4], ax
    jmp     LAB_2ea2_54cd                      ; goto somewhere inside shape2d_op_unk3
shape2d_op_unk2_asm_ endp
    db 0x90

; void __cdecl16far shape2d_op_unk3(int * param_1, undefined2 param_2)
shape2d_op_unk3_asm_ proc far
    var_10     = word ptr  -16
    var_E      = word ptr  -14
    var_C      = word ptr  -12
    var_A      = word ptr  -10
    var_8      = word ptr   -8
    var_6      = word ptr   -6
    var_4      = word ptr   -4
    var_2      = word ptr   -2
    param_1    = word ptr    6
    param_2    = word ptr    8

    push    bp
    mov     bp, sp
    sub     sp, 0x10
    push    ds
    push    si
    push    di
    mov     ds, word ptr [bp+param_2]
    mov     si, word ptr [bp+param_1]
    mov     ax, word ptr [si+0x8]
    mov     word ptr [bp+var_2], ax
    mov     ax, word ptr [si+0xa]
    mov     word ptr [bp+var_4], ax
LAB_2ea2_54cd:
    cld
    lea     ax, [si+0x10]
    mov     word ptr [bp+var_E], ax
    mov     ax, word ptr [si]
    mov     word ptr [bp+var_6], ax
    xor     di, di
    xor     dx, dx
    mov     bx, word ptr [bp+var_4]
    mov     cx, word ptr [si+0x2]
    mov     ax, bx
    cmp     ax, word ptr cs:[sprite1.sprite_top]
    jl      LAB_2ea2_5501
    add     ax, cx
    sub     ax, word ptr cs:[sprite1.sprite_height]
    jle     LAB_2ea2_5524
    inc     di
    sub     cx, ax
    jg      LAB_2ea2_5524
LAB_2ea2_54fa:
    pop     di
    pop     si
    pop     ds
    mov     sp, bp
    pop     bp
    retf
LAB_2ea2_5501:
    inc     di
    mov     bx, word ptr cs:[sprite1.sprite_top]
    add     ax, cx
    sub     ax, bx
    jle     LAB_2ea2_54fa
    xchg    ax, cx
    sub     ax, cx
    mul     word ptr [bp+var_6]
    mov     dx, ax
    mov     ax, bx
    add     ax, cx
    sub     ax, word ptr cs:[sprite1.sprite_height]
    jle     LAB_2ea2_5524
    sub     cx, ax
    jle     LAB_2ea2_54fa
LAB_2ea2_5524:
    mov     word ptr [bp+var_8], cx
    mov     word ptr [bp+var_4], bx
    mov     word ptr [bp+var_A], dx
    xor     dx, dx
    mov     bx, word ptr [bp+var_2]
    mov     ax, bx
    mov     cx, word ptr [bp+var_6]
    cmp     ax, word ptr cs:[sprite1.sprite_left]
    jl      LAB_2ea2_5551
    add     ax, cx
    sub     ax, word ptr cs:[sprite1.sprite_right]
    jle     LAB_2ea2_5577
    sub     cx, ax
    jle     LAB_2ea2_54fa
    inc     di
    mov     dx, ax
    jmp     LAB_2ea2_5577
    db 0x90
LAB_2ea2_5551:
    inc     di
    mov     bx, word ptr cs:[sprite1.sprite_left]
    add     ax, cx
    sub     ax, bx
    jle     LAB_2ea2_54fa
    mov     si, cx
    sub     si, ax
    add     word ptr [bp+var_A], si
    mov     si, word ptr cs:[sprite1.sprite_right]
    sub     si, bx
    cmp     ax, si
    jl      LAB_2ea2_5571
    mov     ax, si
LAB_2ea2_5571:
    xchg    dx, cx
    sub     dx, ax
    add     cx, ax
LAB_2ea2_5577:
    mov     word ptr [bp+var_6], cx
    mov     word ptr [bp+var_C], dx
    mov     word ptr [bp+var_2], bx
    or      di, di
    jnz     LAB_2ea2_5589
    jmp     far ptr LAB_2ea2_5407
LAB_2ea2_5589:
    mov     bx, word ptr [bp+var_4]
    shl     bx, 0x1
    add     bx, word ptr cs:[sprite1.sprite_lineofs]
    mov     word ptr [bp+var_10], bx
    mov     di, word ptr cs:[bx]
    add     di, word ptr [bp+var_2]
    mov     ax, word ptr cs:[sprite1.sprite_bitmapptr+2]
    mov     es, ax
    mov     si, word ptr [bp+var_E]
    mov     dx, word ptr [bp+var_A]
    or      dx, dx
    jnz     LAB_2ea2_5622
LAB_2ea2_55ac:
    mov     dx, word ptr [bp+var_6]
LAB_2ea2_55af:
    lodsb
    or      al, al
    jg      LAB_2ea2_55bd
    jl      LAB_2ea2_55eb
LAB_2ea2_55b6:
    pop     di
    pop     si
    pop     ds
    mov     sp, bp
    pop     bp
    retf
LAB_2ea2_55bd:
    mov     cl, al
    xor     ch, ch
    lodsb
LAB_2ea2_55c2:
    stosb
    dec     dx
    jle     LAB_2ea2_55ca
    loop    LAB_2ea2_55c2
    jmp     LAB_2ea2_55af
LAB_2ea2_55ca:
    dec     word ptr [bp+var_8]
    jz      LAB_2ea2_55b6
    add     word ptr [bp+var_10], 0x2
    mov     bx, word ptr [bp+var_10]
    mov     di, word ptr cs:[bx]
    add     di, word ptr [bp+var_2]
    dec     cx
    mov     dx, word ptr [bp+var_C]
LAB_2ea2_55e0:
    sub     cx, dx
    jz      LAB_2ea2_55ac
    jl      LAB_2ea2_561e
    mov     dx, word ptr [bp+var_6]
    jmp     LAB_2ea2_55c2
LAB_2ea2_55eb:
    neg     al
    mov     cl, al
    xor     ch, ch
LAB_2ea2_55f1:
    movsb
    dec     dx
    jle     LAB_2ea2_55f9
    loop    LAB_2ea2_55f1
    jmp     LAB_2ea2_55af
LAB_2ea2_55f9:
    dec     word ptr [bp+var_8]
    jz      LAB_2ea2_55b6
    add     word ptr [bp+var_10], 0x2
    mov     bx, word ptr [bp+var_10]
    mov     di, word ptr cs:[bx]
    add     di, word ptr [bp+var_2]
    dec     cx
    mov     dx, word ptr [bp+var_C]
LAB_2ea2_560f:
    add     si, dx
    sub     cx, dx
    jz      LAB_2ea2_55ac
    jl      LAB_2ea2_561c
    mov     dx, word ptr [bp+var_6]
    jmp     LAB_2ea2_55f1
LAB_2ea2_561c:
    add     si, cx
LAB_2ea2_561e:
    neg     cx
    mov     dx, cx
LAB_2ea2_5622:
    lodsb
    or      al, al
    jg      LAB_2ea2_5630
    jl      LAB_2ea2_5637
    pop     di
    pop     si
    pop     ds
    mov     sp, bp
    pop     bp
    retf
LAB_2ea2_5630:
    mov     cl, al
    xor     ch, ch
    lodsb
    jmp     LAB_2ea2_55e0
LAB_2ea2_5637:
    neg     al
    mov     cl, al
    xor     ch, ch
    jmp     LAB_2ea2_560f
shape2d_op_unk3_asm_ endp
    db 0

; void __cdecl16far sprite_putimage_or_alt(SHAPE2D * shape, undefined2 param_2, int param_3, int param_4)
sprite_putimage_or_alt_asm_ proc far
    var_4      = word ptr   -4
    var_2      = word ptr   -2
    shape      = dword ptr   6
    param_2    = word ptr   10
    param_3    = word ptr   12
    param_4    = word ptr   14

    push    bp
    mov     bp, sp
    sub     sp, 0xe
    push    ds
    push    si
    push    di
    mov     ds, word ptr [bp+shape+2]
    mov     si, word ptr [bp+shape]
    mov     ax, word ptr [bp+param_2]
    sub     ax, word ptr [si+0x4]
    mov     word ptr [bp+var_2], ax
    mov     ax, word ptr [bp+param_3]
    sub     ax, word ptr [si+0x6]
    mov     word ptr [bp+var_4], ax
    jmp     LAB_2ea2_569d                      ; goto sprite_putimage_or
sprite_putimage_or_alt_asm_ endp
    db 0x90

; void __cdecl16far sprite_putimage_or(SHAPE2D * shape, uint a, uint b)
sprite_putimage_or_asm_ proc far
    var_E      = word ptr  -14
    var_C      = word ptr  -12
    var_A      = word ptr  -10
    var_8      = word ptr   -8
    var_6      = word ptr   -6
    var_4      = word ptr   -4
    var_2      = word ptr   -2
    shape      = dword ptr   6
    a          = word ptr   10
    b          = word ptr   12

    push    bp
    mov     bp, sp
    sub     sp, 0xe
    push    ds
    push    si
    push    di
    mov     ds, word ptr [bp+shape+2]
    mov     si, word ptr [bp+shape]
    mov     ax, word ptr [bp+a]
    mov     word ptr [bp+var_2], ax
    mov     ax, word ptr [bp+b]
    mov     word ptr [bp+var_4], ax
    jmp     LAB_2ea2_569d
    db 0x90
    push    bp
    mov     bp, sp
    sub     sp, 0xe
    push    ds
    push    si
    push    di
    mov     ds, word ptr [bp+0x8]
    mov     si, word ptr [bp+0x6]
    mov     ax, word ptr [si+0x8]
    mov     word ptr [bp-0x2], ax
    mov     ax, word ptr [si+0xa]
    mov     word ptr [bp-0x4], ax
LAB_2ea2_569d:
    mov     bx, word ptr [bp+var_4]
    mov     cx, word ptr [si+0x2]
    lea     dx, [si+0x10]
    mov     ax, bx
    cmp     ax, word ptr cs:[sprite1.sprite_top]
    jl      LAB_2ea2_56c3
    add     ax, cx
    sub     ax, word ptr cs:[sprite1.sprite_height]
    jle     LAB_2ea2_56ea
    sub     cx, ax
    jg      LAB_2ea2_56ea
LAB_2ea2_56bc:
    pop     di
    pop     si
    pop     ds
    mov     sp, bp
    pop     bp
    retf
LAB_2ea2_56c3:
    mov     bx, word ptr cs:[sprite1.sprite_top]
    add     ax, cx
    sub     ax, bx
    jle     LAB_2ea2_56bc
    xchg    ax, cx
    sub     ax, cx
    mov     word ptr [bp+var_8], dx
    mul     word ptr [si]
    mov     dx, word ptr [bp+var_8]
    add     dx, ax
    mov     ax, bx
    add     ax, cx
    sub     ax, word ptr cs:[sprite1.sprite_height]
    jle     LAB_2ea2_56ea
    sub     cx, ax
    jle     LAB_2ea2_56bc
LAB_2ea2_56ea:
    mov     word ptr [bp+var_C], dx
    mov     word ptr [bp+var_A], cx
    mov     word ptr [bp+var_4], bx
    mov     cx, word ptr [si]
    xor     dx, dx
    mov     bx, word ptr [bp+var_2]
    mov     ax, bx
    cmp     ax, word ptr cs:[sprite1.sprite_left]
    jl      LAB_2ea2_5715
    add     ax, cx
    sub     ax, word ptr cs:[sprite1.sprite_right]
    jl      LAB_2ea2_573c
    sub     cx, ax
    jle     LAB_2ea2_56bc
    mov     dx, ax
    jmp     LAB_2ea2_573c
    db 0x90
LAB_2ea2_5715:
    mov     bx, word ptr cs:[sprite1.sprite_left]
    add     ax, cx
    sub     ax, bx
    jle     LAB_2ea2_56bc
    mov     si, cx
    sub     si, ax
    add     word ptr [bp+var_C], si
    mov     si, word ptr cs:[sprite1.sprite_right]
    sub     si, bx
    jle     LAB_2ea2_56bc
    cmp     ax, si
    jl      LAB_2ea2_5736
    mov     ax, si
LAB_2ea2_5736:
    xchg    dx, cx
    sub     dx, ax
    add     cx, ax
LAB_2ea2_573c:
    or      cx, cx
    jle     LAB_2ea2_5785
    mov     word ptr [bp+var_6], cx
    mov     word ptr [bp+var_8], dx
    mov     word ptr [bp+var_2], bx
    cld
    mov     es, word ptr cs:[sprite1.sprite_bitmapptr+2]
    mov     bx, word ptr [bp+var_4]
    shl     bx, 0x1
    add     bx, word ptr cs:[sprite1.sprite_lineofs]
    mov     di, word ptr cs:[bx]
    add     di, word ptr [bp+var_2]
    mov     si, word ptr [bp+var_C]
    mov     dx, word ptr [bp+var_A]
    mov     bx, word ptr cs:[sprite1.sprite_pitch]
    sub     bx, word ptr [bp+var_6]
    cmp     word ptr [bp+var_8], 0x0
    jz      LAB_2ea2_5788
LAB_2ea2_5773:
    mov     cx, word ptr [bp+var_6]
LAB_2ea2_5776:
    lodsb
    or      byte ptr es:[di], al
    inc     di
    loop    LAB_2ea2_5776
    add     si, word ptr [bp+var_8]
    add     di, bx
    dec     dx
    jg      LAB_2ea2_5773
LAB_2ea2_5785:
    jmp     near ptr LAB_2ea2_56bc
LAB_2ea2_5788:
    mov     ax, word ptr [bp+var_6]
    shr     ax, 0x1
    mov     word ptr [bp+var_E], ax
    jnc     LAB_2ea2_57ac
    jz      LAB_2ea2_57bf
    inc     bx
LAB_2ea2_5795:
    mov     cx, word ptr [bp+var_E]
LAB_2ea2_5798:
    lodsw
    or      word ptr es:[di], ax
    inc     di
    inc     di
    loop    LAB_2ea2_5798
    lodsb
    or      byte ptr es:[di], al
    add     di, bx
    dec     dx
    jg      LAB_2ea2_5795
    jmp     near ptr LAB_2ea2_56bc
LAB_2ea2_57ac:
    mov     cx, word ptr [bp+var_E]
LAB_2ea2_57af:
    lodsw
    or      word ptr es:[di], ax
    inc     di
    inc     di
    loop    LAB_2ea2_57af
    add     di, bx
    dec     dx
    jg      LAB_2ea2_57ac
    jmp     near ptr LAB_2ea2_56bc
LAB_2ea2_57bf:
    inc     bx
LAB_2ea2_57c0:
    lodsb
    or      byte ptr es:[di], al
    add     di, bx
    inc     bx
    dec     dx
    jg      LAB_2ea2_57c0
    jmp     near ptr LAB_2ea2_56bc
sprite_putimage_or_asm_ endp
    db 0
    push    bp
    mov     bp, sp
    sub     sp, 0xa
    push    ds
    push    si
    push    di
    mov     ds, word ptr [bp+0x8]
    mov     si, word ptr [bp+0x6]
    mov     ax, word ptr [bp+0xa]
    sub     ax, word ptr [si+0x4]
    mov     word ptr [bp-0x2], ax
    mov     ax, word ptr [bp+0xc]
    sub     ax, word ptr [si+0x6]
    mov     word ptr [bp-0x4], ax
    jmp     LAB_2ea2_582b
    db 0x90

; void __cdecl16far putpixel_iconFillings(uint * param_1, undefined2 param_2, int param_3, int param_4)
putpixel_iconFillings_asm_ proc far
    var_6      = word ptr   -6
    var_4      = word ptr   -4
    var_2      = word ptr   -2
    param_1    = word ptr    6
    param_2    = word ptr    8
    param_3    = word ptr   10
    param_4    = word ptr   12

    push    bp
    mov     bp, sp
    sub     sp, 0xa
    push    ds
    push    si
    push    di
    mov     ds, word ptr [bp+param_2]
    mov     si, word ptr [bp+param_1]
    mov     ax, word ptr [bp+param_3]
    mov     word ptr [bp+var_2], ax
    mov     ax, word ptr [bp+param_4]
    mov     word ptr [bp+var_4], ax
    jmp     LAB_2ea2_582b
    db 0x90
    push    bp
    mov     bp, sp
    sub     sp, 0xa
    push    ds
    push    si
    push    di
    mov     ds, word ptr [bp+0x8]
    mov     si, word ptr [bp+0x6]
    mov     ax, word ptr [si+0x8]
    mov     word ptr [bp-0x2], ax
    mov     ax, word ptr [si+0xa]
    mov     word ptr [bp-0x4], ax
LAB_2ea2_582b:
    mov     bx, word ptr [bp+var_4]
    shl     bx, 0x1
    add     bx, word ptr cs:[sprite1.sprite_lineofs]
    mov     di, word ptr cs:[bx]
    add     di, word ptr [bp+var_2]
    mov     es, word ptr cs:[sprite1.sprite_bitmapptr+2]
    cld
    mov     dx, word ptr [si+0x2]
    mov     bx, word ptr cs:[sprite1.sprite_pitch]
    mov     ax, word ptr [si]
    sub     bx, ax
    add     si, 0x10
    shr     ax, 0x1
    mov     word ptr [bp+var_6], ax
    jnc     LAB_2ea2_5875
    jz      LAB_2ea2_5887
    inc     bx
LAB_2ea2_585a:
    mov     cx, word ptr [bp+var_6]
LAB_2ea2_585d:
    lodsw
    or      word ptr es:[di], ax
    inc     di
    inc     di
    loop    LAB_2ea2_585d
    lodsb
    or      byte ptr es:[di], al
    add     di, bx
    dec     dx
    jg      LAB_2ea2_585a
LAB_2ea2_586e:
    pop     di
    pop     si
    pop     ds
    mov     sp, bp
    pop     bp
    retf
LAB_2ea2_5875:
    mov     cx, word ptr [bp+var_6]
LAB_2ea2_5878:
    lodsw
    or      word ptr es:[di], ax
    inc     di
    inc     di
    loop    LAB_2ea2_5878
    add     di, bx
    dec     dx
    jg      LAB_2ea2_5875
    jmp     LAB_2ea2_586e
LAB_2ea2_5887:
    inc     bx
LAB_2ea2_5888:
    lodsb
    or      word ptr es:[di], ax
    add     di, bx
    dec     dx
    jg      LAB_2ea2_5888
    jmp     LAB_2ea2_586e
putpixel_iconFillings_asm_ endp
    db 0
    push    bp
    mov     bp, sp
    sub     sp, 0x10
    push    ds
    push    si
    push    di
    mov     ds, word ptr [bp+0x8]
    mov     si, word ptr [bp+0x6]
    mov     ax, word ptr [bp+0xa]
    sub     ax, word ptr [si+0x4]
    mov     word ptr [bp-0x2], ax
    mov     ax, word ptr [bp+0xc]
    sub     ax, word ptr [si+0x6]
    mov     word ptr [bp-0x4], ax
    jmp     LAB_2ea2_58f1
    db 0x90
    push    bp
    mov     bp, sp
    sub     sp, 0x10
    push    ds
    push    si
    push    di
    mov     ds, word ptr [bp+0x8]
    mov     si, word ptr [bp+0x6]
    mov     ax, word ptr [bp+0xa]
    mov     word ptr [bp-0x2], ax
    mov     ax, word ptr [bp+0xc]
    mov     word ptr [bp-0x4], ax
    jmp     LAB_2ea2_58f1
    db 0x90

; void __cdecl16far shape2d_op_unk4(SHAPE2D * shape)
shape2d_op_unk4_asm_ proc far
    var_10     = word ptr  -16
    var_E      = word ptr  -14
    var_6      = word ptr   -6
    var_4      = word ptr   -4
    var_2      = word ptr   -2
    shape      = dword ptr   6

    push    bp
    mov     bp, sp
    sub     sp, 0x10
    push    ds
    push    si
    push    di
    mov     ds, word ptr [bp+shape+2]
    mov     si, word ptr [bp+shape]
    mov     ax, word ptr [si+0x8]
    mov     word ptr [bp+var_2], ax
    mov     ax, word ptr [si+0xa]
    mov     word ptr [bp+var_4], ax
LAB_2ea2_58f1:
    cld
    lea     ax, [si+0x10]
    mov     word ptr [bp+var_E], ax
    mov     ax, word ptr [si]
    mov     word ptr [bp+var_6], ax
    mov     bx, word ptr [bp+var_4]
    shl     bx, 0x1
    add     bx, word ptr cs:[sprite1.sprite_lineofs]
    mov     word ptr [bp+var_10], bx
    mov     di, word ptr cs:[bx]
    add     di, word ptr [bp+var_2]
    mov     ax, word ptr cs:[sprite1.sprite_bitmapptr+2]
    mov     es, ax
    mov     si, word ptr [bp+var_E]
    mov     dx, word ptr [bp+var_6]
LAB_2ea2_591c:
    lodsb
    or      al, al
    jg      LAB_2ea2_592a
    jl      LAB_2ea2_594a
    pop     di
    pop     si
    pop     ds
    mov     sp, bp
    pop     bp
    retf
LAB_2ea2_592a:
    mov     cl, al
    xor     ch, ch
    lodsb
LAB_2ea2_592f:
    or      byte ptr es:[di], al
    inc     di
    dec     dx
    jg      LAB_2ea2_5946
    add     word ptr [bp+var_10], 0x2
    mov     bx, word ptr [bp+var_10]
    mov     di, word ptr cs:[bx]
    add     di, word ptr [bp+var_2]
    mov     dx, word ptr [bp+var_6]
LAB_2ea2_5946:
    loop    LAB_2ea2_592f
    jmp     LAB_2ea2_591c
LAB_2ea2_594a:
    neg     al
    mov     cl, al
    xor     ch, ch
LAB_2ea2_5950:
    lodsb
    or      byte ptr es:[di], al
    inc     di
    dec     dx
    jg      LAB_2ea2_5968
    add     word ptr [bp+var_10], 0x2
    mov     bx, word ptr [bp+var_10]
    mov     di, word ptr cs:[bx]
    add     di, word ptr [bp+var_2]
    mov     dx, word ptr [bp+var_6]
LAB_2ea2_5968:
    loop    LAB_2ea2_5950
    jmp     LAB_2ea2_591c
shape2d_op_unk4_asm_ endp
    push    bp
    mov     bp, sp
    sub     sp, 0x10
    push    ds
    push    si
    push    di
    mov     ds, word ptr [bp+0x8]
    mov     si, word ptr [bp+0x6]
    mov     ax, word ptr [bp+0xa]
    sub     ax, word ptr [si+0x4]
    mov     word ptr [bp-0x2], ax
    mov     ax, word ptr [bp+0xc]
    sub     ax, word ptr [si+0x6]
    mov     word ptr [bp-0x4], ax
    jmp     LAB_2ea2_59c9
    db 0x90

; void __cdecl16far sprite_putimage_transparent(SHAPE2D * shape, int param_2, int param_3)
sprite_putimage_transparent_asm_ proc far
    var_bmpptr = word ptr  -12
    var_A      = word ptr  -10
    var_8      = word ptr   -8
    var_6      = word ptr   -6
    var_shapey = word ptr   -4
    var_shapex = word ptr   -2
    shape      = dword ptr   6
    param_2    = word ptr   10
    param_3    = word ptr   12

    push    bp
    mov     bp, sp
    sub     sp, 0x10
    push    ds
    push    si
    push    di
    mov     ds, word ptr [bp+shape+2]
    mov     si, word ptr [bp+shape]
    mov     ax, word ptr [bp+param_2]
    mov     word ptr [bp+var_shapex], ax
    mov     ax, word ptr [bp+param_3]
    mov     word ptr [bp+var_shapey], ax
    jmp     LAB_2ea2_59c9
    db 0x90
    push    bp
    mov     bp, sp
    sub     sp, 0xc
    push    ds
    push    si
    push    di
    mov     ds, word ptr [bp+0x8]
    mov     si, word ptr [bp+0x6]
    mov     ax, word ptr [si+0x8]
    mov     word ptr [bp-0x2], ax
    mov     ax, word ptr [si+0xa]
    mov     word ptr [bp-0x4], ax
LAB_2ea2_59c9:
    mov     bx, word ptr [bp+var_shapey]
    mov     cx, word ptr [si+0x2]
    lea     dx, [si+0x10]
    mov     ax, bx
    cmp     ax, word ptr cs:[sprite1.sprite_top]
    jl      LAB_2ea2_59ef
    add     ax, cx
    sub     ax, word ptr cs:[sprite1.sprite_height]
    jle     LAB_2ea2_5a16
    sub     cx, ax
    jg      LAB_2ea2_5a16
LAB_2ea2_59e8:
    pop     di
    pop     si
    pop     ds
    mov     sp, bp
    pop     bp
    retf
LAB_2ea2_59ef:
    mov     bx, word ptr cs:[sprite1.sprite_top]
    add     ax, cx
    sub     ax, bx
    jle     LAB_2ea2_59e8
    xchg    ax, cx
    sub     ax, cx
    mov     word ptr [bp+var_bmpptr], dx
    mul     word ptr [si]
    mov     dx, word ptr [bp+var_bmpptr]
    add     dx, ax
    mov     ax, bx
    add     ax, cx
    sub     ax, word ptr cs:[sprite1.sprite_height]
    jle     LAB_2ea2_5a16
    sub     cx, ax
    jle     LAB_2ea2_59e8
LAB_2ea2_5a16:
    mov     word ptr [bp+var_bmpptr], dx
    mov     word ptr [bp+var_A], cx
    mov     word ptr [bp+var_shapey], bx
    mov     cx, word ptr [si]
    xor     dx, dx
    mov     ax, word ptr [bp+var_shapex]
    mov     bx, ax
    cmp     ax, word ptr cs:[sprite1.sprite_left]
    jl      LAB_2ea2_5a41
    add     ax, cx
    sub     ax, word ptr cs:[sprite1.sprite_right]
    jl      LAB_2ea2_5a68
    sub     cx, ax
    jle     LAB_2ea2_59e8
    mov     dx, ax
    jmp     LAB_2ea2_5a68
    db 0x90
LAB_2ea2_5a41:
    mov     bx, word ptr cs:[sprite1.sprite_left]
    add     ax, cx
    sub     ax, bx
caseD_e:
    jle     LAB_2ea2_59e8
    mov     si, cx
    sub     si, ax
    add     word ptr [bp+var_bmpptr], si
    mov     si, word ptr cs:[sprite1.sprite_right]
    sub     si, bx
    jle     LAB_2ea2_59e8
    cmp     ax, si
    jl      LAB_2ea2_5a62
    mov     ax, si
LAB_2ea2_5a62:
    xchg    dx, cx
    sub     dx, ax
    add     cx, ax
LAB_2ea2_5a68:
    or      cx, cx
    jle     LAB_2ea2_5abc
    mov     word ptr [bp+var_6], cx
    mov     word ptr [bp+var_8], dx
    mov     word ptr [bp+var_shapex], bx
    cld
    mov     es, word ptr cs:[sprite1.sprite_bitmapptr+2]
    mov     bx, word ptr [bp+var_shapey]
    shl     bx, 0x1
    add     bx, word ptr cs:[sprite1.sprite_lineofs]
    mov     di, word ptr cs:[bx]
    add     di, word ptr [bp+var_shapex]
    mov     si, word ptr [bp+var_bmpptr]
    mov     dx, word ptr cs:[sprite1.sprite_pitch]
    sub     dx, word ptr [bp+var_6]
    xor     bh, bh
    mov     ah, 0xff
LAB_2ea2_5a9a:
    mov     cx, word ptr [bp+var_6]
LAB_2ea2_5a9d:
    lodsb
    mov     bl, al
    mov     al, byte ptr cs:[bx+incnums]
    cmp     al, ah
    jz      LAB_2ea2_5aaf
    stosb
    loop    LAB_2ea2_5a9d
    jmp     LAB_2ea2_5ab2
    db 0x90
LAB_2ea2_5aaf:
    inc     di
    loop    LAB_2ea2_5a9d
LAB_2ea2_5ab2:
    add     si, word ptr [bp+var_8]
    add     di, dx
    dec     word ptr [bp+var_A]
    jg      LAB_2ea2_5a9a
LAB_2ea2_5abc:
    pop     di
    pop     si
    pop     ds
    mov     sp, bp
    pop     bp
    retf
sprite_putimage_transparent_asm_ endp
    db 0
    push    bp
    mov     bp, sp
    sub     sp, 0xa
    push    ds
    push    si
    push    di
    mov     ds, word ptr [bp+0x8]
    mov     si, word ptr [bp+0x6]
    mov     ax, word ptr [bp+0xa]
    sub     ax, word ptr [si+0x4]
    mov     word ptr [bp-0x2], ax
    mov     ax, word ptr [bp+0xc]
    sub     ax, word ptr [si+0x6]
    mov     word ptr [bp-0x4], ax
    jmp     LAB_2ea2_5b21
    db 0x90
    push    bp
    mov     bp, sp
    sub     sp, 0xa
    push    ds
    push    si
    push    di
    mov     ds, word ptr [bp+0x8]
    mov     si, word ptr [bp+0x6]
    mov     ax, word ptr [bp+0xa]
    mov     word ptr [bp-0x2], ax
    mov     ax, word ptr [bp+0xc]
    mov     word ptr [bp-0x4], ax
    jmp     LAB_2ea2_5b21
    db 0x90

; undefined __cdecl16far sub_34526(int * param_1, undefined2 param_2)
sub_34526_asm_ proc far
    var_8      = word ptr   -8
    var_6      = word ptr   -6
    var_4      = word ptr   -4
    var_2      = word ptr   -2
    param_1    = word ptr    6
    param_2    = word ptr    8

    push    bp
    mov     bp, sp
    sub     sp, 0xa
    push    ds
    push    si
    push    di
    mov     ds, word ptr [bp+param_2]
    mov     si, word ptr [bp+param_1]
    mov     ax, word ptr [si+0x8]
    mov     word ptr [bp+var_2], ax
    mov     ax, word ptr [si+0xa]
    mov     word ptr [bp+var_4], ax
LAB_2ea2_5b21:
    mov     bx, word ptr [bp+var_4]
    shl     bx, 0x1
    add     bx, word ptr cs:[sprite1.sprite_lineofs]
    mov     di, word ptr cs:[bx]
    add     di, word ptr [bp+var_2]
    mov     dx, word ptr cs:[sprite1.sprite_pitch]
    mov     ax, word ptr [si]
    mov     word ptr [bp+var_6], ax
    sub     dx, ax
    mov     ax, word ptr [si+0x2]
    mov     word ptr [bp+var_8], ax
    mov     es, word ptr cs:[sprite1.sprite_bitmapptr+2]
    cld
    add     si, 0x10
    xor     bx, bx
LAB_2ea2_5b4e:
    mov     cx, word ptr [bp+var_6]
LAB_2ea2_5b51:
    lodsb
    mov     bl, al
    mov     al, byte ptr cs:[bx+incnums]
    cmp     al, 0xff
    jz      LAB_2ea2_5b63
    stosb
    loop    LAB_2ea2_5b51
    jmp     LAB_2ea2_5b66
    db 0x90
LAB_2ea2_5b63:
    inc     di
    loop    LAB_2ea2_5b51
LAB_2ea2_5b66:
    add     di, dx
    dec     word ptr [bp+var_8]
    jg      LAB_2ea2_5b4e
    pop     di
    pop     si
    pop     ds
    mov     sp, bp
    pop     bp
    retf
sub_34526_asm_ endp
    push    bp
    mov     bp, sp
    sub     sp, 0x4
    push    ds
    push    si
    push    di
    mov     ax, word ptr [bp+0x6]
    mov     byte ptr [(aCopyrightCUnlimitedSoftwareInc_198+70)], al
    mov     ax, 0x5416
    mov     word ptr [bp+0x6], ax
    mov     ds, word ptr [fontdefptr2+2]
    mov     ax, word ptr [bp+0x8]
    mov     word ptr [aMsRunTimeLibraryCop], ax
    mov     ax, word ptr [bp+0xa]
    mov     word ptr [(aMsRunTimeLibraryCop+2)], ax
    jmp     LAB_2ea2_5bc5
    db 0x90

; void __cdecl16far sub_345BC(byte * param_1, undefined2 param_2, undefined2 param_3)
sub_345BC_asm_ proc far
    var_4      = word ptr   -4
    var_2      = word ptr   -2
    param_1    = word ptr    6
    param_2    = word ptr    8
    param_3    = word ptr   10

    push    bp
    mov     bp, sp
    sub     sp, 0x4
    push    ds
    push    si
    push    di
    mov     ds, word ptr [fontdefptr2+2]       ; ds = seg039
    mov     ax, word ptr [bp+param_2]
    mov     word ptr [aMsRunTimeLibraryCop], ax
    mov     ax, word ptr [bp+param_3]
    mov     word ptr [(aMsRunTimeLibraryCop+2)], ax
    jmp     LAB_2ea2_5bc5
    db 0x90
    push    bp
    mov     bp, sp
    sub     sp, 0x4
    push    ds
    push    si
    push    di
    mov     ds, word ptr [fontdefptr2+2]
LAB_2ea2_5bc5:
    cld
    mov     es, word ptr cs:[sprite1.sprite_bitmapptr+2]
LAB_2ea2_5bcb:
    mov     si, word ptr [bp+param_1]
    mov     bl, byte ptr ss:[si]
    or      bl, bl
    jz      LAB_2ea2_5bff
    mov     al, bl
    inc     word ptr [bp+param_1]
    xor     bh, bh
    shl     bx, 0x1
    add     bx, 0x16
    mov     si, word ptr [bx]
    cmp     si, 0x0
    jnz     LAB_2ea2_5c06
    cmp     al, 0xd
    jz      LAB_2ea2_5bf0
    cmp     al, 0xa
    jnz     LAB_2ea2_5bcb
LAB_2ea2_5bf0:
    mov     ax, word ptr [word_3B774]
    mov     word ptr [aMsRunTimeLibraryCop], ax
    mov     ax, word ptr [(aMsRunTimeLibraryCop+10)]
    add     word ptr [(aMsRunTimeLibraryCop+2)], ax
    jmp     LAB_2ea2_5bcb
LAB_2ea2_5bff:
    pop     di
    pop     si
    pop     ds
    mov     sp, bp
    pop     bp
    retf
LAB_2ea2_5c06:
    mov     ax, word ptr [aMsRunTimeLibraryCop]
    mov     word ptr [bp+var_2], ax
    cmp     byte ptr [(aMsRunTimeLibraryCop+12)], 0x0
    jz      LAB_2ea2_5c27
    mov     al, byte ptr [si]
    xor     ah, ah
    inc     si
    mov     word ptr [(aMsRunTimeLibraryCop+8)], ax
    add     ax, 0x7
    shr     ax, 0x1
    shr     ax, 0x1
    shr     ax, 0x1
    mov     byte ptr [(aMsRunTimeLibraryCop+4)], al
LAB_2ea2_5c27:
; <REPLACE>
    mov     al, byte ptr [word_3B770]
; </REPLACE>
;    mov     al, byte ptr [0x0]
    mov     ah, byte ptr [word_3B772]
    mov     cx, word ptr [(aMsRunTimeLibraryCop+6)]
    mov     word ptr [bp+var_4], cx
    mov     bx, word ptr [(aMsRunTimeLibraryCop+2)]
    shl     bx, 0x1
    add     bx, word ptr cs:[sprite1.sprite_lineofs]
LAB_2ea2_5c40:
    mov     di, word ptr cs:[bx]
    add     di, word ptr [bp+var_2]
    mov     dh, byte ptr [(aMsRunTimeLibraryCop+4)]
LAB_2ea2_5c4a:
    mov     cx, 0x8
    mov     dl, byte ptr [si]
LAB_2ea2_5c4f:
    shl     dl, 0x1
    jnc     LAB_2ea2_5c6c
    stosb
    loop    LAB_2ea2_5c4f
    inc     si
    dec     dh
    jg      LAB_2ea2_5c4a
LAB_2ea2_5c5b:
    inc     bx
    inc     bx
    dec     word ptr [bp+var_4]
    jg      LAB_2ea2_5c40
    mov     ax, word ptr [(aMsRunTimeLibraryCop+8)]
    add     word ptr [aMsRunTimeLibraryCop], ax
    jmp     near ptr LAB_2ea2_5bcb
LAB_2ea2_5c6c:
    mov     byte ptr es:[di], ah
    inc     di
    loop    LAB_2ea2_5c4f
    inc     si
    dec     dh
    jg      LAB_2ea2_5c4a
    jmp     LAB_2ea2_5c5b
sub_345BC_asm_ endp
    db 0
    push    bp
    mov     bp, sp
    mov     ax, word ptr [bp+0xc]
    jmp     LAB_2ea2_5c88
    db 0x90

; void __cdecl16far video_set_palette(word starting_reg, ushort reg_count, word table_ofs)
video_set_palette_asm_ proc far
    starting_reg = word ptr    6
    reg_count  = word ptr    8
    table_ofs  = word ptr   10

    push    bp
    mov     bp, sp
    mov     ax, ds
LAB_2ea2_5c88:
    mov     es, ax
    mov     bx, word ptr [bp+0x6]
    mov     dx, word ptr [bp+0xa]
    mov     cx, word ptr [bp+0x8]
    mov     ah, 0x10
    mov     al, 0x12
    int     0x10                               ; - VIDEO - SET BLOCK OF DAC REGISTERS (EGA, VGA/MCGA)
                                               ; BX = starting color register, CX = number of registers to set
                                               ; ES:DX -> table of 3*CX bytes where each 3 byte group represents one
                                               ; byte each of red, green and blue (0-63)
    pop     bp
    retf
video_set_palette_asm_ endp
    db 0
; draws multiple sequential variable length horizontal lines + various optimizations  

; void __cdecl16far draw_filled_lines(int * x1_arr, int * x2_arr, int y_, int numlines, uint color)
draw_filled_lines_asm_ proc far
    x1_arr     = word ptr    6
    x2_arr     = word ptr    8
    y_         = word ptr   10
    numlines   = word ptr   12
    color      = word ptr   14

    push    bp
    mov     bp, sp
    sub     sp, 0x2
    push    si
    push    di
    cmp     word ptr [bp+numlines], 0x0
    jz      LAB_2ea2_5cec                      ; if arg6 == 0, return
    cld
    mov     si, word ptr [bp+y_]
    shl     si, 0x1
    add     si, word ptr cs:[sprite1.sprite_lineofs]
    mov     ax, word ptr cs:[sprite1.sprite_bitmapptr+2]
    mov     es, ax
    mov     ax, word ptr [bp+color]
    mov     ah, al
LAB_2ea2_5cc0:
    mov     bx, word ptr [bp+x2_arr]
    mov     cx, word ptr [bx]
    mov     bx, word ptr [bp+x1_arr]
    mov     bx, word ptr [bx]
    sub     cx, bx
    inc     cx
    jle     LAB_2ea2_5cdc
    mov     di, word ptr cs:[si]               ; si = offset in lineofs table, di = y offset in bitmapptr
    add     di, bx
    test    cx, 0xfff8
    jnz     LAB_2ea2_5cf2                      ; jump if (cx & 0xFFF8), ie jump if cx >= 8.
    rep stosb                                  ; rep count = cx = (arg2->member0 - arg0->member0) + 1
                                               ; fill value = al = arg8
                                               ; stosb target es:di = sprite1.bitmapptr[lineofs[arg4]]
LAB_2ea2_5cdc:
    add     word ptr [bp+x2_arr], 0x2
    add     word ptr [bp+x1_arr], 0x2
    add     si, 0x2
    dec     word ptr [bp+numlines]
    jg      LAB_2ea2_5cc0
LAB_2ea2_5cec:
    pop     di
    pop     si
    mov     sp, bp
    pop     bp
    retf
LAB_2ea2_5cf2:
    test    di, 0x1                            ; looks like its figuring out which alignment optimizations to use
    jnz     LAB_2ea2_5d05
    shr     cx, 0x1
    jc      LAB_2ea2_5d00
    rep stosw
    jmp     LAB_2ea2_5cdc
LAB_2ea2_5d00:
    rep stosw
    stosb
    jmp     LAB_2ea2_5cdc
LAB_2ea2_5d05:
    shr     cx, 0x1
    jc      LAB_2ea2_5d10
    dec     cx
    stosb
    rep stosw
    stosb
    jmp     LAB_2ea2_5cdc
LAB_2ea2_5d10:
    stosb
    rep stosw
    jmp     LAB_2ea2_5cdc
draw_filled_lines_asm_ endp
    db 0

; undefined __cdecl16far nopsub_34736(undefined2 param_1, int * param_2, undefined2 param_3, int param_4, int param_5)
nopsub_34736_asm_ proc far
    var_4      = word ptr   -4
    var_2      = word ptr   -2
    param_1    = word ptr    6
    param_2    = word ptr    8
    param_3    = word ptr   10
    param_4    = word ptr   12
    param_5    = word ptr   14

    push    bp
    mov     bp, sp
    sub     sp, 0xa
    push    ds
    push    si
    push    di
    mov     ds, word ptr [bp+param_2]
    mov     di, word ptr [bp+param_1]
    mov     ax, word ptr [bp+param_3]
    sub     ax, word ptr [di+0x4]
    mov     word ptr [bp+var_2], ax
    mov     ax, word ptr [bp+param_4]
    sub     ax, word ptr [di+0x6]
    mov     word ptr [bp+var_4], ax
    jmp     LAB_2ea2_5d79
nopsub_34736_asm_ endp
    db 0x90

; void __cdecl16far sprite_clear_shape_alt(SHAPE2D * shape, undefined2 param_2, int param_3, int param_4)
sprite_clear_shape_alt_asm_ proc far
    var_4      = word ptr   -4
    var_2      = word ptr   -2
    shape      = dword ptr   6
    param_2    = word ptr   10
    param_3    = word ptr   12
    param_4    = word ptr   14

    push    bp
    mov     bp, sp
    sub     sp, 0xa
    push    ds
    push    si
    push    di
    mov     ds, word ptr [bp+shape+2]
    mov     di, word ptr [bp+shape]
    mov     ax, word ptr [bp+param_2]
    mov     word ptr [bp+var_2], ax
    mov     word ptr [di+0x8], ax
    mov     ax, word ptr [bp+param_3]
    mov     word ptr [bp+var_4], ax
    mov     word ptr [di+0xa], ax
    jmp     LAB_2ea2_5d79
sprite_clear_shape_alt_asm_ endp
    db 0x90

; void __cdecl16far sprite_clear_shape(SHAPE2D * shape)
sprite_clear_shape_asm_ proc far
    var_A      = word ptr  -10
    var_8      = word ptr   -8
    var_6      = word ptr   -6
    var_4      = word ptr   -4
    var_2      = word ptr   -2
    shape      = dword ptr   6

    push    bp
    mov     bp, sp
    sub     sp, 0xa
    push    ds
    push    si
    push    di
    mov     ds, word ptr [bp+shape+2]
    mov     di, word ptr [bp+shape]
    mov     ax, word ptr [di+0x8]
    mov     word ptr [bp+var_2], ax
    mov     ax, word ptr [di+0xa]
    mov     word ptr [bp+var_4], ax
LAB_2ea2_5d79:
    mov     ax, word ptr [di]
    mov     word ptr [bp+var_8], ax
    mov     ax, word ptr [di+0x2]
    mov     word ptr [bp+var_A], ax
    mov     bx, word ptr [bp+var_4]
    shl     bx, 0x1
    add     bx, word ptr cs:[sprite1.sprite_lineofs]
    mov     word ptr [bp+var_6], bx
    mov     ds, word ptr cs:[sprite1.sprite_bitmapptr+2]
    mov     es, word ptr [bp+shape+2]
    add     di, 0x10
    cld
    mov     dx, word ptr [bp+var_A]
LAB_2ea2_5da0:
    mov     bx, word ptr [bp+var_6]
    mov     si, word ptr cs:[bx]
    add     si, word ptr [bp+var_2]
    mov     cx, word ptr [bp+var_8]
    rep movsb
    add     word ptr [bp+var_6], 0x2
    dec     dx
    jg      LAB_2ea2_5da0
    pop     di
    pop     si
    pop     ds
    mov     sp, bp
    pop     bp
    retf
sprite_clear_shape_asm_ endp

; void __cdecl16far shape_op_explosion(uint counter, SHAPE3D * shape, int x_, int y_)
shape_op_explosion_asm_ proc far
    var_14     = word ptr  -20
    var_12     = word ptr  -18
    var_10     = word ptr  -16
    var_E      = word ptr  -14
    var_C      = word ptr  -12
    var_A      = word ptr  -10
    var_8      = word ptr   -8
    var_6      = word ptr   -6
    var_4      = word ptr   -4
    var_2      = word ptr   -2
    counter    = word ptr    6
    shape      = dword ptr  10
    x_         = word ptr   14
    y_         = word ptr   16

    push    bp
    mov     bp, sp
    sub     sp, 0x16
    push    ds
    push    si
    push    di
    mov     ds, word ptr [bp+shape]
    mov     si, word ptr [bp+0x8]
    mov     cx, word ptr [bp+shape+2]
    mov     ax, word ptr [si+0x4]
    imul    word ptr [bp+counter]
    sub     cl, ah
    sbb     ch, dl
    mov     word ptr [bp+var_2], cx
    mov     cx, word ptr [bp+x_]
    mov     ax, word ptr [si+0x6]
    imul    word ptr [bp+counter]
    sub     cl, ah
    sbb     ch, dl
    mov     word ptr [bp+var_4], cx
    jmp     LAB_2ea2_5e2e
    db 0x90
    push    bp
    mov     bp, sp
    sub     sp, 0x16
    push    ds
    push    si
    push    di
    mov     ds, word ptr [bp+0xa]
    mov     si, word ptr [bp+0x8]
    mov     ax, word ptr [bp+0xc]
    mov     word ptr [bp-0x2], ax
    mov     ax, word ptr [bp+0xe]
    mov     word ptr [bp-0x4], ax
    jmp     LAB_2ea2_5e2e
    db 0x90
LAB_2ea2_5e0c:
    pop     di
    pop     si
    pop     ds
    mov     sp, bp
    pop     bp
    retf
    push    bp
    mov     bp, sp
    sub     sp, 0x16
    push    ds
    push    si
    push    di
    mov     ds, word ptr [bp+0xa]
    mov     si, word ptr [bp+0x8]
    mov     ax, word ptr [si+0x8]
    mov     word ptr [bp-0x2], ax
    mov     ax, word ptr [si+0xa]
    mov     word ptr [bp-0x4], ax
LAB_2ea2_5e2e:
    cmp     word ptr [bp+counter], 0x2
    jc      LAB_2ea2_5e0c
    cld
    mov     ax, word ptr [si+0x2]
    mul     word ptr [bp+counter]
    mov     al, ah
    mov     ah, dl
    or      ax, ax
    jz      LAB_2ea2_5e0c
    mov     word ptr [bp+var_8], ax
    mov     ax, word ptr [si]
    mov     word ptr [bp+var_A], ax
    mul     word ptr [bp+counter]
    mov     al, ah
    mov     ah, dl
    or      ax, ax
    jz      LAB_2ea2_5e0c
    mov     word ptr [bp+var_6], ax
    mov     dx, word ptr cs:[sprite1.sprite_pitch]
    sub     dx, ax
    mov     word ptr [bp+var_C], dx
    add     si, 0x10
    mov     dx, 0x1
    xor     ax, ax
    mov     word ptr [bp+var_12], ax
    mov     word ptr [bp+var_14], ax
    div     word ptr [bp+counter]
    mov     word ptr [bp+var_10], ax
    mov     al, ah
    xor     ah, ah
    shr     ax, 0x1
    jz      LAB_2ea2_5e88
    add     si, ax
    mov     cx, ax
LAB_2ea2_5e83:
    add     si, word ptr [bp+var_A]
    loop    LAB_2ea2_5e83
LAB_2ea2_5e88:
    mov     cx, word ptr [bp+var_6]
    mov     ax, word ptr [bp+var_2]
    mov     bx, word ptr cs:[sprite1.sprite_left2]
    cmp     ax, bx
    jge     LAB_2ea2_5eb6
    add     ax, cx
    sub     ax, bx
    jle     LAB_2ea2_5f19
    mov     word ptr [bp+var_2], bx
    mov     word ptr [bp+var_6], ax
    xchg    ax, cx
    sub     ax, cx
    mul     word ptr [bp+var_10]
    xchg    dl, al
    xor     dh, dh
    mov     word ptr [bp+var_14], dx
    xchg    ah, al
    add     si, ax
    mov     ax, bx
LAB_2ea2_5eb6:
    add     ax, cx
    sub     ax, word ptr cs:[sprite1.sprite_widthsum]
    jl      LAB_2ea2_5ec6
    sub     cx, ax
    jle     LAB_2ea2_5f19
    mov     word ptr [bp+var_6], cx
LAB_2ea2_5ec6:
    mov     ax, word ptr cs:[sprite1.sprite_pitch]
    sub     ax, cx
    mov     word ptr [bp+var_C], ax
    mov     cx, word ptr [bp+var_8]
    mov     ax, word ptr [bp+var_4]
    mov     bx, word ptr cs:[sprite1.sprite_top]
    cmp     ax, bx
    jge     LAB_2ea2_5f00
    add     ax, cx
    sub     ax, bx
    jle     LAB_2ea2_5f19
    mov     word ptr [bp+var_8], ax
    mov     word ptr [bp+var_4], bx
    xchg    ax, cx
    sub     ax, cx
    mul     word ptr [bp+var_10]
    xchg    dl, al
    xor     dh, dh
    mov     word ptr [bp+var_12], dx
    xchg    ah, al
    mul     word ptr [bp+var_A]
    add     si, ax
    mov     ax, bx
LAB_2ea2_5f00:
    add     ax, cx
    sub     ax, word ptr cs:[sprite1.sprite_height]
    jl      LAB_2ea2_5f10
    sub     cx, ax
    jle     LAB_2ea2_5f19
    mov     word ptr [bp+var_8], cx
LAB_2ea2_5f10:
    mov     dx, word ptr [bp+var_10]
    mov     word ptr [bp+var_E], si
    jmp     near ptr shape_op_explosion_cont
LAB_2ea2_5f19:
    pop     di
    pop     si
    pop     ds
    mov     sp, bp
    pop     bp
    retf
sprite1:
    SPRITE <0xA0000000, 0x0000, 0x0000, 0x0000, 0x5F5C, 0x0000, 0x0140, 0x0000, 0x00C8, 0x0140, 0x0000, 0x0140, 0x0000, 0x0140>
sprite2:
    SPRITE <0xA0000000, 0x0000, 0x0000, 0x0000, 0x5F5C, 0x0000, 0x0140, 0x0000, 0x00C8, 0x0140, 0x0000, 0x0140, 0x0000, 0x0140>
lineoffsets:
    dw 0x0000, 0x0140, 0x0280, 0x03C0
    dw 0x0500, 0x0640, 0x0780, 0x08C0
    dw 0x0A00, 0x0B40, 0x0C80, 0x0DC0
    dw 0x0F00, 0x1040, 0x1180, 0x12C0
    dw 0x1400, 0x1540, 0x1680, 0x17C0
    dw 0x1900, 0x1A40, 0x1B80, 0x1CC0
    dw 0x1E00, 0x1F40, 0x2080, 0x21C0
    dw 0x2300, 0x2440, 0x2580, 0x26C0
    dw 0x2800, 0x2940, 0x2A80, 0x2BC0
    dw 0x2D00, 0x2E40, 0x2F80, 0x30C0
    dw 0x3200, 0x3340, 0x3480, 0x35C0
    dw 0x3700, 0x3840, 0x3980, 0x3AC0
    dw 0x3C00, 0x3D40, 0x3E80, 0x3FC0
    dw 0x4100, 0x4240, 0x4380, 0x44C0
    dw 0x4600, 0x4740, 0x4880, 0x49C0
    dw 0x4B00, 0x4C40, 0x4D80, 0x4EC0
    dw 0x5000, 0x5140, 0x5280, 0x53C0
    dw 0x5500, 0x5640, 0x5780, 0x58C0
    dw 0x5A00, 0x5B40, 0x5C80, 0x5DC0
    dw 0x5F00, 0x6040, 0x6180, 0x62C0
    dw 0x6400, 0x6540, 0x6680, 0x67C0
    dw 0x6900, 0x6A40, 0x6B80, 0x6CC0
    dw 0x6E00, 0x6F40, 0x7080, 0x71C0
    dw 0x7300, 0x7440, 0x7580, 0x76C0
    dw 0x7800, 0x7940, 0x7A80, 0x7BC0
    dw 0x7D00, 0x7E40, 0x7F80, 0x80C0
    dw 0x8200, 0x8340, 0x8480, 0x85C0
    dw 0x8700, 0x8840, 0x8980, 0x8AC0
    dw 0x8C00, 0x8D40, 0x8E80, 0x8FC0
    dw 0x9100, 0x9240, 0x9380, 0x94C0
    dw 0x9600, 0x9740, 0x9880, 0x99C0
    dw 0x9B00, 0x9C40, 0x9D80, 0x9EC0
    dw 0xA000, 0xA140, 0xA280, 0xA3C0
    dw 0xA500, 0xA640, 0xA780, 0xA8C0
    dw 0xAA00, 0xAB40, 0xAC80, 0xADC0
    dw 0xAF00, 0xB040, 0xB180, 0xB2C0
    dw 0xB400, 0xB540, 0xB680, 0xB7C0
    dw 0xB900, 0xBA40, 0xBB80, 0xBCC0
    dw 0xBE00, 0xBF40, 0xC080, 0xC1C0
    dw 0xC300, 0xC440, 0xC580, 0xC6C0
    dw 0xC800, 0xC940, 0xCA80, 0xCBC0
    dw 0xCD00, 0xCE40, 0xCF80, 0xD0C0
    dw 0xD200, 0xD340, 0xD480, 0xD5C0
    dw 0xD700, 0xD840, 0xD980, 0xDAC0
    dw 0xDC00, 0xDD40, 0xDE80, 0xDFC0
    dw 0xE100, 0xE240, 0xE380, 0xE4C0
    dw 0xE600, 0xE740, 0xE880, 0xE9C0
    dw 0xEB00, 0xEC40, 0xED80, 0xEEC0
    dw 0xF000, 0xF140, 0xF280, 0xF3C0
    dw 0xF500, 0xF640, 0xF780, 0xF8C0
; Formerly font_set_unk
shape_op_explosion_asm_ endp

; void __cdecl16far font_set_colour(uint fg, uint bg)
font_set_colour_asm_ proc far
    fg         = word ptr    6
    bg         = word ptr    8

    push    bp
    mov     bp, sp
    mov     es, word ptr [fontdefptr2+2]
    mov     ax, word ptr [bp+bg]
    xor     ah, ah
    mov     es:[0x2], ax
    mov     ax, word ptr [bp+fg]
    xor     ah, ah
    mov     es:[0x0], ax
    pop     bp
    retf
font_set_colour_asm_ endp

; void __cdecl16far nopsub_2ea2_6107(undefined2 param_1, undefined2 param_2)
nopsub_2ea2_6107_asm_ proc far
    param_1    = word ptr    6
    param_2    = word ptr    8

    push    bp
    mov     bp, sp
    mov     es, word ptr [fontdefptr2+2]
    mov     ax, word ptr [bp+param_1]
    mov     es:[0x8], ax
    mov     ax, word ptr [bp+param_2]
    mov     es:[0xa], ax
    pop     bp
    retf
nopsub_2ea2_6107_asm_ endp

; void __cdecl16far nopsub_2ea2_611e(undefined2 * param_1)
nopsub_2ea2_611e_asm_ proc far
    param_1    = word ptr    6

    push    bp
    mov     bp, sp
    push    ds
    push    di
    push    si
    xor     si, si
    mov     di, word ptr [bp+param_1]
    mov     ax, ds
    mov     es, ax
    mov     ds, word ptr [fontdefptr2+2]
    cld
    mov     word ptr es:[di+0x16], ds
    mov     cx, 0xb
    rep movsw
    pop     si
    pop     di
    pop     ds
    pop     bp
    retf
nopsub_2ea2_611e_asm_ endp

; void __cdecl16far nopsub_2ea2_6140(undefined2 * param_1)
nopsub_2ea2_6140_asm_ proc far
    param_1    = word ptr    6

    push    bp
    mov     bp, sp
    push    di
    push    si
    mov     si, word ptr [bp+param_1]
    mov     ax, word ptr [si+0x16]
    mov     word ptr [fontdefptr2+2], ax
    mov     es, ax
    xor     di, di
    cld
    mov     cx, 0xb
    rep movsw
    pop     si
    pop     di
    pop     bp
    retf
nopsub_2ea2_6140_asm_ endp

; void __cdecl16far set_fontdefseg(void * data)
set_fontdefseg_asm_ proc far
    data       = dword ptr   6

    push    bp
    mov     bp, sp
    mov     ax, word ptr [bp+data+2]
    mov     word ptr [fontdefptr2+2], ax
    pop     bp
    retf
set_fontdefseg_asm_ endp
    db 0
    push    bp
    mov     bp, sp
    push    si
    push    di
    mov     ax, word ptr [bp+0x10]
    mov     word ptr [word_4031E], ax
    jmp     LAB_2ea2_617b
    db 0x90

; void __cdecl16far draw_patterned_lines(int * param_1, int * param_2, uint param_3, int param_4, byte param_5)
draw_patterned_lines_asm_ proc far
    param_1    = word ptr    6
    param_2    = word ptr    8
    param_3    = word ptr   10
    param_4    = word ptr   12
    param_5    = byte ptr   14

    push    bp
    mov     bp, sp
    push    si
    push    di
LAB_2ea2_617b:
    cld
    mov     si, word ptr [bp+param_3]
    test    si, 0x1
    jnz     LAB_2ea2_618d
    mov     ax, word ptr [word_4031E]
    xchg    al, ah
    mov     word ptr [word_4031E], ax
LAB_2ea2_618d:
    mov     si, word ptr [bp+param_3]
    shl     si, 0x1
    add     si, word ptr cs:[sprite1.sprite_lineofs]
    mov     ax, word ptr cs:[sprite1.sprite_bitmapptr+2]
    mov     es, ax
    mov     al, byte ptr [bp+param_5]
LAB_2ea2_61a0:
    mov     bx, word ptr [bp+param_2]
    mov     dx, word ptr [bx]
    mov     bx, word ptr [bp+param_1]
    mov     bx, word ptr [bx]
    mov     ah, byte ptr [word_4031E]
    mov     cl, bl
    and     cl, 0x7
    rol     ah, cl
    mov     cx, dx
    sub     cx, bx
    inc     cx
    jle     LAB_2ea2_61c8
    mov     di, word ptr cs:[si]
    add     di, bx
LAB_2ea2_61c1:
    rol     ah, 0x1
    jnc     LAB_2ea2_61e6
    stosb
    loop    LAB_2ea2_61c1
LAB_2ea2_61c8:
    add     word ptr [bp+param_2], 0x2
    add     word ptr [bp+param_1], 0x2
    add     si, 0x2
    mov     dx, word ptr [word_4031E]
    xchg    dl, dh
    mov     word ptr [word_4031E], dx
    dec     word ptr [bp+param_4]
    jg      LAB_2ea2_61a0
    pop     di
    pop     si
    pop     bp
    retf
LAB_2ea2_61e6:
    inc     di
    loop    LAB_2ea2_61c1
    jmp     LAB_2ea2_61c8
draw_patterned_lines_asm_ endp
    db 0

; SPRITE * __cdecl16far sprite_make_wnd(uint width_, uint height_, uint unk)
sprite_make_wnd_asm_ proc far
    var_8      = word ptr   -8
    var_6      = word ptr   -6
    var_4      = word ptr   -4
    var_2      = word ptr   -2
    width_     = word ptr    6
    height_    = word ptr    8

    push    bp
    mov     bp, sp
    sub     sp, 0x8
    push    ds
    push    si
    push    di
    mov     ax, word ptr [bp+width_]
    mov     word ptr [bp+var_8], ax
    mov     bx, word ptr [bp+height_]
    imul    bx
    add     ax, 0x10
    mov     cx, 0x4
    shr     ax, cl
    inc     ax
    mov     bx, ax
    mov     word ptr [bp+var_6], ax
    push    ax
    mov     ax, offset aMcgaWindow
    push    ax
    call    far ptr mmgr_alloc_pages
    add     sp, 0x4
    mov     word ptr [bp+var_2], dx
    mov     ds, dx
    xor     bx, bx
    mov     ax, word ptr [bp+var_8]
    mov     word ptr [bx], ax
    mov     ax, word ptr [bp+height_]
    mov     word ptr [bx+0x2], ax
    xor     ax, ax
    mov     word ptr [bx+0x8], ax
    mov     word ptr [bx+0xa], ax
    mov     word ptr [bx+0x4], ax
    mov     word ptr [bx+0x6], ax
    mov     ax, 0xf                            ; sizeof SPRITE (in words)
    add     ax, word ptr [bp+height_]          ; height ??
    shl     ax, 0x1
    mov     bx, word ptr cs:[next_wnd_def]
    mov     word ptr [bp+var_4], bx
    add     ax, bx
    cmp     ax, offset sprite_set_1_from_argptr ; sprite_set_1 happens to be the end of the buffer.. see below this func
    jnc     LAB_2ea2_62b6
    mov     word ptr cs:[next_wnd_def], ax
    mov     word ptr cs:[bx], 0x0
    mov     ax, word ptr [bp+var_2]
    mov     word ptr cs:[bx+0x2], ax
    lea     ax, [bx+0x1e]
    mov     word ptr cs:[bx+0xa], ax
    mov     word ptr cs:[bx+0xc], 0x0
    mov     word ptr cs:[bx+0x1a], 0x0
    mov     ax, word ptr [bp+var_8]
    mov     word ptr cs:[bx+0xe], ax
    mov     word ptr cs:[bx+0x14], ax
    mov     word ptr cs:[bx+0x10], 0x0
    mov     ax, word ptr [bp+height_]
    mov     word ptr cs:[bx+0x12], ax
    mov     ax, word ptr [bp+width_]
    mov     word ptr cs:[bx+0x18], ax
    mov     word ptr cs:[bx+0x1c], ax
    mov     cx, word ptr [bp+height_]
    mov     ax, 0x10
LAB_2ea2_629e:
    mov     word ptr cs:[bx+0x1e], ax
    add     bx, 0x2
    add     ax, word ptr [bp+var_8]
    loop    LAB_2ea2_629e
    mov     dx, cs
    mov     ax, word ptr [bp+var_4]
    pop     di
    pop     si
    pop     ds
    mov     sp, bp
    pop     bp
    retf
LAB_2ea2_62b6:
    mov     ax, ss
    mov     ds, ax
    mov     ax, offset aWindowdefOutOfRowTableSpa
    push    ax
    call    far ptr fatal_error
sprite_make_wnd_asm_ endp
    db 0x90
next_wnd_def:
    dw wnd_defs
wnd_defs:
    db 3600 dup (0x00)

; void __cdecl16far sprite_set_1_from_argptr(SPRITE * sprite_)
sprite_set_1_from_argptr_asm_ proc far
    sprite_    = dword ptr   6

    push    bp
    mov     bp, sp
    push    ds
    push    si
    push    di
    cld
    mov     ds, word ptr [bp+sprite_+2]
    mov     si, word ptr [bp+sprite_]
    mov     cx, 0xf
    mov     ax, cs
    mov     es, ax
    mov     di, offset sprite1
    rep movsw
    pop     di
    pop     si
    pop     ds
    pop     bp
    retf
sprite_set_1_from_argptr_asm_ endp

; void __cdecl16far sprite_copy_2_to_1(void)
sprite_copy_2_to_1_asm_ proc far
; <REPLACE>
    mov     ax, seg seg012
; </REPLACE>
;    mov     ax, 0x2ea2
    push    ax
    mov     ax, offset sprite2
    push    ax
    call    far ptr sprite_set_1_from_argptr
    add     sp, 0x4
    retf
sprite_copy_2_to_1_asm_ endp
    db 0

; undefined __cdecl16far putpixel_single_maybe(int param_1, int param_2, undefined1 param_3)
putpixel_single_maybe_asm_ proc far
    param_1    = word ptr    6
    param_2    = word ptr    8
    param_3    = byte ptr   10

    push    bp
    mov     bp, sp
    push    si
    push    di
    mov     ax, word ptr [bp+param_1]
    cmp     ax, word ptr cs:[sprite1.sprite_left]
    jl      LAB_2ea2_712d
    cmp     ax, word ptr cs:[sprite1.sprite_right]
    jge     LAB_2ea2_712d
    mov     ax, word ptr [bp+param_2]
    cmp     ax, word ptr cs:[sprite1.sprite_top]
    jl      LAB_2ea2_712d
    cmp     ax, word ptr cs:[sprite1.sprite_height]
    jl      LAB_2ea2_7136
LAB_2ea2_712d:
    pop     di
    pop     si
    pop     bp
    retf
    push    bp
    mov     bp, sp
    push    si
    push    di
LAB_2ea2_7136:
    mov     di, word ptr [bp+param_1]
    mov     si, word ptr [bp+param_2]
    shl     si, 0x1
    add     si, word ptr cs:[sprite1.sprite_lineofs]
    add     di, word ptr cs:[si]
    mov     es, word ptr cs:[sprite1.sprite_bitmapptr+2]
    mov     ax, word ptr [bp+param_3]
    mov     byte ptr es:[di], al
    pop     di
    pop     si
    pop     bp
    retf
putpixel_single_maybe_asm_ endp
    db 0

; void __cdecl16far sub_35B76(int param_1, int param_2, uint param_3, int param_4, byte param_5)
sub_35B76_asm_ proc far
    param_1    = word ptr    6
    param_2    = word ptr    8
    param_3    = word ptr   10
    param_4    = word ptr   12
    param_5    = byte ptr   14

    push    bp
    mov     bp, sp
    push    si
    push    di
    mov     dx, word ptr cs:[sprite1.sprite_left]
    mov     ax, dx
    sub     ax, word ptr [bp+param_1]
    jle     LAB_2ea2_716f
    mov     word ptr [bp+param_1], dx
    sub     word ptr [bp+param_3], ax
    jle     LAB_2ea2_71ad
LAB_2ea2_716f:
    mov     ax, word ptr [bp+param_1]
    add     ax, word ptr [bp+param_3]
    sub     ax, word ptr cs:[sprite1.sprite_right]
    jle     LAB_2ea2_7181
    sub     word ptr [bp+param_3], ax
    jle     LAB_2ea2_71ad
LAB_2ea2_7181:
    mov     ax, word ptr cs:[sprite1.sprite_top]
    sub     ax, word ptr [bp+param_2]
    jle     LAB_2ea2_7196
    sub     word ptr [bp+param_4], ax
    jle     LAB_2ea2_71ad
    mov     ax, word ptr cs:[sprite1.sprite_top]
    mov     word ptr [bp+param_2], ax
LAB_2ea2_7196:
    mov     ax, word ptr [bp+param_2]
    add     ax, word ptr [bp+param_4]
    mov     bx, word ptr cs:[sprite1.sprite_height]
    sub     ax, bx
    jle     LAB_2ea2_71b5
    sub     word ptr [bp+param_4], ax
    jle     LAB_2ea2_71ad
    jmp     LAB_2ea2_71b5
    db 0x90
LAB_2ea2_71ad:
    jmp     LAB_2ea2_7205
    db 0x90
    push    bp
    mov     bp, sp
    push    si
    push    di
LAB_2ea2_71b5:
    cld
    cmp     word ptr [bp+param_3], 0x0
    jle     LAB_2ea2_71ad
    cmp     word ptr [bp+param_4], 0x0
    jle     LAB_2ea2_71ad
    mov     es, word ptr cs:[sprite1.sprite_bitmapptr+2]
    mov     al, byte ptr [bp+param_5]
    mov     ah, al
    mov     dx, word ptr [bp+param_1]
    mov     si, word ptr [bp+param_4]
    mov     bx, word ptr [bp+param_2]
    shl     bx, 0x1
    add     bx, word ptr cs:[sprite1.sprite_lineofs]
    mov     di, word ptr cs:[bx]
    add     di, word ptr [bp+param_1]
    mov     dx, word ptr cs:[sprite1.sprite_pitch]
    sub     dx, word ptr [bp+param_3]
    mov     cx, word ptr [bp+param_3]
    sar     cx, 0x1
    mov     word ptr [bp+param_3], cx
    jc      LAB_2ea2_7209
    jle     LAB_2ea2_7205
LAB_2ea2_71f6:
    mov     cx, word ptr [bp+param_3]
LAB_2ea2_71f9:
    xor     word ptr es:[di], ax
    inc     di
    inc     di
    loop    LAB_2ea2_71f9
    add     di, dx
    dec     si
    jg      LAB_2ea2_71f6
LAB_2ea2_7205:
    pop     di
    pop     si
    pop     bp
    retf
LAB_2ea2_7209:
    jz      LAB_2ea2_7222
    jl      LAB_2ea2_7205
    inc     dx
LAB_2ea2_720e:
    mov     cx, word ptr [bp+param_3]
LAB_2ea2_7211:
    xor     word ptr es:[di], ax
    inc     di
    inc     di
    loop    LAB_2ea2_7211
    xor     byte ptr es:[di], al
    add     di, dx
    dec     si
    jg      LAB_2ea2_720e
    jmp     LAB_2ea2_7205
LAB_2ea2_7222:
    inc     dx
LAB_2ea2_7223:
    xor     byte ptr es:[di], al
    add     di, dx
    dec     si
    jg      LAB_2ea2_7223
    jmp     LAB_2ea2_7205
sub_35B76_asm_ endp
    db 0

; void __cdecl16far sub_35C4E(int x_, int y_, int width_, int height_, int unk)
sub_35C4E_asm_ proc far
    var_14     = word ptr  -20
    var_12     = word ptr  -18
    var_10     = word ptr  -16
    var_E      = word ptr  -14
    var_C      = word ptr  -12
    var_A      = word ptr  -10
    var_8      = word ptr   -8
    var_6      = word ptr   -6
    var_4      = word ptr   -4
    var_2      = word ptr   -2
    x_         = word ptr    6
    y_         = word ptr    8
    width_     = word ptr   10
    height_    = word ptr   12
    unk        = word ptr   14

    push    bp
    mov     bp, sp
    sub     sp, 0x6
    push    si
    push    di
    push    ds
    cld
    mov     ax, word ptr cs:[sprite1.sprite_bitmapptr+2]
    mov     es, ax
    mov     ax, word ptr cs:[sprite2.sprite_bitmapptr+2]
    mov     ds, ax
    mov     ax, word ptr [bp+x_]
    mov     word ptr [bp+var_2], ax
    mov     ax, word ptr [bp+width_]
    mov     ax, word ptr [bp+y_]
    shl     ax, 0x1
    mov     cx, ax
    add     ax, word ptr cs:[sprite2.sprite_lineofs]
    mov     word ptr [bp+var_4], ax
    add     cx, word ptr cs:[sprite1.sprite_lineofs]
    mov     ax, word ptr [bp+unk]
    mov     bx, ax
    add     ax, word ptr [bp+x_]
    cwd
    idiv    word ptr cs:[sprite1.sprite_width2]
    sub     dx, word ptr [bp+x_]
    shl     ax, 0x1
    add     cx, ax
    add     word ptr [bp+var_2], dx
    mov     word ptr [bp+var_6], cx
    mov     dx, word ptr [bp+height_]
LAB_2ea2_727f:
    mov     cx, word ptr [bp+width_]
    mov     bx, word ptr [bp+var_4]
    mov     si, word ptr cs:[bx]
    add     si, word ptr [bp+x_]
    mov     bx, word ptr [bp+var_6]
    mov     di, word ptr cs:[bx]
    add     di, word ptr [bp+var_2]
    rep movsb
    add     word ptr [bp+var_4], 0x2
    add     word ptr [bp+var_6], 0x2
    dec     dx
    jg      LAB_2ea2_727f
    pop     ds
    pop     di
    pop     si
    mov     sp, bp
    pop     bp
    retf
sub_35C4E_asm_ endp
incnums:
    db 0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07
    db 0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F
    db 0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17
    db 0x18, 0x19, 0x1A, 0x1B, 0x1C, 0x1D, 0x1E, 0x1F
    db 0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27
    db 0x28, 0x29, 0x2A, 0x2B, 0x2C, 0x2D, 0x2E, 0x2F
    db 0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37
    db 0x38, 0x39, 0x3A, 0x3B, 0x3C, 0x3D, 0x3E, 0x3F
    db 0x40, 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47
    db 0x48, 0x49, 0x4A, 0x4B, 0x4C, 0x4D, 0x4E, 0x4F
    db 0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57
    db 0x58, 0x59, 0x5A, 0x5B, 0x5C, 0x5D, 0x5E, 0x5F
    db 0x60, 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67
    db 0x68, 0x69, 0x6A, 0x6B, 0x6C, 0x6D, 0x6E, 0x6F
    db 0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77
    db 0x78, 0x79, 0x7A, 0x7B, 0x7C, 0x7D, 0x7E, 0x7F
    db 0x80, 0x81, 0x82, 0x83, 0x84, 0x85, 0x86, 0x87
    db 0x88, 0x89, 0x8A, 0x8B, 0x8C, 0x8D, 0x8E, 0x8F
    db 0x90, 0x91, 0x92, 0x93, 0x94, 0x95, 0x96, 0x97
    db 0x98, 0x99, 0x9A, 0x9B, 0x9C, 0x9D, 0x9E, 0x9F
    db 0xA0, 0xA1, 0xA2, 0xA3, 0xA4, 0xA5, 0xA6, 0xA7
    db 0xA8, 0xA9, 0xAA, 0xAB, 0xAC, 0xAD, 0xAE, 0xAF
    db 0xB0, 0xB1, 0xB2, 0xB3, 0xB4, 0xB5, 0xB6, 0xB7
    db 0xB8, 0xB9, 0xBA, 0xBB, 0xBC, 0xBD, 0xBE, 0xBF
    db 0xC0, 0xC1, 0xC2, 0xC3, 0xC4, 0xC5, 0xC6, 0xC7
    db 0xC8, 0xC9, 0xCA, 0xCB, 0xCC, 0xCD, 0xCE, 0xCF
    db 0xD0, 0xD1, 0xD2, 0xD3, 0xD4, 0xD5, 0xD6, 0xD7
    db 0xD8, 0xD9, 0xDA, 0xDB, 0xDC, 0xDD, 0xDE, 0xDF
    db 0xE0, 0xE1, 0xE2, 0xE3, 0xE4, 0xE5, 0xE6, 0xE7
    db 0xE8, 0xE9, 0xEA, 0xEB, 0xEC, 0xED, 0xEE, 0xEF
    db 0xF0, 0xF1, 0xF2, 0xF3, 0xF4, 0xF5, 0xF6, 0xF7
    db 0xF8, 0xF9, 0xFA, 0xFB, 0xFC, 0xFD, 0xFE, 0xFF

; void __cdecl16far sub_35DC8(undefined1 * param_1, undefined2 param_2)
sub_35DC8_asm_ proc far
    param_1    = word ptr    6
    param_2    = word ptr    8

    push    bp
    mov     bp, sp
    push    ds
    push    si
    push    di
    mov     cx, offset (RPath+18)
    mov     ds, word ptr [bp+param_2]
    mov     si, word ptr [bp+param_1]
    mov     ax, cs
    mov     es, ax
    mov     di, offset word_42A18
    cld
    rep movsb
    pop     di
    pop     si
    pop     ds
    pop     bp
    retf
sub_35DC8_asm_ endp

; void __cdecl16far sub_35DE6(int param_1, int param_2, undefined1 * param_3, undefined2 param_4)
sub_35DE6_asm_ proc far
    param_1    = word ptr    6
    param_2    = word ptr    8
    param_3    = word ptr   10
    param_4    = word ptr   12

    push    bp
    mov     bp, sp
    push    ds
    push    si
    push    di
    mov     cx, word ptr [bp+param_2]
    mov     ds, word ptr [bp+param_4]
    mov     si, word ptr [bp+param_1]
    mov     ax, cs
    mov     es, ax
    lea     di, [si+word_42A18]
    mov     si, word ptr [bp+param_3]
    cld
    rep movsb
    pop     di
    pop     si
    pop     ds
    pop     bp
    retf
sub_35DE6_asm_ endp

; void __cdecl16far sub_35E08(uint param_1, uint * param_2, undefined2 param_3, undefined2 param_4, undefined2 param_5)
sub_35E08_asm_ proc far
    var_14     = word ptr  -20
    var_12     = word ptr  -18
    var_10     = word ptr  -16
    var_E      = word ptr  -14
    var_C      = word ptr  -12
    var_A      = word ptr  -10
    var_8      = word ptr   -8
    var_6      = word ptr   -6
    var_4      = word ptr   -4
    var_2      = word ptr   -2
    param_1    = word ptr    6
    param_2    = word ptr    8
    param_3    = word ptr   10
    param_4    = word ptr   12
    param_5    = word ptr   14

    push    bp
    mov     bp, sp
    sub     sp, 0x16
    push    ds
    push    si
    push    di
    mov     ds, word ptr [bp+param_3]
    mov     si, word ptr [bp+param_2]
    mov     cx, word ptr [bp+param_4]
    mov     ax, word ptr [si+0x4]
    imul    word ptr [bp+param_1]
    sub     cl, ah
    sbb     ch, dl
    mov     word ptr [bp+var_2], cx
    mov     cx, word ptr [bp+param_5]
    mov     ax, word ptr [si+0x6]
    imul    word ptr [bp+param_1]
    sub     cl, ah
    sbb     ch, dl
    mov     word ptr [bp+var_4], cx
    jmp     LAB_2ea2_745a
    db 0x90
    push    bp
    mov     bp, sp
    sub     sp, 0x16
    push    ds
    push    si
    push    di
    mov     ds, word ptr [bp+0xa]
    mov     si, word ptr [bp+0x8]
    mov     ax, word ptr [bp+0xc]
    mov     word ptr [bp-0x2], ax
    mov     ax, word ptr [bp+0xe]
    mov     word ptr [bp-0x4], ax
    jmp     LAB_2ea2_745a
    db 0x90
LAB_2ea2_7438:
    pop     di
    pop     si
    pop     ds
    mov     sp, bp
    pop     bp
    retf
caseD_a:
    push    bp
    mov     bp, sp
    sub     sp, 0x16
    push    ds
    push    si
    push    di
    mov     ds, word ptr [bp+0xa]
    mov     si, word ptr [bp+0x8]
    mov     ax, word ptr [si+0x8]
    mov     word ptr [bp-0x2], ax
    mov     ax, word ptr [si+0xa]
    mov     word ptr [bp-0x4], ax
LAB_2ea2_745a:
    cmp     word ptr [bp+param_1], 0x2
    jc      LAB_2ea2_7438
    cld
    mov     ax, word ptr [si+0x2]
    mul     word ptr [bp+param_1]
    mov     al, ah
    mov     ah, dl
    or      ax, ax
    jz      LAB_2ea2_7438
    mov     word ptr [bp+var_8], ax
    mov     ax, word ptr [si]
    mov     word ptr [bp+var_A], ax
    mul     word ptr [bp+param_1]
    mov     al, ah
    mov     ah, dl
    or      ax, ax
    jz      LAB_2ea2_7438
    mov     word ptr [bp+var_6], ax
    mov     dx, word ptr cs:[sprite1.sprite_pitch]
    sub     dx, ax
    mov     word ptr [bp+var_C], dx
    add     si, 0x10
    mov     dx, 0x1
    xor     ax, ax
    mov     word ptr [bp+var_14], ax
    mov     word ptr [bp+var_12], ax
    div     word ptr [bp+param_1]
    mov     dx, ax
    mov     al, ah
    xor     ah, ah
    shr     ax, 0x1
    jz      LAB_2ea2_74b3
    add     si, ax
    mov     cx, ax
LAB_2ea2_74ae:
    add     si, word ptr [bp+var_A]
    loop    LAB_2ea2_74ae
LAB_2ea2_74b3:
    mov     word ptr [bp+var_E], si
    mov     word ptr [bp+var_10], dx
sub_35E08_asm_ endp
shape_op_explosion_cont:
    mov     ax, word ptr cs:[sprite1.sprite_bitmapptr+2]
    mov     es, ax
    mov     bx, word ptr [bp+var_4]
    shl     bx, 0x1
    add     bx, word ptr cs:[sprite1.sprite_lineofs]
    mov     di, word ptr cs:[bx]
    add     di, word ptr [bp+var_2]
    mov     dx, word ptr [bp+var_10]
    mov     ax, word ptr [bp+var_12]
    mov     ss:[0x54aa], ax
LAB_2ea2_74d9:
    mov     cx, word ptr [bp+var_6]
    mov     bx, word ptr [bp+var_14]
LAB_2ea2_74df:
    mov     al, byte ptr [si]
    cmp     al, 0xff
    jz      LAB_2ea2_74e8
    mov     byte ptr es:[di], al
LAB_2ea2_74e8:
    inc     di
    add     bx, dx
    mov     al, bh
    xor     ah, ah
    add     si, ax
    xor     bh, bh
    loop    LAB_2ea2_74df
    dec     word ptr [bp+var_8]
    jle     LAB_2ea2_7520
    add     di, word ptr [bp+var_C]
    mov     si, word ptr [bp+var_E]
    add     word ptr ss:[0x54aa], dx
    mov     cl, byte ptr ss:[0x54ab]
    or      cl, cl
    jz      LAB_2ea2_74d9
    xor     ch, ch
LAB_2ea2_7510:
    add     si, word ptr [bp+var_A]
    loop    LAB_2ea2_7510
    mov     byte ptr ss:[0x54ab], 0x0
    mov     word ptr [bp+var_E], si
    jmp     LAB_2ea2_74d9
LAB_2ea2_7520:
    pop     di
    pop     si
    pop     ds
    mov     sp, bp
    pop     bp
    retf
    db 0

; void __cdecl16far file_load_shape2d_palmap_apply(void * memchunk_, uchar * palmap_)
file_load_shape2d_palmap_apply_asm_ proc far
    shapecounter = word ptr   -4
    var_shapecount = word ptr   -2
    memchunk_  = dword ptr   6
    palmap_    = word ptr   10

    push    bp
    mov     bp, sp
    sub     sp, 0x4
    push    di
    push    si
    mov     es, word ptr [bp+memchunk_+2]
    mov     di, word ptr [bp+memchunk_]
    mov     si, word ptr [bp+palmap_]
    mov     cx, word ptr es:[di+0x4]
    mov     word ptr [bp+var_shapecount], cx
    xor     ax, ax
    mov     word ptr [bp+shapecounter], ax
LAB_2ea2_7545:
    mov     ax, word ptr [bp+shapecounter]
    cmp     ax, word ptr [bp+var_shapecount]
    jl      LAB_2ea2_7553
    pop     si
    pop     di
    mov     sp, bp
    pop     bp
    retf
LAB_2ea2_7553:
    push    ax
    push    word ptr [bp+memchunk_+2]
    push    word ptr [bp+memchunk_]
    call    far ptr file_get_shape2d
    add     sp, 0x6
    mov     es, dx
    mov     di, ax
    mov     ax, word ptr es:[di]
    mul     word ptr es:[di+0x2]
    mov     cx, ax
    add     di, 0x10
    xor     bx, bx
LAB_2ea2_7574:
    mov     bl, byte ptr es:[di]
    mov     al, byte ptr [bx+si]
    stosb
    loop    LAB_2ea2_7574
    inc     word ptr [bp+shapecounter]
    jmp     LAB_2ea2_7545
file_load_shape2d_palmap_apply_asm_ endp
    db 0

; void __cdecl16far file_load_shape2d_expand(void * memchunk_, void * mempages)
file_load_shape2d_expand_asm_ proc far
    var_dstshapeoff = word ptr  -16
    var_length = word ptr  -14
    var_srcshapeoff = word ptr  -12
    var_srcshapeseg = word ptr  -10
    var_srcdataoff = word ptr   -8
    var_offsets = word ptr   -6
    var_shapecounter = word ptr   -4
    var_shapecount = word ptr   -2
    memchunk_  = dword ptr   6
    mempages   = dword ptr  10

    push    bp
    mov     bp, sp
    sub     sp, 0x10
    push    di
    push    si
    push    ds
    mov     ds, word ptr [bp+memchunk_+2]
    mov     si, word ptr [bp+memchunk_]
    mov     es, word ptr [bp+mempages+2]
    mov     di, word ptr [bp+mempages]
    mov     cx, word ptr [si+0x4]
    mov     word ptr [bp+var_shapecount], cx
    shl     cx, 0x1
    add     cx, 0x1
    add     si, 0x4
    add     di, 0x4
    rep movsw
    xor     ax, ax
    mov     word ptr [bp+var_shapecounter], ax
    mov     word ptr [bp+var_offsets], di
    mov     word ptr es:[di], ax
    mov     word ptr es:[di+0x2], ax
LAB_2ea2_75b9:
    mov     ax, word ptr [bp+var_shapecounter]
    cmp     ax, word ptr [bp+var_shapecount]
    jl      LAB_2ea2_75c8
    pop     ds
    pop     si
    pop     di
    mov     sp, bp
    pop     bp
    retf
LAB_2ea2_75c8:
    push    ax
    push    word ptr [bp+memchunk_+2]
    push    word ptr [bp+memchunk_]
    mov     ax, ss
    mov     ds, ax
    call    far ptr file_get_shape2d
    add     sp, 0x6
    mov     ds, dx
    mov     si, ax
    mov     word ptr [bp+var_srcshapeseg], dx
    mov     word ptr [bp+var_srcshapeoff], ax
    mov     es, word ptr [bp+mempages+2]
    mov     di, word ptr [bp+var_offsets]
    mov     bx, word ptr es:[di]
    mov     cx, word ptr es:[di+0x2]
    add     di, 0x4
    mov     word ptr [bp+var_offsets], di
    mov     ax, word ptr [si]
    mul     word ptr [si+0x2]
    mov     word ptr [bp+var_length], ax
    shl     ax, 0x1
    shl     ax, 0x1
    shl     ax, 0x1
    add     ax, 0x10
    add     ax, bx
    adc     dx, cx
    mov     bx, word ptr [bp+var_shapecounter]
    inc     bx
    cmp     bx, word ptr [bp+var_shapecount]
    jge     LAB_2ea2_7620
    mov     word ptr es:[di], ax
    mov     word ptr es:[di+0x2], dx
    jmp     LAB_2ea2_763b
    db 0x90
LAB_2ea2_7620:
    mov     bx, word ptr [bp+var_shapecount]
    shl     bx, 0x1
    shl     bx, 0x1
    shl     bx, 0x1
    add     bx, 0x6
    add     ax, bx
    adc     dx, 0x0
    mov     di, word ptr [bp+mempages]
    mov     word ptr es:[di], ax
    mov     word ptr es:[di+0x2], dx
LAB_2ea2_763b:
    push    word ptr [bp+var_shapecounter]
    push    word ptr [bp+mempages+2]
    push    word ptr [bp+mempages]
    mov     ax, ss
    mov     ds, ax
    call    far ptr file_get_shape2d
    add     sp, 0x6
    mov     es, dx
    mov     di, ax
    mov     word ptr [bp+var_dstshapeoff], ax
    mov     ds, word ptr [bp+var_srcshapeseg]
    mov     cx, 0x6
    rep movsw
    mov     si, word ptr [bp+var_srcshapeoff]
    mov     di, word ptr [bp+var_dstshapeoff]
    mov     ax, word ptr [si]
    shl     ax, 0x1
    shl     ax, 0x1
    shl     ax, 0x1
    mov     word ptr es:[di], ax
    mov     al, byte ptr [si+0xd]
    shr     al, 0x1
    shr     al, 0x1
    shr     al, 0x1
    shr     al, 0x1
    mov     ah, al
    add     di, 0x10
    mov     cx, word ptr [bp+var_length]
    cmp     cx, 0x0
    jle     LAB_2ea2_76cf
    cmp     cx, 0x1f40
    jg      LAB_2ea2_76cf
    shl     cx, 0x1
    shl     cx, 0x1
    rep stosw
    add     si, 0x10
    mov     word ptr [bp+var_srcdataoff], si
    xor     bx, bx
LAB_2ea2_769c:
    mov     si, word ptr [bp+var_srcshapeoff]
    mov     ah, byte ptr [bx+si+0xc]
    and     ah, 0xf
    jz      LAB_2ea2_76cf
    mov     di, word ptr [bp+var_dstshapeoff]
    add     di, 0x10
    mov     si, word ptr [bp+var_srcdataoff]
    mov     dx, word ptr [bp+var_length]
LAB_2ea2_76b3:
    lodsb
    mov     cx, 0x8
LAB_2ea2_76b7:
    shl     al, 0x1
    jnc     LAB_2ea2_76be
    or      byte ptr es:[di], ah
LAB_2ea2_76be:
    inc     di
    loop    LAB_2ea2_76b7
    dec     dx
    jg      LAB_2ea2_76b3
    mov     word ptr [bp+var_srcdataoff], si
    shl     ah, 0x1
    inc     bx
    cmp     bx, 0x4
    jl      LAB_2ea2_769c
LAB_2ea2_76cf:
    inc     word ptr [bp+var_shapecounter]
    jmp     near ptr LAB_2ea2_75b9
file_load_shape2d_expand_asm_ endp
    db 0

; void __cdecl16far file_unflip_shape2d_pes(void * memchunk_, void * mempages)
file_unflip_shape2d_pes_asm_ proc far
    var_val    = byte ptr  -20
    var_iterations = byte ptr  -18
    var_dataptr = word ptr  -16
    var_length = word ptr  -14
    var_height = word ptr  -12
    var_width  = word ptr  -10
    var_shapeseg = word ptr   -8
    var_shapeofs = word ptr   -6
    var_shapecounter = word ptr   -4
    var_shapecount = word ptr   -2
    memchunk_  = dword ptr   6
    mempages   = dword ptr  10

    push    bp
    mov     bp, sp
    sub     sp, 0x14
    push    ds
    push    si
    push    di
    mov     ax, word ptr [bp+memchunk_+2]
    mov     ds, ax
    mov     ax, word ptr [bp+memchunk_]
    mov     si, ax
    mov     bx, word ptr [si+0x4]
    mov     word ptr [bp+var_shapecount], bx
    mov     word ptr [bp+var_shapecounter], 0x0
LAB_2ea2_76f4:
    push    word ptr [bp+var_shapecounter]
    push    word ptr [bp+memchunk_+2]
    push    word ptr [bp+memchunk_]
; <REPLACE>
    mov     ax, seg dseg
; </REPLACE>
;    mov     ax, 0x3b77
    mov     ds, ax
    call    far ptr file_get_shape2d
    add     sp, 0x6
    mov     word ptr [bp+var_shapeofs], ax
    mov     word ptr [bp+var_shapeseg], dx
    mov     si, ax
    mov     ds, dx
    mov     al, byte ptr [si+0xf]
    and     al, 0xf0
    jnz     LAB_2ea2_772e
    mov     bl, byte ptr [si+0xe]
    shr     bl, 0x1
    shr     bl, 0x1
    shr     bl, 0x1
    shr     bl, 0x1
    and     bl, 0xf
    mov     byte ptr [bp+var_val], bl
    jnz     LAB_2ea2_773d
LAB_2ea2_772e:
    inc     word ptr [bp+var_shapecounter]
    dec     word ptr [bp+var_shapecount]
    jg      LAB_2ea2_76f4
    pop     di
    pop     si
    pop     ds
    mov     sp, bp
    pop     bp
    retf
LAB_2ea2_773d:
    mov     ax, word ptr [si]
    mov     word ptr [bp+var_width], ax
    mov     dx, word ptr [si+0x2]
    mov     word ptr [bp+var_height], dx
    mul     dx
    mov     word ptr [bp+var_length], ax
    add     si, 0x10
    mov     word ptr [bp+var_dataptr], si
    mov     byte ptr [bp+var_iterations], 0x4
LAB_2ea2_7757:
    shr     byte ptr [bp+var_val], 0x1
    jnc     LAB_2ea2_778f
    mov     es, word ptr [bp+mempages+2]
    mov     di, word ptr [bp+mempages]
    mov     ds, word ptr [bp+var_shapeseg]
    xor     dx, dx
    mov     bx, word ptr [bp+var_height]
LAB_2ea2_776a:
    mov     si, word ptr [bp+var_dataptr]
    add     si, dx
    mov     cx, word ptr [bp+var_width]
LAB_2ea2_7772:
    mov     al, byte ptr [si]
    stosb
    add     si, bx
    loop    LAB_2ea2_7772
    inc     dx
    cmp     dx, bx
    jnz     LAB_2ea2_776a
    mov     es, word ptr [bp+var_shapeseg]
    mov     di, word ptr [bp+var_dataptr]
    mov     ds, word ptr [bp+mempages+2]
    mov     si, word ptr [bp+mempages]
    mov     cx, word ptr [bp+var_length]
    rep movsb
LAB_2ea2_778f:
    mov     ax, word ptr [bp+var_length]
    add     word ptr [bp+var_dataptr], ax
    dec     byte ptr [bp+var_iterations]
    jnz     LAB_2ea2_7757
    jmp     LAB_2ea2_772e
file_unflip_shape2d_pes_asm_ endp

seg012 ends
end
