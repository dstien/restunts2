; Generated by restunts-export.py (Ghidra)
.8086
.model medium

include custom.inc
include structs.inc
include seg000.inc
include seg001.inc
include seg002.inc
include seg003.inc
include seg004.inc
include seg005.inc
include seg006.inc
include seg007.inc
include seg008.inc
include seg009.inc
include seg010.inc
include seg011.inc
include seg012.inc
include seg013.inc
include seg014.inc
include seg015.inc
include seg016.inc
include seg018.inc
include seg019.inc
include seg020.inc
include seg021.inc
include seg022.inc
include seg023.inc
include seg024.inc
include seg025.inc
include seg026.inc
include seg027.inc
include seg028.inc
include seg029.inc
include seg030.inc
include seg031.inc
include seg032.inc
include seg033.inc
include seg034.inc
include seg035.inc
include seg036.inc
include seg037.inc
include seg038.inc
include seg039.inc
include dseg.inc
include dsegu.inc

seg017 segment byte public use16 'STUNTSC'
    assume cs:seg017, es:nothing, ss:nothing, ds:dseg

    public mouse_set_pixratio
    public mouse_init
    public mouse_set_minmax
    public mouse_set_position
    public mouse_get_state
    public nopsub_36A9A
    public nopsub_36ACA

; void __cdecl16far mouse_set_pixratio(word horizontal, word vertical)
mouse_set_pixratio proc far
    horizontal = word ptr    6
    vertical   = word ptr    8

    push    bp
    mov     bp, sp
    mov     word ptr [regs_x86], 0xf
    mov     ax, word ptr [bp+horizontal]
    mov     word ptr [regs_x86+4], ax
    mov     ax, word ptr [bp+vertical]
    mov     word ptr [regs_x86+6], ax
    mov     ax, offset regs_x86
    push    ax
    push    ax                                 ; union REGS *
    mov     ax, 0x33                           ; int 33,f = set mouse mickey pixel ratio
    push    ax                                 ; int
    call    far ptr _int86
    add     sp, 0x6
    pop     bp
    retf
mouse_set_pixratio endp

; word __cdecl16far mouse_init(int width_, int height_)
mouse_init proc far
    var_2      = word ptr   -2
    width_     = word ptr    6
    height_    = word ptr    8

    push    bp
    mov     bp, sp
    sub     sp, 0x2
    mov     word ptr [regs_x86], 0xc201
    mov     ax, offset regs_x86
    push    ax
    push    ax                                 ; union REGS *
    mov     ax, 0x15                           ; int 15,c201 = enable ps2 pointing device
    push    ax                                 ; int
    call    far ptr _int86
    add     sp, 0x6
    mov     word ptr [regs_x86], 0x0
    mov     ax, 0x921a
    push    ax
    push    ax                                 ; union REGS *
    mov     ax, 0x33                           ; int 33,0 = mouse reset/get mouse installed
    push    ax                                 ; int
    call    far ptr _int86
    add     sp, 0x6
    mov     ax, word ptr [regs_x86]
    mov     word ptr [bp+var_2], ax
    mov     ax, word ptr [regs_x86+2]
    mov     word ptr [word_45D7C], ax
    cmp     word ptr [bp+var_2], 0x0
    jz      LAB_368a_00b5
    cmp     word ptr [bp+width_], 0x140
    jnz     LAB_368a_0088
    mov     word ptr [mousehorscale], 0x1
    jmp     LAB_368a_008e
    db 0x90
LAB_368a_0088:
    mov     word ptr [mousehorscale], 0x0
LAB_368a_008e:
    mov     ax, word ptr [bp+height_]
    dec     ax
    push    ax
    mov     ax, word ptr [bp+width_]
    dec     ax
    push    ax
    sub     ax, ax
    push    ax
    push    ax
    push    cs
    call    near ptr mouse_set_minmax
    add     sp, 0x8
    mov     ax, 0x10
    push    ax
    push    ax
    push    cs
    call    near ptr mouse_set_pixratio
    add     sp, 0x4
    mov     word ptr [word_40318], 0xffff
LAB_368a_00b5:
    mov     ax, word ptr [bp+var_2]
    mov     sp, bp
    pop     bp
    retf
mouse_init endp

; void __cdecl16far mouse_set_minmax(int x1_, int y1_, int x2_, int y2_)
mouse_set_minmax proc far
    x1_        = word ptr    6
    y1_        = word ptr    8
    x2_        = word ptr   10
    y2_        = word ptr   12

    push    bp
    mov     bp, sp
    mov     word ptr [regs_x86], 0x7
    mov     ax, word ptr [bp+x1_]
    mov     cl, byte ptr [mousehorscale]
    shl     ax, cl
    mov     word ptr [regs_x86+4], ax
    mov     ax, word ptr [bp+x2_]
    shl     ax, cl
    mov     word ptr [regs_x86+6], ax
    mov     ax, offset regs_x86
    push    ax
    push    ax                                 ; union REGS *
    mov     ax, 0x33                           ; int 33,0 = mouse reset/get mouse installed
    push    ax                                 ; int
    call    far ptr _int86
    add     sp, 0x6
    mov     word ptr [regs_x86], 0x8
    mov     ax, word ptr [bp+y1_]
    mov     word ptr [regs_x86+4], ax
    mov     ax, word ptr [bp+y2_]
    mov     word ptr [regs_x86+6], ax
    mov     ax, offset regs_x86
    push    ax
    push    ax                                 ; union REGS *
    mov     ax, 0x33                           ; int 33, 8 = set mouse vert min/max
    push    ax                                 ; int
    call    far ptr _int86
    add     sp, 0x6
    pop     bp
    retf
mouse_set_minmax endp
    db 0x90
    mov     word ptr [regs_x86], 0x3
    mov     ax, offset regs_x86
    push    ax
    push    ax
    mov     ax, 0x33                           ; int 33,3 = get mouse pos/but status
    push    ax
    call    far ptr _int86
    add     sp, 0x6
    mov     ax, word ptr [regs_x86+2]
    mov     word ptr [word_45D7C], ax
    mov     ax, word ptr [regs_x86+4]
    mov     cl, byte ptr [mousehorscale]
    shr     ax, cl
    mov     word ptr [word_44D3C], ax
    mov     ax, word ptr [regs_x86+6]
    mov     word ptr [word_44D62], ax
    mov     ax, word ptr [word_45D7C]
    retf
    db 0x90
    inc     word ptr [showmouse]
    cmp     word ptr [showmouse], 0x1
    jl      LAB_368a_016c
    mov     word ptr [showmouse], 0x1
    mov     word ptr [regs_x86], 0x1
    mov     ax, offset regs_x86
    push    ax
    push    ax
    mov     ax, 0x33                           ; int 33,1 = show mouse cursor
    push    ax
    call    far ptr _int86
    add     sp, 0x6
LAB_368a_016c:
    retf
    db 0x90
    dec     word ptr [showmouse]
    jnz     LAB_368a_018b
    mov     word ptr [regs_x86], 0x2
    mov     ax, offset regs_x86
    push    ax
    push    ax
    mov     ax, 0x33                           ; int 33,2 = hide mouse cursor
    push    ax
    call    far ptr _int86
    add     sp, 0x6
LAB_368a_018b:
    retf

; void __cdecl16far mouse_set_position(int x_, int y_)
mouse_set_position proc far
    x_         = word ptr    6
    y_         = word ptr    8

    push    bp
    mov     bp, sp
    mov     word ptr [regs_x86], 0x4
    mov     ax, word ptr [bp+x_]
    mov     word ptr [word_44D3C], ax
    mov     cl, byte ptr [mousehorscale]
    shl     ax, cl
    mov     word ptr [regs_x86+4], ax
    mov     ax, word ptr [bp+y_]
    mov     word ptr [regs_x86+6], ax
    mov     word ptr [word_44D62], ax
    mov     ax, 0x921a
    push    ax
    push    ax                                 ; union REGS *
    mov     ax, 0x33                           ; int 33, 4 = set mouse cursor
    push    ax                                 ; int
    call    far ptr _int86
    add     sp, 0x6
    pop     bp
    retf
mouse_set_position endp

; void __cdecl16far mouse_get_state(int * buttons, int * pos_x, int * pos_y)
mouse_get_state proc far
    buttons    = word ptr    6
    pos_x      = word ptr    8
    pos_y      = word ptr   10

    push    bp
    mov     bp, sp
    mov     word ptr [regs_x86], 0x3
    mov     ax, 0x921a
    push    ax
    push    ax                                 ; union REGS *
    mov     ax, 0x33                           ; int 33, 3 = get mouse position and button
    push    ax                                 ; int
    call    far ptr _int86
    add     sp, 0x6
    mov     bx, word ptr [bp+buttons]
    mov     ax, word ptr [regs_x86+2]
    mov     word ptr [bx], ax
    mov     bx, word ptr [bp+pos_x]
    mov     ax, word ptr [regs_x86+4]
    mov     cl, byte ptr [mousehorscale]
    shr     ax, cl
    mov     word ptr [bx], ax
    mov     bx, word ptr [bp+pos_y]
    mov     ax, word ptr [regs_x86+6]
    mov     word ptr [bx], ax
    pop     bp
    retf
mouse_get_state endp

; undefined __cdecl16far nopsub_36A9A(int param_1, int param_2)
nopsub_36A9A proc far
    param_1    = word ptr    6
    param_2    = word ptr    8

    push    bp
    mov     bp, sp
    mov     word ptr [regs_x86], 0x7
    mov     ax, word ptr [bp+param_1]
    mov     cl, byte ptr [mousehorscale]
    sar     ax, cl
    mov     word ptr [regs_x86+4], ax
    mov     ax, word ptr [bp+param_2]
    sar     ax, cl
    mov     word ptr [regs_x86+6], ax
    mov     ax, 0x921a
    push    ax
    push    ax                                 ; union REGS *
    mov     ax, 0x33
    push    ax                                 ; int
    call    far ptr _int86
    add     sp, 0x6
    pop     bp
    retf
nopsub_36A9A endp

; undefined __cdecl16far nopsub_36ACA(word param_1, word param_2)
nopsub_36ACA proc far
    param_1    = word ptr    6
    param_2    = word ptr    8

    push    bp
    mov     bp, sp
    mov     word ptr [regs_x86], 0x8
    mov     ax, word ptr [bp+param_1]
    mov     word ptr [regs_x86+4], ax
    mov     ax, word ptr [bp+param_2]
    mov     word ptr [regs_x86+6], ax
    mov     ax, 0x921a
    push    ax
    push    ax                                 ; union REGS *
    mov     ax, 0x33
    push    ax                                 ; int
    call    far ptr _int86
    add     sp, 0x6
    pop     bp
    retf
nopsub_36ACA endp

seg017 ends
end
