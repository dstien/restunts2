; Generated by restunts-export.py (Ghidra)
.8086
.model medium

include custom.inc
include structs.inc
include seg000.inc
include seg001.inc
include seg002.inc
include seg003.inc
include seg004.inc
include seg005.inc
include seg006.inc
include seg007.inc
include seg008.inc
include seg009.inc
include seg011.inc
include seg012.inc
include seg013.inc
include seg014.inc
include seg015.inc
include seg016.inc
include seg017.inc
include seg018.inc
include seg019.inc
include seg020.inc
include seg021.inc
include seg022.inc
include seg023.inc
include seg024.inc
include seg025.inc
include seg026.inc
include seg027.inc
include seg028.inc
include seg029.inc
include seg030.inc
include seg031.inc
include seg032.inc
include seg033.inc
include seg034.inc
include seg035.inc
include seg036.inc
include seg037.inc
include seg038.inc
include seg039.inc
include dseg.inc
include dsegu.inc

seg010 segment byte public use16 'STUNTSC'
    assume cs:seg010, es:nothing, ss:nothing, ds:dseg

    public start
    public libsub_quit_to_dos_alt
    public libsub_quit_to_dos
    public sub_2CE4A
    public sub_2CE77
    public __FF_MSGBANNER
    public __fptrap
    public __chkstk
    public __nullcheck
    public __setargv
    public __setenvp
    public __NMSG_TEXT
    public __NMSG_WRITE
    public __myalloc
    public __dosretax
    public __maperror
    public sub_2D1BC
    public _flushall
    public _printf
    public __flsbuf
    public __getbuf
    public __stbuf
    public __ftbuf
    public _fflush
    public __output
    public off_2D896
    public iprint
    public sprint
    public fprint
    public _outc
    public putpad
    public putbuf
    public _out
    public putsign
    public putprefix
    public getnum
    public flagchar
    public _lseek
    public _write
    public FUN_2cc5_1380
    public FUN_2cc5_13c0
    public FUN_2cc5_13ce
    public _stackavail
    public unknown_libname_1
    public unknown_libname_2
    public __amalloc
    public __amexpand
    public __amlink
    public __amallocbrk
    public _brkctl
    public FUN_2cc5_1640
    public _strcat
    public _strcpy
    public _strcmp
    public _strlen
    public _itoa
    public _ultoa
    public _abort
    public _isatty
    public _int86
    public _sprintf
    public _stricmp
    public __cltoasub
    public _abs
    public _raise
    public _srand
    public _rand
    public unk_sigdata
    public _signal
    public __sigentry
    public _strrchr
    public __aFldiv
    public __aFlmul
    public __aFlshr
    public unknown_libname_3
    public __aFFblmul
    public unknown_libname_4
    public unknown_libname_5
    public __aFuldiv

    db 16 dup (0x00)

; undefined __stdcall16near start(void)
start proc near
    mov     ah, 0x30
    int     0x21                               ; DOS - GET DOS VERSION
                                               ; Return: AL = major version number (00h for DOS 1.x)
    cmp     al, 0x2
    jnc     LAB_2cc5_001c
    int     0x20                               ; DOS - PROGRAM TERMINATION
                                               ; returns to DOS--identical to INT 21/AH=00h
LAB_2cc5_001c:
; <REPLACE>
    mov     di, seg dseg
; </REPLACE>
;    mov     di, 0x3b77
    mov     si, word ptr [word_3B772]          ; pspseg:2 = Memory size in paragraphs
                                               ;            top of memory in segment (paragraph) form
    sub     si, di
    cmp     si, 0x1000
    jc      LAB_2cc5_002e
    mov     si, 0x1000                         ; si = 1000h or memory size if less than 1000h
LAB_2cc5_002e:
    cli
    mov     ss, di                             ; ss = dseg
    add     sp, 0xad1e                         ; sp = end of stack in data segment
    sti
    jnc     _no_stack_overflow                 ; check for overflow and abort if there was more than 64k data+stack
    push    ss
    pop     ds
    call    far ptr __FF_MSGBANNER
    xor     ax, ax
    push    ax
    call    far ptr __NMSG_WRITE
    mov     ax, 0x4cff
    int     0x21                               ; DOS - 2+ - QUIT WITH EXIT CODE (EXIT)
                                               ; AL = exit code
_no_stack_overflow:
    and     sp, 0xfffe
    mov     word ptr ss:[crtsp1], sp
    mov     word ptr ss:[crtsp2], sp
    mov     ax, si
    mov     cl, 0x4
    shl     ax, cl
    dec     ax
    mov     word ptr ss:[word_3ED74], ax       ; ax = (01000h << 4) - 1 = 0ffffh
    add     si, di
    mov     word ptr [word_3B772], si          ; set memory size in psp?, si = 01000h + dseg
                                               ; si = 01000h + dseg
    mov     bx, es                             ; es = pspseg on startup
    sub     bx, si
    neg     bx                                 ; bx = -(pspseg - si) = -(pspseg - (1000h + dseg))
    mov     ah, 0x4a
    int     0x21                               ; DOS - 2+ - ADJUST MEMORY BLOCK SIZE (SETBLOCK)
                                               ; ES = segment address of block to change
                                               ; BX = new size in paragraphs
    mov     word ptr ss:[crtpspseg], ds
    push    ss
    pop     es
    cld
    mov     di, 0x55ca                         ; offset in dseg where uninitialized data starts
    mov     cx, 0xad20                         ; original size/end of dseg
    sub     cx, di
    xor     ax, ax
    rep stosb                                  ; initialize uninitialized data to 0
    push    ss
    pop     ds
    call    far ptr SUB_2cc5_00d8
    push    ss
    pop     ds
    call    far ptr __setenvp
    call    far ptr __setargv
    xor     bp, bp
    push    word ptr [word_3EE0C]
    push    word ptr [argv]                    ; p_argv
    push    word ptr [argc]                    ; p_argc
    call    far ptr stuntsmain
    push    ax
    call    far ptr libsub_quit_to_dos_alt
__cintDIV:
; <REPLACE>
    mov     ax, seg dseg
; </REPLACE>
;    mov     ax, 0x3b77
    mov     ds, ax
    mov     ax, 0x3
    mov     word ptr ss:[crtquitfunction], offset libsub_quit_to_dos_alt
__amsg_exit:
    push    ax
    call    far ptr __FF_MSGBANNER
    call    far ptr __NMSG_WRITE
    mov     ax, 0xff
    push    ax
    push    cs
    call    word ptr [crtquitfunction]
    db 0
start endp
SUB_2cc5_00d8:
    mov     ah, 0x30
    int     0x21                               ; DOS - GET DOS VERSION
                                               ; Return: AL = major version number (00h for DOS 1.x)
    mov     word ptr [crtdosversion], ax
    mov     ax, 0x3500
    int     0x21                               ; DOS - 2+ - GET INTERRUPT VECTOR
                                               ; AL = interrupt number
                                               ; Return: ES:BX = value of interrupt vector
    mov     word ptr [crtintrvec0], bx
    mov     word ptr [crtintrvec0+2], es
    push    cs
    pop     ds
    mov     ax, 0x2500
    mov     dx, offset __cintDIV
    int     0x21                               ; DOS - SET INTERRUPT VECTOR
                                               ; AL = interrupt number
                                               ; DS:DX = new vector to be used for specified interrupt
    push    ss
    pop     ds
; <REPLACE>
    mov     cx, word ptr [dword_40C1E+2]
; </REPLACE>
;    mov     cx, word ptr [dword_40C1E]
    jcxz    LAB_2cc5_012c
    mov     es, word ptr [crtpspseg]
    mov     si, word ptr es:[0x2c]             ; si = environment segment
    lds     ax, [dword_40C22]
    mov     dx, ds
    xor     bx, bx
    call    dword ptr ss:[dword_40C1E]
    jnc     LAB_2cc5_011b
    push    ss
    pop     ds
    jmp     near ptr __fptrap
LAB_2cc5_011b:
    lds     ax, ss:[dword_40C26]
    mov     dx, ds
    mov     bx, 0x3
    call    dword ptr ss:[dword_40C1E]
    push    ss
    pop     ds
LAB_2cc5_012c:
    mov     es, word ptr [crtpspseg]
    mov     cx, word ptr es:[0x2c]             ; es:2C = environment segment
    jcxz    LAB_2cc5_016d
    mov     es, cx
    xor     di, di
LAB_2cc5_013b:
    cmp     byte ptr es:[di], 0x0
    jz      LAB_2cc5_016d
    mov     cx, 0xc
    mov     si, offset aC_file_info
    repe cmpsb
    jz      LAB_2cc5_0156
    mov     cx, 0x7fff
    xor     ax, ax
    repne scasb
    jnz     LAB_2cc5_016d
    jmp     LAB_2cc5_013b
LAB_2cc5_0156:
    push    es
    push    ds
    pop     es
    pop     ds
    mov     si, di
    mov     di, offset crtfilehandles
    lodsb
    cbw
    xchg    ax, cx
LAB_2cc5_0162:
    lodsb
    inc     al
    jz      LAB_2cc5_0168
    dec     ax
LAB_2cc5_0168:
    stosb
    loop    LAB_2cc5_0162
    push    ss
    pop     ds
LAB_2cc5_016d:
    mov     bx, 0x4
LAB_2cc5_0170:
    and     byte ptr [bx+crtfilehandles], 0xbf
    mov     ax, 0x4400
    int     0x21                               ; DOS - 2+ - IOCTL - GET DEVICE INFORMATION
                                               ; BX = file or device handle
    jc      LAB_2cc5_0186
    test    dl, 0x80
    jz      LAB_2cc5_0186
    or      byte ptr [bx+crtfilehandles], 0x40
LAB_2cc5_0186:
    dec     bx
    jns     LAB_2cc5_0170
    mov     si, offset _flushallptr
    mov     di, offset _flushallptr
    call    near ptr sub_2CE77
    mov     si, offset _flushallptr
    mov     di, offset _flushallptr
    call    near ptr sub_2CE77
    retf
; exit(int)

; undefined __stdcall16near libsub_quit_to_dos_alt(undefined2 param_1, int param_2)
libsub_quit_to_dos_alt proc near
    param_1    = word ptr    4
    param_2    = word ptr    6

    push    bp
    mov     bp, sp
    mov     si, offset unk_42A24
    mov     di, offset unk_42A24
    call    near ptr sub_2CE77
    mov     si, offset _flushallptr
    mov     di, offset aNmsg
    call    near ptr sub_2CE77
    jmp     LAB_2cc5_01b6
libsub_quit_to_dos_alt endp

; undefined __stdcall16near libsub_quit_to_dos(undefined2 param_1, int param_2)
libsub_quit_to_dos proc near
    param_1    = word ptr    4
    param_2    = word ptr    6

    push    bp
    mov     bp, sp
LAB_2cc5_01b6:
    mov     si, offset aNmsg
    mov     di, offset aNmsg
    call    near ptr sub_2CE77
    mov     si, offset aNmsg
    mov     di, offset aNmsg
    call    near ptr sub_2CE77
    call    far ptr __nullcheck
    or      ax, ax
    jz      LAB_2cc5_01dc
    cmp     word ptr [bp+param_2], 0x0
    jnz     LAB_2cc5_01dc
    mov     word ptr [bp+param_2], 0xff
LAB_2cc5_01dc:
    mov     cx, 0xf
    mov     bx, 0x5
LAB_2cc5_01e2:
    test    byte ptr [bx+crtfilehandles], 0x1
    jz      LAB_2cc5_01ed
    mov     ah, 0x3e
    int     0x21                               ; DOS - 2+ - CLOSE A FILE WITH HANDLE
                                               ; BX = file handle
LAB_2cc5_01ed:
    inc     bx
    loop    LAB_2cc5_01e2
    call    near ptr sub_2CE4A
    mov     ax, word ptr [bp+param_2]
    mov     ah, 0x4c
    int     0x21                               ; DOS - 2+ - QUIT WITH EXIT CODE (EXIT)
                                               ; AL = exit code
libsub_quit_to_dos endp

; undefined __cdecl16near sub_2CE4A(undefined2 param_1)
sub_2CE4A proc near
    param_1    = word ptr    4

; <REPLACE>
    mov     cx, word ptr [dword_40C1E+2]
; </REPLACE>
;    mov     cx, word ptr [dword_40C1E]
    jcxz    LAB_2cc5_0207
    mov     bx, 0x2
    call    dword ptr [dword_40C1E]
LAB_2cc5_0207:
    push    ds
    lds     dx, [crtintrvec0]
    mov     ax, 0x2500
    int     0x21                               ; DOS - SET INTERRUPT VECTOR
                                               ; AL = interrupt number
                                               ; DS:DX = new vector to be used for specified interrupt
    pop     ds
    cmp     byte ptr [byte_3EE16], 0x0
    jz      LAB_2cc5_0226
    push    ds
    mov     al, byte ptr [byte_3EE17]
    lds     dx, [dword_3EE18]
    mov     ah, 0x25
    int     0x21                               ; DOS - SET INTERRUPT VECTOR
                                               ; AL = interrupt number
                                               ; DS:DX = new vector to be used for specified interrupt
    pop     ds
LAB_2cc5_0226:
    ret
sub_2CE4A endp

; undefined __cdecl16near sub_2CE77(void)
sub_2CE77 proc near
    cmp     si, di
    jnc     LAB_2cc5_0239
    sub     di, 0x4
    mov     ax, word ptr [di]
    or      ax, word ptr [di+0x2]
    jz      sub_2CE77
    call    dword ptr [di]
    jmp     sub_2CE77
LAB_2cc5_0239:
    ret
sub_2CE77 endp

; undefined __cdecl16far __FF_MSGBANNER(void)
__FF_MSGBANNER proc far
    push    bp
    mov     bp, sp
    mov     ax, 0xfc
    push    ax
    call    far ptr __NMSG_WRITE
    cmp     word ptr [word_3EE1E], 0x0
    jz      LAB_2cc5_0251
    call    dword ptr [unk_3EE1C]
LAB_2cc5_0251:
    mov     ax, 0xff
    push    ax
    call    far ptr __NMSG_WRITE
    mov     sp, bp
    pop     bp
    retf
__FF_MSGBANNER endp

; undefined __stdcall16near __fptrap(void)
__fptrap proc near
    mov     ax, 0x2
    jmp     near ptr __amsg_exit
__fptrap endp

; undefined __cdecl16far __chkstk(undefined2 param_1, undefined2 param_2, undefined2 param_3)
__chkstk proc far
    param_1    = word ptr    6
    param_2    = word ptr    8
    param_3    = word ptr   10

    pop     cx
    pop     dx
    mov     bx, sp
    sub     bx, ax
    jc      LAB_2cc5_0277
    cmp     bx, word ptr [word_3EE24]
    jc      LAB_2cc5_0277
    mov     sp, bx
    push    dx
    push    cx
    retf
LAB_2cc5_0277:
    mov     ax, word ptr [dword_3EE20]
    inc     ax
    jnz     LAB_2cc5_0282
    xor     ax, ax
    jmp     near ptr __amsg_exit
LAB_2cc5_0282:
    push    dx
    push    cx
    jmp     [dword_3EE20]
__chkstk endp

; uint __cdecl16far __nullcheck(void)
__nullcheck proc far
    push    si
    xor     si, si
    mov     cx, 0x42
    xor     ah, ah
    cld
LAB_2cc5_0291:
    lodsb
    xor     ah, al
    loop    LAB_2cc5_0291
    xor     ah, 0x55
    jz      LAB_2cc5_02ac
    call    far ptr __FF_MSGBANNER
    mov     ax, 0x1
    push    ax
    call    far ptr __NMSG_WRITE
    mov     ax, 0x1
LAB_2cc5_02ac:
    pop     si
    retf
__nullcheck endp

; undefined __stdcall16near __setargv(undefined2 param_1)
__setargv proc near
    param_1    = word ptr    4

    pop     word ptr [dword_3EE26]
    pop     word ptr [dword_3EE26+2]
    mov     dx, 0x2
    cmp     byte ptr [crtdosversion], dl
    jz      LAB_2cc5_02e8
    mov     es, word ptr [crtpspseg]
    mov     es, word ptr es:[0x2c]             ; es:2c = environemtn segment
    mov     word ptr [crtenvptr+2], es
    xor     ax, ax
    cwd
    mov     cx, 0x8000
    xor     di, di
LAB_2cc5_02d4:
    repne scasb
    scasb
    jnz     LAB_2cc5_02d4
    inc     di
    inc     di
    mov     word ptr [crtenvptr], di
    mov     cx, 0xffff
    repne scasb
    not     cx
    mov     dx, cx
LAB_2cc5_02e8:
    mov     di, 0x1
    mov     si, 0x81
    mov     ds, word ptr [crtpspseg]
LAB_2cc5_02f2:
    lodsb
    cmp     al, 0x20
    jz      LAB_2cc5_02f2
    cmp     al, 0x9
    jz      LAB_2cc5_02f2
    cmp     al, 0xd
    jz      LAB_2cc5_036e
    or      al, al
    jz      LAB_2cc5_036e
    inc     di
LAB_2cc5_0304:
    dec     si
LAB_2cc5_0305:
    lodsb
    cmp     al, 0x20
    jz      LAB_2cc5_02f2
    cmp     al, 0x9
    jz      LAB_2cc5_02f2
    cmp     al, 0xd
    jz      LAB_2cc5_036e
    or      al, al
    jz      LAB_2cc5_036e
    cmp     al, 0x22
    jz      LAB_2cc5_033e
    cmp     al, 0x5c
    jz      LAB_2cc5_0321
    inc     dx
    jmp     LAB_2cc5_0305
LAB_2cc5_0321:
    xor     cx, cx
LAB_2cc5_0323:
    inc     cx
    lodsb
    cmp     al, 0x5c
    jz      LAB_2cc5_0323
    cmp     al, 0x22
    jz      LAB_2cc5_0331
    add     dx, cx
    jmp     LAB_2cc5_0304
LAB_2cc5_0331:
    mov     ax, cx
    shr     cx, 0x1
    adc     dx, cx
    test    al, 0x1
    jnz     LAB_2cc5_0305
    jmp     LAB_2cc5_033e
LAB_2cc5_033d:
    dec     si
LAB_2cc5_033e:
    lodsb
    cmp     al, 0xd
    jz      LAB_2cc5_036e
    or      al, al
    jz      LAB_2cc5_036e
    cmp     al, 0x22
    jz      LAB_2cc5_0305
    cmp     al, 0x5c
    jz      LAB_2cc5_0352
    inc     dx
    jmp     LAB_2cc5_033e
LAB_2cc5_0352:
    xor     cx, cx
LAB_2cc5_0354:
    inc     cx
    lodsb
    cmp     al, 0x5c
    jz      LAB_2cc5_0354
    cmp     al, 0x22
    jz      LAB_2cc5_0362
    add     dx, cx
    jmp     LAB_2cc5_033d
LAB_2cc5_0362:
    mov     ax, cx
    shr     cx, 0x1
    adc     dx, cx
    test    al, 0x1
    jnz     LAB_2cc5_033e
    jmp     LAB_2cc5_0305
LAB_2cc5_036e:
    push    ss
    pop     ds
    mov     word ptr [argc], di
    add     dx, di
    inc     di
    shl     di, 0x1
    add     dx, di
    and     dl, 0xfe
    sub     sp, dx
    mov     ax, sp
    mov     word ptr [argv], ax
    mov     bx, ax
    add     di, bx
    push    ss
    pop     es
    mov     word ptr ss:[bx], di
    inc     bx
    inc     bx
    lds     si, [crtenvptr]
LAB_2cc5_0394:
    lodsb
    stosb
    or      al, al
    jnz     LAB_2cc5_0394
    mov     si, 0x81
    mov     ds, word ptr ss:[crtpspseg]
    jmp     LAB_2cc5_03a7
LAB_2cc5_03a4:
    xor     ax, ax
    stosb
LAB_2cc5_03a7:
    lodsb
    cmp     al, 0x20
    jz      LAB_2cc5_03a7
    cmp     al, 0x9
    jz      LAB_2cc5_03a7
    cmp     al, 0xd
    jnz     LAB_2cc5_03b7
    jmp     near ptr LAB_2cc5_0436
LAB_2cc5_03b7:
    or      al, al
    jnz     LAB_2cc5_03be
    jmp     LAB_2cc5_0436
    db 0x90
LAB_2cc5_03be:
    mov     word ptr ss:[bx], di
    inc     bx
    inc     bx
LAB_2cc5_03c3:
    dec     si
LAB_2cc5_03c4:
    lodsb
    cmp     al, 0x20
    jz      LAB_2cc5_03a4
    cmp     al, 0x9
    jz      LAB_2cc5_03a4
    cmp     al, 0xd
    jz      LAB_2cc5_0433
    or      al, al
    jz      LAB_2cc5_0433
    cmp     al, 0x22
    jz      LAB_2cc5_0400
    cmp     al, 0x5c
    jz      LAB_2cc5_03e0
    stosb
    jmp     LAB_2cc5_03c4
LAB_2cc5_03e0:
    xor     cx, cx
LAB_2cc5_03e2:
    inc     cx
    lodsb
    cmp     al, 0x5c
    jz      LAB_2cc5_03e2
    cmp     al, 0x22
    jz      LAB_2cc5_03f2
    mov     al, 0x5c
    rep stosb
    jmp     LAB_2cc5_03c3
LAB_2cc5_03f2:
    mov     al, 0x5c
    shr     cx, 0x1
    rep stosb
    jnc     LAB_2cc5_0400
    mov     al, 0x22
    stosb
    jmp     LAB_2cc5_03c4
LAB_2cc5_03ff:
    dec     si
LAB_2cc5_0400:
    lodsb
    cmp     al, 0xd
    jz      LAB_2cc5_0433
    or      al, al
    jz      LAB_2cc5_0433
    cmp     al, 0x22
    jz      LAB_2cc5_03c4
    cmp     al, 0x5c
    jz      LAB_2cc5_0414
    stosb
    jmp     LAB_2cc5_0400
LAB_2cc5_0414:
    xor     cx, cx
LAB_2cc5_0416:
    inc     cx
    lodsb
    cmp     al, 0x5c
    jz      LAB_2cc5_0416
    cmp     al, 0x22
    jz      LAB_2cc5_0426
    mov     al, 0x5c
    rep stosb
    jmp     LAB_2cc5_03ff
LAB_2cc5_0426:
    mov     al, 0x5c
    shr     cx, 0x1
    rep stosb
    jnc     LAB_2cc5_03c4
    mov     al, 0x22
    stosb
    jmp     LAB_2cc5_0400
LAB_2cc5_0433:
    xor     ax, ax
    stosb
LAB_2cc5_0436:
    push    ss
    pop     ds
    mov     word ptr [bx], 0x0
    jmp     [dword_3EE26]
__setargv endp

; undefined __cdecl16far __setenvp(undefined1 param_1)
__setenvp proc far
    param_1    = byte ptr   46

    push    bp
    mov     bp, sp
    push    bp
    mov     ds, word ptr [crtpspseg]
    xor     cx, cx
    mov     ax, cx
    mov     bp, cx
    mov     di, cx
    dec     cx                                 ; cx = 0ffffh
    mov     si, word ptr [(aMsRunTimeLibraryCop+36)] ; psp:2c = environment segment
    or      si, si
    jz      LAB_2cc5_0469
    mov     es, si
    cmp     byte ptr es:[0x0], 0x0
    jz      LAB_2cc5_0469                      ; empty environment?
LAB_2cc5_0463:
    repne scasb
    inc     bp                                 ; count x=y strings in environment
    scasb                                      ; two nulls in a row = end of environment
    jnz     LAB_2cc5_0463
LAB_2cc5_0469:
    inc     bp                                 ; bp = number of envirment strings
    xchg    ax, di                             ; set ax to number of bytes in environent, di to 0
    inc     ax
    and     al, 0xfe
    mov     di, bp                             ; di = number of environment strings
    shl     bp, 0x1
    add     ax, bp                             ; ax = ((envsize+1)&FFFE) + numstrings*2
    push    ss
    pop     ds
    push    di
    mov     di, 0x9
    call    near ptr __myalloc
    pop     di
    mov     cx, di                             ; cx = number of environment strings
    mov     di, bp                             ; bp = old crtsp1 (was changed in myalloc)
    add     di, ax                             ; ax = old bp = numstrings*2
    mov     word ptr [word_3EE0C], bp
    push    ds
    pop     es
    mov     ds, si
    xor     si, si
    dec     cx
    jcxz    LAB_2cc5_04a4
LAB_2cc5_0491:
    cmp     word ptr [si], 0x433b              ; if the env string does not start with "C;" (or ;C) put its ofs at ds:bp
    jz      LAB_2cc5_049c
    mov     word ptr [bp+0x0], di
    inc     bp
    inc     bp
LAB_2cc5_049c:
    lodsb
    stosb
    or      al, al
    jnz     LAB_2cc5_049c
    loop    LAB_2cc5_0491
LAB_2cc5_04a4:
    mov     word ptr [bp+0x0], cx
    push    ss
    pop     ds
    pop     bp
    mov     sp, bp
    pop     bp
    retf
__setenvp endp

; int * __stdcall16far __NMSG_TEXT(int param_1)
__NMSG_TEXT proc far
    param_1    = word ptr    6

    push    bp
    mov     bp, sp
    push    si
    push    di
    push    ds
    pop     es
    mov     dx, word ptr [bp+param_1]
    mov     si, 0x54c6
LAB_2cc5_04bb:
    lodsw
    cmp     ax, dx
    jz      LAB_2cc5_04d0
    inc     ax
    xchg    ax, si
    jz      LAB_2cc5_04d0
    xchg    ax, di
    xor     ax, ax
    mov     cx, 0xffff
    repne scasb
    mov     si, di
    jmp     LAB_2cc5_04bb
LAB_2cc5_04d0:
    xchg    ax, si
    pop     di
    pop     si
    mov     sp, bp
    pop     bp
    retf    0x2
__NMSG_TEXT endp

; undefined __stdcall16far __NMSG_WRITE(int param_1)
__NMSG_WRITE proc far
    param_1    = word ptr    6

    push    bp
    mov     bp, sp
    push    di
    push    word ptr [bp+param_1]
    call    far ptr __NMSG_TEXT
    or      ax, ax
    jz      LAB_2cc5_04fd
    xchg    ax, dx
    mov     di, dx
    xor     ax, ax
    mov     cx, 0xffff
    repne scasb
    not     cx
    dec     cx
    mov     bx, 0x2
    mov     ah, 0x40
    int     0x21                               ; DOS - 2+ - WRITE TO FILE WITH HANDLE
                                               ; BX = file handle, CX = number of bytes to write, DS:DX -> buffer
LAB_2cc5_04fd:
    pop     di
    mov     sp, bp
    pop     bp
    retf    0x2
__NMSG_WRITE endp

; undefined __cdecl16near __myalloc(void)
__myalloc proc near
    mov     dx, ax
    add     ax, word ptr [crtsp1]
    jc      LAB_2cc5_0541
    cmp     word ptr [word_3ED74], ax
    jnc     LAB_2cc5_0537
    add     ax, 0xf
    push    ax
    rcr     ax, 0x1
    mov     cl, 0x3
    shr     ax, cl
    mov     cx, ds
    mov     bx, word ptr [crtpspseg]
    sub     cx, bx
    add     ax, cx
    mov     es, bx
    mov     bx, ax
    mov     ah, 0x4a
    int     0x21                               ; DOS - 2+ - ADJUST MEMORY BLOCK SIZE (SETBLOCK)
                                               ; ES = segment address of block to change
                                               ; BX = new size in paragraphs
    pop     ax
    jc      LAB_2cc5_0541
    and     al, 0xf0
    dec     ax
    mov     word ptr [word_3ED74], ax
LAB_2cc5_0537:
    xchg    ax, bp
    mov     bp, word ptr [crtsp1]
    add     word ptr [crtsp1], dx
    ret
LAB_2cc5_0541:
    mov     ax, di
    jmp     near ptr __amsg_exit
__myalloc endp
__dosret0:
    jc      LAB_2cc5_055b
LAB_2cc5_0548:
    xor     ax, ax
    mov     sp, bp
    pop     bp
    retf
__dosreturn:
    jnc     LAB_2cc5_0548
    push    ax
    call    near ptr sub_2D1BC
    pop     ax
    mov     sp, bp
    pop     bp
    retf

; undefined __cdecl16far __dosretax(void)
__dosretax proc far
    jnc     LAB_2cc5_0562
LAB_2cc5_055b:
    call    near ptr sub_2D1BC
    mov     ax, 0xffff
    cwd
LAB_2cc5_0562:
    mov     sp, bp
    pop     bp
    retf
__dosretax endp

; undefined __cdecl16far __maperror(void)
__maperror proc far
    xor     ah, ah
    call    near ptr sub_2D1BC
    retf
__maperror endp

; undefined __cdecl16near sub_2D1BC(void)
sub_2D1BC proc near
    mov     byte ptr [byte_3EDF0], al
    or      ah, ah
    jnz     LAB_2cc5_0596
    cmp     byte ptr [crtdosversion], 0x3
    jc      LAB_2cc5_0587
    cmp     al, 0x22
    jnc     LAB_2cc5_058b
    cmp     al, 0x20
    jc      LAB_2cc5_0587
    mov     al, 0x5
    jmp     LAB_2cc5_058d
    db 0x90
LAB_2cc5_0587:
    cmp     al, 0x13
    jbe     LAB_2cc5_058d
LAB_2cc5_058b:
    mov     al, 0x13
LAB_2cc5_058d:
    mov     bx, 0x36ba
    xlat
LAB_2cc5_0591:
    cbw
    mov     word ptr [word_3EDE5], ax
    ret
LAB_2cc5_0596:
    mov     al, ah
    jmp     LAB_2cc5_0591
sub_2D1BC endp

; int __cdecl16far _flushall(void)
_flushall proc far
    push    bp
    mov     bp, sp
    sub     sp, 0x4
    push    di
    push    si
    mov     si, 0x36d0
    sub     di, di
    jmp     LAB_2cc5_05c0
    db 0x90
LAB_2cc5_05aa:
    test    byte ptr [si+0x6], 0x83
    jz      LAB_2cc5_05bd
    push    si                                 ; FILE *
    call    far ptr _fflush
    add     sp, 0x2
    inc     ax
    jz      LAB_2cc5_05bd
    inc     di
LAB_2cc5_05bd:
    add     si, 0x8
LAB_2cc5_05c0:
    cmp     word ptr [word_3EF58], si
    jnc     LAB_2cc5_05aa
    mov     ax, di
    pop     si
    pop     di
    mov     sp, bp
    pop     bp
    retf
_flushall endp

; int __cdecl16far _printf(char * __format, ...)
_printf proc far
    var_8      = word ptr   -8
    var_4      = word ptr   -4
    __format   = word ptr    6

    push    bp
    mov     bp, sp
    sub     sp, 0x8
    push    di
    push    si
    mov     si, 0x36d8
    lea     ax, [bp+0x8]
    mov     word ptr [bp+var_4], ax
    push    si
    call    far ptr __stbuf
    add     sp, 0x2
    mov     di, ax
    lea     ax, [bp+0x8]
    push    ax
    push    word ptr [bp+__format]
    push    si
    call    far ptr __output
    add     sp, 0x6
    mov     word ptr [bp+var_8], ax
    push    si                                 ; FILE *
    push    di                                 ; int
    call    far ptr __ftbuf
    add     sp, 0x4
    mov     ax, word ptr [bp+var_8]
    pop     si
    pop     di
    mov     sp, bp
    pop     bp
    retf
_printf endp

; uint __cdecl16far __flsbuf(byte param_1, int * param_2)
__flsbuf proc far
    var_8      = word ptr   -8
    var_6      = word ptr   -6
    var_4      = word ptr   -4
    param_1    = byte ptr    6
    param_2    = word ptr    8

    push    bp
    mov     bp, sp
    sub     sp, 0x8
    push    di
    push    si
    mov     si, word ptr [bp+param_2]
    mov     al, byte ptr [si+0x7]
    cbw
    mov     word ptr [bp+var_6], ax
    mov     ax, si
    sub     ax, 0x36d0
    mov     cl, 0x3
    sar     ax, cl
    mov     cx, ax
    shl     ax, 0x1
    add     ax, cx
    shl     ax, 0x1
    add     ax, 0x3770
    mov     word ptr [bp+var_8], ax
    test    byte ptr [si+0x6], 0x83
    jz      LAB_2cc5_0645
    test    byte ptr [si+0x6], 0x40
    jz      LAB_2cc5_0650
LAB_2cc5_0645:
    or      byte ptr [si+0x6], 0x20
    mov     ax, 0xffff
    jmp     near ptr LAB_2cc5_0767
    db 0x90
LAB_2cc5_0650:
    test    byte ptr [si+0x6], 0x1
    jnz     LAB_2cc5_0645
    or      byte ptr [si+0x6], 0x2
    and     byte ptr [si+0x6], 0xef
    sub     ax, ax
    mov     word ptr [si+0x2], ax
    mov     di, ax
    mov     word ptr [bp+var_4], di
    test    byte ptr [si+0x6], 0xc
    jnz     LAB_2cc5_06cf
    mov     bx, si
    sub     bx, 0x36d0
    mov     cl, 0x3
    sar     bx, cl
    mov     ax, bx
    shl     bx, 0x1
    add     bx, ax
    shl     bx, 0x1
    test    byte ptr [bx+0x3770], 0x1
    jnz     LAB_2cc5_06cf
    cmp     si, 0x36d8
    jz      LAB_2cc5_0693
    cmp     si, 0x36e0
    jnz     LAB_2cc5_06c8
LAB_2cc5_0693:
    push    word ptr [bp+var_6]                ; int
    call    far ptr _isatty
    add     sp, 0x2
    or      ax, ax
    jnz     LAB_2cc5_06cf
    inc     word ptr [word_3EE3E]
    cmp     si, 0x36d8
    jnz     LAB_2cc5_06b2
    mov     ax, 0x891e
    jmp     LAB_2cc5_06b5
    db 0x90
LAB_2cc5_06b2:
    mov     ax, 0xaa62
LAB_2cc5_06b5:
    mov     word ptr [si+0x4], ax
    mov     word ptr [si], ax
    mov     bx, word ptr [bp+var_8]
    mov     word ptr [bx+0x2], 0x200
    mov     byte ptr [bx], 0x1
    jmp     LAB_2cc5_06cf
    db 0x90
LAB_2cc5_06c8:
    push    si
    call    near ptr __getbuf
    add     sp, 0x2
LAB_2cc5_06cf:
    test    byte ptr [si+0x6], 0x8
    jnz     LAB_2cc5_06ee
    mov     bx, si
    sub     bx, 0x36d0
    mov     cl, 0x3
    sar     bx, cl
    mov     ax, bx
    shl     bx, 0x1
    add     bx, ax
    shl     bx, 0x1
    test    byte ptr [bx+0x3770], 0x1
    jz      LAB_2cc5_0742
LAB_2cc5_06ee:
    mov     di, word ptr [si]
    sub     di, word ptr [si+0x4]
    mov     ax, word ptr [si+0x4]
    inc     ax
    mov     word ptr [si], ax
    mov     bx, word ptr [bp+var_8]
    mov     ax, word ptr [bx+0x2]
    dec     ax
    mov     word ptr [si+0x2], ax
    or      di, di
    jle     LAB_2cc5_071c
    push    di
    push    word ptr [si+0x4]                  ; void *
    push    word ptr [bp+var_6]                ; int
    call    far ptr _write
    add     sp, 0x6
    mov     word ptr [bp+var_4], ax
    jmp     LAB_2cc5_0737
    db 0x90
LAB_2cc5_071c:
    mov     bx, word ptr [bp+var_6]
    test    byte ptr [bx+crtfilehandles], 0x20
    jz      LAB_2cc5_0737
    mov     ax, 0x2
    push    ax                                 ; int
    sub     ax, ax
    push    ax
    push    ax                                 ; __int32
    push    bx                                 ; int
    call    far ptr _lseek
    add     sp, 0x8
LAB_2cc5_0737:
    mov     bx, word ptr [si+0x4]
    mov     al, byte ptr [bp+param_1]
    mov     byte ptr [bx], al
    jmp     LAB_2cc5_075a
    db 0x90
LAB_2cc5_0742:
    mov     di, 0x1
    mov     ax, di
    push    ax
    lea     ax, [bp+param_1]
    push    ax                                 ; void *
    push    word ptr [bp+var_6]                ; int
    call    far ptr _write
    add     sp, 0x6
    mov     word ptr [bp+var_4], ax
LAB_2cc5_075a:
    cmp     word ptr [bp+var_4], di
    jz      LAB_2cc5_0762
    jmp     near ptr LAB_2cc5_0645
LAB_2cc5_0762:
    mov     al, byte ptr [bp+param_1]
    sub     ah, ah
LAB_2cc5_0767:
    pop     si
    pop     di
    mov     sp, bp
    pop     bp
    retf
__flsbuf endp
    db 0x90

; undefined __cdecl16near __getbuf(undefined2 * param_1)
__getbuf proc near
    var_2      = word ptr   -2
    param_1    = word ptr    4

    push    bp
    mov     bp, sp
    sub     sp, 0x2
    push    si
    mov     ax, word ptr [bp+param_1]
    sub     ax, 0x36d0
    mov     cl, 0x3
    sar     ax, cl
    mov     cx, ax
    shl     ax, 0x1
    add     ax, cx
    shl     ax, 0x1
    add     ax, 0x3770
    mov     word ptr [bp+var_2], ax
    mov     ax, 0x200
    push    ax
    call    far ptr unknown_libname_2
    add     sp, 0x2
    mov     bx, word ptr [bp+param_1]
    mov     word ptr [bx+0x4], ax
    or      ax, ax
    jz      LAB_2cc5_07b2
    or      byte ptr [bx+0x6], 0x8
    mov     bx, word ptr [bp+var_2]
    mov     word ptr [bx+0x2], 0x200
    jmp     LAB_2cc5_07c8
    db 0x90
LAB_2cc5_07b2:
    mov     bx, word ptr [bp+param_1]
    or      byte ptr [bx+0x6], 0x4
    mov     ax, word ptr [bp+var_2]
    inc     ax
    mov     word ptr [bx+0x4], ax
    mov     bx, word ptr [bp+var_2]
    mov     word ptr [bx+0x2], 0x1
LAB_2cc5_07c8:
    mov     bx, word ptr [bp+param_1]
    mov     si, bx
    mov     ax, word ptr [si+0x4]
    mov     word ptr [bx], ax
    mov     word ptr [bx+0x2], 0x0
    pop     si
    mov     sp, bp
    pop     bp
    ret
__getbuf endp

; undefined2 __cdecl16far __stbuf(word * param_1)
__stbuf proc far
    var_4      = word ptr   -4
    var_2      = word ptr   -2
    param_1    = word ptr    6

    push    bp
    mov     bp, sp
    sub     sp, 0x4
    push    si
    mov     si, word ptr [bp+param_1]
    inc     word ptr [word_3EE3E]
    cmp     si, 0x36d8
    jnz     LAB_2cc5_07f8
    mov     word ptr [bp+var_2], 0x891e
    jmp     LAB_2cc5_0803
    db 0x90
LAB_2cc5_07f8:
    cmp     si, 0x36e0
    jnz     LAB_2cc5_0822
    mov     word ptr [bp+var_2], 0xaa62
LAB_2cc5_0803:
    test    byte ptr [si+0x6], 0xc
    jnz     LAB_2cc5_0822
    mov     bx, si
    sub     bx, 0x36d0
    mov     cl, 0x3
    sar     bx, cl
    mov     ax, bx
    shl     bx, 0x1
    add     bx, ax
    shl     bx, 0x1
    test    byte ptr [bx+0x3770], 0x1
    jz      LAB_2cc5_0826
LAB_2cc5_0822:
    sub     ax, ax
    jmp     LAB_2cc5_085b
LAB_2cc5_0826:
    mov     ax, si
    sub     ax, 0x36d0
    mov     cl, 0x3
    sar     ax, cl
    mov     cx, ax
    shl     ax, 0x1
    add     ax, cx
    shl     ax, 0x1
    add     ax, 0x3770
    mov     word ptr [bp+var_4], ax
    mov     ax, word ptr [bp+var_2]
    mov     word ptr [si+0x4], ax
    mov     word ptr [si], ax
    mov     bx, word ptr [bp+var_4]
    mov     ax, 0x200
    mov     word ptr [bx+0x2], ax
    mov     word ptr [si+0x2], ax
    mov     byte ptr [bx], 0x1
    or      byte ptr [si+0x6], 0x2
    mov     ax, 0x1
LAB_2cc5_085b:
    pop     si
    mov     sp, bp
    pop     bp
    retf
__stbuf endp

; undefined __cdecl16far __ftbuf(int param_1, FILE * param_2)
__ftbuf proc far
    var_2      = word ptr   -2
    param_1    = word ptr    6
    param_2    = word ptr    8

    push    bp
    mov     bp, sp
    sub     sp, 0x2
    push    si
    cmp     word ptr [bp+param_1], 0x0
    jz      LAB_2cc5_08cc
    cmp     word ptr [bp+param_2], 0x36d8
    jz      LAB_2cc5_087b
    cmp     word ptr [bp+param_2], 0x36e0
    jnz     LAB_2cc5_08f9
LAB_2cc5_087b:
    mov     bx, word ptr [bp+param_2]
    mov     al, byte ptr [bx+0x7]
    cbw
    push    ax                                 ; int
    call    far ptr _isatty
    add     sp, 0x2
    or      ax, ax
    jz      LAB_2cc5_08f9
    mov     ax, word ptr [bp+param_2]
    sub     ax, 0x36d0
    mov     cl, 0x3
    sar     ax, cl
    mov     cx, ax
    shl     ax, 0x1
    add     ax, cx
    shl     ax, 0x1
    add     ax, 0x3770
    mov     word ptr [bp+var_2], ax
    push    word ptr [bp+param_2]              ; FILE *
    call    far ptr _fflush
    add     sp, 0x2
    mov     bx, word ptr [bp+var_2]
    mov     byte ptr [bx], 0x0
    mov     word ptr [bx+0x2], 0x0
    mov     bx, word ptr [bp+param_2]
    mov     si, bx
    sub     ax, ax
    mov     word ptr [si], ax
    mov     word ptr [bx+0x4], ax
    jmp     LAB_2cc5_08f9
    db 0x90
LAB_2cc5_08cc:
    mov     bx, word ptr [bp+param_2]
    cmp     word ptr [bx+0x4], 0x891e
    jz      LAB_2cc5_08dd
    cmp     word ptr [bx+0x4], 0xaa62
    jnz     LAB_2cc5_08f9
LAB_2cc5_08dd:
    mov     al, byte ptr [bx+0x7]
    cbw
    push    ax                                 ; int
    call    far ptr _isatty
    add     sp, 0x2
    or      ax, ax
    jz      LAB_2cc5_08f9
    push    word ptr [bp+param_2]              ; FILE *
    call    far ptr _fflush
    add     sp, 0x2
LAB_2cc5_08f9:
    pop     si
    mov     sp, bp
    pop     bp
    retf
__ftbuf endp

; int __cdecl16far _fflush(FILE * __stream)
_fflush proc far
    var_4      = word ptr   -4
    __stream   = word ptr    6

    push    bp
    mov     bp, sp
    sub     sp, 0x4
    push    di
    push    si
    mov     si, word ptr [bp+__stream]
    sub     di, di
    mov     al, byte ptr [si+0x6]
    and     al, 0x3
    cmp     al, 0x2
    jnz     LAB_2cc5_095c
    test    byte ptr [si+0x6], 0x8
    jnz     LAB_2cc5_0933
    mov     bx, si
    sub     bx, 0x36d0
    mov     cl, 0x3
    sar     bx, cl
    mov     ax, bx
    shl     bx, 0x1
    add     bx, ax
    shl     bx, 0x1
    test    byte ptr [bx+0x3770], 0x1
    jz      LAB_2cc5_095c
LAB_2cc5_0933:
    mov     ax, word ptr [si]
    sub     ax, word ptr [si+0x4]
    mov     word ptr [bp+var_4], ax
    or      ax, ax
    jle     LAB_2cc5_095c
    push    ax
    push    word ptr [si+0x4]                  ; void *
    mov     al, byte ptr [si+0x7]
    cbw
    push    ax                                 ; int
    call    far ptr _write
    add     sp, 0x6
    cmp     ax, word ptr [bp+var_4]
    jz      LAB_2cc5_095c
    or      byte ptr [si+0x6], 0x20
    mov     di, 0xffff
LAB_2cc5_095c:
    mov     ax, word ptr [si+0x4]
    mov     word ptr [si], ax
    mov     word ptr [si+0x2], 0x0
    mov     ax, di
    pop     si
    pop     di
    mov     sp, bp
    pop     bp
    retf
_fflush endp

; byte * __cdecl16far __output(byte * param_1, byte * param_2, byte * param_3, int param_4, byte * param_5, int * param_6, int param_7)
__output proc far
    local_166  = word ptr  -356
    local_164  = byte ptr  -354
    param_1    = dword ptr   6
    param_2    = word ptr   10
    param_3    = word ptr   12
    param_4    = word ptr   14
    param_5    = word ptr   16
    param_6    = word ptr   18
    param_7    = word ptr   20

    push    bp
    mov     bp, sp
    mov     ax, 0x164
    call    far ptr __chkstk
    push    di
    push    si
    mov     si, word ptr [bp+param_1+2]
    lea     ax, [bp+local_164]
    mov     word ptr [off_428B6], ax
    mov     ax, word ptr [bp+param_2]
    mov     word ptr [word_428A6], ax
    mov     ax, word ptr [bp+param_1]
    mov     word ptr [off_4289A], ax
    mov     word ptr [word_428B0], 0x0
    mov     word ptr [word_428AE], 0x0
    jmp     near ptr LAB_2cc5_0c27
LAB_2cc5_09a0:
    cmp     byte ptr [si], 0x25
    jz      LAB_2cc5_09a8
    jmp     near ptr LAB_2cc5_0c0a
LAB_2cc5_09a8:
    mov     word ptr [word_428B2], 0x1
    sub     ax, ax
    mov     word ptr [word_428A2], ax
    mov     word ptr [word_4289E], ax
    mov     word ptr [word_428AC], ax
    mov     word ptr [word_428A0], ax
    mov     word ptr [word_428AA], ax
    mov     word ptr [word_428A8], ax
    mov     word ptr [word_4289C], ax
    mov     word ptr [word_42898], ax
    mov     word ptr [word_428A4], ax
    mov     word ptr [word_428BC], 0x20
    cmp     byte ptr [si+0x1], 0x30
    jnz     LAB_2cc5_0a13
    inc     si
    mov     word ptr [word_428BC], 0x30
    jmp     LAB_2cc5_0a13
LAB_2cc5_09e0:
    cmp     byte ptr [si], 0x2b
    jnz     LAB_2cc5_09f2
    inc     word ptr [word_428A2]
    mov     word ptr [word_428A8], 0x0
    jmp     LAB_2cc5_0a13
    db 0x90
LAB_2cc5_09f2:
    cmp     byte ptr [si], 0x20
    jnz     LAB_2cc5_0a04
    cmp     word ptr [word_428A2], 0x0
    jnz     LAB_2cc5_0a13
    inc     word ptr [word_428A8]
    jmp     LAB_2cc5_0a13
LAB_2cc5_0a04:
    inc     word ptr [word_42898]
    jmp     LAB_2cc5_0a13
LAB_2cc5_0a0a:
    cmp     byte ptr [si], 0x2d
    jnz     LAB_2cc5_09e0
    inc     word ptr [word_428A4]
LAB_2cc5_0a13:
    inc     si
    mov     al, byte ptr [si]
    cbw
    push    ax
    push    cs
    call    near ptr flagchar
    add     sp, 0x2
    or      ax, ax
    jnz     LAB_2cc5_0a0a
    push    si
    mov     ax, offset word_428B8
    push    ax
    push    cs
    call    near ptr getnum
    add     sp, 0x4
    mov     si, ax
    cmp     word ptr [word_428B8], 0x0
    jge     LAB_2cc5_0a44
    inc     word ptr [word_428A4]
    mov     ax, word ptr [word_428B8]
    neg     ax
    mov     word ptr [word_428B8], ax
LAB_2cc5_0a44:
    cmp     byte ptr [si], 0x2e
    jnz     LAB_2cc5_0a6d
    inc     word ptr [word_428AA]
    inc     si
    push    si
    mov     ax, offset word_428B2
    push    ax
    push    cs
    call    near ptr getnum
    add     sp, 0x4
    mov     si, ax
    cmp     word ptr [word_428B2], 0x0
    jge     LAB_2cc5_0a6d
    mov     word ptr [word_428B2], 0x1
    dec     word ptr [word_428AA]
LAB_2cc5_0a6d:
    mov     al, byte ptr [si]
    cbw
    cmp     ax, 0x46
    jz      LAB_2cc5_0aa8
    cmp     ax, 0x4e
    jz      LAB_2cc5_0ab0
    cmp     ax, 0x68
    jz      LAB_2cc5_0aa0
    cmp     ax, 0x6c
    jnz     LAB_2cc5_0a8a
    mov     word ptr [word_428A0], 0x2
LAB_2cc5_0a8a:
    cmp     word ptr [word_428A0], 0x0
    jnz     LAB_2cc5_0a96
    cmp     byte ptr [si], 0x4c
    jnz     LAB_2cc5_0a97
LAB_2cc5_0a96:
    inc     si
LAB_2cc5_0a97:
    cmp     byte ptr [si], 0x0
    jnz     LAB_2cc5_0ab8
    jmp     near ptr LAB_2cc5_0c2f
    db 0x90
LAB_2cc5_0aa0:
    mov     word ptr [word_428A0], 0x1
    jmp     LAB_2cc5_0a8a
LAB_2cc5_0aa8:
    mov     word ptr [word_428A0], 0x10
    jmp     LAB_2cc5_0a8a
LAB_2cc5_0ab0:
    mov     word ptr [word_428A0], 0x8
    jmp     LAB_2cc5_0a8a
LAB_2cc5_0ab8:
    mov     al, byte ptr [si]
    cbw
    mov     word ptr [bp+local_166], ax
    cmp     ax, 0x45
    jz      LAB_2cc5_0ace
    cmp     ax, 0x47
    jz      LAB_2cc5_0ace
    cmp     ax, 0x58
    jnz     LAB_2cc5_0ad7
LAB_2cc5_0ace:
    inc     word ptr [word_4289E]
    add     word ptr [bp+local_166], 0x20
LAB_2cc5_0ad7:
    mov     ax, word ptr [bp+local_166]
    sub     ax, 0x63
    cmp     ax, 0x15
    jbe     LAB_2cc5_0ae6
    jmp     near ptr LAB_2cc5_0c00
LAB_2cc5_0ae6:
    add     ax, ax
    xchg    ax, bx
    jmp     word ptr cs:[bx+off_2D896]
LAB_2cc5_0aee:
    mov     bx, word ptr [word_428A6]
    mov     bx, word ptr [bx]
    mov     ax, word ptr [word_428AE]
    mov     word ptr [bx], ax
LAB_2cc5_0af9:
    add     word ptr [word_428A6], 0x2
    jmp     near ptr LAB_2cc5_0c72
    db 0x90
LAB_2cc5_0b02:
    inc     word ptr [word_428AC]
LAB_2cc5_0b06:
    mov     word ptr [word_42898], 0x0
    mov     ax, 0xa
LAB_2cc5_0b0f:
    push    ax
    push    cs
    call    near ptr iprint
LAB_2cc5_0b14:
    add     sp, 0x2
    jmp     near ptr LAB_2cc5_0c72
LAB_2cc5_0b1a:
    mov     ax, 0x8
    jmp     LAB_2cc5_0b0f
    db 0x90
LAB_2cc5_0b20:
    inc     word ptr [word_4289C]
    inc     word ptr [word_4289E]
    cmp     word ptr [word_428AA], 0x0
    jnz     LAB_2cc5_0b38
    mov     word ptr [word_428B4], 0x1
    jmp     LAB_2cc5_0b3e
    db 0x90
LAB_2cc5_0b38:
    mov     word ptr [word_428B4], 0x0
LAB_2cc5_0b3e:
    inc     word ptr [word_428AA]
    mov     word ptr [word_428B2], 0x4
    cmp     word ptr [word_428A0], 0x8
    jnz     LAB_2cc5_0b52
    jmp     near ptr LAB_2cc5_0bde
LAB_2cc5_0b52:
    sub     ax, ax
    mov     word ptr [word_428A0], ax
    mov     word ptr [bp-0x4], ax
    cmp     word ptr [word_428B8], ax
    jz      LAB_2cc5_0b87
    mov     ax, word ptr [word_428B8]
    mov     word ptr [bp-0x4], ax
    cmp     word ptr [word_428A4], 0x0
    jz      LAB_2cc5_0b76
    mov     word ptr [word_428B8], 0x0
    jmp     LAB_2cc5_0b87
    db 0x90
LAB_2cc5_0b76:
    sub     word ptr [word_428B8], 0x5
    mov     ax, word ptr [word_428B8]
    or      ax, ax
    jge     LAB_2cc5_0b84
    sub     ax, ax
LAB_2cc5_0b84:
    mov     word ptr [word_428B8], ax
LAB_2cc5_0b87:
    add     word ptr [word_428A6], 0x2
    mov     ax, 0x10
    push    ax
    push    cs
    call    near ptr iprint
    add     sp, 0x2
    mov     ax, 0x3a
    push    ax
    push    cs
    call    near ptr _outc
    add     sp, 0x2
    cmp     word ptr [bp-0x4], 0x0
    jz      LAB_2cc5_0bca
    cmp     word ptr [word_428A4], 0x0
    jz      LAB_2cc5_0bc4
    mov     ax, word ptr [bp-0x4]
    sub     ax, 0x5
    mov     word ptr [word_428B8], ax
    or      ax, ax
    jge     LAB_2cc5_0bbe
    sub     ax, ax
LAB_2cc5_0bbe:
    mov     word ptr [word_428B8], ax
    jmp     LAB_2cc5_0bca
    db 0x90
LAB_2cc5_0bc4:
    mov     word ptr [word_428B8], 0x0
LAB_2cc5_0bca:
    sub     word ptr [word_428A6], 0x4
    mov     ax, 0x10
    push    ax
    push    cs
    call    near ptr iprint
    add     sp, 0x2
    jmp     near ptr LAB_2cc5_0af9
    db 0x90
LAB_2cc5_0bde:
    mov     ax, 0x10
    jmp     near ptr LAB_2cc5_0b0f
LAB_2cc5_0be4:
    sub     ax, ax
LAB_2cc5_0be6:
    push    ax
    push    cs
    call    near ptr sprint
    jmp     near ptr LAB_2cc5_0b14
LAB_2cc5_0bee:
    mov     ax, 0x1
    jmp     LAB_2cc5_0be6
    db 0x90
LAB_2cc5_0bf4:
    push    word ptr [bp+0xfe9c]
    push    cs
    call    near ptr fprint
    jmp     near ptr LAB_2cc5_0b14
    db 0x90
LAB_2cc5_0c00:
    cmp     word ptr [word_428A0], 0x0
    jz      LAB_2cc5_0c0a
    mov     ax, si
    dec     si
LAB_2cc5_0c0a:
    mov     di, si
LAB_2cc5_0c0c:
    inc     di
    cmp     byte ptr [di], 0x0
    jz      LAB_2cc5_0c17
    cmp     byte ptr [di], 0x25
    jnz     LAB_2cc5_0c0c
LAB_2cc5_0c17:
    mov     ax, di
    sub     ax, si
    push    ax
    push    ds
    push    si
    push    cs
    call    near ptr putbuf
    add     sp, 0x6
    mov     si, di
LAB_2cc5_0c27:
    cmp     byte ptr [si], 0x0
    jz      LAB_2cc5_0c2f
    jmp     near ptr LAB_2cc5_09a0
LAB_2cc5_0c2f:
    cmp     word ptr [word_428AE], 0x0
    jnz     LAB_2cc5_0c90
    mov     bx, word ptr [off_4289A]
    test    byte ptr [bx+0x6], 0x20
    jz      LAB_2cc5_0c90
LAB_2cc5_0c40:
    mov     ax, 0xffff
    jmp     LAB_2cc5_0c93
    db 0x90
off_2D896:
    dw LAB_2cc5_0bee
    dw LAB_2cc5_0b06
    dw LAB_2cc5_0bf4
    dw LAB_2cc5_0bf4
    dw LAB_2cc5_0bf4
    dw LAB_2cc5_0c00
    dw LAB_2cc5_0b06
    dw LAB_2cc5_0c00
    dw LAB_2cc5_0c00
    dw LAB_2cc5_0c00
    dw LAB_2cc5_0c00
    dw LAB_2cc5_0aee
    dw LAB_2cc5_0b1a
    dw LAB_2cc5_0b20
    dw LAB_2cc5_0c00
    dw LAB_2cc5_0c00
    dw LAB_2cc5_0be4
    dw LAB_2cc5_0c00
    dw LAB_2cc5_0b02
    dw LAB_2cc5_0c00
    dw LAB_2cc5_0c00
    dw LAB_2cc5_0bde
LAB_2cc5_0c72:
    cmp     word ptr [word_428B0], 0x0
    jz      LAB_2cc5_0c8c
    cmp     word ptr [word_428AE], 0x0
    jnz     LAB_2cc5_0c90
    mov     bx, word ptr [off_4289A]
    test    byte ptr [bx+0x6], 0x20
    jnz     LAB_2cc5_0c40
    jmp     LAB_2cc5_0c90
LAB_2cc5_0c8c:
    inc     si
    jmp     LAB_2cc5_0c27
    db 0x90
LAB_2cc5_0c90:
    mov     ax, word ptr [word_428AE]
LAB_2cc5_0c93:
    pop     si
    pop     di
    mov     sp, bp
    pop     bp
    retf
__output endp
    db 0x90

; undefined __cdecl16far iprint(char * param_1)
iprint proc far
    var_18     = byte ptr  -24
    var_C      = word ptr  -12
    var_8      = word ptr   -8
    var_4      = dword ptr  -4
    param_1    = word ptr    6

    push    bp
    mov     bp, sp
    sub     sp, 0x18
    push    di
    push    si
    cmp     word ptr [bp+param_1], 0xa
    jz      LAB_2cc5_0cac
    inc     word ptr [word_428AC]
LAB_2cc5_0cac:
    cmp     word ptr [word_428A0], 0x2
    jz      LAB_2cc5_0cba
    cmp     word ptr [word_428A0], 0x10
    jnz     LAB_2cc5_0cd0
LAB_2cc5_0cba:
    mov     bx, word ptr [word_428A6]
    mov     ax, word ptr [bx]
    mov     dx, word ptr [bx+0x2]
    mov     word ptr [bp+var_4], ax
    mov     word ptr [bp+var_4+2], dx
    add     word ptr [word_428A6], 0x4
    jmp     LAB_2cc5_0cfa
LAB_2cc5_0cd0:
    cmp     word ptr [word_428AC], 0x0
    jz      LAB_2cc5_0ce8
    mov     bx, word ptr [word_428A6]
    mov     ax, word ptr [bx]
    mov     word ptr [bp+var_4], ax
    mov     word ptr [bp+var_4+2], 0x0
    jmp     LAB_2cc5_0cf5
    db 0x90
LAB_2cc5_0ce8:
    mov     bx, word ptr [word_428A6]
    mov     ax, word ptr [bx]
    cwd
    mov     word ptr [bp+var_4], ax
    mov     word ptr [bp+var_4+2], dx
LAB_2cc5_0cf5:
    add     word ptr [word_428A6], 0x2
LAB_2cc5_0cfa:
    cmp     word ptr [word_42898], 0x0
    jz      LAB_2cc5_0d0e
    mov     ax, word ptr [bp+var_4]
    or      ax, word ptr [bp+var_4+2]
    jz      LAB_2cc5_0d0e
    mov     ax, word ptr [bp+param_1]
    jmp     LAB_2cc5_0d10
LAB_2cc5_0d0e:
    sub     ax, ax
LAB_2cc5_0d10:
    mov     word ptr [word_428BA], ax
    mov     si, word ptr [off_428B6]
    cmp     word ptr [word_428AC], 0x0
    jnz     LAB_2cc5_0d48
    cmp     word ptr [bp+var_4+2], 0x0
    jge     LAB_2cc5_0d48
    cmp     word ptr [bp+param_1], 0xa
    jnz     LAB_2cc5_0d41
    mov     byte ptr [si], 0x2d
    inc     si
    mov     ax, word ptr [bp+var_4]
    mov     dx, word ptr [bp+var_4+2]
    neg     ax
    adc     dx, 0x0
    neg     dx
    mov     word ptr [bp+var_4], ax
    mov     word ptr [bp+var_4+2], dx
LAB_2cc5_0d41:
    mov     word ptr [bp+var_8], 0x1
    jmp     LAB_2cc5_0d4d
LAB_2cc5_0d48:
    mov     word ptr [bp+var_8], 0x0
LAB_2cc5_0d4d:
    lea     ax, [bp+var_18]
    mov     di, ax
    push    word ptr [bp+param_1]
    push    di                                 ; char *
    push    word ptr [bp+var_4+2]
    push    word ptr [bp+var_4]                ; unsigned __int32
    call    far ptr _ultoa
    add     sp, 0x8
    cmp     word ptr [word_428AA], 0x0
    jz      LAB_2cc5_0d8e
    push    di                                 ; char *
    call    far ptr _strlen
    add     sp, 0x2
    mov     cx, word ptr [word_428B2]
    sub     cx, ax
    mov     word ptr [bp+var_C], cx
    jmp     LAB_2cc5_0d84
    db 0x90
LAB_2cc5_0d80:
    mov     byte ptr [si], 0x30
    inc     si
LAB_2cc5_0d84:
    mov     ax, cx
    dec     cx
    or      ax, ax
    jg      LAB_2cc5_0d80
    mov     word ptr [bp+var_C], cx
LAB_2cc5_0d8e:
    mov     cx, word ptr [word_4289E]
LAB_2cc5_0d92:
    mov     al, byte ptr [di]
    mov     byte ptr [si], al
    or      cx, cx
    jz      LAB_2cc5_0da1
    cmp     al, 0x61
    jl      LAB_2cc5_0da1
    sub     byte ptr [si], 0x20
LAB_2cc5_0da1:
    inc     si
    inc     di
    cmp     byte ptr [di-0x1], 0x0
    jnz     LAB_2cc5_0d92
    cmp     word ptr [word_428AC], 0x0
    jnz     LAB_2cc5_0dc4
    mov     ax, word ptr [word_428A2]
    or      ax, word ptr [word_428A8]
    jz      LAB_2cc5_0dc4
    cmp     word ptr [bp+var_8], 0x0
    jnz     LAB_2cc5_0dc4
    mov     ax, 0x1
    jmp     LAB_2cc5_0dc6
LAB_2cc5_0dc4:
    sub     ax, ax
LAB_2cc5_0dc6:
    push    ax
    push    cs
    call    near ptr _out
    add     sp, 0x2
    pop     si
    pop     di
    mov     sp, bp
    pop     bp
    retf
iprint endp

; undefined __cdecl16far sprint(int param_1)
sprint proc far
    var_E      = dword ptr -14
    var_8      = word ptr   -8
    var_6      = word ptr   -6
    var_4      = word ptr   -4
    param_1    = word ptr    6

    push    bp
    mov     bp, sp
    sub     sp, 0x10
    push    di
    push    si
    cmp     word ptr [bp+param_1], 0x0
    jz      LAB_2cc5_0df6
    mov     si, 0x1
    mov     ax, word ptr [word_428A6]
    mov     word ptr [bp+var_8], ax
    mov     word ptr [bp+var_6], ds
    add     word ptr [word_428A6], 0x2
    jmp     near ptr LAB_2cc5_0e87
LAB_2cc5_0df6:
    cmp     word ptr [word_428A0], 0x10
    jnz     LAB_2cc5_0e14
    mov     bx, word ptr [word_428A6]
    mov     ax, word ptr [bx]
    mov     dx, word ptr [bx+0x2]
    mov     word ptr [bp+var_8], ax
    mov     word ptr [bp+var_6], dx
    add     word ptr [word_428A6], 0x4
    jmp     LAB_2cc5_0e28
    db 0x90
LAB_2cc5_0e14:
    mov     bx, word ptr [word_428A6]
    mov     ax, word ptr [bx]
    mov     word ptr [bp+var_4], ax
    mov     word ptr [bp+var_8], ax
    mov     word ptr [bp+var_6], ds
    add     word ptr [word_428A6], 0x2
LAB_2cc5_0e28:
    cmp     word ptr [word_428A0], 0x10
    jnz     LAB_2cc5_0e3c
    mov     ax, word ptr [bp+var_8]
    or      ax, word ptr [bp+var_6]
    jnz     LAB_2cc5_0e4b
    mov     ax, 0x37ea
    jmp     LAB_2cc5_0e45
LAB_2cc5_0e3c:
    cmp     word ptr [bp+var_4], 0x0
    jnz     LAB_2cc5_0e4b
    mov     ax, 0x37f1
LAB_2cc5_0e45:
    mov     word ptr [bp+var_8], ax
    mov     word ptr [bp+var_6], ds
LAB_2cc5_0e4b:
    mov     ax, word ptr [bp+var_8]
    mov     dx, word ptr [bp+var_6]
    mov     word ptr [bp+var_E], ax
    mov     word ptr [bp+var_E+2], dx
    sub     si, si
    cmp     word ptr [word_428AA], si
    jz      LAB_2cc5_0e7b
    mov     cx, word ptr [word_428B2]
    jmp     LAB_2cc5_0e73
    db 0x90
LAB_2cc5_0e66:
    les     bx, [bp+var_E]
    inc     word ptr [bp+var_E]
    cmp     byte ptr es:[bx], 0x0
    jz      LAB_2cc5_0e87
    inc     si
LAB_2cc5_0e73:
    cmp     cx, si
    jle     LAB_2cc5_0e87
    jmp     LAB_2cc5_0e66
    db 0x90
LAB_2cc5_0e7a:
    inc     si
LAB_2cc5_0e7b:
    les     bx, [bp+var_E]
    inc     word ptr [bp+var_E]
    cmp     byte ptr es:[bx], 0x0
    jnz     LAB_2cc5_0e7a
LAB_2cc5_0e87:
    mov     di, word ptr [word_428B8]
    sub     di, si
    cmp     word ptr [word_428A4], 0x0
    jnz     LAB_2cc5_0e9c
    push    di
    push    cs
    call    near ptr putpad
    add     sp, 0x2
LAB_2cc5_0e9c:
    push    si
    push    word ptr [bp+var_6]
    push    word ptr [bp+var_8]
    push    cs
    call    near ptr putbuf
    add     sp, 0x6
    cmp     word ptr [word_428A4], 0x0
    jz      LAB_2cc5_0eb9
    push    di
    push    cs
    call    near ptr putpad
    add     sp, 0x2
LAB_2cc5_0eb9:
    pop     si
    pop     di
    mov     sp, bp
    pop     bp
    retf
sprint endp
    db 0x90

; undefined __stdcall16near fprint(undefined2 param_1, int param_2)
fprint proc near
    var_4      = byte ptr   -4
    var_2      = word ptr   -2
    param_1    = word ptr    4
    param_2    = word ptr    6

    push    bp
    mov     bp, sp
    sub     sp, 0x4
    mov     ax, word ptr [word_428A6]
    mov     word ptr [bp+var_2], ax
    cmp     word ptr [bp+param_2], 0x67
    jz      LAB_2cc5_0ed8
    cmp     word ptr [bp+param_2], 0x47
    jnz     LAB_2cc5_0edc
LAB_2cc5_0ed8:
    mov     al, 0x1
    jmp     LAB_2cc5_0ede
LAB_2cc5_0edc:
    sub     al, al
LAB_2cc5_0ede:
    mov     byte ptr [bp+var_4], al
    cmp     word ptr [word_428AA], 0x0
    jnz     LAB_2cc5_0eee
    mov     word ptr [word_428B2], 0x6
LAB_2cc5_0eee:
    cmp     byte ptr [bp+var_4], 0x0
    jz      LAB_2cc5_0f01
    cmp     word ptr [word_428B2], 0x0
    jnz     LAB_2cc5_0f01
    mov     word ptr [word_428B2], 0x1
LAB_2cc5_0f01:
    push    word ptr [word_4289E]
    push    word ptr [word_428B2]
    push    word ptr [bp+param_2]
    push    word ptr [off_428B6]
    push    word ptr [bp+var_2]
    call    dword ptr [off_3EF84]
fprint endp
    add     sp, 0xa
    cmp     byte ptr [bp-0x4], 0x0
    jz      LAB_2cc5_0f32
    cmp     word ptr [word_42898], 0x0
    jnz     LAB_2cc5_0f32
    push    word ptr [off_428B6]
    call    dword ptr [off_3EF88]
    add     sp, 0x2
LAB_2cc5_0f32:
    cmp     word ptr [word_42898], 0x0
    jz      LAB_2cc5_0f4b
    cmp     word ptr [word_428B2], 0x0
    jnz     LAB_2cc5_0f4b
    push    word ptr [off_428B6]
    call    dword ptr [off_3EF90]
    add     sp, 0x2
LAB_2cc5_0f4b:
    add     word ptr [word_428A6], 0x8
    mov     word ptr [word_428BA], 0x0
    mov     ax, word ptr [word_428A2]
    or      ax, word ptr [word_428A8]
    jz      LAB_2cc5_0f72
    push    word ptr [bp-0x2]
    call    dword ptr [off_3EF94]
    add     sp, 0x2
    or      ax, ax
    jz      LAB_2cc5_0f72
    mov     ax, 0x1
    jmp     LAB_2cc5_0f74
LAB_2cc5_0f72:
    sub     ax, ax
LAB_2cc5_0f74:
    push    ax
    push    cs
    call    near ptr _out
    mov     sp, bp
    pop     bp
    retf
    db 0x90

; undefined __cdecl16far _outc(byte param_1)
_outc proc far
    param_1    = byte ptr    6

    push    bp
    mov     bp, sp
    push    si
    cmp     word ptr [word_428B0], 0x0
    jnz     LAB_2cc5_0fba
    mov     bx, word ptr [off_4289A]
    dec     word ptr [bx+0x2]
    js      LAB_2cc5_0fa0
    mov     al, byte ptr [bp+param_1]
    mov     si, word ptr [bx]
    inc     word ptr [bx]
    mov     byte ptr [si], al
    sub     ah, ah
    jmp     LAB_2cc5_0fac
    db 0x90
LAB_2cc5_0fa0:
    push    bx                                 ; FILE *
    push    word ptr [bp+param_1]              ; int
    call    far ptr __flsbuf
    add     sp, 0x4
LAB_2cc5_0fac:
    inc     ax
    jnz     LAB_2cc5_0fb6
    inc     word ptr [word_428B0]
    jmp     LAB_2cc5_0fba
    db 0x90
LAB_2cc5_0fb6:
    inc     word ptr [word_428AE]
LAB_2cc5_0fba:
    pop     si
    pop     bp
    retf
_outc endp
    db 0x90

; undefined __cdecl16far putpad(int param_1)
putpad proc far
    param_1    = word ptr    6

    push    bp
    mov     bp, sp
    sub     sp, 0x2
    push    di
    push    si
    cmp     word ptr [word_428B0], 0x0
    jnz     LAB_2cc5_1018
    mov     si, word ptr [bp+param_1]
    or      si, si
    jle     LAB_2cc5_1018
    jmp     LAB_2cc5_0fed
LAB_2cc5_0fd6:
    push    word ptr [off_4289A]               ; FILE *
    push    word ptr [word_428BC]              ; int
    call    far ptr __flsbuf
    add     sp, 0x4
LAB_2cc5_0fe6:
    inc     ax
    jnz     LAB_2cc5_0fed
    inc     word ptr [word_428B0]
LAB_2cc5_0fed:
    mov     ax, si
    dec     si
    or      ax, ax
    jle     LAB_2cc5_100a
    mov     bx, word ptr [off_4289A]
    dec     word ptr [bx+0x2]
    js      LAB_2cc5_0fd6
    mov     al, byte ptr [word_428BC]
    mov     di, word ptr [bx]
    inc     word ptr [bx]
    mov     byte ptr [di], al
    sub     ah, ah
    jmp     LAB_2cc5_0fe6
LAB_2cc5_100a:
    cmp     word ptr [word_428B0], 0x0
    jnz     LAB_2cc5_1018
    mov     ax, word ptr [bp+param_1]
    add     word ptr [word_428AE], ax
LAB_2cc5_1018:
    pop     si
    pop     di
    mov     sp, bp
    pop     bp
    retf
putpad endp

; undefined __cdecl16far putbuf(byte * param_1, int param_2)
putbuf proc far
    param_1    = dword ptr   6
    param_2    = word ptr   10

    push    bp
    mov     bp, sp
    sub     sp, 0x2
    push    di
    push    si
    mov     si, word ptr [bp+param_2]
    cmp     word ptr [word_428B0], 0x0
    jnz     LAB_2cc5_1082
    jmp     LAB_2cc5_1050
LAB_2cc5_1032:
    push    word ptr [off_4289A]               ; FILE *
    les     bx, [bp+param_1]
    mov     al, byte ptr es:[bx]
    cbw
    push    ax                                 ; int
    call    far ptr __flsbuf
    add     sp, 0x4
LAB_2cc5_1046:
    inc     ax
    jnz     LAB_2cc5_104d
    inc     word ptr [word_428B0]
LAB_2cc5_104d:
    inc     word ptr [bp+param_1]
LAB_2cc5_1050:
    mov     ax, si
    dec     si
    or      ax, ax
    jz      LAB_2cc5_1074
    mov     bx, word ptr [off_4289A]
    dec     word ptr [bx+0x2]
    js      LAB_2cc5_1032
    les     bx, [bp+param_1]
    mov     al, byte ptr es:[bx]
    mov     bx, word ptr [off_4289A]
    mov     di, word ptr [bx]
    inc     word ptr [bx]
    mov     byte ptr [di], al
    sub     ah, ah
    jmp     LAB_2cc5_1046
LAB_2cc5_1074:
    cmp     word ptr [word_428B0], 0x0
    jnz     LAB_2cc5_1082
    mov     ax, word ptr [bp+param_2]
    add     word ptr [word_428AE], ax
LAB_2cc5_1082:
    pop     si
    pop     di
    mov     sp, bp
    pop     bp
    retf
putbuf endp

; undefined __cdecl16far _out(int param_1)
_out proc far
    var_8      = word ptr   -8
    var_6      = word ptr   -6
    var_4      = word ptr   -4
    param_1    = word ptr    6

    push    bp
    mov     bp, sp
    sub     sp, 0xa
    push    di
    push    si
    mov     si, word ptr [off_428B6]
    sub     ax, ax
    mov     word ptr [bp+var_4], ax
    mov     word ptr [bp+var_6], ax
    cmp     word ptr [word_428BC], 0x30
    jnz     LAB_2cc5_10bb
    cmp     word ptr [word_428AA], ax
    jz      LAB_2cc5_10bb
    cmp     word ptr [word_4289C], ax
    jz      LAB_2cc5_10b5
    cmp     word ptr [word_428B4], ax
    jnz     LAB_2cc5_10bb
LAB_2cc5_10b5:
    mov     word ptr [word_428BC], 0x20
LAB_2cc5_10bb:
    mov     di, word ptr [word_428B8]
    push    si                                 ; char *
    call    far ptr _strlen
    add     sp, 0x2
    mov     word ptr [bp+var_8], ax
    sub     di, ax
    sub     di, word ptr [bp+param_1]
    cmp     word ptr [word_428A4], 0x0
    jnz     LAB_2cc5_10f0
    cmp     byte ptr [si], 0x2d
    jnz     LAB_2cc5_10f0
    cmp     word ptr [word_428BC], 0x30
    jnz     LAB_2cc5_10f0
    lodsb
    cbw
    push    ax
    push    cs
    call    near ptr _outc
    add     sp, 0x2
    dec     word ptr [bp+var_8]
LAB_2cc5_10f0:
    cmp     word ptr [word_428BC], 0x30
    jz      LAB_2cc5_1102
    or      di, di
    jle     LAB_2cc5_1102
    cmp     word ptr [word_428A4], 0x0
    jz      LAB_2cc5_111d
LAB_2cc5_1102:
    cmp     word ptr [bp+param_1], 0x0
    jz      LAB_2cc5_110f
    inc     word ptr [bp+var_6]
    push    cs
    call    near ptr putsign
LAB_2cc5_110f:
    cmp     word ptr [word_428BA], 0x0
    jz      LAB_2cc5_111d
    inc     word ptr [bp+var_4]
    push    cs
    call    near ptr putprefix
LAB_2cc5_111d:
    cmp     word ptr [word_428A4], 0x0
    jnz     LAB_2cc5_114d
    push    di
    push    cs
    call    near ptr putpad
    add     sp, 0x2
    cmp     word ptr [bp+param_1], 0x0
    jz      LAB_2cc5_113c
    cmp     word ptr [bp+var_6], 0x0
    jnz     LAB_2cc5_113c
    push    cs
    call    near ptr putsign
LAB_2cc5_113c:
    cmp     word ptr [word_428BA], 0x0
    jz      LAB_2cc5_114d
    cmp     word ptr [bp+var_4], 0x0
    jnz     LAB_2cc5_114d
    push    cs
    call    near ptr putprefix
LAB_2cc5_114d:
    push    word ptr [bp+var_8]
    push    ds
    push    si
    push    cs
    call    near ptr putbuf
    add     sp, 0x6
    cmp     word ptr [word_428A4], 0x0
    jz      LAB_2cc5_116e
    mov     word ptr [word_428BC], 0x20
    push    di
    push    cs
    call    near ptr putpad
    add     sp, 0x2
LAB_2cc5_116e:
    pop     si
    pop     di
    mov     sp, bp
    pop     bp
    retf
_out endp

; undefined __cdecl16far putsign(void)
putsign proc far
    cmp     word ptr [word_428A2], 0x0
    jz      LAB_2cc5_1180
    mov     ax, 0x2b
    jmp     LAB_2cc5_1183
LAB_2cc5_1180:
    mov     ax, 0x20
LAB_2cc5_1183:
    push    ax
    push    cs
    call    near ptr _outc
    add     sp, 0x2
    retf
putsign endp

; undefined __cdecl16far putprefix(void)
putprefix proc far
    mov     ax, 0x30
    push    ax
    push    cs
    call    near ptr _outc
    add     sp, 0x2
    cmp     word ptr [word_428BA], 0x10
    jnz     LAB_2cc5_11b5
    cmp     word ptr [word_4289E], 0x0
    jz      LAB_2cc5_11aa
    mov     ax, 0x58
    jmp     LAB_2cc5_11ad
LAB_2cc5_11aa:
    mov     ax, 0x78
LAB_2cc5_11ad:
    push    ax
    push    cs
    call    near ptr _outc
    add     sp, 0x2
LAB_2cc5_11b5:
    retf
putprefix endp

; char * __cdecl16far getnum(int * param_1, char * param_2)
getnum proc far
    var_2      = word ptr   -2
    param_1    = word ptr    6
    param_2    = word ptr    8

    push    bp
    mov     bp, sp
    sub     sp, 0x4
    push    di
    push    si
    mov     si, word ptr [bp+param_2]
    mov     word ptr [bp+var_2], 0x1
    cmp     byte ptr [si], 0x2a
    jnz     LAB_2cc5_11da
    mov     bx, word ptr [word_428A6]
    mov     di, word ptr [bx]
    add     word ptr [word_428A6], 0x2
    inc     si
    jmp     LAB_2cc5_1221
    db 0x90
LAB_2cc5_11da:
    cmp     byte ptr [si], 0x2d
    jnz     LAB_2cc5_11e5
    mov     word ptr [bp+var_2], 0xffff
    inc     si
LAB_2cc5_11e5:
    sub     di, di
    cmp     byte ptr [si], 0x30
    jl      LAB_2cc5_1221
    cmp     byte ptr [si], 0x39
    jg      LAB_2cc5_1221
    cmp     word ptr [word_428AA], di
    jnz     LAB_2cc5_1202
    cmp     byte ptr [si], 0x30
    jnz     LAB_2cc5_1202
    mov     word ptr [word_428BC], 0x30
LAB_2cc5_1202:
    mov     al, byte ptr [si]
    cbw
    mov     cx, di
    shl     cx, 0x1
    shl     cx, 0x1
    add     cx, di
    shl     cx, 0x1
    add     cx, ax
    sub     cx, 0x30
    mov     di, cx
    inc     si
    cmp     byte ptr [si], 0x30
    jl      LAB_2cc5_1221
    cmp     byte ptr [si], 0x39
    jle     LAB_2cc5_1202
LAB_2cc5_1221:
    mov     ax, word ptr [bp+var_2]
    imul    di
    mov     di, ax
    mov     bx, word ptr [bp+param_1]
    mov     word ptr [bx], di
    mov     ax, si
    pop     si
    pop     di
    mov     sp, bp
    pop     bp
    retf
getnum endp
    db 0x90

; undefined2 __cdecl16far flagchar(char param_1)
flagchar proc far
    param_1    = byte ptr    6

    push    bp
    mov     bp, sp
    sub     sp, 0x2
    push    si
    mov     si, 0x37f8
    mov     cl, byte ptr [bp+param_1]
    jmp     LAB_2cc5_1247
    db 0x90
LAB_2cc5_1246:
    inc     si
LAB_2cc5_1247:
    cmp     byte ptr [si], 0x0
    jz      LAB_2cc5_1256
    cmp     cl, byte ptr [si]
    jnz     LAB_2cc5_1246
    mov     ax, 0x1
    jmp     LAB_2cc5_1258
    db 0x90
LAB_2cc5_1256:
    sub     ax, ax
LAB_2cc5_1258:
    pop     si
    mov     sp, bp
    pop     bp
    retf
flagchar endp
    db 0x90

; __off_t __stdcall16near _lseek(int __fd, __off_t __offset, int __whence)
_lseek proc near
    var_4      = word ptr   -4
    var_2      = word ptr   -2
    __fd       = word ptr    4
    __offset   = dword ptr   8
    __whence   = word ptr   12

    push    bp
    mov     bp, sp
    sub     sp, 0x4
    mov     bx, word ptr [bp+0x6]
    cmp     bx, word ptr [word_3EDF2]
    jc      LAB_2cc5_1272
    mov     ax, 0x900
    jmp     LAB_2cc5_129c
LAB_2cc5_1272:
    test    word ptr [bp+__offset+2], 0x8000
    jz      LAB_2cc5_12c1
    cmp     word ptr [bp+__whence], 0x0
    jz      LAB_2cc5_1299
    xor     cx, cx
    mov     dx, cx
    mov     ax, 0x4201
    int     0x21                               ; DOS - 2+ - MOVE FILE READ/WRITE POINTER (LSEEK)
                                               ; AL = method: offset from present location
    jc      LAB_2cc5_12d5
    test    word ptr [bp+__whence], 0x2
    jnz     LAB_2cc5_129f
    add     ax, word ptr [bp+__offset]
    adc     dx, word ptr [bp+__offset+2]
    jns     LAB_2cc5_12c1
LAB_2cc5_1299:
    mov     ax, 0x1600
LAB_2cc5_129c:
    stc
    jmp     LAB_2cc5_12d5
LAB_2cc5_129f:
    mov     word ptr [bp+var_2], dx
    mov     word ptr [bp+var_4], ax
    mov     dx, cx
    mov     ax, 0x4202
    int     0x21                               ; DOS - 2+ - MOVE FILE READ/WRITE POINTER (LSEEK)
                                               ; AL = method: offset from end of file
    add     ax, word ptr [bp+__offset]
    adc     dx, word ptr [bp+__offset+2]
    jns     LAB_2cc5_12c1
    mov     cx, word ptr [bp+var_2]
    mov     dx, word ptr [bp+var_4]
    mov     ax, 0x4200
    int     0x21                               ; DOS - 2+ - MOVE FILE READ/WRITE POINTER (LSEEK)
                                               ; AL = method: offset from beginning of file
    jmp     LAB_2cc5_1299
LAB_2cc5_12c1:
    mov     dx, word ptr [bp+__offset]
    mov     cx, word ptr [bp+__offset+2]
    mov     al, byte ptr [bp+__whence]
    mov     ah, 0x42
    int     0x21                               ; DOS - 2+ - MOVE FILE READ/WRITE POINTER (LSEEK)
                                               ; AL = method:
                                               ; 0-from beginnig,1-from current,2-from end
    jc      LAB_2cc5_12d5
    and     byte ptr [bx+crtfilehandles], 0xfd
LAB_2cc5_12d5:
    jmp     near ptr __dosretax
_lseek endp

; ssize_t __stdcall16near _write(int __fd, void * __buf, size_t __n)
_write proc near
    var_8      = word ptr   -8
    var_4      = word ptr   -4
    var_2      = word ptr   -2
    __fd       = word ptr    4
    __buf      = word ptr    6
    __n        = dword ptr   8

    push    bp
    mov     bp, sp
    sub     sp, 0x8
    mov     bx, word ptr [bp+__buf]
    cmp     bx, word ptr [word_3EDF2]
    jc      LAB_2cc5_12ee
    mov     ax, 0x900
    stc
LAB_2cc5_12eb:
    jmp     near ptr __dosretax
LAB_2cc5_12ee:
    test    byte ptr [bx+crtfilehandles], 0x20
    jz      LAB_2cc5_1300
    mov     ax, 0x4202
    xor     cx, cx
    mov     dx, cx
    int     0x21                               ; DOS - 2+ - MOVE FILE READ/WRITE POINTER (LSEEK)
                                               ; AL = method: offset from end of file
    jc      LAB_2cc5_12eb
LAB_2cc5_1300:
    test    byte ptr [bx+crtfilehandles], 0x80
    jz      LAB_2cc5_1377
    mov     dx, word ptr [bp+__n]
    push    ds
    pop     es
    xor     ax, ax
    mov     word ptr [bp+var_2], ax
    mov     word ptr [bp+var_4], ax
    cld
    push    di
    push    si
    mov     di, dx
    mov     si, dx
    mov     word ptr [bp+var_8], sp
    mov     cx, word ptr [bp+__n+2]
    jcxz    LAB_2cc5_1379
    mov     al, 0xa
    repne scasb
    jnz     LAB_2cc5_1375
    call    far ptr _stackavail
    cmp     ax, 0xa8
    jbe     LAB_2cc5_137b
    sub     sp, 0x2
    mov     bx, sp
    mov     dx, 0x200
    cmp     ax, 0x228
    jnc     LAB_2cc5_1343
    mov     dx, 0x80
LAB_2cc5_1343:
    sub     sp, dx
    mov     dx, sp
    mov     di, dx
    push    ss
    pop     es
    mov     cx, word ptr [bp+__n+2]
LAB_2cc5_134e:
    lodsb
    cmp     al, 0xa
    jz      LAB_2cc5_135f
LAB_2cc5_1353:
    cmp     di, bx
    jz      LAB_2cc5_1370
LAB_2cc5_1357:
    stosb
    loop    LAB_2cc5_134e
    call    near ptr FUN_2cc5_1380
    jmp     FUN_2cc5_13c0
LAB_2cc5_135f:
    mov     al, 0xd
    cmp     di, bx
    jnz     LAB_2cc5_1368
    call    near ptr FUN_2cc5_1380
LAB_2cc5_1368:
    stosb
    mov     al, 0xa
    inc     word ptr [bp+var_4]
    jmp     LAB_2cc5_1353
LAB_2cc5_1370:
    call    near ptr FUN_2cc5_1380
    jmp     LAB_2cc5_1357
LAB_2cc5_1375:
    pop     si
    pop     di
LAB_2cc5_1377:
    jmp     FUN_2cc5_13ce
LAB_2cc5_1379:
    jmp     FUN_2cc5_13c0
LAB_2cc5_137b:
    xor     ax, ax
    jmp     near ptr __amsg_exit
_write endp

; undefined2 __cdecl16near FUN_2cc5_1380(void)
FUN_2cc5_1380 proc near
    push    ax
    push    bx
    push    cx
    mov     cx, di
    sub     cx, dx
    jcxz    LAB_2cc5_1399
    mov     bx, word ptr [bp+0x6]
    mov     ah, 0x40
    int     0x21                               ; DOS - 2+ - WRITE TO FILE WITH HANDLE
                                               ; BX = file handle, CX = number of bytes to write, DS:DX -> buffer
    jc      LAB_2cc5_139f
    add     word ptr [bp-0x2], ax
    or      ax, ax
    jz      LAB_2cc5_139f
LAB_2cc5_1399:
    pop     cx
    pop     bx
    pop     ax
    mov     di, dx
    ret
LAB_2cc5_139f:
    add     sp, 0x8
    jnc     LAB_2cc5_13a8
    mov     ah, 0x9
    jmp     LAB_2cc5_13c6
LAB_2cc5_13a8:
    test    byte ptr [bx+crtfilehandles], 0x40
    jz      LAB_2cc5_13ba
    mov     bx, word ptr [bp+0x8]
    cmp     byte ptr [bx], 0x1a
    jnz     LAB_2cc5_13ba
    clc
    jmp     LAB_2cc5_13c6
LAB_2cc5_13ba:
    stc
    mov     ax, 0x1c00
    jmp     LAB_2cc5_13c6
FUN_2cc5_1380 endp

; undefined __stdcall16near FUN_2cc5_13c0(void)
FUN_2cc5_13c0 proc near
    mov     ax, word ptr [bp-0x2]
    sub     ax, word ptr [bp-0x4]
LAB_2cc5_13c6:
    mov     sp, word ptr [bp-0x8]
    pop     si
    pop     di
LAB_2cc5_13cb:
    jmp     near ptr __dosretax
FUN_2cc5_13c0 endp

; undefined __stdcall16near FUN_2cc5_13ce(void)
FUN_2cc5_13ce proc near
    mov     cx, word ptr [bp+0xa]
    or      cx, cx
    jnz     LAB_2cc5_13da
    mov     ax, cx
    jmp     near ptr __dosretax
LAB_2cc5_13da:
    mov     dx, word ptr [bp+0x8]
    mov     ah, 0x40
    int     0x21                               ; DOS - 2+ - WRITE TO FILE WITH HANDLE
                                               ; BX = file handle, CX = number of bytes to write, DS:DX -> buffer
    jnc     LAB_2cc5_13e7
    mov     ah, 0x9
    jmp     LAB_2cc5_13cb
LAB_2cc5_13e7:
    or      ax, ax
    jnz     LAB_2cc5_13cb
    test    byte ptr [bx+crtfilehandles], 0x40
    jz      LAB_2cc5_13fc
    mov     bx, dx
    cmp     byte ptr [bx], 0x1a
    jnz     LAB_2cc5_13fc
    clc
    jmp     LAB_2cc5_13cb
LAB_2cc5_13fc:
    stc
    mov     ax, 0x1c00
    jmp     LAB_2cc5_13cb
FUN_2cc5_13ce endp

; int __cdecl16far _stackavail(void)
_stackavail proc far
    pop     cx
    pop     dx
    mov     ax, word ptr [word_3EE24]
    cmp     ax, sp
    jnc     LAB_2cc5_1412
    sub     ax, sp
    neg     ax
LAB_2cc5_140f:
    push    dx
    push    cx
    retf
LAB_2cc5_1412:
    xor     ax, ax
    jmp     LAB_2cc5_140f
_stackavail endp

; undefined __cdecl16far unknown_libname_1(int param_1)
unknown_libname_1 proc far
    param_1    = word ptr    6

    push    bp                                 ; MS Quick C v1.0/v2.01 & MSC v5.1 DOS run-time & graphic
    mov     bp, sp
    mov     bx, word ptr [bp+param_1]
    or      bx, bx
    jz      LAB_2cc5_1424
    or      byte ptr [bx-0x2], 0x1
LAB_2cc5_1424:
    mov     sp, bp
    pop     bp
    retf
unknown_libname_1 endp

; uint * __cdecl16far unknown_libname_2(void)
unknown_libname_2 proc far
    push    bp                                 ; MS Quick C v1.0/v2.01 & MSC v5.1 DOS run-time & graphic
    mov     bp, sp
    push    si
    push    di
    mov     bx, 0x37fe
    cmp     word ptr [bx], 0x0
    jnz     LAB_2cc5_145e
    push    ds
    pop     es
    mov     ax, 0x5
    call    near ptr __amallocbrk
    jnz     LAB_2cc5_1444
    xor     ax, ax
    cwd
    jmp     LAB_2cc5_1468
LAB_2cc5_1444:
    inc     ax
    and     al, 0xfe
    mov     word ptr [word_3EF6E], ax
    mov     word ptr [word_3EF70], ax
    xchg    ax, si
    mov     word ptr [si], 0x1
    add     si, 0x4
    mov     word ptr [si-0x2], 0xfffe
    mov     word ptr [word_3EF74], si
LAB_2cc5_145e:
    mov     cx, word ptr [bp+0x6]
    mov     ax, ds
    mov     es, ax
    call    near ptr __amalloc
LAB_2cc5_1468:
    pop     di
    pop     si
    mov     sp, bp
    pop     bp
    retf
unknown_libname_2 endp
LAB_2cc5_146e:
    jmp     near ptr LAB_2cc5_153f

; uint * __cdecl16near __amalloc(void)
__amalloc proc near
    inc     cx
    jz      LAB_2cc5_146e
    and     cl, 0xfe
    cmp     cx, -0x12
    jnc     LAB_2cc5_146e
    mov     si, word ptr [bx+0x2]
    cld
    lodsw
    mov     di, si
    test    al, 0x1
    jz      LAB_2cc5_14c9
LAB_2cc5_1487:
    dec     ax
    cmp     ax, cx
    jnc     LAB_2cc5_14a1
    mov     dx, ax
    add     si, ax
    lodsw
    test    al, 0x1
    jz      LAB_2cc5_14c9
    add     ax, dx
    add     ax, 0x2
    mov     si, di
    mov     word ptr [si-0x2], ax
    jmp     LAB_2cc5_1487
LAB_2cc5_14a1:
    mov     di, si
    jz      LAB_2cc5_14b1
    add     di, cx
    mov     word ptr [si-0x2], cx
    sub     ax, cx
    dec     ax
    mov     word ptr [di], ax
    jmp     LAB_2cc5_14b6
LAB_2cc5_14b1:
    add     di, cx
    dec     byte ptr [si-0x2]
LAB_2cc5_14b6:
    mov     ax, si
    mov     dx, ds
    mov     cx, ss
    cmp     dx, cx
    jz      LAB_2cc5_14c5
    mov     word ptr es:[word_3EF7C], ds
LAB_2cc5_14c5:
    mov     word ptr [bx+0x2], di
    ret
LAB_2cc5_14c9:
    mov     byte ptr es:[byte_3EF82], 0x2
LAB_2cc5_14cf:
    cmp     ax, 0xfffe
    jz      LAB_2cc5_14f9
    mov     di, si
    add     si, ax
LAB_2cc5_14d8:
    lodsw
    test    al, 0x1
    jz      LAB_2cc5_14cf
    mov     di, si
LAB_2cc5_14df:
    dec     ax
    cmp     ax, cx
    jnc     LAB_2cc5_14a1
    mov     dx, ax
    add     si, ax
    lodsw
    test    al, 0x1
    jz      LAB_2cc5_14cf
    add     ax, dx
    add     ax, 0x2
    mov     si, di
    mov     word ptr [si-0x2], ax
    jmp     LAB_2cc5_14df
LAB_2cc5_14f9:
    mov     ax, word ptr [bx+0x8]
    or      ax, ax
    jz      LAB_2cc5_1504
    mov     ds, ax
    jmp     LAB_2cc5_1518
LAB_2cc5_1504:
    dec     byte ptr es:[byte_3EF82]
    jz      LAB_2cc5_151c
    mov     ax, ds
    mov     di, ss
    cmp     ax, di
    jz      LAB_2cc5_1518
    mov     ds, word ptr es:[word_3EF78]
LAB_2cc5_1518:
    mov     si, word ptr [bx]
    jmp     LAB_2cc5_14d8
LAB_2cc5_151c:
    mov     si, word ptr [bx+0x6]
    xor     ax, ax
    call    near ptr __amlink
    cmp     ax, si
    jz      LAB_2cc5_1535
    and     al, 0x1
    inc     ax
    inc     ax
    cbw
    call    near ptr __amlink
    jz      LAB_2cc5_153f
    dec     byte ptr [di-0x2]
LAB_2cc5_1535:
    call    near ptr __amexpand
    jz      LAB_2cc5_153f
    xchg    ax, si
    dec     si
    dec     si
    jmp     LAB_2cc5_14d8
LAB_2cc5_153f:
    mov     ax, ds
    mov     cx, ss
    cmp     ax, cx
    jz      LAB_2cc5_154b
    mov     word ptr es:[word_3EF7C], ax
LAB_2cc5_154b:
    mov     ax, word ptr [bx]
    mov     word ptr [bx+0x2], ax
    xor     ax, ax
    cwd
    ret
__amalloc endp

; undefined2 __cdecl16near __amexpand(void)
__amexpand proc near
    push    cx
    mov     ax, word ptr [di-0x2]
    test    al, 0x1
    jz      LAB_2cc5_155f
    sub     cx, ax
    dec     cx
LAB_2cc5_155f:
    inc     cx
    inc     cx
    mov     dx, 0x7fff
LAB_2cc5_1564:
    cmp     dx, word ptr es:[word_3EF7E]
    jbe     LAB_2cc5_156f
    shr     dx, 0x1
    jnz     LAB_2cc5_1564
LAB_2cc5_156f:
    mov     ax, cx
    add     ax, si
    jc      LAB_2cc5_158a
    add     ax, dx
    jc      LAB_2cc5_1586
    not     dx
    and     ax, dx
    sub     ax, si
    call    near ptr __amlink
    jnz     LAB_2cc5_158c
    not     dx
LAB_2cc5_1586:
    shr     dx, 0x1
    jnz     LAB_2cc5_156f
LAB_2cc5_158a:
    xor     ax, ax
LAB_2cc5_158c:
    pop     cx
    ret
__amexpand endp

; undefined4 __cdecl16near __amlink(void)
__amlink proc near
    push    dx
    push    cx
    call    near ptr __amallocbrk
    jz      LAB_2cc5_15ad
    push    di
    mov     di, si
    mov     si, ax
    add     si, dx
    mov     word ptr [si-0x2], 0xfffe
    mov     word ptr [bx+0x6], si
    mov     dx, si
    sub     dx, di
    dec     dx
    mov     word ptr [di-0x2], dx
    pop     ax
LAB_2cc5_15ad:
    pop     cx
    pop     dx
    ret
__amlink endp

; undefined __cdecl16near __amallocbrk(void)
__amallocbrk proc near
    push    bx
    push    ax
    xor     dx, dx
    push    ds
    push    dx
    push    dx
    push    ax
    mov     ax, 0x1
    push    ax
    push    es
    pop     ds
    call    far ptr _brkctl
    add     sp, 0x8
    cmp     dx, -0x1
    pop     ds
    pop     dx
    pop     bx
    jz      LAB_2cc5_15d0
    or      dx, dx
LAB_2cc5_15d0:
    ret
__amallocbrk endp
    db 0

; undefined2 __cdecl16far _brkctl(int param_1, int param_2, int param_3)
_brkctl proc far
    param_1    = word ptr    6
    param_2    = word ptr    8
    param_3    = word ptr   10

    push    bp
    mov     bp, sp
    push    si
    push    di
    push    es
    cmp     word ptr [bp+param_3], 0x0
    jnz     LAB_2cc5_1616
    mov     di, 0x360a
    mov     dx, word ptr [bp+param_2]
    mov     ax, word ptr [bp+param_1]
    dec     ax
    jnz     LAB_2cc5_15f1
    call    near ptr FUN_2cc5_1640
    jc      LAB_2cc5_1616
    jmp     LAB_2cc5_1639
LAB_2cc5_15f1:
    mov     si, word ptr [word_3EDCA]
    dec     ax
    jz      LAB_2cc5_1609
    cmp     si, di
    jz      LAB_2cc5_1609
    mov     ax, word ptr [si+0x2]
    mov     word ptr [bp+0xe], ax
    push    si
    call    near ptr FUN_2cc5_1640
    pop     si
    jnc     LAB_2cc5_1639
LAB_2cc5_1609:
    add     si, 0x4
    cmp     si, 0x365a
    jnc     LAB_2cc5_1616
    or      dx, dx
    jnz     LAB_2cc5_161c
LAB_2cc5_1616:
    mov     ax, 0xffff
    cwd
    jmp     LAB_2cc5_1639
LAB_2cc5_161c:
    mov     bx, dx
    add     bx, 0xf
    rcr     bx, 0x1
    mov     cl, 0x3
    shr     bx, cl
    mov     ah, 0x48
    int     0x21                               ; DOS - 2+ - ALLOCATE MEMORY
                                               ; BX = number of 16-byte paragraphs desired
    jc      LAB_2cc5_1616
    xchg    ax, dx
    mov     word ptr [si], ax
    mov     word ptr [si+0x2], dx
    mov     word ptr [word_3EDCA], si
    xor     ax, ax
LAB_2cc5_1639:
    pop     es
    pop     di
    pop     si
    mov     sp, bp
    pop     bp
    retf
_brkctl endp

; undefined __cdecl16near FUN_2cc5_1640(void)
FUN_2cc5_1640 proc near
    mov     cx, word ptr [bp+0xe]
    mov     si, di
LAB_2cc5_1645:
    cmp     word ptr [si+0x2], cx
    jz      LAB_2cc5_1656
    add     si, 0x4
    cmp     si, 0x365a
    jnz     LAB_2cc5_1645
    stc
    jmp     LAB_2cc5_1695
LAB_2cc5_1656:
    mov     bx, dx
    add     bx, word ptr [si]
    jc      LAB_2cc5_1695
    mov     dx, bx
    mov     es, cx
    cmp     si, di
    jnz     LAB_2cc5_166a
    cmp     word ptr [word_3ED74], bx
    jnc     LAB_2cc5_1690
LAB_2cc5_166a:
    add     bx, 0xf
    rcr     bx, 0x1
    shr     bx, 0x1
    shr     bx, 0x1
    shr     bx, 0x1
    cmp     si, di
    jnz     LAB_2cc5_1682
    add     bx, cx
    mov     ax, word ptr [crtpspseg]
    sub     bx, ax
    mov     es, ax
LAB_2cc5_1682:
    mov     ah, 0x4a
    int     0x21                               ; DOS - 2+ - ADJUST MEMORY BLOCK SIZE (SETBLOCK)
                                               ; ES = segment address of block to change
                                               ; BX = new size in paragraphs
    jc      LAB_2cc5_1695
    cmp     si, di
    jnz     LAB_2cc5_1690
    mov     word ptr [word_3ED74], dx
LAB_2cc5_1690:
    xchg    ax, dx
    xchg    word ptr [si], ax
    mov     dx, cx
LAB_2cc5_1695:
    ret
FUN_2cc5_1640 endp

; char * __cdecl16far _strcat(char * __dest, char * __src)
_strcat proc far
    __dest     = word ptr    6
    __src      = word ptr    8

    push    bp
    mov     bp, sp
    mov     dx, di
    mov     bx, si
    mov     ax, ds
    mov     es, ax
    mov     di, word ptr [bp+__dest]
    xor     ax, ax
    mov     cx, 0xffff
    repne scasb
    lea     si, [di-0x1]
    mov     di, word ptr [bp+__src]
    mov     cx, 0xffff
    repne scasb
    not     cx
    sub     di, cx
    xchg    si, di
    mov     ax, word ptr [bp+__dest]
    test    si, 0x1
    jz      LAB_2cc5_16c7
    movsb
    dec     cx
LAB_2cc5_16c7:
    shr     cx, 0x1
    rep movsw
    adc     cx, cx
    rep movsb
    mov     si, bx
    mov     di, dx
    pop     bp
    retf
_strcat endp
    db 0

; char * __cdecl16far _strcpy(char * __dest, char * __src)
_strcpy proc far
    __dest     = word ptr    6
    __src      = word ptr    8

    push    bp
    mov     bp, sp
    mov     dx, di
    mov     bx, si
    mov     si, word ptr [bp+__src]
    mov     di, si
    mov     ax, ds
    mov     es, ax
    xor     ax, ax
    mov     cx, 0xffff
    repne scasb
    not     cx
    mov     di, word ptr [bp+__dest]
    mov     ax, di
    test    al, 0x1
    jz      LAB_2cc5_16fa
    movsb
    dec     cx
LAB_2cc5_16fa:
    shr     cx, 0x1
    rep movsw
    adc     cx, cx
    rep movsb
    mov     si, bx
    mov     di, dx
    pop     bp
    retf
_strcpy endp

; int __cdecl16far _strcmp(char * __s1, char * __s2)
_strcmp proc far
    __s1       = word ptr    6
    __s2       = word ptr    8

    push    bp
    mov     bp, sp
    mov     dx, di
    mov     bx, si
    mov     ax, ds
    mov     es, ax
    mov     si, word ptr [bp+__s1]
    mov     di, word ptr [bp+__s2]
    xor     ax, ax
    mov     cx, 0xffff
    repne scasb
    not     cx
    sub     di, cx
    repe cmpsb
    jz      LAB_2cc5_172d
    sbb     ax, ax
    sbb     ax, 0xffff
LAB_2cc5_172d:
    mov     si, bx
    mov     di, dx
    pop     bp
    retf
_strcmp endp
    db 0

; size_t __cdecl16far _strlen(char * __s)
_strlen proc far
    __return_storage_ptr__ = word ptr    6
    __s        = word ptr    8

    push    bp
    mov     bp, sp
    mov     dx, di
    mov     ax, ds
    mov     es, ax
    mov     di, word ptr [bp+__return_storage_ptr__]
    xor     ax, ax
    mov     cx, 0xffff
    repne scasb
    not     cx
    dec     cx
    xchg    ax, cx
    mov     di, dx
    pop     bp
    retf
_strlen endp
    db 0

; byte * __stdcall16near _itoa(undefined2 param_1, int param_2, byte * param_3, uint param_4)
_itoa proc near
    param_1    = word ptr    4
    param_2    = word ptr    6
    param_3    = word ptr    8
    param_4    = word ptr   10

    push    bp
    mov     bp, sp
    push    si
    push    di
    mov     bl, 0x1
    mov     cx, word ptr [bp+param_4]
    mov     ax, word ptr [bp+param_2]
    xor     dx, dx
    cmp     cx, 0xa
    jnz     LAB_2cc5_1765
    cwd
LAB_2cc5_1765:
    mov     di, word ptr [bp+param_3]
    jmp     near ptr __cxtoa
_itoa endp
    db 0

; undefined __stdcall16near _ultoa(void)
_ultoa proc near
    push    bp
    mov     bp, sp
    push    si
    push    di
    mov     bl, 0x0
    jmp     near ptr __cltoasub
_ultoa endp

; void _abort(void)
_abort proc near
    push    bp
    mov     bp, sp
    mov     ax, 0xa
    push    ax
    call    far ptr __NMSG_WRITE
    mov     ax, 0x16
    push    ax                                 ; int
    call    far ptr _raise
    mov     ax, 0x3
    push    ax
    call    far ptr libsub_quit_to_dos
_abort endp
    mov     sp, bp
    pop     bp
    retf

; int __cdecl16far _isatty(int __fd)
_isatty proc far
    __fd       = word ptr    6

    push    bp
    mov     bp, sp
    mov     bx, word ptr [bp+__fd]
    cmp     bx, word ptr [word_3EDF2]
    jge     LAB_2cc5_17b5
    cmp     bx, 0x0
    jl      LAB_2cc5_17b5
    test    byte ptr [bx+crtfilehandles], 0x40
    jz      LAB_2cc5_17b5
    mov     ax, 0x1
    jmp     LAB_2cc5_17b7
LAB_2cc5_17b5:
    xor     ax, ax
LAB_2cc5_17b7:
    mov     sp, bp
    pop     bp
    retf
_isatty endp
    db 0

; undefined2 __cdecl16far _int86(byte param_1, int param_2, undefined2 * param_3)
_int86 proc far
    var_E      = dword ptr -14
    var_A      = byte ptr  -10
    var_9      = byte ptr   -9
    var_8      = byte ptr   -8
    var_7      = byte ptr   -7
    var_6      = byte ptr   -6
    param_1    = byte ptr    6
    param_2    = word ptr    8
    param_3    = word ptr   10

    push    bp
    mov     bp, sp
    push    si
    push    di
    sub     sp, 0xa
    mov     byte ptr [bp+var_A], 0xcd
    mov     ax, word ptr [bp+param_1]
    mov     byte ptr [bp+var_9], al
    cmp     al, 0x25
    jz      LAB_2cc5_17dc
    cmp     al, 0x26
    jz      LAB_2cc5_17dc
    mov     byte ptr [bp+var_8], 0xcb
    jmp     LAB_2cc5_17e8
LAB_2cc5_17dc:
    mov     byte ptr [bp+var_6], 0xcb
    mov     byte ptr [bp+var_7], 0x44
    mov     byte ptr [bp+var_8], 0x44
LAB_2cc5_17e8:
    mov     word ptr [bp+var_E+2], ss
    lea     ax, [bp+var_A]
    mov     word ptr [bp+var_E], ax
    mov     di, word ptr [bp+param_2]
    mov     ax, word ptr [di]
    mov     bx, word ptr [di+0x2]
    mov     cx, word ptr [di+0x4]
    mov     dx, word ptr [di+0x6]
    mov     si, word ptr [di+0x8]
    mov     di, word ptr [di+0xa]
    push    bp
    call    dword ptr [bp+var_E]
    pop     bp
    cld
    push    di
    mov     di, word ptr [bp+0xa]
    mov     word ptr [di], ax
    mov     word ptr [di+0x2], bx
    mov     word ptr [di+0x4], cx
    mov     word ptr [di+0x6], dx
    mov     word ptr [di+0x8], si
    pop     word ptr [di+0xa]
    jc      LAB_2cc5_1826
    xor     si, si
    jmp     LAB_2cc5_1830
LAB_2cc5_1826:
    call    far ptr __maperror
    mov     si, 0x1
    mov     ax, word ptr [di]
LAB_2cc5_1830:
    mov     word ptr [di+0xc], si
    add     sp, 0xa
    pop     di
    pop     si
    mov     sp, bp
    pop     bp
    retf
_int86 endp

; int __cdecl16far _sprintf(char * __s, char * __format, ...)
_sprintf proc far
    var_C      = byte ptr  -12
    __s        = word ptr    6
    __format   = word ptr    8

    push    bp
    mov     bp, sp
    sub     sp, 0xe
    push    di
    push    si
    lea     ax, [bp+var_C]
    mov     di, ax
    lea     ax, [bp+0xa]
    mov     word ptr [bp+var_C+10], ax
    mov     byte ptr [di+0x6], 0x42
    mov     ax, word ptr [bp+__s]
    mov     word ptr [di+0x4], ax
    mov     word ptr [di], ax
    mov     word ptr [di+0x2], 0x7fff
    lea     ax, [bp+0xa]
    push    ax
    push    word ptr [bp+__format]
    push    di
    call    far ptr __output
    add     sp, 0x6
    mov     si, ax
    dec     word ptr [di+0x2]
    js      LAB_2cc5_1882
    sub     al, al
    mov     bx, word ptr [di]
    inc     word ptr [di]
    mov     byte ptr [bx], al
    jmp     LAB_2cc5_188e
    db 0x90
LAB_2cc5_1882:
    push    di                                 ; FILE *
    sub     ax, ax
    push    ax                                 ; int
    call    far ptr __flsbuf
    add     sp, 0x4
LAB_2cc5_188e:
    mov     ax, si
    pop     si
    pop     di
    mov     sp, bp
    pop     bp
    retf
_sprintf endp

; int __cdecl16far _stricmp(byte * param_1, byte * param_2)
_stricmp proc far
    param_1    = word ptr    6
    param_2    = word ptr    8

    push    bp
    mov     bp, sp
    mov     dx, si
    mov     si, word ptr [bp+param_2]
    mov     bx, word ptr [bp+param_1]
    mov     al, 0xff
LAB_2cc5_18a3:
    or      al, al
    jz      LAB_2cc5_18d3
    lodsb
    mov     ah, byte ptr [bx]
    inc     bx
    cmp     ah, al
    jz      LAB_2cc5_18a3
    sub     al, 0x41
    cmp     al, 0x1a
    sbb     cl, cl
    and     cl, 0x20
    add     al, cl
    add     al, 0x41
    xchg    al, ah
    sub     al, 0x41
    cmp     al, 0x1a
    sbb     cl, cl
    and     cl, 0x20
    add     al, cl
    add     al, 0x41
    cmp     al, ah
    jz      LAB_2cc5_18a3
    sbb     al, al
    sbb     al, 0xff
LAB_2cc5_18d3:
    cbw
    mov     si, dx
    pop     bp
    retf
_stricmp endp

; byte * __cdecl16far __cltoasub(void)
__cltoasub proc far
    mov     cx, word ptr [bp+0xc]
    mov     ax, word ptr [bp+0x6]
    mov     dx, word ptr [bp+0x8]
    mov     di, word ptr [bp+0xa]
__cxtoa:
    push    di
    push    ds
    pop     es
    cld
    xchg    ax, bx
    or      al, al
    jz      LAB_2cc5_1900
    cmp     cx, 0xa
    jnz     LAB_2cc5_1900
    or      dx, dx
    jns     LAB_2cc5_1900
    mov     al, 0x2d
    stosb
    neg     bx
    adc     dx, 0x0
    neg     dx
LAB_2cc5_1900:
    mov     si, di
LAB_2cc5_1902:
    xchg    ax, dx
    xor     dx, dx
    or      ax, ax
    jz      LAB_2cc5_190b
    div     cx
LAB_2cc5_190b:
    xchg    ax, bx
    div     cx
    xchg    ax, dx
    xchg    bx, dx
    add     al, 0x30
    cmp     al, 0x39
    jbe     LAB_2cc5_1919
    add     al, 0x27
LAB_2cc5_1919:
    stosb
    mov     ax, dx
    or      ax, bx
    jnz     LAB_2cc5_1902
    mov     byte ptr [di], al
LAB_2cc5_1922:
    dec     di
    lodsb
    xchg    byte ptr [di], al
    mov     byte ptr [si-0x1], al
    lea     ax, [si+0x1]
    cmp     ax, di
    jc      LAB_2cc5_1922
    pop     ax
    pop     di
    pop     si
    mov     sp, bp
    pop     bp
    retf
__cltoasub endp
    db 0

; int __cdecl16far _abs(int __x)
_abs proc far
    __x        = word ptr    6

    push    bp
    mov     bp, sp
    cmp     word ptr [bp+__x], 0x0
    jl      LAB_2cc5_1946
    mov     ax, word ptr [bp+__x]
    jmp     LAB_2cc5_194b
LAB_2cc5_1946:
    mov     ax, word ptr [bp+__x]
    neg     ax
LAB_2cc5_194b:
    pop     bp
    retf
_abs endp
    db 0x90
    dw LAB_2cc5_19e5
    dw LAB_2cc5_19d6
    dw LAB_2cc5_19ce
    dw LAB_2cc5_19d6
    dw LAB_2cc5_19d6
    dw LAB_2cc5_19d6

; int __cdecl16far _raise(int __sig)
_raise proc far
    var_4      = dword ptr  -4
    __sig      = word ptr    6

    push    bp
    mov     bp, sp
    sub     sp, 0x4
    mov     ax, word ptr [bp+__sig]
    cmp     ax, 0x2
    jnz     LAB_2cc5_1971
    clc
    int     0x23                               ; DOS - CONTROL "C" EXIT ADDRESS
                                               ; Return: return via RETF 2 with CF set
                                               ; DOS will abort program with errorlevel 0
                                               ; else
                                               ; interrupted DOS call continues
    jnc     LAB_2cc5_19e5
    mov     ah, 0x4c
    int     0x21                               ; DOS - 2+ - QUIT WITH EXIT CODE (EXIT)
                                               ; AL = exit code
LAB_2cc5_1971:
    cmp     ax, 0x8
    jnz     LAB_2cc5_1980
    mov     bx, word ptr [dword_40C1E]
; <REPLACE>
    or      bx, word ptr [dword_40C1E+2]
; </REPLACE>
;    or      bx, word ptr [dword_40C1E]
    jz      LAB_2cc5_19df
LAB_2cc5_1980:
    call    far ptr __sigentry
    jc      LAB_2cc5_19df
    mov     ax, word ptr [bx]
    mov     dx, word ptr [bx+0x2]
    or      dx, dx
    jnz     LAB_2cc5_19a2
    cmp     ax, 0x1
    ja      LAB_2cc5_19a2
    or      ax, ax
    jnz     LAB_2cc5_19e5
    mov     bx, cx
    shl     bx, 0x1
    jmp     word ptr cs:[bx+0x194e]
LAB_2cc5_19a2:
    mov     word ptr [bp+var_4], ax
    mov     word ptr [bp+var_4+2], dx
    push    es
    push    bp
    push    di
    push    si
    mov     cx, word ptr [bp+__sig]
    cmp     cx, 0x8
    jz      LAB_2cc5_19bb
    xor     ax, ax
    mov     word ptr [bx], ax
    mov     word ptr [bx+0x2], ax
LAB_2cc5_19bb:
    mov     ax, 0x8c
    push    ax
    push    cx
    cld
    call    dword ptr [bp+var_4]
    add     sp, 0x4
    pop     si
    pop     di
    pop     bp
    pop     es
    jmp     LAB_2cc5_19e5
    db 0x90
LAB_2cc5_19ce:
    mov     ax, 0x8c
    call    dword ptr ss:[dword_40C26]
LAB_2cc5_19d6:
    mov     ax, 0x3
    push    ax
    call    far ptr libsub_quit_to_dos
LAB_2cc5_19df:
    mov     ax, 0xffff
    jmp     LAB_2cc5_19e7
    db 0x90
LAB_2cc5_19e5:
    xor     ax, ax
LAB_2cc5_19e7:
    mov     sp, bp
    pop     bp
    retf
_raise endp
    db 0

; void __cdecl16far _srand(uint __seed)
_srand proc far
    __seed     = word ptr    6

    push    bp
    mov     bp, sp
    mov     ax, word ptr [bp+__seed]
    mov     word ptr [word_3F0A0], ax
    mov     word ptr [word_3F0A2], 0x0
    pop     bp
    retf
_srand endp
    db 0x90

; int __cdecl16far _rand(void)
_rand proc far
    mov     ax, 0x43fd
    mov     dx, 0x3
    push    dx
    push    ax
    push    word ptr [word_3F0A2]
    push    word ptr [word_3F0A0]
    call    far ptr __aFlmul
    add     ax, 0x9ec3
    adc     dx, 0x26
    mov     word ptr [word_3F0A0], ax
    mov     word ptr [word_3F0A2], dx
    mov     ax, dx
    and     ah, 0x7f
    retf
_rand endp
unk_sigdata:
    db 0x02, 0x04, 0x08, 0x0B, 0x0F, 0x16

; __sighandler_t __cdecl16far _signal(int __sig, __sighandler_t __handler)
_signal proc far
    var_4      = word ptr   -4
    var_2      = word ptr   -2
    __sig      = word ptr    6
    __handler  = word ptr    8

    push    bp
    mov     bp, sp
    sub     sp, 0x4
    mov     ax, word ptr [bp+__sig]
    cmp     ax, 0x8
    jnz     LAB_2cc5_1a4b
    mov     bx, word ptr [dword_40C1E]
; <REPLACE>
    or      bx, word ptr [dword_40C1E+2]
; </REPLACE>
;    or      bx, word ptr [dword_40C1E]
    jnz     LAB_2cc5_1a4b
LAB_2cc5_1a44:
    mov     ax, 0x1600
    stc
    jmp     near ptr __dosretax
LAB_2cc5_1a4b:
    call    far ptr __sigentry
    jc      LAB_2cc5_1a44
    mov     ax, word ptr [bx]
    mov     word ptr [bp+var_2], ax
    mov     ax, word ptr [bx+0x2]
    mov     word ptr [bp+var_4], ax
    mov     ax, word ptr [bp+__handler]
    mov     dx, word ptr [bp+0xa]
    mov     word ptr [bx], ax
    mov     word ptr [bx+0x2], dx
    mov     cx, word ptr [bp+__sig]
    cmp     cx, 0x2
    jnz     LAB_2cc5_1a9c
    or      dx, dx
    jnz     LAB_2cc5_1a78
    or      ax, ax
    jz      LAB_2cc5_1a9c
LAB_2cc5_1a78:
    cmp     word ptr [word_3EF98], 0x0
    jnz     LAB_2cc5_1a9c
    push    bx
    mov     al, 0x23
    mov     ah, 0x35
    int     0x21                               ; DOS - 2+ - GET INTERRUPT VECTOR
                                               ; AL = interrupt number
                                               ; Return: ES:BX = value of interrupt vector
    mov     word ptr [word_3EF98], es
    mov     word ptr [word_3EF9A], bx
    pop     bx
    mov     dx, 0x1af7
    push    ds
    push    cs
    pop     ds
    mov     al, 0x23
    mov     ah, 0x25
    int     0x21                               ; DOS - SET INTERRUPT VECTOR
                                               ; AL = interrupt number
                                               ; DS:DX = new vector to be used for specified interrupt
    pop     ds
LAB_2cc5_1a9c:
    cmp     cx, 0x8
    jnz     LAB_2cc5_1ac5
    mov     ax, 0x1b7b
    mov     dx, word ptr [bx+0x2]
    or      dx, dx
    jnz     LAB_2cc5_1abc
    mov     cx, word ptr [bx]
    cmp     cx, 0x2
    jnc     LAB_2cc5_1abc
    mov     ax, 0x1b76
    or      cx, cx
    jz      LAB_2cc5_1abc
    mov     ax, 0x1b75
LAB_2cc5_1abc:
    mov     dx, cs
    mov     bx, 0x3
    call    dword ptr [dword_40C1E]
LAB_2cc5_1ac5:
    mov     ax, word ptr [bp+var_2]
    mov     dx, word ptr [bp+var_4]
    mov     sp, bp
    pop     bp
    retf
_signal endp

; undefined __cdecl16far __sigentry(void)
__sigentry proc far
    push    bp
    mov     bp, sp
    lea     bx, [(unk_sigdata+5)]
    mov     cx, 0x6
LAB_2cc5_1ad9:
    cmp     byte ptr cs:[bx], al
    jz      LAB_2cc5_1ae5
    dec     bx
    loop    LAB_2cc5_1ad9
    stc
    jmp     LAB_2cc5_1af3
    db 0x90
LAB_2cc5_1ae5:
    dec     cx
    mov     ax, cx
    shl     ax, 0x1
    shl     ax, 0x1
    lea     bx, [word_3F0A4]
    add     bx, ax
    clc
LAB_2cc5_1af3:
    mov     sp, bp
    pop     bp
    retf
__sigentry endp
    push    ax
    lahf
    push    ax
    push    ds
    push    dx
; <REPLACE>
    mov     ax, seg dseg
; </REPLACE>
;    mov     ax, 0x3b77
    mov     ds, ax
    cmp     word ptr [word_3EE14], 0x0
    jnz     LAB_2cc5_1b1c
    mov     ax, word ptr [word_3F0A4]
    mov     dx, word ptr [word_3F0A6]
    or      dx, dx
    jnz     LAB_2cc5_1b49
    cmp     ax, 0x1
    ja      LAB_2cc5_1b49
    or      ax, ax
    jnz     LAB_2cc5_1b6e
LAB_2cc5_1b1c:
    sub     sp, 0x4
    push    bp
    mov     bp, sp
    add     bp, 0x2
    mov     al, 0x4
LAB_2cc5_1b27:
    mov     dx, word ptr [bp+0x4]
    mov     word ptr [bp+0x0], dx
    inc     bp
    inc     bp
    dec     al
    cmp     al, 0x0
    jnz     LAB_2cc5_1b27
    mov     ax, word ptr [word_3EF9A]
    mov     word ptr [bp+0x0], ax
    mov     ax, word ptr [word_3EF98]
    mov     word ptr [bp+0x2], ax
    pop     bp
    pop     dx
    pop     ds
    pop     ax
    sahf
    pop     ax
    stc
    retf
LAB_2cc5_1b49:
    mov     word ptr [dword_3F0BC], ax
    mov     word ptr [dword_3F0BC+2], dx
    push    es
    push    bp
    push    di
    push    si
    push    cx
    push    bx
    xor     ax, ax
    mov     word ptr [word_3F0A4], ax
    mov     word ptr [word_3F0A6], ax
    mov     ax, 0x2
    push    ax
    cld
    call    dword ptr [dword_3F0BC]
    pop     ax
    pop     bx
    pop     cx
    pop     si
    pop     di
    pop     bp
    pop     es
LAB_2cc5_1b6e:
    pop     dx
    pop     ds
    pop     ax
    sahf
    pop     ax
    clc
    retf
    retf
    jmp     ss:[dword_40C26]
    push    bx
    push    cx
    push    dx
    push    es
    xor     ah, ah
    push    ax
    mov     ax, 0x8
    push    ax
    call    far ptr __sigentry
    push    ss
    pop     ds
    call    dword ptr [bx]
    add     sp, 0x4
    pop     es
    pop     dx
    pop     cx
    pop     bx
    retf
    db 0
    jmp     far ptr __aFldiv
    jmp     far ptr unknown_libname_3
    jmp     far ptr __aFlmul
    jmp     far ptr __aFFblmul
    jmp     far ptr unknown_libname_4
    jmp     far ptr __aFlshr
    jmp     far ptr __aFuldiv
    jmp     far ptr unknown_libname_5

; char * __cdecl16far _strrchr(char * __s, int __c)
_strrchr proc far
    __s        = word ptr    6
    __c        = word ptr    8

    push    bp
    mov     bp, sp
    push    di
    push    ds
    pop     es
    mov     di, word ptr [bp+__s]
    xor     ax, ax
    mov     cx, 0xffff
    repne scasb
    inc     cx
    neg     cx
    dec     di
    mov     al, byte ptr [bp+__c]
    std
    repne scasb
    inc     di
    cmp     byte ptr [di], al
    jz      LAB_2cc5_1be3
    xor     ax, ax
    jmp     LAB_2cc5_1be5
LAB_2cc5_1be3:
    mov     ax, di
LAB_2cc5_1be5:
    cld
    pop     di
    mov     sp, bp
    pop     bp
    retf
_strrchr endp
    db 0

; undefined4 __stdcall16far __aFldiv(uint param_1, uint param_2, uint param_3, uint param_4)
__aFldiv proc far
    param_1    = word ptr    6
    param_2    = word ptr    8
    param_3    = word ptr   10
    param_4    = word ptr   12

    push    bp
    mov     bp, sp
    push    di
    push    si
    push    bx
    xor     di, di
    mov     ax, word ptr [bp+param_2]
    or      ax, ax
    jge     LAB_2cc5_1c0c
    inc     di
    mov     dx, word ptr [bp+param_1]
    neg     ax
    neg     dx
    sbb     ax, 0x0
    mov     word ptr [bp+param_2], ax
    mov     word ptr [bp+param_1], dx
LAB_2cc5_1c0c:
    mov     ax, word ptr [bp+param_4]
    or      ax, ax
    jge     LAB_2cc5_1c24
    inc     di
    mov     dx, word ptr [bp+param_3]
    neg     ax
    neg     dx
    sbb     ax, 0x0
    mov     word ptr [bp+param_4], ax
    mov     word ptr [bp+param_3], dx
LAB_2cc5_1c24:
    or      ax, ax
    jnz     LAB_2cc5_1c3d
    mov     cx, word ptr [bp+param_3]
    mov     ax, word ptr [bp+param_2]
    xor     dx, dx
    div     cx
    mov     bx, ax
    mov     ax, word ptr [bp+param_1]
    div     cx
    mov     dx, bx
    jmp     LAB_2cc5_1c75
LAB_2cc5_1c3d:
    mov     bx, ax
    mov     cx, word ptr [bp+param_3]
    mov     dx, word ptr [bp+param_2]
    mov     ax, word ptr [bp+param_1]
LAB_2cc5_1c48:
    shr     bx, 0x1
    rcr     cx, 0x1
    shr     dx, 0x1
    rcr     ax, 0x1
    or      bx, bx
    jnz     LAB_2cc5_1c48
    div     cx
    mov     si, ax
    mul     word ptr [bp+param_4]
    xchg    ax, cx
    mov     ax, word ptr [bp+param_3]
    mul     si
    add     dx, cx
    jc      LAB_2cc5_1c71
    cmp     dx, word ptr [bp+param_2]
    ja      LAB_2cc5_1c71
    jc      LAB_2cc5_1c72
    cmp     ax, word ptr [bp+param_1]
    jbe     LAB_2cc5_1c72
LAB_2cc5_1c71:
    dec     si
LAB_2cc5_1c72:
    xor     dx, dx
    xchg    ax, si
LAB_2cc5_1c75:
    dec     di
    jnz     LAB_2cc5_1c7f
    neg     dx
    neg     ax
    sbb     dx, 0x0
LAB_2cc5_1c7f:
    pop     bx
    pop     si
    pop     di
    mov     sp, bp
    pop     bp
    retf    0x8
__aFldiv endp

; long __stdcall16far __aFlmul(uint param_1, int param_2, uint param_3, int param_4)
__aFlmul proc far
    param_1    = word ptr    6
    param_2    = word ptr    8
    param_3    = word ptr   10
    param_4    = word ptr   12

    push    bp
    mov     bp, sp
    mov     ax, word ptr [bp+param_2]
    mov     bx, word ptr [bp+param_4]
    or      bx, ax
    mov     bx, word ptr [bp+param_3]
    jnz     LAB_2cc5_1ca3
; If both high words are 
; 0, do simple multipl.  
    mov     ax, word ptr [bp+param_1]
    mul     bx
    mov     sp, bp
    pop     bp
    retf    0x8
LAB_2cc5_1ca3:
    mul     bx
    mov     cx, ax
    mov     ax, word ptr [bp+param_1]
    mul     word ptr [bp+param_4]
    add     cx, ax
    mov     ax, word ptr [bp+param_1]
    mul     bx
    add     dx, cx
    mov     sp, bp
    pop     bp
    retf    0x8
__aFlmul endp

; undefined __cdecl16far __aFlshr(void)
__aFlshr proc far
    xor     ch, ch
    jcxz    LAB_2cc5_1cc6
LAB_2cc5_1cc0:
    sar     dx, 0x1
    rcr     ax, 0x1
    loop    LAB_2cc5_1cc0
LAB_2cc5_1cc6:
    retf
__aFlshr endp
    db 0

; undefined __stdcall16far unknown_libname_3(uint * param_1, uint param_2, uint param_3)
unknown_libname_3 proc far
    param_1    = word ptr    6
    param_2    = word ptr    8
    param_3    = word ptr   10

    push    bp                                 ; MS Quick C v1.0/v2.01 & MSC v5.1 DOS run-time & graphic
    mov     bp, sp
    mov     bx, word ptr [bp+param_1]
    push    word ptr [bp+param_3]
    push    word ptr [bp+param_2]
    push    word ptr [bx+0x2]
    push    word ptr [bx]
    call    far ptr __aFldiv
    mov     bx, word ptr [bp+param_1]
    mov     word ptr [bx+0x2], dx
    mov     word ptr [bx], ax
    mov     sp, bp
    pop     bp
    retf    0x6
unknown_libname_3 endp

; undefined __stdcall16far __aFFblmul(uint * param_1, uint param_2, int param_3)
__aFFblmul proc far
    param_1    = word ptr    6
    param_2    = word ptr    8
    param_3    = word ptr   10

    push    bp
    mov     bp, sp
    mov     bx, word ptr [bp+param_1]
    push    word ptr [bp+param_3]
    push    word ptr [bp+param_2]
    push    word ptr [bx+0x2]
    push    word ptr [bx]
    call    far ptr __aFlmul
    mov     bx, word ptr [bp+param_1]
    mov     word ptr [bx], ax
    mov     word ptr [bx+0x2], dx
    mov     sp, bp
    pop     bp
    retf    0x6
__aFFblmul endp

; undefined __stdcall16far unknown_libname_4(undefined2 * param_1)
unknown_libname_4 proc far
    param_1    = word ptr    6

    push    bp                                 ; MS Quick C v1.0/v2.01 & MSC v5.1 DOS run-time & graphic
    mov     bp, sp
    mov     bx, word ptr [bp+param_1]
    mov     ax, word ptr [bx]
    mov     dx, word ptr [bx+0x2]
    mov     cx, word ptr [bp+0x8]
    call    far ptr __aFlshr
    mov     bx, word ptr [bp+param_1]
    mov     word ptr [bx], ax
    mov     word ptr [bx+0x2], dx
    mov     sp, bp
    pop     bp
    retf    0x4
unknown_libname_4 endp
    db 0

; undefined __stdcall16far unknown_libname_5(uint * param_1, uint param_2, uint param_3)
unknown_libname_5 proc far
    param_1    = word ptr    6
    param_2    = word ptr    8
    param_3    = word ptr   10

    push    bp                                 ; MS Quick C v1.0/v2.01 & MSC v5.1 DOS run-time & graphic
    mov     bp, sp
    mov     bx, word ptr [bp+param_1]
    push    word ptr [bp+param_3]
    push    word ptr [bp+param_2]
    push    word ptr [bx+0x2]
    push    word ptr [bx]
    call    far ptr __aFuldiv
    mov     bx, word ptr [bp+param_1]
    mov     word ptr [bx+0x2], dx
    mov     word ptr [bx], ax
    mov     sp, bp
    pop     bp
    retf    0x6
unknown_libname_5 endp

; undefined4 __stdcall16far __aFuldiv(uint param_1, uint param_2, uint param_3, uint param_4)
__aFuldiv proc far
    param_1    = word ptr    6
    param_2    = word ptr    8
    param_3    = word ptr   10
    param_4    = word ptr   12

    push    bp
    mov     bp, sp
    push    bx
    push    si
    mov     ax, word ptr [bp+param_4]
    or      ax, ax
    jnz     LAB_2cc5_1d77
    mov     cx, word ptr [bp+param_3]
    mov     ax, word ptr [bp+param_2]
    xor     dx, dx
    div     cx
    mov     bx, ax
    mov     ax, word ptr [bp+param_1]
    div     cx
    mov     dx, bx
    jmp     LAB_2cc5_1daf
LAB_2cc5_1d77:
    mov     cx, ax
    mov     bx, word ptr [bp+param_3]
    mov     dx, word ptr [bp+param_2]
    mov     ax, word ptr [bp+param_1]
LAB_2cc5_1d82:
    shr     cx, 0x1
    rcr     bx, 0x1
    shr     dx, 0x1
    rcr     ax, 0x1
    or      cx, cx
    jnz     LAB_2cc5_1d82
    div     bx
    mov     si, ax
    mul     word ptr [bp+param_4]
    xchg    ax, cx
    mov     ax, word ptr [bp+param_3]
    mul     si
    add     dx, cx
    jc      LAB_2cc5_1dab
    cmp     dx, word ptr [bp+param_2]
    ja      LAB_2cc5_1dab
    jc      LAB_2cc5_1dac
    cmp     ax, word ptr [bp+param_1]
    jbe     LAB_2cc5_1dac
LAB_2cc5_1dab:
    dec     si
LAB_2cc5_1dac:
    xor     dx, dx
    xchg    ax, si
LAB_2cc5_1daf:
    pop     si
    pop     bx
    mov     sp, bp
    pop     bp
    retf    0x8
__aFuldiv endp

seg010 ends
end start
