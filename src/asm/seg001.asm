; Generated by restunts-export.py (Ghidra)
.8086
.model medium

include seg001.inc

seg001 segment byte public use16 'STUNTSC'
    assume cs:seg001, es:nothing, ss:nothing, ds:dseg

; void __cdecl16far opponent_op(void)
opponent_op_asm_ proc far
    var_40     = word ptr  -64
    var_3E     = word ptr  -62
    var_3C     = word ptr  -60
    var_3A     = word ptr  -58
    var_38     = word ptr  -56
    var_36     = word ptr  -54
    var_34     = word ptr  -52
    var_32     = word ptr  -50
    var_30     = word ptr  -48
    var_2E     = word ptr  -46
    var_2C     = word ptr  -44
    var_2A     = word ptr  -42
    var_28     = word ptr  -40
    var_26     = word ptr  -38
    var_24     = word ptr  -36
    var_22     = word ptr  -34
    var_20     = byte ptr  -32
    var_1C     = word ptr  -28
    var_1A     = word ptr  -26
    var_18     = word ptr  -24
    var_16     = word ptr  -22
    var_14     = word ptr  -20
    var_12     = word ptr  -18
    var_10     = word ptr  -16
    var_E      = byte ptr  -14
    var_C      = word ptr  -12
    var_A      = word ptr  -10
    var_8      = word ptr   -8
    var_6      = word ptr   -6

    push    bp
    mov     bp, sp
    sub     sp, 0x40
    push    di
    push    si
    cmp     word ptr [framespersec], 0x14
    jnz     LAB_1471_001e
    mov     word ptr [bp+var_14], 0x8
    mov     word ptr [bp+var_10], 0x1
    jmp     LAB_1471_0028
    db 0x90
LAB_1471_001e:
    mov     word ptr [bp+var_14], 0x10
    mov     word ptr [bp+var_10], 0x2
LAB_1471_0028:
    cmp     word ptr [state.opponentstate.car_36MwhlAngle], 0x0
    jnz     LAB_1471_0036
    cmp     byte ptr [state.game_inputmode], 0x2
    jnz     LAB_1471_003c
LAB_1471_0036:
    mov     byte ptr [bp+var_20], 0x1
    jmp     LAB_1471_0040
LAB_1471_003c:
    mov     byte ptr [bp+var_20], 0x0
LAB_1471_0040:
    mov     ax, word ptr [state.opponentstate.car_posWorld1.lx]
    mov     dx, word ptr [state.opponentstate.car_posWorld1.lx+2]
    mov     cl, 0x6
LAB_1471_0049:
    sar     dx, 0x1
    rcr     ax, 0x1
    dec     cl
    jnz     LAB_1471_0049
    mov     word ptr [bp+var_28], ax
    mov     ax, word ptr [state.opponentstate.car_posWorld1.ly]
    mov     dx, word ptr [state.opponentstate.car_posWorld1.ly+2]
    mov     cl, 0x6
LAB_1471_005d:
    sar     dx, 0x1
    rcr     ax, 0x1
    dec     cl
    jnz     LAB_1471_005d
    mov     word ptr [bp+var_2A], ax
    mov     ax, word ptr [state.opponentstate.car_posWorld1.lz]
    mov     dx, word ptr [state.opponentstate.car_posWorld1.lz+2]
    mov     cl, 0x6
LAB_1471_0071:
    sar     dx, 0x1
    rcr     ax, 0x1
    dec     cl
    jnz     LAB_1471_0071
    mov     word ptr [bp+var_36], ax
    mov     ax, word ptr [state.playerstate.car_posWorld1.lx]
    mov     dx, word ptr [state.playerstate.car_posWorld1.lx+2]
    mov     cl, 0x6
LAB_1471_0085:
    sar     dx, 0x1
    rcr     ax, 0x1
    dec     cl
    jnz     LAB_1471_0085
    mov     word ptr [bp+var_34], ax
    mov     ax, word ptr [state.playerstate.car_posWorld1.ly]
    mov     dx, word ptr [state.playerstate.car_posWorld1.ly+2]
    mov     cl, 0x6
LAB_1471_0099:
    sar     dx, 0x1
    rcr     ax, 0x1
    dec     cl
    jnz     LAB_1471_0099
    mov     word ptr [bp+var_3E], ax
    mov     ax, word ptr [state.playerstate.car_posWorld1.lz]
    mov     dx, word ptr [state.playerstate.car_posWorld1.lz+2]
    mov     cl, 0x6
LAB_1471_00ad:
    sar     dx, 0x1
    rcr     ax, 0x1
    dec     cl
    jnz     LAB_1471_00ad
    mov     word ptr [bp+var_40], ax
    mov     byte ptr [state.opponentstate.field_CF], 0x0
    mov     byte ptr [state.field_45E], 0x0
    mov     ax, 0x1
    push    ax
    push    word ptr [state.opponentstate.car_rotate.vx]
    push    word ptr [state.opponentstate.car_rotate.vy]
    push    word ptr [state.opponentstate.car_rotate.vz]
    call    far ptr mat_rot_zxy
    add     sp, 0x8
    mov     word ptr [bp+var_16], ax
    mov     byte ptr [state.opponentstate.field_CF], 0x1
    cmp     byte ptr [state.opponentstate.car_crashBmpFlag], 0x0
    jz      LAB_1471_00fc
    cmp     word ptr [state.opponentstate.car_speed2], 0x0
    jz      LAB_1471_00f3
    jmp     near ptr LAB_1471_0462
LAB_1471_00f3:
    mov     byte ptr [state.opponentstate.field_CF], 0x0
    jmp     near ptr LAB_1471_0462
    db 0x90
LAB_1471_00fc:
    push    si
    lea     di, [bp+var_3C]
    mov     si, offset state.opponentstate.car_vec_unk3.vx
    push    ss
    pop     es
    movsw
    movsw
    movsw
    pop     si
    cmp     word ptr [bp+var_3A], -0x1
    jz      LAB_1471_0138
    mov     ax, word ptr [bp+var_3C]
    sub     ax, word ptr [bp+var_28]
    mov     word ptr [bp+var_32], ax
    mov     ax, word ptr [bp+var_3A]
    sub     ax, word ptr [bp+var_2A]
    mov     word ptr [bp+var_30], ax
    mov     ax, word ptr [bp+var_38]
    sub     ax, word ptr [bp+var_36]
    mov     word ptr [bp+var_2E], ax
    lea     ax, [bp+var_32]
    push    ax
    call    far ptr int_hypot_3d
    add     sp, 0x2
    jmp     LAB_1471_014e
LAB_1471_0138:
    mov     ax, word ptr [bp+var_38]
    sub     ax, word ptr [bp+var_36]
    push    ax
    mov     ax, word ptr [bp+var_3C]
    sub     ax, word ptr [bp+var_28]
    push    ax
    call    far ptr int_hypot
    add     sp, 0x4
LAB_1471_014e:
    mov     si, ax
    cmp     si, 0xc8
    jge     LAB_1471_01a3
LAB_1471_0156:
    mov     ax, offset state.field_3F9
    push    ax
    mov     al, byte ptr [state.opponentstate.field_CE]
    inc     byte ptr [state.opponentstate.field_CE]
    sub     ah, ah
    push    ax
    mov     ax, offset state.opponentstate.car_vec_unk3.vx
    push    ax
    mov     bx, word ptr [state.opponentstate.car_trackdata3_index]
    shl     bx, 0x1
    les     di, [trackdata3]
    push    word ptr es:[bx+di]
    push    cs
    call    near ptr gettlistpoint
    add     sp, 0x8
    or      al, al
    jz      LAB_1471_01a3
    inc     word ptr [state.opponentstate.car_trackdata3_index]
    mov     bx, word ptr [state.opponentstate.car_trackdata3_index]
    shl     bx, 0x1
    les     di, [trackdata3]
    cmp     word ptr es:[bx+di], 0x0
    jnz     LAB_1471_019e
    inc     byte ptr [state.opponentstate.field_CD]
    mov     word ptr [state.opponentstate.car_trackdata3_index], 0x0
LAB_1471_019e:
    mov     byte ptr [state.opponentstate.field_CE], 0x0
LAB_1471_01a3:
    cmp     byte ptr [state.game_inputmode], 0x2
    jnz     LAB_1471_01dc
LAB_1471_01aa:
    push    si
    lea     di, [bp+var_C]
    mov     si, offset state.opponentstate.car_vec_unk3.vx
    push    ss
    pop     es
    movsw
    movsw
    movsw
    pop     si
LAB_1471_01b7:
    push    si
    lea     di, [bp+var_26]
    lea     si, [bp+var_C]
    push    ss
    pop     es
    movsw
    movsw
    movsw
    pop     si
    mov     ax, word ptr [bp+var_28]
    sub     word ptr [bp+var_26], ax
    cmp     word ptr [bp+var_A], -0x1
    jz      LAB_1471_01d3
    jmp     near ptr LAB_1471_035e
LAB_1471_01d3:
    mov     word ptr [bp+var_24], 0x0
    jmp     near ptr LAB_1471_0364
    db 0x90
LAB_1471_01dc:
    mov     ax, word ptr [bp+var_34]
    sub     ax, word ptr [bp+var_28]
    mov     word ptr [bp+var_26], ax
    mov     ax, word ptr [bp+var_3E]
    sub     ax, word ptr [bp+var_2A]
    mov     word ptr [bp+var_24], ax
    mov     ax, word ptr [bp+var_40]
    sub     ax, word ptr [bp+var_36]
    mov     word ptr [bp+var_22], ax
    lea     ax, [bp+var_1C]
    push    ax
    push    word ptr [bp+var_16]
    lea     ax, [bp+var_26]
    push    ax
    call    far ptr mat_mul_vector
    add     sp, 0x6
    cmp     word ptr [bp+var_1A], 0x5a
    jg      LAB_1471_01aa
    cmp     word ptr [bp+var_1C], 0x0
    jge     LAB_1471_021e
    mov     ax, word ptr [bp+var_1C]
    neg     ax
    jmp     LAB_1471_0221
    db 0x90
LAB_1471_021e:
    mov     ax, word ptr [bp+var_1C]
LAB_1471_0221:
    cmp     ax, 0xb4
    jg      LAB_1471_01aa
    cmp     word ptr [bp+var_18], 0x258
    jle     LAB_1471_0230
    jmp     near ptr LAB_1471_01aa
LAB_1471_0230:
    cmp     word ptr [bp+var_18], 0xff4c
    jge     LAB_1471_023a
    jmp     near ptr LAB_1471_01aa
LAB_1471_023a:
    mov     ax, word ptr [bp+var_34]
    sub     ax, word ptr [state.opponentstate.car_vec_unk3.vx]
    mov     word ptr [bp+var_26], ax
    cmp     word ptr [state.opponentstate.car_vec_unk3.vy], -0x1
    jnz     LAB_1471_0252
    mov     word ptr [bp+var_24], 0x0
    jmp     LAB_1471_025c
LAB_1471_0252:
    mov     ax, word ptr [bp+var_3E]
    sub     ax, word ptr [state.opponentstate.car_vec_unk3.vy]
    mov     word ptr [bp+var_24], ax
LAB_1471_025c:
    mov     ax, word ptr [bp+var_40]
    sub     ax, word ptr [state.opponentstate.car_vec_unk3.vz]
    mov     word ptr [bp+var_22], ax
    lea     ax, [bp+var_6]
    push    ax
    push    word ptr [bp+var_16]
    lea     ax, [bp+var_26]
    push    ax
    call    far ptr mat_mul_vector
    add     sp, 0x6
    cmp     word ptr [bp+var_6], 0x0
    jge     LAB_1471_02ee
    mov     ax, word ptr [state.opponentstate.car_vec_unk5.vx]
    cwd
    mov     cx, ax
    mov     ax, word ptr [state.opponentstate.car_vec_unk3.vx]
    mov     bx, dx
    cwd
    add     ax, cx
    adc     dx, bx
    sar     dx, 0x1
    rcr     ax, 0x1
    mov     word ptr [bp+var_C], ax
    cmp     word ptr [state.opponentstate.car_vec_unk3.vy], -0x1
    jnz     LAB_1471_02a4
    mov     word ptr [bp+var_A], 0xffff
    jmp     LAB_1471_02bb
LAB_1471_02a4:
    mov     ax, word ptr [state.opponentstate.car_vec_unk5.vy]
    cwd
    mov     cx, ax
    mov     ax, word ptr [state.opponentstate.car_vec_unk3.vy]
    mov     bx, dx
    cwd
    add     ax, cx
    adc     dx, bx
    sar     dx, 0x1
    rcr     ax, 0x1
    mov     word ptr [bp+var_A], ax
LAB_1471_02bb:
    mov     ax, word ptr [state.opponentstate.car_vec_unk5.vz]
    cwd
    mov     cx, ax
    mov     ax, word ptr [state.opponentstate.car_vec_unk3.vz]
    mov     bx, dx
    cwd
    add     ax, cx
    adc     dx, bx
    sar     dx, 0x1
    rcr     ax, 0x1
    mov     word ptr [bp+var_8], ax
    cmp     word ptr [bp+var_18], -0x4e
    jg      LAB_1471_02db
    jmp     near ptr LAB_1471_01b7
LAB_1471_02db:
    cmp     byte ptr [state.playerstate.car_crashBmpFlag], 0x0
    jz      LAB_1471_02e5
    jmp     near ptr LAB_1471_01b7
LAB_1471_02e5:
    mov     byte ptr [state.field_45E], 0x2
    jmp     near ptr LAB_1471_01b7
    db 0x90
LAB_1471_02ee:
    mov     ax, word ptr [state.opponentstate.car_vec_unk4.vx]
    cwd
    mov     cx, ax
    mov     ax, word ptr [state.opponentstate.car_vec_unk3.vx]
    mov     bx, dx
    cwd
    add     ax, cx
    adc     dx, bx
    sar     dx, 0x1
    rcr     ax, 0x1
    mov     word ptr [bp+var_C], ax
    cmp     word ptr [state.opponentstate.car_vec_unk3.vy], -0x1
    jnz     LAB_1471_0314
    mov     word ptr [bp+var_A], 0xffff
    jmp     LAB_1471_032b
    db 0x90
LAB_1471_0314:
    mov     ax, word ptr [state.opponentstate.car_vec_unk4.vy]
    cwd
    mov     cx, ax
    mov     ax, word ptr [state.opponentstate.car_vec_unk3.vy]
    mov     bx, dx
    cwd
    add     ax, cx
    adc     dx, bx
    sar     dx, 0x1
    rcr     ax, 0x1
    mov     word ptr [bp+var_A], ax
LAB_1471_032b:
    mov     ax, word ptr [state.opponentstate.car_vec_unk4.vz]
    cwd
    mov     cx, ax
    mov     ax, word ptr [state.opponentstate.car_vec_unk3.vz]
    mov     bx, dx
    cwd
    add     ax, cx
    adc     dx, bx
    sar     dx, 0x1
    rcr     ax, 0x1
    mov     word ptr [bp+var_8], ax
    cmp     word ptr [bp+var_18], -0x4e
    jg      LAB_1471_034b
    jmp     near ptr LAB_1471_01b7
LAB_1471_034b:
    cmp     byte ptr [state.playerstate.car_crashBmpFlag], 0x0
    jz      LAB_1471_0355
    jmp     near ptr LAB_1471_01b7
LAB_1471_0355:
    mov     byte ptr [state.field_45E], 0x1
    jmp     near ptr LAB_1471_01b7
    db 0x90
LAB_1471_035e:
    mov     ax, word ptr [bp+var_2A]
    sub     word ptr [bp+var_24], ax
LAB_1471_0364:
    mov     ax, word ptr [bp+var_36]
    sub     word ptr [bp+var_22], ax
    lea     ax, [bp+var_3C]
    push    ax
    push    word ptr [bp+var_16]
    lea     ax, [bp+var_26]
    push    ax
    call    far ptr mat_mul_vector
    add     sp, 0x6
    push    word ptr [bp+var_38]
    push    word ptr [bp+var_3C]
    call    far ptr int_atan2
    add     sp, 0x4
    mov     word ptr [bp+var_2C], ax
    cmp     byte ptr [state.opponentstate.car_slidingFlag], 0x0
    jnz     LAB_1471_03f3
    or      ax, ax
    jge     LAB_1471_039e
    neg     ax
    jmp     LAB_1471_03a1
    db 0x90
LAB_1471_039e:
    mov     ax, word ptr [bp+var_2C]
LAB_1471_03a1:
    cmp     ax, 0x100
    jle     LAB_1471_03f3
    mov     ax, offset state.field_3F9
    push    ax
    mov     al, byte ptr [state.opponentstate.field_CE]
    inc     byte ptr [state.opponentstate.field_CE]
    sub     ah, ah
    push    ax
    mov     ax, offset state.opponentstate.car_vec_unk3.vx
    push    ax
    mov     bx, word ptr [state.opponentstate.car_trackdata3_index]
    shl     bx, 0x1
    les     di, [trackdata3]
    push    word ptr es:[bx+di]
    push    cs
    call    near ptr gettlistpoint
    add     sp, 0x8
    or      al, al
    jz      LAB_1471_03f3
    inc     word ptr [state.opponentstate.car_trackdata3_index]
    mov     bx, word ptr [state.opponentstate.car_trackdata3_index]
    shl     bx, 0x1
    les     di, [trackdata3]
    cmp     word ptr es:[bx+di], 0x0
    jnz     LAB_1471_03ee
    inc     byte ptr [state.opponentstate.field_CD]
    mov     word ptr [state.opponentstate.car_trackdata3_index], 0x0
LAB_1471_03ee:
    mov     byte ptr [state.opponentstate.field_CE], 0x0
LAB_1471_03f3:
    cmp     word ptr [bp+var_2C], 0x41
    jle     LAB_1471_040e
    cmp     byte ptr [bp+var_20], 0x0
    jnz     LAB_1471_0406
LAB_1471_03ff:
    mov     byte ptr [bp+var_20], 0x1
    jmp     near ptr LAB_1471_0156
LAB_1471_0406:
    mov     word ptr [bp+var_2C], 0x41
    jmp     LAB_1471_041f
    db 0x90
LAB_1471_040e:
    cmp     word ptr [bp+var_2C], -0x41
    jge     LAB_1471_041f
    cmp     byte ptr [bp+var_20], 0x0
    jz      LAB_1471_03ff
    mov     word ptr [bp+var_2C], 0xffbf
LAB_1471_041f:
    cmp     byte ptr [state.opponentstate.car_sumSurfFrontWheels], 0x0
    jnz     LAB_1471_042b
    mov     word ptr [bp+var_2C], 0x0
LAB_1471_042b:
    mov     si, word ptr [bp+var_2C]
    sub     si, word ptr [state.opponentstate.car_steeringAngle]
    jns     LAB_1471_043a
    mov     ax, si
    neg     ax
    jmp     LAB_1471_043c
LAB_1471_043a:
    mov     ax, si
LAB_1471_043c:
    cmp     ax, word ptr [bp+var_14]
    jle     LAB_1471_045c
    mov     ax, word ptr [state.opponentstate.car_steeringAngle]
    cmp     word ptr [bp+var_2C], ax
    jge     LAB_1471_0452
    mov     ax, word ptr [bp+var_14]
    sub     word ptr [state.opponentstate.car_steeringAngle], ax
    jmp     LAB_1471_0462
LAB_1471_0452:
    mov     ax, word ptr [bp+var_14]
    add     word ptr [state.opponentstate.car_steeringAngle], ax
    jmp     LAB_1471_0462
    db 0x90
LAB_1471_045c:
    mov     ax, word ptr [bp+var_2C]
    mov     word ptr [state.opponentstate.car_steeringAngle], ax
LAB_1471_0462:
    mov     byte ptr [bp+var_E], 0x0
    cmp     byte ptr [state.opponentstate.car_sumSurfRearWheels], 0x0
    jz      LAB_1471_04ea
    cmp     byte ptr [state.opponentstate.car_crashBmpFlag], 0x0
    jnz     LAB_1471_04e6
    cmp     word ptr [state.opponentstate.car_36MwhlAngle], 0x0
    jz      LAB_1471_04a6
    mov     ax, word ptr [bp+var_10]
    mov     cl, 0x9
    shl     ax, cl
    cmp     ax, word ptr [state.opponentstate.car_speed2]
    jbe     LAB_1471_0498
    mov     word ptr [state.opponentstate.car_speed2], 0x0
    mov     word ptr [state.opponentstate.car_36MwhlAngle], 0x0
    jmp     LAB_1471_04ea
    db 0x90
    db 0x90
LAB_1471_0498:
    mov     ax, word ptr [bp+var_10]
    mov     cl, 0x9
    shl     ax, cl
    sub     word ptr [state.opponentstate.car_speed2], ax
    jmp     LAB_1471_04ea
    db 0x90
LAB_1471_04a6:
    mov     ax, word ptr [state.opponentstate.car_surfacegrip_sum]
    cmp     word ptr [state.opponentstate.car_demandedGrip], ax
    jg      LAB_1471_04e6
    cmp     byte ptr [state.game_inputmode], 0x2
    jnz     LAB_1471_04be
    mov     word ptr [bp+var_12], 0x4000
    jmp     LAB_1471_04c7
    db 0x90
LAB_1471_04be:
    mov     ah, byte ptr [state.field_3F9]
    sub     al, al
    mov     word ptr [bp+var_12], ax
LAB_1471_04c7:
    mov     ax, word ptr [bp+var_12]
    sub     ax, 0x100
    cmp     ax, word ptr [state.opponentstate.car_speed]
    jbe     LAB_1471_04da
    mov     byte ptr [bp+var_E], 0x1
    jmp     LAB_1471_04ea
    db 0x90
LAB_1471_04da:
    mov     ax, word ptr [bp+var_12]
    add     ah, 0x3
    cmp     ax, word ptr [state.opponentstate.car_speed]
    jnc     LAB_1471_04ea
LAB_1471_04e6:
    mov     byte ptr [bp+var_E], 0x2
LAB_1471_04ea:
    mov     ax, offset simd_opponent
    push    ax
    mov     ax, offset state.opponentstate.car_posWorld1.lx
    push    ax
    mov     ax, 0x1
    push    ax
    mov     al, byte ptr [bp+var_E]
    cbw
    push    ax
    push    cs
    call    near ptr update_car_speed
    add     sp, 0x8
    sub     ax, ax
    push    ax
    mov     ax, offset simd_opponent
    push    ax
    mov     ax, offset state.opponentstate.car_posWorld1.lx
    push    ax
    push    cs
    call    near ptr update_grip
    add     sp, 0x6
    mov     ax, 0x1
    push    ax
    mov     ax, offset simd_player
    push    ax
    mov     ax, offset state.playerstate.car_posWorld1.lx
    push    ax
    mov     ax, offset simd_opponent
    push    ax
    mov     ax, offset state.opponentstate.car_posWorld1.lx
    push    ax
    push    cs
    call    near ptr update_player_state
    add     sp, 0xa
    cmp     byte ptr [state.opponentstate.car_crashBmpFlag], 0x0
    jz      LAB_1471_0539
    jmp     near ptr LAB_1471_05c7
LAB_1471_0539:
    push    si
    lea     di, [bp+var_26]
    mov     si, offset state.opponentstate.car_vec_unk3.vx
    push    ss
    pop     es
    movsw
    movsw
    movsw
    pop     si
    mov     ax, word ptr [state.opponentstate.car_posWorld1.lx]
    mov     dx, word ptr [state.opponentstate.car_posWorld1.lx+2]
    mov     cl, 0x6
LAB_1471_054f:
    sar     dx, 0x1
    rcr     ax, 0x1
    dec     cl
    jnz     LAB_1471_054f
    sub     word ptr [bp+var_26], ax
    mov     ax, word ptr [state.opponentstate.car_posWorld1.ly]
    mov     dx, word ptr [state.opponentstate.car_posWorld1.ly+2]
    mov     cl, 0x6
LAB_1471_0563:
    sar     dx, 0x1
    rcr     ax, 0x1
    dec     cl
    jnz     LAB_1471_0563
    sub     word ptr [bp+var_24], ax
    mov     ax, word ptr [state.opponentstate.car_posWorld1.lz]
    mov     dx, word ptr [state.opponentstate.car_posWorld1.lz+2]
    mov     cl, 0x6
LAB_1471_0577:
    sar     dx, 0x1
    rcr     ax, 0x1
    dec     cl
    jnz     LAB_1471_0577
    sub     word ptr [bp+var_22], ax
    mov     ax, 0x1
    push    ax
    push    word ptr [state.opponentstate.car_rotate.vx]
    push    word ptr [state.opponentstate.car_rotate.vy]
    push    word ptr [state.opponentstate.car_rotate.vz]
    call    far ptr mat_rot_zxy
    add     sp, 0x8
    mov     word ptr [bp+var_16], ax
    lea     ax, [bp+var_3C]
    push    ax
    push    word ptr [bp+var_16]
    lea     ax, [bp+var_26]
    push    ax
    call    far ptr mat_mul_vector
    add     sp, 0x6
    push    word ptr [bp+var_38]
    mov     ax, word ptr [bp+var_3C]
    neg     ax
    push    ax
    call    far ptr int_atan2
    add     sp, 0x4
    and     ah, 0x3
    mov     word ptr [state.opponentstate.field_48], ax
LAB_1471_05c7:
    cmp     byte ptr [state.opponentstate.field_CD], 0x0
    jnz     LAB_1471_05d1
    jmp     near ptr LAB_1471_0656
LAB_1471_05d1:
    mov     al, byte ptr [startrow2]
    cbw
    mov     bx, ax
    shl     bx, 0x1
    mov     ax, word ptr [bx+trackcenterpos]
    mov     cx, word ptr [state.opponentstate.car_posWorld1.lz]
    mov     bx, word ptr [state.opponentstate.car_posWorld1.lz+2]
    mov     dx, cx
    mov     cl, 0x6
LAB_1471_05e9:
    sar     bx, 0x1
    rcr     dx, 0x1
    dec     cl
    jnz     LAB_1471_05e9
    sub     ax, dx
    push    ax
    push    word ptr [track_angle]
    call    far ptr int_cos
    add     sp, 0x2
    push    ax
    call    far ptr multiply_and_scale
    add     sp, 0x4
    mov     si, ax
    mov     al, byte ptr [startcol2]
    cbw
    mov     bx, ax
    shl     bx, 0x1
    mov     ax, word ptr [bx+trackcenterpos2]
    mov     cx, word ptr [state.opponentstate.car_posWorld1.lx]
    mov     bx, word ptr [state.opponentstate.car_posWorld1.lx+2]
    mov     dx, cx
    mov     cl, 0x6
LAB_1471_0623:
    sar     bx, 0x1
    rcr     dx, 0x1
    dec     cl
    jnz     LAB_1471_0623
    sub     ax, dx
    push    ax
    push    word ptr [track_angle]
    call    far ptr int_sin
    add     sp, 0x2
    push    ax
    call    far ptr multiply_and_scale
    add     sp, 0x4
    add     si, ax
    jns     LAB_1471_0656
    mov     ax, 0x1
    push    ax
    mov     ax, 0x3
    push    ax
    push    cs
    call    near ptr update_crash_state
    add     sp, 0x4
LAB_1471_0656:
    pop     si
    pop     di
    mov     sp, bp
    pop     bp
    retf
opponent_op_asm_ endp

; void __cdecl16far mat_mul_vector2(VECTOR * invec, MATRIX * mat_off, VECTOR * outvec)
mat_mul_vector2_asm_ proc far
    var_mat    = byte ptr  -18
    invec      = word ptr    6
    mat_off    = dword ptr  10
    outvec     = word ptr   14

    push    bp
    mov     bp, sp
    sub     sp, 0x12
    push    di
    push    si
    mov     ax, word ptr [bp+0x8]
    mov     dx, word ptr [bp+mat_off]
    lea     di, [bp+var_mat]
    mov     si, ax
    push    ss
    pop     es
    push    ds
    mov     ds, dx
    mov     cx, 0x9
    rep movsw
    pop     ds
    push    word ptr [bp+mat_off+2]
    lea     ax, [bp+var_mat]
    push    ax
    push    word ptr [bp+invec]
    call    far ptr mat_mul_vector
    add     sp, 0x6
    pop     si
    pop     di
    mov     sp, bp
    pop     bp
    retf
mat_mul_vector2_asm_ endp

; ******************************************************************************
; * dbg: movecar
; ******************************************************************************

; void __cdecl16far update_player_state(CARSTATE * player_state, SIMD * player_simd, CARSTATE * opp_state, SIMD * opp_simd, int is_opponent)
update_player_state_asm_ proc far
    vec_1E4    = byte ptr  -484
    vec_1DE    = byte ptr  -478
    vec_1C6    = byte ptr  -454
    vecl_1C0   = byte ptr  -448
    var_190    = word ptr  -400
    vec_18EoStateWorldCrds = byte ptr  -398
    vec_182    = byte ptr  -386
    vec_17C    = byte ptr  -380
    vecl_176   = byte ptr  -374
    var_146ptrTo176 = word ptr  -326
    var_144    = word ptr  -324
    pState_f40_sar2 = word ptr  -322
    var_140someWhlData = word ptr  -320
    var_138    = word ptr  -312
    var_136    = byte ptr  -310
    mat_134    = byte ptr  -308
    var_122    = byte ptr  -290
    var_11C    = byte ptr  -284
    var_11ApStateWorldCrds = byte ptr  -282
    var_MmatFromAngleZ = byte ptr  -270
    vec_FC     = byte ptr  -252
    var_F4     = word ptr  -244
    var_F2     = word ptr  -242
    var_F0     = word ptr  -240
    var_EE     = word ptr  -238
    var_EC     = byte ptr  -236
    var_EA     = word ptr  -234
    var_wheelIndex = byte ptr  -232
    var_pSpeed2Scaled = word ptr  -230
    vec_E4     = byte ptr  -228
    var_DEptrTo1C0 = word ptr  -222
    var_DC     = byte ptr  -220
    vec_1C     = byte ptr  -28
    var_16     = word ptr  -22
    var_E      = word ptr  -14
    vec_C      = byte ptr  -12
    var_6      = dword ptr  -6
    var_2      = byte ptr   -2
    player_state = word ptr    6
    player_simd = word ptr    8
    opp_state  = word ptr   10
    opp_simd   = word ptr   12
    is_opponent = word ptr   14

    push    bp
    mov     bp, sp
    sub     sp, 0x1e4
    push    di
    push    si
    mov     bx, word ptr [bp+player_state]
    mov     ax, word ptr [bx]
    mov     dx, word ptr [bx+0x2]
    mov     word ptr [pState_lvec1_x], ax
    mov     word ptr [pState_lvec1_x+2], dx
    mov     word ptr [bx+0xc], ax
    mov     word ptr [bx+0xe], dx
    mov     bx, word ptr [bp+player_state]
    mov     ax, word ptr [bx+0x4]
    mov     dx, word ptr [bx+0x6]
    mov     word ptr [pState_lvec1_y], ax
    mov     word ptr [pState_lvec1_y+2], dx
    mov     word ptr [bx+0x10], ax
    mov     word ptr [bx+0x12], dx
    mov     bx, word ptr [bp+player_state]
    mov     ax, word ptr [bx+0x8]
    mov     dx, word ptr [bx+0xa]
    mov     word ptr [pState_lvec1_z], ax
    mov     word ptr [pState_lvec1_z+2], dx
    mov     word ptr [bx+0x14], ax
    mov     word ptr [bx+0x16], dx
    mov     bx, word ptr [bp+player_state]
    mov     ax, word ptr [bx+0x1c]
    mov     word ptr [pState_minusRotate_z_1], ax
    mov     word ptr [pState_minusRotate_z_2], ax
    mov     ax, word ptr [bx+0x1a]
    mov     word ptr [pState_minusRotate_x_1], ax
    mov     word ptr [pState_minusRotate_x_2], ax
    mov     ax, word ptr [bx+0x18]
    mov     word ptr [pState_minusRotate_y_1], ax
    mov     word ptr [pState_minusRotate_y_2], ax
    cmp     byte ptr [bx+0xc1], 0x0
    jz      LAB_1471_070e
    mov     ax, word ptr [bx+0x40]
    sar     ax, 0x1
    sar     ax, 0x1
    mov     word ptr [bp+pState_f40_sar2], ax
    jmp     LAB_1471_0714
LAB_1471_070e:
    mov     word ptr [bp+pState_f40_sar2], 0x0
LAB_1471_0714:
    cmp     word ptr [framespersec], 0xa
    jnz     LAB_1471_0720
    mov     ax, 0x1e00
; full grid length/4  
    jmp     LAB_1471_0723
LAB_1471_0720:
    mov     ax, 0x3c00                         ; full trk grid length/2
LAB_1471_0723:
    sub     dx, dx
    push    dx
    push    ax
    mov     ax, 0x580                          ; 11*128
    cwd
    push    dx
    push    ax
    mov     bx, word ptr [bp+player_state]
    sub     ax, ax
    push    ax
    push    word ptr [bx+0x2c]
    call    far ptr __aFlmul
; Returns speed2 * 11 * 128  
    push    dx
    push    ax
    call    far ptr __aFuldiv
; Assuming 20fps, returns speed2 * 11 / 4  
    mov     word ptr [bp+var_pSpeed2Scaled], ax
    sub     ax, ax
    push    ax
    mov     ax, word ptr [pState_minusRotate_y_1]
    neg     ax
    push    ax
    mov     ax, word ptr [pState_minusRotate_x_1]
    neg     ax
    push    ax
    mov     ax, word ptr [pState_minusRotate_z_1]
    neg     ax
    push    ax
    call    far ptr mat_rot_zxy
    add     sp, 0x8
    push    si
    mov     di, offset mat_unk
; mat_unk is a rotation matrix which 
; applies the rotation angles of the car. 
; Note all angles are supplied after a 
; neg, indicating the carstate variables 
; actually store the opposite of the 
; angles.  
    mov     si, ax
    push    ds
    pop     es
    mov     cx, 0x9
    rep movsw
    pop     si
    cmp     word ptr [pState_minusRotate_x_1], 0x0
    jnz     LAB_1471_077f
    cmp     word ptr [pState_minusRotate_z_1], 0x0
    jz      LAB_1471_07b6
; "Gravity" acceleration is modeled through 
; the negative of the y component of the 
; (0,0,82h) vector after it is rotated.  
LAB_1471_077f:
    mov     word ptr [bp+vec_1C6], 0x0
    mov     word ptr [bp+vec_1C6+2], 0x0
; 82h = 130  
    mov     word ptr [bp+vec_1C6+4], 0x82
    lea     ax, [bp+vec_FC]
    push    ax
    mov     ax, offset mat_unk
    push    ax
    lea     ax, [bp+vec_1C6]
    push    ax
    call    far ptr mat_mul_vector
    add     sp, 0x6
    mov     bx, word ptr [bp+player_state]
    mov     ax, word ptr [bp+vec_FC+2]
    neg     ax
    mov     word ptr [bx+0x1e], ax
    jmp     LAB_1471_07be
    db 0x90
LAB_1471_07b6:
    mov     bx, word ptr [bp+player_state]
    mov     word ptr [bx+0x1e], 0x0
LAB_1471_07be:
    mov     bx, word ptr [bp+player_state]
    test    word ptr [bx+0x3e], 0x3ff
    jz      LAB_1471_07f4
    mov     byte ptr [bp+var_EC], 0x1
    sub     ax, ax
    push    ax
    mov     ax, word ptr [bx+0x3e]
    neg     ax
    push    ax
    sub     ax, ax
    push    ax
    push    ax
    call    far ptr mat_rot_zxy
    add     sp, 0x8
    push    si
    lea     di, [bp+var_MmatFromAngleZ]
    mov     si, ax
    push    ss
    pop     es
    mov     cx, 0x9
    rep movsw
    pop     si
    jmp     LAB_1471_07f9
    db 0x90
LAB_1471_07f4:
    mov     byte ptr [bp+var_EC], 0x0
; The resulting vector here is normal to the car.  
LAB_1471_07f9:
    mov     word ptr [bp+vec_1C6], 0x0
    mov     word ptr [bp+vec_1C6+2], 0x7530    ; 30000
    mov     word ptr [bp+vec_1C6+4], 0x0
    lea     ax, [bp+vec_FC]
    push    ax
    mov     ax, offset mat_unk
    push    ax
    lea     ax, [bp+vec_1C6]
    push    ax
    call    far ptr mat_mul_vector
    add     sp, 0x6
    mov     bx, word ptr [bp+player_state]
    cmp     byte ptr [bx+0xc1], 0x0
    jz      LAB_1471_0866
    cmp     word ptr [bp+vec_FC+2], 0x0
    jge     LAB_1471_0866
    cmp     word ptr [bx+0x2c], 0x1e00
    jbe     LAB_1471_085e
    mov     word ptr [bp+var_F0], 0xc0
    mov     word ptr [bp+vec_1C6+2], 0xff40
    lea     ax, [bp+vec_E4]
    push    ax
    mov     ax, offset mat_unk
    push    ax
    lea     ax, [bp+vec_1C6]
    push    ax
    call    far ptr mat_mul_vector
    add     sp, 0x6
    jmp     LAB_1471_086c
    db 0x90
LAB_1471_085e:
    mov     word ptr [bp+var_F0], 0xff40
    jmp     LAB_1471_086c
LAB_1471_0866:
    mov     word ptr [bp+var_F0], 0x0
LAB_1471_086c:
    mov     word ptr [vec_unk2], 0x0
    mov     word ptr [vec_unk2.vy], 0x0
    mov     word ptr [planindex_copy], 0xffff
    lea     ax, [bp+vecl_1C0]
    mov     word ptr [bp+var_DEptrTo1C0], ax
    lea     ax, [bp+vecl_176]
    mov     word ptr [bp+var_146ptrTo176], ax
    mov     byte ptr [bp+var_wheelIndex], 0x0
    jmp     LAB_1471_08ea
    db 0x90
LAB_1471_0896:
    mov     bx, word ptr [bp+player_state]
    mov     ax, word ptr [bx+0x36]
LAB_1471_089c:
    mov     word ptr [pState_f36Mminf40sar2], ax
    mov     al, byte ptr [bp+var_wheelIndex]
    cbw
    mov     di, ax
    shl     di, 0x1
    mov     ax, word ptr [pState_f36Mminf40sar2]
    mov     word ptr [bp+di+0xfec0], ax
    push    cs
    call    near ptr plane_rotate_op
    mov     ax, word ptr [vec_planerotopresult]
    cwd
    mov     bx, word ptr [bp+var_DEptrTo1C0]
    add     word ptr [bx], ax
    adc     word ptr [bx+0x2], dx
    mov     ax, word ptr [vec_planerotopresult.vy]
    cwd
    mov     bx, word ptr [bp+var_DEptrTo1C0]
    add     word ptr [bx+0x4], ax
    adc     word ptr [bx+0x6], dx
    mov     ax, word ptr [vec_planerotopresult.vz]
    cwd
    mov     bx, word ptr [bp+var_DEptrTo1C0]
    add     word ptr [bx+0x8], ax
    adc     word ptr [bx+0xa], dx
; Important to realize we have an add 
; here, not a replacement. This supports 
; the following interpretation: _1C0 
; contains the projected position at 
; the next timestep in global coordinates. 
;   
; Remember these are pointers, so 
; the additions are dislocating 
; the vectors. Expected, since we 
; are changing wheels. :) 
; Net result: _1C0 will have the 
; global projected wheel coords 
; and _146 will have the global 
; wheel coordinates.  
LAB_1471_08dc:
    add     word ptr [bp+var_DEptrTo1C0], 0xc
    add     word ptr [bp+var_146ptrTo176], 0xc
    inc     byte ptr [bp+var_wheelIndex]
; The loop is on the *left*. 
; It runs over wheel indices.  
LAB_1471_08ea:
    cmp     byte ptr [bp+var_wheelIndex], 0x4
    jl      LAB_1471_08f4
    jmp     near ptr LAB_1471_0a2e
LAB_1471_08f4:
    mov     al, byte ptr [bp+var_wheelIndex]
    cbw
    mov     di, ax
    shl     di, 0x1
    add     di, ax
    shl     di, 0x1                            ; *6
    mov     bx, word ptr [bp+player_simd]
    push    si
    lea     si, [bx+di+0xd2]                   ; SIMD.wheel_coords
    lea     di, [bp+vec_1C6]
    push    ss
    pop     es
    movsw
    movsw
    movsw
    pop     si
; Wheel coordinates are now on _1C6 vector.  
    mov     al, byte ptr [bp+var_wheelIndex]
    cbw
    mov     di, ax
    shl     di, 0x1
    mov     bx, word ptr [bp+player_state]
    mov     ax, word ptr [bx+di+0x54]          ; CARSTATE.car_rc2
    add     ax, 0x180                          ; 384 = 24*16
    neg     ax
    mov     word ptr [bp+vec_1C6+2], ax        ; adjusting wheel heights?
    cmp     word ptr [bp+var_F0], 0x0
    jge     LAB_1471_093a
    mov     ax, word ptr [bp+var_F0]
    sub     word ptr [bp+vec_1C6+2], ax
LAB_1471_093a:
    cmp     byte ptr [bp+var_EC], 0x0
    jz      LAB_1471_0967
    lea     ax, [bp+vec_FC]
    push    ax
    lea     ax, [bp+var_MmatFromAngleZ]
    push    ax
    lea     ax, [bp+vec_1C6]
    push    ax
    call    far ptr mat_mul_vector
    add     sp, 0x6
    push    si
    lea     di, [bp+vec_1C6]
    lea     si, [bp+vec_FC]
    push    ss
    pop     es
    movsw
    movsw
    movsw
    pop     si
; Rotating wheel coordinates with 
; the "AngleZ" matrix.  
LAB_1471_0967:
    lea     ax, [bp+vec_FC]
    push    ax
    mov     ax, offset mat_unk
    push    ax
    lea     ax, [bp+vec_1C6]
    push    ax
    call    far ptr mat_mul_vector
    add     sp, 0x6
    mov     ax, word ptr [bp+vec_FC]
    cwd
    add     ax, word ptr [pState_lvec1_x]
    adc     dx, word ptr [pState_lvec1_x+2]
    mov     bx, word ptr [bp+var_DEptrTo1C0]
    mov     word ptr [bx], ax
    mov     word ptr [bx+0x2], dx
    mov     ax, word ptr [bp+vec_FC+2]
    cwd
    add     ax, word ptr [pState_lvec1_y]
    adc     dx, word ptr [pState_lvec1_y+2]
    mov     bx, word ptr [bp+var_DEptrTo1C0]
    mov     word ptr [bx+0x4], ax
    mov     word ptr [bx+0x6], dx
    mov     ax, word ptr [bp+vec_FC+4]
    cwd
    add     ax, word ptr [pState_lvec1_z]
    adc     dx, word ptr [pState_lvec1_z+2]
    mov     bx, word ptr [bp+var_DEptrTo1C0]
    mov     word ptr [bx+0x8], ax
    mov     word ptr [bx+0xa], dx
; Net result: wheels are rotated 
; with mat_unk (normal rotation 
; matrix, I'd call it) and the 
; new coordinates are added to 
; the car global coordinates and, 
; using the pointers, saved as a 
; double word vector starting at 
; _1C0. Phew!  
    mov     bx, word ptr [bp+var_146ptrTo176]
    mov     di, word ptr [bp+var_DEptrTo1C0]
    mov     ax, word ptr [di]
    mov     dx, word ptr [di+0x2]
    mov     word ptr [bx], ax
    mov     word ptr [bx+0x2], dx
    mov     bx, word ptr [bp+var_146ptrTo176]
    mov     di, word ptr [bp+var_DEptrTo1C0]
    mov     ax, word ptr [di+0x4]
    mov     dx, word ptr [di+0x6]
    mov     word ptr [bx+0x4], ax
    mov     word ptr [bx+0x6], dx
    mov     bx, word ptr [bp+var_146ptrTo176]
    mov     di, word ptr [bp+var_DEptrTo1C0]
    mov     ax, word ptr [di+0x8]
    mov     dx, word ptr [di+0xa]
    mov     word ptr [bx+0x8], ax
    mov     word ptr [bx+0xa], dx
; Indirect copy of _1C0 longvec 
; to _146.  
    cmp     word ptr [bp+var_pSpeed2Scaled], 0x0
    jnz     LAB_1471_0a05
; Does nothing if the 
; car is stopped.  
    jmp     near ptr LAB_1471_08dc
LAB_1471_0a05:
    mov     ax, word ptr [bp+var_pSpeed2Scaled]
    mov     word ptr [vec_unk2.vz], ax
    cmp     word ptr [bp+pState_f40_sar2], 0x0
    jnz     LAB_1471_0a16
    jmp     near ptr LAB_1471_0896
; If is a front wheel...  
LAB_1471_0a16:
    cmp     byte ptr [bp+var_wheelIndex], 0x2
    jl      LAB_1471_0a20
    jmp     near ptr LAB_1471_0896
LAB_1471_0a20:
    mov     bx, word ptr [bp+player_state]
    mov     ax, word ptr [bx+0x36]
    sub     ax, word ptr [bp+pState_f40_sar2]
    jmp     near ptr LAB_1471_089c
    db 0x90
LAB_1471_0a2e:
    mov     byte ptr [bp+var_2], 0x0
; loop from 1 to 4.  
LAB_1471_0a32:
    inc     byte ptr [bp+var_2]
    cmp     byte ptr [bp+var_2], 0x5
    jnz     LAB_1471_0a92
    mov     bx, word ptr [bp+player_state]
    mov     word ptr [bx+0x36], 0x200
    mov     al, byte ptr [bp+is_opponent]
    cbw
    push    ax
    mov     ax, 0x1
    push    ax
    push    cs
    call    near ptr update_crash_state
    add     sp, 0x4
LAB_1471_0a53:
    mov     bx, word ptr [bp+player_state]     ; grip data...
    cmp     byte ptr [bx+0xc2], 0x5
    jnz     LAB_1471_0a82
    cmp     byte ptr [bx+0xc3], 0x5
    jnz     LAB_1471_0a82
    cmp     byte ptr [bx+0xc4], 0x5
    jnz     LAB_1471_0a82
    cmp     byte ptr [bx+0xc5], 0x5
    jnz     LAB_1471_0a82
; All wheels on water...  
    mov     al, byte ptr [bp+is_opponent]
    cbw
    push    ax
    mov     ax, 0x2
    push    ax
    push    cs
    call    near ptr update_crash_state
; ...to sound effect. Skidding??  
    add     sp, 0x4
LAB_1471_0a82:
    lea     ax, [bp+vecl_1C0]
    mov     word ptr [bp+var_DEptrTo1C0], ax
    mov     byte ptr [bp+var_wheelIndex], 0x0
    jmp     near ptr LAB_1471_16c1
; Pointer re-setting...  
LAB_1471_0a92:
    lea     ax, [bp+vecl_1C0]
    mov     word ptr [bp+var_DEptrTo1C0], ax
    lea     ax, [bp+vecl_176]
    mov     word ptr [bp+var_146ptrTo176], ax
    mov     byte ptr [bp+var_wheelIndex], 0x0
    jmp     near ptr LAB_1471_1629
; _1C6 contains "future" coordinates.  
LAB_1471_0aaa:
    mov     al, byte ptr [bp+var_wheelIndex]
    cbw
    mov     cx, ax
    shl     ax, 0x1
    add     ax, cx
    shl     ax, 0x1
    add     ax, word ptr [bp+player_state]
    add     ax, 0x74
    push    ax
    lea     ax, [bp+vec_1C6]
    push    ax
    call    far ptr build_track_object
    add     sp, 0x4
LAB_1471_0acb:
    mov     al, byte ptr [bp+var_wheelIndex]
    cbw
    mov     di, ax
    mov     bx, word ptr [bp+player_state]
    mov     al, byte ptr [current_surf_type]
    mov     byte ptr [bx+di+0xc2], al          ; a CARSTATE field
    mov     bx, word ptr [bp+var_DEptrTo1C0]
    mov     ax, word ptr [bx]
    mov     dx, word ptr [bx+0x2]
    mov     cl, 0x6
LAB_1471_0ae7:
    sar     dx, 0x1
    rcr     ax, 0x1
    dec     cl
    jnz     LAB_1471_0ae7
    mov     word ptr [bp+vec_1C6], ax
    mov     bx, word ptr [bp+var_DEptrTo1C0]
    mov     ax, word ptr [bx+0x4]
    mov     dx, word ptr [bx+0x6]
    mov     cl, 0x6
LAB_1471_0aff:
    sar     dx, 0x1
    rcr     ax, 0x1
    dec     cl
    jnz     LAB_1471_0aff
    mov     word ptr [bp+vec_1C6+2], ax
    mov     bx, word ptr [bp+var_DEptrTo1C0]
    mov     ax, word ptr [bx+0x8]
    mov     dx, word ptr [bx+0xa]
    mov     cl, 0x6
LAB_1471_0b17:
    sar     dx, 0x1
    rcr     ax, 0x1
    dec     cl
    jnz     LAB_1471_0b17
    mov     word ptr [bp+vec_1C6+4], ax
    cmp     byte ptr [state.game_inputmode], 0x2
    jnz     LAB_1471_0b30
    mov     ax, word ptr [bp+vec_1C6+2]
    jmp     LAB_1471_0b47
LAB_1471_0b30:
    push    word ptr [bp+vec_1C6+4]
    push    word ptr [bp+vec_1C6+2]
    push    word ptr [bp+vec_1C6]
    push    word ptr [planindex]
    push    cs
    call    near ptr plane_origin_op
    add     sp, 0x8
; Some wall procedure...  
LAB_1471_0b47:
    mov     word ptr [nextPosAndNormalIP], ax
    cmp     word ptr [wallindex], -0x1
    jnz     LAB_1471_0b54
    jmp     near ptr LAB_1471_1240
LAB_1471_0b54:
    mov     ax, word ptr [elRdWallRelated]
    cmp     word ptr [nextPosAndNormalIP], ax
    jg      LAB_1471_0b60
    jmp     near ptr LAB_1471_1240
LAB_1471_0b60:
    mov     ax, word ptr [wallHeight]
    cmp     word ptr [nextPosAndNormalIP], ax
    jl      LAB_1471_0b6c
    jmp     near ptr LAB_1471_1240
; Vector _182 = whlWorld - wallStart  
LAB_1471_0b6c:
    mov     al, byte ptr [bp+var_wheelIndex]
    cbw
    mov     cx, ax
    shl     ax, 0x1
    add     ax, cx
    shl     ax, 0x1
    mov     di, ax
    add     di, word ptr [bp+player_state]
    mov     ax, word ptr [di+0x74]
    sub     ax, word ptr [wallStartX]
    mov     word ptr [bp+vec_182], ax
    mov     word ptr [bp+vec_182+2], 0x0
    mov     ax, word ptr [di+0x78]
    sub     ax, word ptr [wallStartZ]
    mov     word ptr [bp+vec_182+4], ax
    mov     bx, word ptr [bp+var_DEptrTo1C0]
    mov     ax, word ptr [bx]
    mov     dx, word ptr [bx+0x2]
    mov     cl, 0x6
LAB_1471_0ba5:
    sar     dx, 0x1
    rcr     ax, 0x1
    dec     cl
    jnz     LAB_1471_0ba5
    sub     ax, word ptr [wallStartX]
    mov     word ptr [bp+vec_1E4], ax
    mov     word ptr [bp+vec_1E4+2], 0x0
    mov     bx, word ptr [bp+var_DEptrTo1C0]
    mov     ax, word ptr [bx+0x8]
    mov     dx, word ptr [bx+0xa]
    mov     cl, 0x6
LAB_1471_0bc7:
    sar     dx, 0x1
    rcr     ax, 0x1
    dec     cl
    jnz     LAB_1471_0bc7
    sub     ax, word ptr [wallStartZ]
    mov     word ptr [bp+vec_1E4+4], ax
    mov     ax, word ptr [wallOrientation]
    neg     ax
    sub     ax, 0x100
    push    ax
    lea     ax, [bp+mat_134]
    push    ax
    call    far ptr mat_rot_y
    add     sp, 0x4
    lea     ax, [bp+vec_C]
    push    ax
    lea     ax, [bp+mat_134]
    push    ax
    lea     ax, [bp+vec_182]
    push    ax
    call    far ptr mat_mul_vector
    add     sp, 0x6
    lea     ax, [bp+vec_1C]
    push    ax
    lea     ax, [bp+mat_134]
    push    ax
    lea     ax, [bp+vec_1E4]
    push    ax
    call    far ptr mat_mul_vector
    add     sp, 0x6
    cmp     word ptr [bp+vec_1C+4], 0x0
    jle     LAB_1471_0c28
    cmp     word ptr [bp+vec_C+4], 0x0
    jle     LAB_1471_0c28
    jmp     near ptr LAB_1471_1240
LAB_1471_0c28:
    cmp     word ptr [bp+vec_1C+4], 0x0
    jge     LAB_1471_0c37
    cmp     word ptr [bp+vec_C+4], 0x0
    jge     LAB_1471_0c37
    jmp     near ptr LAB_1471_1240
LAB_1471_0c37:
    mov     ax, word ptr [bp+vec_C+4]
    cmp     word ptr [bp+vec_1C+4], ax
    jle     LAB_1471_0c6c
; Vector swap :rolleyes:  
    mov     byte ptr [bp+var_136], 0x1
    push    si
    lea     di, [bp+vec_FC]
    lea     si, [bp+vec_1C]
    push    ss
    pop     es
    movsw
    movsw
    movsw
    pop     si
    push    si
    lea     di, [bp+vec_1C]
    lea     si, [bp+vec_C]
    movsw
    movsw
    movsw
    pop     si
    push    si
    lea     di, [bp+vec_C]
    lea     si, [bp+vec_FC]
    movsw
    movsw
    movsw
    pop     si
    jmp     LAB_1471_0c71
    db 0x90
LAB_1471_0c6c:
    mov     byte ptr [bp+var_136], 0x0
LAB_1471_0c71:
    cmp     word ptr [bp+vec_1C+4], 0x0
    jnz     LAB_1471_0c88
    mov     ax, word ptr [bp+var_pSpeed2Scaled]
    mov     word ptr [bp+var_F4], ax
    mov     word ptr [bp+var_F2], 0x0
    jmp     LAB_1471_0cfc
    db 0x90
LAB_1471_0c88:
    cmp     word ptr [bp+vec_C+4], 0x0
    jnz     LAB_1471_0c9e
    mov     word ptr [bp+var_F4], 0x0
    mov     ax, word ptr [bp+var_pSpeed2Scaled]
    mov     word ptr [bp+var_F2], ax
    jmp     LAB_1471_0cfc
LAB_1471_0c9e:
    sub     ax, ax
    push    ax
    lea     ax, [bp+vec_FC]
    push    ax
    lea     ax, [bp+vec_C]
    push    ax
    lea     ax, [bp+vec_1C]
    push    ax
    call    far ptr vector_op_unk
    add     sp, 0x8
    mov     ax, word ptr [bp+vec_1C]
    sub     ax, word ptr [bp+vec_FC]
    mov     cl, 0x6
    shl     ax, cl
    mov     word ptr [bp+vec_17C], ax
    mov     ax, word ptr [bp+vec_1C+2]
    sub     ax, word ptr [bp+vec_FC+2]
    shl     ax, cl
    mov     word ptr [bp+vec_17C+2], ax
    mov     ax, word ptr [bp+vec_1C+4]
    sub     ax, word ptr [bp+vec_FC+4]
    shl     ax, cl
    mov     word ptr [bp+vec_17C+4], ax
    lea     ax, [bp+vec_17C]
    push    ax
    call    far ptr int_hypot_3d
    add     sp, 0x2
; Distance to the wall, maybe?  
    mov     word ptr [bp+var_F2], ax
    mov     ax, word ptr [bp+var_pSpeed2Scaled]
    sub     ax, word ptr [bp+var_F2]
    mov     word ptr [bp+var_F4], ax
LAB_1471_0cfc:
    mov     ax, word ptr [pState_minusRotate_y_1]
    neg     ax
    sub     ax, word ptr [wallOrientation]
    and     ah, 0x3
    mov     word ptr [bp+var_EE], ax
    mov     ax, word ptr [bp+var_F2]
    mov     word ptr [bp+vec_FC+4], ax
    mov     word ptr [bp+vec_FC+2], 0x0
    cmp     word ptr [bp+var_EE], 0x100
    jl      LAB_1471_0d2a
    cmp     word ptr [bp+var_EE], 0x300
    jle     LAB_1471_0d3a
LAB_1471_0d2a:
    mov     ax, word ptr [wallOrientation]
    mov     word ptr [bp+var_EE], ax
    mov     word ptr [bp+vec_FC], 0x300
    jmp     LAB_1471_0d4d
    db 0x90
LAB_1471_0d3a:
    mov     ax, word ptr [wallOrientation]
    add     ah, 0x2
    and     ah, 0x3
    mov     word ptr [bp+var_EE], ax
    mov     word ptr [bp+vec_FC], 0xfd00
LAB_1471_0d4d:
    cmp     byte ptr [bp+var_136], 0x0
    jz      LAB_1471_0d5e
    mov     ax, word ptr [bp+vec_FC]
    neg     ax
    mov     word ptr [bp+vec_FC], ax
LAB_1471_0d5e:
    sub     ax, ax
    push    ax
    push    word ptr [bp+var_EE]
    mov     ax, word ptr [pState_minusRotate_x_1]
    neg     ax
    push    ax
    mov     ax, word ptr [pState_minusRotate_z_1]
    neg     ax
    push    ax
    call    far ptr mat_rot_zxy
    add     sp, 0x8
    mov     word ptr [bp+var_EA], ax
    lea     ax, [bp+vec_1C]
    push    ax
    push    word ptr [bp+var_EA]
    lea     ax, [bp+vec_FC]
    push    ax
    call    far ptr mat_mul_vector
    add     sp, 0x6
    mov     ax, word ptr [pState_minusRotate_y_1]
    neg     ax
    mov     si, ax
    sub     si, word ptr [bp+var_EE]
    and     si, 0x3ff
    mov     word ptr [bp+var_138], 0x0
    cmp     si, 0x100
    jle     LAB_1471_0dba
    mov     ax, 0x400
    sub     ax, si
    mov     si, ax
    mov     word ptr [bp+var_138], 0x1
LAB_1471_0dba:
    mov     ax, 0x46
    imul    si
    mov     cl, 0x8
    sar     ax, cl
    sub     ax, 0x64
    neg     ax
    mov     ch, al
    sub     cl, cl
    mov     word ptr [bp+var_190], cx
    mov     bx, word ptr [bp+player_state]
    mov     ax, cx
    cmp     word ptr [bx+0x2c], ax
    jbe     LAB_1471_0e03
    cmp     word ptr [bp+var_138], 0x0
    jz      LAB_1471_0de8
    mov     ax, si
    neg     ax
    jmp     LAB_1471_0dea
    db 0x90
LAB_1471_0de8:
    mov     ax, si
LAB_1471_0dea:
    shl     ax, 0x1
    mov     word ptr [bp+var_138], ax
    mov     word ptr [bx+0x36], ax
    mov     al, byte ptr [bp+is_opponent]
    cbw
    push    ax
    mov     ax, 0x1
    push    ax
    push    cs
    call    near ptr update_crash_state
    add     sp, 0x4
LAB_1471_0e03:
    mov     bx, word ptr [bp+player_state]
    or      byte ptr [bx+0xcf], 0x10
    lea     ax, [bp+vecl_1C0]
    mov     word ptr [bp+var_DEptrTo1C0], ax
    lea     ax, [bp+vecl_176]
    mov     word ptr [bp+var_146ptrTo176], ax
    sub     si, si
    jmp     LAB_1471_0e89
    db 0x90
LAB_1471_0e20:
    mov     word ptr [bp+vec_C], 0x0
    mov     word ptr [bp+vec_C+2], 0x0
    mov     word ptr [bp+vec_C+4], 0x0
LAB_1471_0e2f:
    mov     ax, word ptr [bp+vec_C]
    add     ax, word ptr [bp+vec_1C]
    cwd
    mov     bx, word ptr [bp+var_146ptrTo176]
    add     ax, word ptr [bx]
    adc     dx, word ptr [bx+0x2]
    mov     bx, word ptr [bp+var_DEptrTo1C0]
    mov     word ptr [bx], ax
    mov     word ptr [bx+0x2], dx
    mov     ax, word ptr [bp+vec_C+2]
    add     ax, word ptr [bp+vec_1C+2]
    cwd
    mov     bx, word ptr [bp+var_146ptrTo176]
    add     ax, word ptr [bx+0x4]
    adc     dx, word ptr [bx+0x6]
    mov     bx, word ptr [bp+var_DEptrTo1C0]
    mov     word ptr [bx+0x4], ax
    mov     word ptr [bx+0x6], dx
    mov     ax, word ptr [bp+vec_C+4]
    add     ax, word ptr [bp+vec_1C+4]
    cwd
    mov     bx, word ptr [bp+var_146ptrTo176]
    add     ax, word ptr [bx+0x8]
    adc     dx, word ptr [bx+0xa]
    mov     bx, word ptr [bp+var_DEptrTo1C0]
    mov     word ptr [bx+0x8], ax
    mov     word ptr [bx+0xa], dx
    add     word ptr [bp+var_DEptrTo1C0], 0xc
    add     word ptr [bp+var_146ptrTo176], 0xc
    inc     si
LAB_1471_0e89:
    cmp     si, 0x4
    jl      LAB_1471_0e91
; This cycles one of the main loops  
; which, on exit, goes to the part 
; with the old "grip data to sound" 
; comments.  
    jmp     near ptr LAB_1471_0a32
LAB_1471_0e91:
    cmp     word ptr [bp+var_F4], 0x0
    jz      LAB_1471_0e20
    mov     ax, word ptr [bp+var_pSpeed2Scaled]
    cwd
    push    dx
    push    ax
    mov     ax, word ptr [bp+var_F4]
    cwd
    push    dx
    push    ax
    mov     bx, word ptr [bp+var_DEptrTo1C0]
    mov     ax, word ptr [bx]
    mov     dx, word ptr [bx+0x2]
    mov     bx, word ptr [bp+var_146ptrTo176]
    sub     ax, word ptr [bx]
    sbb     dx, word ptr [bx+0x2]
    push    dx
    push    ax
    call    far ptr __aFlmul
    push    dx
    push    ax
    call    far ptr __aFldiv
    mov     word ptr [bp+vec_C], ax
    mov     ax, word ptr [bp+var_pSpeed2Scaled]
    cwd
    push    dx
    push    ax
    mov     ax, word ptr [bp+var_F4]
    cwd
    push    dx
    push    ax
    mov     bx, word ptr [bp+var_DEptrTo1C0]
    mov     ax, word ptr [bx+0x4]
    mov     dx, word ptr [bx+0x6]
    mov     bx, word ptr [bp+var_146ptrTo176]
    sub     ax, word ptr [bx+0x4]
    sbb     dx, word ptr [bx+0x6]
    push    dx
    push    ax
    call    far ptr __aFlmul
    push    dx
    push    ax
    call    far ptr __aFldiv
    mov     word ptr [bp+vec_C+2], ax
    mov     ax, word ptr [bp+var_pSpeed2Scaled]
    cwd
    push    dx
    push    ax
    mov     ax, word ptr [bp+var_F4]
    cwd
    push    dx
    push    ax
    mov     bx, word ptr [bp+var_DEptrTo1C0]
    mov     ax, word ptr [bx+0x8]
    mov     dx, word ptr [bx+0xa]
    mov     bx, word ptr [bp+var_146ptrTo176]
    sub     ax, word ptr [bx+0x8]
    sbb     dx, word ptr [bx+0xa]
    push    dx
    push    ax
    call    far ptr __aFlmul
    push    dx
    push    ax
    call    far ptr __aFldiv
    mov     word ptr [bp+vec_C+4], ax
    jmp     near ptr LAB_1471_0e2f
LAB_1471_0f32:
    mov     al, byte ptr [bp+var_wheelIndex]
    cbw
    mov     di, ax
    shl     di, 0x1
    mov     bx, word ptr [bp+player_state]
    mov     ax, word ptr [di+0x602]
    add     word ptr [bx+di+0x4c], ax
    mov     al, byte ptr [bp+var_wheelIndex]
    cbw
    mov     bx, ax
    shl     bx, 0x1
    add     bx, word ptr [bp+player_state]
    mov     ax, word ptr [bx+0x4c]
    cwd
    mov     bx, word ptr [bp+var_DEptrTo1C0]
    sub     word ptr [bx+0x4], ax
    sbb     word ptr [bx+0x6], dx
    cmp     word ptr [framespersec], 0xa
    jnz     LAB_1471_0f93
    mov     al, byte ptr [bp+var_wheelIndex]
    cbw
    mov     di, ax
    shl     di, 0x1
    mov     bx, word ptr [bp+player_state]
    mov     ax, word ptr [di+0x602]
    add     word ptr [bx+di+0x4c], ax
    mov     al, byte ptr [bp+var_wheelIndex]
    cbw
    mov     bx, ax
    shl     bx, 0x1
    add     bx, word ptr [bp+player_state]
    mov     ax, word ptr [bx+0x4c]
    cwd
    mov     bx, word ptr [bp+var_DEptrTo1C0]
    sub     word ptr [bx+0x4], ax
    sbb     word ptr [bx+0x6], dx
LAB_1471_0f93:
    mov     bx, word ptr [bp+var_DEptrTo1C0]
    mov     ax, word ptr [bx+0x4]
    mov     dx, word ptr [bx+0x6]
    mov     cl, 0x6
LAB_1471_0f9f:
    sar     dx, 0x1
    rcr     ax, 0x1
    dec     cl
    jnz     LAB_1471_0f9f
    mov     word ptr [bp+vec_1C6+2], ax
    cmp     byte ptr [state.game_inputmode], 0x2
    jz      LAB_1471_0fc6
    push    word ptr [bp+vec_1C6+4]
    push    ax
    push    word ptr [bp+vec_1C6]
    push    word ptr [planindex]
    push    cs
    call    near ptr plane_origin_op
    add     sp, 0x8
LAB_1471_0fc6:
    mov     word ptr [nextPosAndNormalIP], ax
    cmp     ax, 0xc
    jle     LAB_1471_0fdd
    mov     al, byte ptr [bp+var_wheelIndex]
    cbw
    mov     di, ax
    mov     bx, word ptr [bp+player_state]
    mov     byte ptr [bx+di+0xc2], 0x0
LAB_1471_0fdd:
    mov     al, byte ptr [bp+var_wheelIndex]
    cbw
    mov     di, ax
    shl     di, 0x1
    mov     ax, word ptr [nextPosAndNormalIP]
    mov     word ptr [bp+di-0x16], ax
    or      ax, ax
    jnz     LAB_1471_0ff3
    jmp     near ptr LAB_1471_15d8
LAB_1471_0ff3:
    or      ax, ax
    jl      LAB_1471_0ffa
    jmp     near ptr LAB_1471_161b
LAB_1471_0ffa:
    mov     ax, 0x22
    imul    word ptr [planindex]
    add     ax, word ptr [planptr]
    mov     dx, word ptr [planptr+2]
    mov     word ptr [bp+var_6], ax
    mov     word ptr [bp+var_6+2], dx
    les     bx, [bp+var_6]
    mov     ax, word ptr es:[bx+0x4]
    add     ax, word ptr [elem_xCenter]
    mov     word ptr [bp+var_122], ax
    mov     ax, word ptr es:[bx+0x6]
    add     ax, word ptr [terrainHeight]
    mov     word ptr [bp+var_122+2], ax
    mov     ax, word ptr es:[bx+0x8]
    add     ax, word ptr [elem_zCenter]
    mov     word ptr [bp+var_122+4], ax
    mov     bx, word ptr [bp+var_146ptrTo176]
    mov     ax, word ptr [bx]
    mov     dx, word ptr [bx+0x2]
    mov     cl, 0x6
LAB_1471_1041:
    sar     dx, 0x1
    rcr     ax, 0x1
    dec     cl
    jnz     LAB_1471_1041
    sub     ax, word ptr [bp+var_122]
    mov     word ptr [bp+vec_182], ax
    mov     bx, word ptr [bp+var_146ptrTo176]
    mov     ax, word ptr [bx+0x4]
    mov     dx, word ptr [bx+0x6]
    mov     cl, 0x6
LAB_1471_105d:
    sar     dx, 0x1
    rcr     ax, 0x1
    dec     cl
    jnz     LAB_1471_105d
    sub     ax, word ptr [bp+var_122+2]
    mov     word ptr [bp+vec_182+2], ax
    mov     bx, word ptr [bp+var_146ptrTo176]
    mov     ax, word ptr [bx+0x8]
    mov     dx, word ptr [bx+0xa]
    mov     cl, 0x6
LAB_1471_1079:
    sar     dx, 0x1
    rcr     ax, 0x1
    dec     cl
    jnz     LAB_1471_1079
    sub     ax, word ptr [bp+var_122+4]
    mov     word ptr [bp+vec_182+4], ax
    mov     bx, word ptr [bp+var_DEptrTo1C0]
    mov     ax, word ptr [bx]
    mov     dx, word ptr [bx+0x2]
    mov     cl, 0x6
LAB_1471_1094:
    sar     dx, 0x1
    rcr     ax, 0x1
    dec     cl
    jnz     LAB_1471_1094
    sub     ax, word ptr [bp+var_122]
    mov     word ptr [bp+vec_1E4], ax
    mov     bx, word ptr [bp+var_DEptrTo1C0]
    mov     ax, word ptr [bx+0x4]
    mov     dx, word ptr [bx+0x6]
    mov     cl, 0x6
LAB_1471_10b0:
    sar     dx, 0x1
    rcr     ax, 0x1
    dec     cl
    jnz     LAB_1471_10b0
    sub     ax, word ptr [bp+var_122+2]
    mov     word ptr [bp+vec_1E4+2], ax
    mov     bx, word ptr [bp+var_DEptrTo1C0]
    mov     ax, word ptr [bx+0x8]
    mov     dx, word ptr [bx+0xa]
    mov     cl, 0x6
LAB_1471_10cc:
    sar     dx, 0x1
    rcr     ax, 0x1
    dec     cl
    jnz     LAB_1471_10cc
    sub     ax, word ptr [bp+var_122+4]
    mov     word ptr [bp+vec_1E4+4], ax
    mov     ax, word ptr [bp+var_6]
    mov     dx, word ptr [bp+var_6+2]
    add     ax, 0x10                           ; plane rotation matrix
    push    si
    lea     di, [bp+mat_134]
    mov     si, ax
    push    ss
    pop     es
    push    ds
    mov     ds, dx
    mov     cx, 0x9
    rep movsw
    pop     ds
    pop     si
    lea     ax, [bp+var_MmatFromAngleZ]
    push    ax
    lea     ax, [bp+mat_134]
    push    ax
    call    far ptr mat_invert
    add     sp, 0x4
    lea     ax, [bp+vec_C]
    push    ax
    lea     ax, [bp+var_MmatFromAngleZ]
    push    ax
    lea     ax, [bp+vec_182]
    push    ax
    call    far ptr mat_mul_vector
    add     sp, 0x6
    lea     ax, [bp+vec_1C]
    push    ax
    lea     ax, [bp+var_MmatFromAngleZ]
    push    ax
    lea     ax, [bp+vec_1E4]
    push    ax
    call    far ptr mat_mul_vector
    add     sp, 0x6
    mov     byte ptr [bp+var_136], 0x0
    cmp     byte ptr [byte_4392C], 0x0
    jnz     LAB_1471_1169
    cmp     word ptr [bp+vec_C+2], -0xc
    jge     LAB_1471_1169
    cmp     word ptr [bp+vec_1C+2], -0xc
    jge     LAB_1471_1169
    cmp     word ptr [bp+vec_1C+2], -0x18
    jle     LAB_1471_11ca
    mov     al, byte ptr [bp+is_opponent]
    cbw
    push    ax
    mov     ax, 0x5
    push    ax
    push    cs
    call    near ptr update_crash_state
    add     sp, 0x4
    mov     byte ptr [bp+var_136], 0x1
LAB_1471_1169:
    cmp     word ptr [bp+vec_1C+2], 0x0
    jz      LAB_1471_1172
    jmp     near ptr LAB_1471_128e
LAB_1471_1172:
    mov     word ptr [vec_unk2], 0x0
    mov     word ptr [vec_unk2.vy], 0x0
    mov     word ptr [vec_unk2.vz], 0x40
    mov     ax, word ptr [planindex]
    mov     word ptr [planindex_copy], ax
    mov     al, byte ptr [bp+var_wheelIndex]
    cbw
    mov     di, ax
    shl     di, 0x1
    mov     ax, word ptr [bp+di+0xfec0]
    mov     word ptr [pState_f36Mminf40sar2], ax
    push    cs
    call    near ptr plane_rotate_op
    mov     ax, word ptr [vec_planerotopresult]
    cwd
    mov     bx, word ptr [bp+var_DEptrTo1C0]
    sub     word ptr [bx], ax
    sbb     word ptr [bx+0x2], dx
    mov     ax, word ptr [vec_planerotopresult.vy]
    cwd
    mov     bx, word ptr [bp+var_DEptrTo1C0]
    sub     word ptr [bx+0x4], ax
    sbb     word ptr [bx+0x6], dx
    mov     ax, word ptr [vec_planerotopresult.vz]
    cwd
    mov     bx, word ptr [bp+var_DEptrTo1C0]
    sub     word ptr [bx+0x8], ax
    sbb     word ptr [bx+0xa], dx
    jmp     near ptr LAB_1471_15cf
LAB_1471_11ca:
    mov     word ptr [planindex], 0x0
    mov     ax, word ptr [planptr]
    mov     dx, word ptr [planptr+2]
    mov     word ptr [current_planptr], ax
    mov     word ptr [current_planptr+2], dx
    mov     byte ptr [byte_4392C], 0x1
    mov     bx, word ptr [bp+var_DEptrTo1C0]
    mov     ax, word ptr [bx]
    mov     dx, word ptr [bx+0x2]
    mov     cl, 0x6
LAB_1471_11ee:
    sar     dx, 0x1
    rcr     ax, 0x1
    dec     cl
    jnz     LAB_1471_11ee
    mov     word ptr [bp+vec_1C6], ax
    mov     bx, word ptr [bp+var_DEptrTo1C0]
    mov     ax, word ptr [bx+0x4]
    mov     dx, word ptr [bx+0x6]
    mov     cl, 0x6
LAB_1471_1206:
    sar     dx, 0x1
    rcr     ax, 0x1
    dec     cl
    jnz     LAB_1471_1206
    mov     word ptr [bp+vec_1C6+2], ax
    mov     bx, word ptr [bp+var_DEptrTo1C0]
    mov     ax, word ptr [bx+0x8]
    mov     dx, word ptr [bx+0xa]
    mov     cl, 0x6
LAB_1471_121e:
    sar     dx, 0x1
    rcr     ax, 0x1
    dec     cl
    jnz     LAB_1471_121e
    mov     word ptr [bp+vec_1C6+4], ax
    push    ax
    push    word ptr [bp+vec_1C6+2]
    push    word ptr [bp+vec_1C6]
    sub     ax, ax
    push    ax
    push    cs
    call    near ptr plane_origin_op
    add     sp, 0x8
    mov     word ptr [nextPosAndNormalIP], ax
LAB_1471_1240:
    cmp     word ptr [nextPosAndNormalIP], 0x0
    jg      LAB_1471_124a
    jmp     near ptr LAB_1471_0fdd
LAB_1471_124a:
    cmp     word ptr [bp+var_F0], 0x0
    jg      LAB_1471_1254
    jmp     near ptr LAB_1471_0f32
LAB_1471_1254:
    cmp     word ptr [nextPosAndNormalIP], 0x18
    jl      LAB_1471_125e
    jmp     near ptr LAB_1471_0f32
LAB_1471_125e:
    mov     ax, word ptr [bp+vec_E4]
    cwd
    mov     bx, word ptr [bp+var_DEptrTo1C0]
    add     word ptr [bx], ax
    adc     word ptr [bx+0x2], dx
    mov     ax, word ptr [bp+vec_E4+2]
    cwd
    mov     bx, word ptr [bp+var_DEptrTo1C0]
    add     word ptr [bx+0x4], ax
    adc     word ptr [bx+0x6], dx
    mov     ax, word ptr [bp+vec_E4+4]
    cwd
    mov     bx, word ptr [bp+var_DEptrTo1C0]
    add     word ptr [bx+0x8], ax
    adc     word ptr [bx+0xa], dx
    jmp     near ptr LAB_1471_0fdd
    db 0x90
LAB_1471_128e:
    cmp     word ptr [bp+vec_C+2], 0x0
    jle     LAB_1471_129d
    cmp     word ptr [bp+vec_1C+2], 0x0
    jge     LAB_1471_129d
    jmp     near ptr LAB_1471_1320
LAB_1471_129d:
    mov     word ptr [vec_unk2], 0x0
    mov     word ptr [vec_unk2.vy], 0x0
    mov     ax, word ptr [bp+var_pSpeed2Scaled]
    mov     word ptr [vec_unk2.vz], ax
    mov     ax, word ptr [planindex]
    mov     word ptr [planindex_copy], ax
    mov     al, byte ptr [bp+var_wheelIndex]
    cbw
    mov     di, ax
    shl     di, 0x1
    mov     ax, word ptr [bp+di+0xfec0]
    mov     word ptr [pState_f36Mminf40sar2], ax
    push    cs
    call    near ptr plane_rotate_op
    mov     ax, word ptr [vec_planerotopresult]
    cwd
    mov     bx, word ptr [bp+var_146ptrTo176]
    mov     cx, word ptr [bx]
    mov     di, word ptr [bx+0x2]
    add     cx, ax
    adc     di, dx
    mov     bx, word ptr [bp+var_DEptrTo1C0]
    mov     word ptr [bx], cx
    mov     word ptr [bx+0x2], di
    mov     ax, word ptr [vec_planerotopresult.vy]
    cwd
    mov     bx, word ptr [bp+var_146ptrTo176]
    mov     cx, word ptr [bx+0x4]
    mov     di, word ptr [bx+0x6]
    add     cx, ax
    adc     di, dx
    mov     bx, word ptr [bp+var_DEptrTo1C0]
    mov     word ptr [bx+0x4], cx
    mov     word ptr [bx+0x6], di
    mov     ax, word ptr [vec_planerotopresult.vz]
    cwd
    mov     bx, word ptr [bp+var_146ptrTo176]
    mov     cx, word ptr [bx+0x8]
    mov     di, word ptr [bx+0xa]
    add     cx, ax
    adc     di, dx
    mov     bx, word ptr [bp+var_DEptrTo1C0]
    mov     word ptr [bx+0x8], cx
    mov     word ptr [bx+0xa], di
    jmp     near ptr LAB_1471_14f4
    db 0x90
LAB_1471_1320:
    mov     ax, word ptr [bp+vec_C+4]
    mov     word ptr [bp+var_EE], ax
    mov     ax, word ptr [bp+vec_C+2]
    neg     ax
    mov     word ptr [bp+vec_C+4], ax
    mov     ax, word ptr [bp+var_EE]
    mov     word ptr [bp+vec_C+2], ax
    mov     ax, word ptr [bp+vec_1C+4]
    mov     word ptr [bp+var_EE], ax
    mov     ax, word ptr [bp+vec_1C+2]
    neg     ax
    mov     word ptr [bp+vec_1C+4], ax
    mov     ax, word ptr [bp+var_EE]
    mov     word ptr [bp+vec_1C+2], ax
    sub     ax, ax
    push    ax
    lea     ax, [bp+vec_FC]
    push    ax
    lea     ax, [bp+vec_C]
    push    ax
    lea     ax, [bp+vec_1C]
    push    ax
    call    far ptr vector_op_unk
    add     sp, 0x8
    mov     ax, word ptr [bp+vec_1C]
    sub     ax, word ptr [bp+vec_FC]
    mov     cl, 0x6
    shl     ax, cl
    mov     word ptr [bp+vec_17C], ax
    mov     ax, word ptr [bp+vec_1C+2]
    sub     ax, word ptr [bp+vec_FC+2]
    shl     ax, cl
    mov     word ptr [bp+vec_17C+2], ax
    mov     ax, word ptr [bp+vec_1C+4]
    sub     ax, word ptr [bp+vec_FC+4]
    shl     ax, cl
    mov     word ptr [bp+vec_17C+4], ax
    lea     ax, [bp+vec_17C]
    push    ax
    call    far ptr int_hypot_3d
    add     sp, 0x2
    mov     word ptr [bp+var_EE], ax
    mov     al, byte ptr [bp+var_wheelIndex]
    cbw
    mov     di, ax
    shl     di, 0x1
    mov     bx, word ptr [bp+player_state]
    mov     ax, word ptr [bx+di+0x4c]
    add     ax, word ptr [bp+var_pSpeed2Scaled]
    mov     word ptr [bp+var_F4], ax
    sub     ax, word ptr [bp+var_EE]
    mov     word ptr [bp+var_F2], ax
    mov     ax, word ptr [bp+var_F4]
    cwd
    push    dx
    push    ax
    mov     ax, word ptr [bp+var_F2]
    cwd
    push    dx
    push    ax
    mov     bx, word ptr [bp+var_DEptrTo1C0]
    mov     ax, word ptr [bx]
    mov     dx, word ptr [bx+0x2]
    mov     bx, word ptr [bp+var_146ptrTo176]
    sub     ax, word ptr [bx]
    sbb     dx, word ptr [bx+0x2]
    push    dx
    push    ax
    call    far ptr __aFlmul
    push    dx
    push    ax
    call    far ptr __aFldiv
    mov     word ptr [bp+vec_C], ax
    mov     ax, word ptr [bp+var_F4]
    cwd
    push    dx
    push    ax
    mov     ax, word ptr [bp+var_F2]
    cwd
    push    dx
    push    ax
    mov     bx, word ptr [bp+var_DEptrTo1C0]
    mov     ax, word ptr [bx+0x4]
    mov     dx, word ptr [bx+0x6]
    mov     bx, word ptr [bp+var_146ptrTo176]
    sub     ax, word ptr [bx+0x4]
    sbb     dx, word ptr [bx+0x6]
    push    dx
    push    ax
    call    far ptr __aFlmul
    push    dx
    push    ax
    call    far ptr __aFldiv
    mov     word ptr [bp+vec_C+2], ax
    mov     ax, word ptr [bp+var_F4]
    cwd
    push    dx
    push    ax
    mov     ax, word ptr [bp+var_F2]
    cwd
    push    dx
    push    ax
    mov     bx, word ptr [bp+var_DEptrTo1C0]
    mov     ax, word ptr [bx+0x8]
    mov     dx, word ptr [bx+0xa]
    mov     bx, word ptr [bp+var_146ptrTo176]
    sub     ax, word ptr [bx+0x8]
    sbb     dx, word ptr [bx+0xa]
    push    dx
    push    ax
    call    far ptr __aFlmul
    push    dx
    push    ax
    call    far ptr __aFldiv
    mov     word ptr [bp+vec_C+4], ax
    mov     word ptr [vec_unk2], 0x0
    mov     word ptr [vec_unk2.vy], 0x0
    mov     ax, word ptr [bp+var_EE]
    mov     word ptr [vec_unk2.vz], ax
    mov     ax, word ptr [planindex]
    mov     word ptr [planindex_copy], ax
    mov     ax, word ptr [bp+di+0xfec0]
    mov     word ptr [pState_f36Mminf40sar2], ax
    push    cs
    call    near ptr plane_rotate_op
    mov     bx, word ptr [bp+var_146ptrTo176]
    mov     ax, word ptr [bx]
    mov     dx, word ptr [bx+0x2]
    mov     cx, ax
    mov     ax, word ptr [bp+vec_C]
    mov     bx, dx
    cwd
    add     cx, ax
    adc     bx, dx
    mov     ax, word ptr [vec_planerotopresult]
    cwd
    add     cx, ax
    adc     bx, dx
    mov     ax, bx
    mov     bx, word ptr [bp+var_DEptrTo1C0]
    mov     word ptr [bx], cx
    mov     word ptr [bx+0x2], ax
    mov     bx, word ptr [bp+var_146ptrTo176]
    mov     ax, word ptr [bx+0x4]
    mov     dx, word ptr [bx+0x6]
    mov     cx, ax
    mov     ax, word ptr [bp+vec_C+2]
    mov     bx, dx
    cwd
    add     cx, ax
    adc     bx, dx
    mov     ax, word ptr [vec_planerotopresult.vy]
    cwd
    add     cx, ax
    adc     bx, dx
    mov     ax, bx
    mov     bx, word ptr [bp+var_DEptrTo1C0]
    mov     word ptr [bx+0x4], cx
    mov     word ptr [bx+0x6], ax
    mov     bx, word ptr [bp+var_146ptrTo176]
    mov     ax, word ptr [bx+0x8]
    mov     dx, word ptr [bx+0xa]
    mov     cx, ax
    mov     ax, word ptr [bp+vec_C+4]
    mov     bx, dx
    cwd
    add     cx, ax
    adc     bx, dx
    mov     ax, word ptr [vec_planerotopresult.vz]
    cwd
    add     cx, ax
    adc     bx, dx
    mov     ax, bx
    mov     bx, word ptr [bp+var_DEptrTo1C0]
    mov     word ptr [bx+0x8], cx
    mov     word ptr [bx+0xa], ax
LAB_1471_14f4:
    mov     bx, word ptr [bp+var_DEptrTo1C0]
    mov     ax, word ptr [bx]
    mov     dx, word ptr [bx+0x2]
    mov     cl, 0x6
LAB_1471_14ff:
    sar     dx, 0x1
    rcr     ax, 0x1
    dec     cl
    jnz     LAB_1471_14ff
    mov     word ptr [bp+vec_1C6], ax
    mov     bx, word ptr [bp+var_DEptrTo1C0]
    mov     ax, word ptr [bx+0x4]
    mov     dx, word ptr [bx+0x6]
    mov     cl, 0x6
LAB_1471_1517:
    sar     dx, 0x1
    rcr     ax, 0x1
    dec     cl
    jnz     LAB_1471_1517
    mov     word ptr [bp+vec_1C6+2], ax
    mov     bx, word ptr [bp+var_DEptrTo1C0]
    mov     ax, word ptr [bx+0x8]
    mov     dx, word ptr [bx+0xa]
    mov     cl, 0x6
LAB_1471_152f:
    sar     dx, 0x1
    rcr     ax, 0x1
    dec     cl
    jnz     LAB_1471_152f
    mov     word ptr [bp+vec_1C6+4], ax
    push    ax
    push    word ptr [bp+vec_1C6+2]
    push    word ptr [bp+vec_1C6]
    push    word ptr [planindex]
    push    cs
    call    near ptr plane_origin_op
    add     sp, 0x8
    mov     word ptr [nextPosAndNormalIP], ax
    or      ax, ax
    jge     LAB_1471_15cf
    cmp     byte ptr [bp+var_136], 0x0
    jz      LAB_1471_1565
    neg     ax
    add     ax, 0x6
    mov     word ptr [nextPosAndNormalIP], ax
LAB_1471_1565:
    mov     word ptr [bp+vec_1C6+4], 0x0
    mov     word ptr [bp+vec_1C6], 0x0
    mov     ax, word ptr [nextPosAndNormalIP]
    neg     ax
    mov     cl, 0x6
    shl     ax, cl
    mov     word ptr [bp+vec_1C6+2], ax
    lea     ax, [bp+vec_FC]
    push    ax
    mov     ax, 0x22
    imul    word ptr [planindex]
    add     ax, word ptr [planptr]
    mov     dx, word ptr [planptr+2]
    add     ax, 0x10
    push    dx
    push    ax
    lea     ax, [bp+vec_1C6]
    push    ax
    push    cs
    call    near ptr mat_mul_vector2
    add     sp, 0x8
    mov     ax, word ptr [bp+vec_FC]
    cwd
    mov     bx, word ptr [bp+var_DEptrTo1C0]
    add     word ptr [bx], ax
    adc     word ptr [bx+0x2], dx
    mov     ax, word ptr [bp+vec_FC+2]
    cwd
    mov     bx, word ptr [bp+var_DEptrTo1C0]
    add     word ptr [bx+0x4], ax
    adc     word ptr [bx+0x6], dx
    mov     ax, word ptr [bp+vec_FC+4]
    cwd
    mov     bx, word ptr [bp+var_DEptrTo1C0]
    add     word ptr [bx+0x8], ax
    adc     word ptr [bx+0xa], dx
LAB_1471_15cf:
    mov     al, byte ptr [bp+var_wheelIndex]
    cbw
    mov     di, ax
    shl     di, 0x1
LAB_1471_15d8:
    mov     bx, word ptr [bp+player_state]
    cmp     word ptr [bx+di+0x4c], 0xfa
    jle     LAB_1471_15e7
    or      byte ptr [bx+0xcf], 0x20
LAB_1471_15e7:
    mov     al, byte ptr [bp+var_wheelIndex]
    cbw
    mov     di, ax
    shl     di, 0x1
    mov     bx, word ptr [bp+player_state]
    cmp     word ptr [bx+di+0x4c], 0x5aeb
    jle     LAB_1471_160a
    mov     al, byte ptr [bp+is_opponent]
    cbw
    push    ax
    mov     ax, 0x1
    push    ax
    push    cs
    call    near ptr update_crash_state
    add     sp, 0x4
LAB_1471_160a:
    mov     al, byte ptr [bp+var_wheelIndex]
    cbw
    mov     di, ax
    shl     di, 0x1
    mov     bx, word ptr [bp+player_state]
    mov     word ptr [bx+di+0x4c], 0x0
LAB_1471_161b:
    add     word ptr [bp+var_DEptrTo1C0], 0xc
    add     word ptr [bp+var_146ptrTo176], 0xc
    inc     byte ptr [bp+var_wheelIndex]
; Another loop on wheels?  
LAB_1471_1629:
    cmp     byte ptr [bp+var_wheelIndex], 0x4
    jl      LAB_1471_1633
    jmp     near ptr LAB_1471_0a53
LAB_1471_1633:
    mov     bx, word ptr [bp+var_DEptrTo1C0]
    mov     ax, word ptr [bx]
    mov     dx, word ptr [bx+0x2]
    mov     cl, 0x6
LAB_1471_163e:
    sar     dx, 0x1
    rcr     ax, 0x1
    dec     cl
    jnz     LAB_1471_163e
    mov     word ptr [bp+vec_1C6], ax
    mov     bx, word ptr [bp+var_DEptrTo1C0]
    mov     ax, word ptr [bx+0x4]
    mov     dx, word ptr [bx+0x6]
    mov     cl, 0x6
LAB_1471_1656:
    sar     dx, 0x1
    rcr     ax, 0x1
    dec     cl
    jnz     LAB_1471_1656
    mov     word ptr [bp+vec_1C6+2], ax
    mov     bx, word ptr [bp+var_DEptrTo1C0]
    mov     ax, word ptr [bx+0x8]
    mov     dx, word ptr [bx+0xa]
    mov     cl, 0x6
LAB_1471_166e:
    sar     dx, 0x1
    rcr     ax, 0x1
    dec     cl
    jnz     LAB_1471_166e
; Net result: dividing 
; _1C0 by 2^6 to make 
; a word vector and 
; storing it at _1C6  
    mov     word ptr [bp+vec_1C6+4], ax
    cmp     byte ptr [state.game_inputmode], 0x2
    jz      LAB_1471_1684
    jmp     near ptr LAB_1471_0aaa
LAB_1471_1684:
    mov     word ptr [wallindex], 0xffff
    mov     byte ptr [current_surf_type], tarmac
    mov     word ptr [planindex], 0x0
    mov     ax, word ptr [planptr]
    mov     dx, word ptr [planptr+2]
    mov     word ptr [current_planptr], ax
    mov     word ptr [current_planptr+2], dx
    jmp     near ptr LAB_1471_0acb
LAB_1471_16a6:
    mov     ax, word ptr [bp+var_EE]
    add     ax, 0x180
    cwd
    mov     bx, word ptr [bp+var_DEptrTo1C0]
    add     word ptr [bx+0x4], ax
    adc     word ptr [bx+0x6], dx
LAB_1471_16b8:
    add     word ptr [bp+var_DEptrTo1C0], 0xc
    inc     byte ptr [bp+var_wheelIndex]
LAB_1471_16c1:
    cmp     byte ptr [bp+var_wheelIndex], 0x4
    jl      LAB_1471_16cb
    jmp     near ptr code_update_globalPos
LAB_1471_16cb:
    mov     bx, word ptr [bp+var_DEptrTo1C0]
    mov     ax, word ptr [bx]
    mov     dx, word ptr [bx+0x2]
    mov     cl, 0x6
LAB_1471_16d6:
    sar     dx, 0x1
    rcr     ax, 0x1
    dec     cl
    jnz     LAB_1471_16d6
    mov     cx, ax
    mov     al, byte ptr [bp+var_wheelIndex]
    cbw
    mov     bx, ax
    shl     bx, 0x1
    add     bx, ax
    shl     bx, 0x1
    add     bx, word ptr [bp+player_state]
    mov     word ptr [bx+0x74], cx
    mov     bx, word ptr [bp+var_DEptrTo1C0]
    mov     ax, word ptr [bx+0x4]
    mov     dx, word ptr [bx+0x6]
    mov     cl, 0x6
LAB_1471_16ff:
    sar     dx, 0x1
    rcr     ax, 0x1
    dec     cl
    jnz     LAB_1471_16ff
    mov     cx, ax
    mov     al, byte ptr [bp+var_wheelIndex]
    cbw
    mov     bx, ax
    shl     bx, 0x1
    add     bx, ax
    shl     bx, 0x1
    add     bx, word ptr [bp+player_state]
    mov     word ptr [bx+0x76], cx
    mov     bx, word ptr [bp+var_DEptrTo1C0]
    mov     ax, word ptr [bx+0x8]
    mov     dx, word ptr [bx+0xa]
    mov     cl, 0x6
LAB_1471_1728:
    sar     dx, 0x1
    rcr     ax, 0x1
    dec     cl
    jnz     LAB_1471_1728
    mov     cx, ax
    mov     al, byte ptr [bp+var_wheelIndex]
    cbw
    mov     bx, ax
    shl     bx, 0x1
    add     bx, ax
    shl     bx, 0x1
    add     bx, word ptr [bp+player_state]
    mov     word ptr [bx+0x78], cx
    mov     al, byte ptr [bp+var_wheelIndex]
    cbw
    mov     di, ax
    push    di
    mov     bx, di
    shl     bx, 0x1
    add     bx, bp
    push    word ptr [bx-0x16]                 ; var_(16-2*wheelIndex)
    push    word ptr [bp+player_state]
    push    cs
    call    near ptr carState_rc_op
    add     sp, 0x6
    mov     word ptr [bp+var_EE], ax
    cmp     word ptr [pState_minusRotate_z_1], 0x0
    jnz     LAB_1471_1775
    cmp     word ptr [pState_minusRotate_x_1], 0x0
    jnz     LAB_1471_1775
    jmp     near ptr LAB_1471_16a6
LAB_1471_1775:
    mov     word ptr [bp+vec_1C6+4], 0x0
    mov     word ptr [bp+vec_1C6], 0x0
    mov     ax, word ptr [bp+var_EE]
    add     ax, 0x180
    mov     word ptr [bp+vec_1C6+2], ax
    lea     ax, [bp+vec_182]
    push    ax
    mov     ax, offset mat_unk
    push    ax
    lea     ax, [bp+vec_1C6]
    push    ax
    call    far ptr mat_mul_vector
    add     sp, 0x6
    mov     ax, word ptr [bp+vec_182]
    cwd
    mov     bx, word ptr [bp+var_DEptrTo1C0]
    add     word ptr [bx], ax
    adc     word ptr [bx+0x2], dx
    mov     ax, word ptr [bp+vec_182+2]
    cwd
    mov     bx, word ptr [bp+var_DEptrTo1C0]
    add     word ptr [bx+0x4], ax
    adc     word ptr [bx+0x6], dx
    mov     ax, word ptr [bp+vec_182+4]
    cwd
    mov     bx, word ptr [bp+var_DEptrTo1C0]
    add     word ptr [bx+0x8], ax
    adc     word ptr [bx+0xa], dx
    jmp     near ptr LAB_1471_16b8
    db 0x90
code_update_globalPos:
    mov     ax, word ptr [bp+vecl_1C0]
    mov     dx, word ptr [bp+vecl_1C0+2]
    add     ax, word ptr [bp+vecl_1C0+12]
    adc     dx, word ptr [bp+vecl_1C0+14]
    add     ax, word ptr [bp+vecl_1C0+24]
    adc     dx, word ptr [bp+vecl_1C0+26]
    add     ax, word ptr [bp+vecl_1C0+36]
    adc     dx, word ptr [bp+vecl_1C0+38]
    mov     cl, 0x2
LAB_1471_17f4:
    sar     dx, 0x1
    rcr     ax, 0x1
    dec     cl
    jnz     LAB_1471_17f4
; Average wheel positions are 
; used to update global coords.  
    mov     word ptr [pState_lvec1_x], ax
    mov     word ptr [pState_lvec1_x+2], dx
    mov     ax, word ptr [bp+vecl_1C0+4]
    mov     dx, word ptr [bp+vecl_1C0+6]
    add     ax, word ptr [bp+vecl_1C0+16]
    adc     dx, word ptr [bp+vecl_1C0+18]
    add     ax, word ptr [bp+vecl_1C0+28]
    adc     dx, word ptr [bp+vecl_1C0+30]
    add     ax, word ptr [bp+vecl_1C0+40]
    adc     dx, word ptr [bp+vecl_1C0+42]
    mov     cl, 0x2
LAB_1471_1825:
    sar     dx, 0x1
    rcr     ax, 0x1
    dec     cl
    jnz     LAB_1471_1825
    mov     word ptr [pState_lvec1_y], ax
    mov     word ptr [pState_lvec1_y+2], dx
    mov     ax, word ptr [bp+vecl_1C0+8]
    mov     dx, word ptr [bp+vecl_1C0+10]
    add     ax, word ptr [bp+vecl_1C0+20]
    adc     dx, word ptr [bp+vecl_1C0+22]
    add     ax, word ptr [bp+vecl_1C0+32]
    adc     dx, word ptr [bp+vecl_1C0+34]
    add     ax, word ptr [bp+vecl_1C0+44]
    adc     dx, word ptr [bp+vecl_1C0+46]
    mov     cl, 0x2
LAB_1471_1856:
    sar     dx, 0x1
    rcr     ax, 0x1
    dec     cl
    jnz     LAB_1471_1856
    mov     word ptr [pState_lvec1_z], ax
    mov     word ptr [pState_lvec1_z+2], dx
; Pointer reset  
    lea     ax, [bp+vecl_1C0]
    mov     word ptr [bp+var_DEptrTo1C0], ax
    mov     byte ptr [bp+var_wheelIndex], 0x0
; Here starts a long branch 
; in which the rotational 
; coordinates will be updated 
; according to the wheel 
; positions.  
code_update_rotCoords:
    mov     al, byte ptr [bp+var_wheelIndex]
    cbw
    mov     cx, ax
    shl     ax, 0x1
    add     ax, cx
    shl     ax, 0x1
    mov     di, ax
    add     di, bp
    mov     bx, word ptr [bp+var_DEptrTo1C0]
    mov     ax, word ptr [bx]
    sub     ax, word ptr [pState_lvec1_x]
    mov     word ptr [di+0xfe22], ax
    mov     bx, word ptr [bp+var_DEptrTo1C0]
    mov     ax, word ptr [bx+0x4]
    sub     ax, word ptr [pState_lvec1_y]
    mov     word ptr [di+0xfe24], ax
    mov     bx, word ptr [bp+var_DEptrTo1C0]
    mov     ax, word ptr [bx+0x8]
    sub     ax, word ptr [pState_lvec1_z]
    mov     word ptr [di+0xfe26], ax
    add     word ptr [bp+var_DEptrTo1C0], 0xc
    inc     byte ptr [bp+var_wheelIndex]
    cmp     byte ptr [bp+var_wheelIndex], 0x4
    jl      code_update_rotCoords
    cmp     word ptr [pState_lvec1_y+2], 0x0
    jge     LAB_1471_18ce
    sub     ax, ax
    mov     word ptr [pState_lvec1_y+2], ax
    mov     word ptr [pState_lvec1_y], ax
LAB_1471_18ce:
    cmp     word ptr [pState_lvec1_x+2], 0x1d
    jl      LAB_1471_18ee
    jg      LAB_1471_18df
    cmp     word ptr [pState_lvec1_x], 0xf100
    jbe     LAB_1471_18ee
LAB_1471_18df:
    mov     word ptr [pState_lvec1_x], 0xf0ff
    mov     word ptr [pState_lvec1_x+2], 0x1d
    jmp     LAB_1471_190b
    db 0x90
LAB_1471_18ee:
    cmp     word ptr [pState_lvec1_x+2], 0x0
    jg      LAB_1471_190b
    jl      LAB_1471_18ff
    cmp     word ptr [pState_lvec1_x], 0xf00
    jnc     LAB_1471_190b
LAB_1471_18ff:
    mov     word ptr [pState_lvec1_x], 0xf00
    mov     word ptr [pState_lvec1_x+2], 0x0
LAB_1471_190b:
    cmp     word ptr [pState_lvec1_z+2], 0x1d
    jl      LAB_1471_192a
    jg      LAB_1471_191c
    cmp     word ptr [pState_lvec1_z], 0xf100
    jbe     LAB_1471_192a
LAB_1471_191c:
    mov     word ptr [pState_lvec1_z], 0xf0ff
    mov     word ptr [pState_lvec1_z+2], 0x1d
    jmp     LAB_1471_1947
LAB_1471_192a:
    cmp     word ptr [pState_lvec1_z+2], 0x0
    jg      LAB_1471_1947
    jl      LAB_1471_193b
    cmp     word ptr [pState_lvec1_z], 0xf00
    jnc     LAB_1471_1947
LAB_1471_193b:
    mov     word ptr [pState_lvec1_z], 0xf00
    mov     word ptr [pState_lvec1_z+2], 0x0
LAB_1471_1947:
    mov     ax, word ptr [bp+vec_1DE+18]
    add     ax, word ptr [bp+vec_1DE+12]
    sub     ax, word ptr [bp+vec_1DE]
    sub     ax, word ptr [bp+vec_1DE+6]
    mov     word ptr [bp+var_EE], ax
    mov     ax, word ptr [bp+vec_1DE+22]
    add     ax, word ptr [bp+vec_1DE+16]
    sub     ax, word ptr [bp+vec_1DE+4]
    sub     ax, word ptr [bp+vec_1DE+10]
    mov     word ptr [bp+var_F2], ax
    neg     ax
    push    ax
    push    word ptr [bp+var_EE]
    call    far ptr int_atan2
    add     sp, 0x4
    and     ah, 0x3
    mov     word ptr [pState_minusRotate_y_1], ax
    push    ax
    lea     ax, [bp+var_MmatFromAngleZ]
    push    ax
    call    far ptr mat_rot_y
    add     sp, 0x4
    mov     byte ptr [bp+var_wheelIndex], 0x0
LAB_1471_1997:
    mov     al, byte ptr [bp+var_wheelIndex]
    cbw
    mov     cx, ax
    shl     ax, 0x1
    add     ax, cx
    shl     ax, 0x1
    mov     di, ax
    add     di, bp
    sub     di, 0x1de
    push    si
    push    di
    mov     si, di
    lea     di, [bp+vec_FC]
    push    ss
    pop     es
    movsw
    movsw
    movsw
    pop     di
    pop     si
    push    di
    lea     ax, [bp+var_MmatFromAngleZ]
    push    ax
    lea     ax, [bp+vec_FC]
    push    ax
    call    far ptr mat_mul_vector
    add     sp, 0x6
    inc     byte ptr [bp+var_wheelIndex]
    cmp     byte ptr [bp+var_wheelIndex], 0x4
    jl      LAB_1471_1997
    mov     ax, word ptr [bp+vec_1DE+22]
    add     ax, word ptr [bp+vec_1DE+16]
    sub     ax, word ptr [bp+vec_1DE+4]
    sub     ax, word ptr [bp+vec_1DE+10]
    mov     word ptr [bp+var_F2], ax
    mov     ax, word ptr [bp+vec_1DE+20]
    add     ax, word ptr [bp+vec_1DE+14]
    sub     ax, word ptr [bp+vec_1DE+2]
    sub     ax, word ptr [bp+vec_1DE+8]
    mov     word ptr [bp+var_F4], ax
    or      ax, ax
    jnz     LAB_1471_1a0c
    cmp     word ptr [bp+var_F2], 0x0
    jl      LAB_1471_1a36
LAB_1471_1a0c:
    push    word ptr [bp+var_F4]
    mov     ax, word ptr [bp+var_F2]
    neg     ax
    push    ax
    call    far ptr int_atan2
    add     sp, 0x4
    sub     ax, 0x100
    mov     word ptr [pState_minusRotate_x_1], ax
    or      ax, ax
    jge     LAB_1471_1a2e
    neg     ax
    jmp     LAB_1471_1a31
    db 0x90
LAB_1471_1a2e:
    mov     ax, word ptr [pState_minusRotate_x_1]
LAB_1471_1a31:
    cmp     ax, 0x2
    jge     LAB_1471_1a3c
LAB_1471_1a36:
    mov     word ptr [pState_minusRotate_x_1], 0x0
LAB_1471_1a3c:
    cmp     word ptr [pState_minusRotate_x_1], 0x0
    jz      LAB_1471_1a9b
    push    word ptr [pState_minusRotate_x_1]
    lea     ax, [bp+var_MmatFromAngleZ]
    push    ax
    call    far ptr mat_rot_x
    add     sp, 0x4
    mov     byte ptr [bp+0xff18], 0x0
LAB_1471_1a59:
    mov     al, byte ptr [bp+0xff18]
    cbw
    mov     cx, ax
    shl     ax, 0x1
    add     ax, cx
    shl     ax, 0x1
    mov     di, ax
    add     di, bp
    sub     di, 0x1de
    push    si
    push    di
    mov     si, di
    lea     di, [bp+0xff04]
    push    ss
    pop     es
    movsw
    movsw
    movsw
    pop     di
    pop     si
    push    di
    lea     ax, [bp+0xfef2]
    push    ax
    lea     ax, [bp+0xff04]
    push    ax
    call    far ptr mat_mul_vector
    add     sp, 0x6
    inc     byte ptr [bp+0xff18]
    cmp     byte ptr [bp+0xff18], 0x4
    jl      LAB_1471_1a59
LAB_1471_1a9b:
    mov     ax, word ptr [bp+vec_1DE+6]
    add     ax, word ptr [bp+vec_1DE+12]
    sub     ax, word ptr [bp+vec_1DE]
    sub     ax, word ptr [bp+vec_1DE+18]
    mov     word ptr [bp+var_F2], ax
    mov     ax, word ptr [bp+vec_1DE+8]
    add     ax, word ptr [bp+vec_1DE+14]
    sub     ax, word ptr [bp+vec_1DE+2]
    sub     ax, word ptr [bp+vec_1DE+20]
    mov     word ptr [bp+var_F4], ax
    or      ax, ax
    jnz     LAB_1471_1ace
    cmp     word ptr [bp+var_F2], 0x0
    jg      LAB_1471_1af4
LAB_1471_1ace:
    push    word ptr [bp+var_F4]
    push    word ptr [bp+var_F2]
    call    far ptr int_atan2
    add     sp, 0x4
    sub     ax, 0x100
    mov     word ptr [pState_minusRotate_z_1], ax
    or      ax, ax
    jge     LAB_1471_1aec
    neg     ax
    jmp     LAB_1471_1aef
LAB_1471_1aec:
    mov     ax, word ptr [pState_minusRotate_z_1]
LAB_1471_1aef:
    cmp     ax, 0x2
    jge     LAB_1471_1afa
LAB_1471_1af4:
    mov     word ptr [pState_minusRotate_z_1], 0x0
; Combined axle surface indices.  
LAB_1471_1afa:
    mov     bx, word ptr [bp+player_state]
    mov     di, bx
    mov     al, byte ptr [di+0xc2]
    add     al, byte ptr [di+0xc3]
    mov     byte ptr [bx+0xbf], al
    mov     bx, word ptr [bp+player_state]
    mov     di, bx
    mov     al, byte ptr [di+0xc4]
    add     al, byte ptr [di+0xc5]
    mov     byte ptr [bx+0xc0], al
    cmp     byte ptr [state.game_inputmode], 0x2
    jnz     LAB_1471_1b26
    jmp     near ptr LAB_1471_2130
LAB_1471_1b26:
    cmp     byte ptr [is_in_replay], 0x0
    jnz     LAB_1471_1b4f
    cmp     byte ptr [bp+is_opponent], 0x0
    jz      LAB_1471_1b3a
    push    word ptr [word_4408C]
    jmp     LAB_1471_1b3e
    db 0x90
LAB_1471_1b3a:
    push    word ptr [word_43964]
LAB_1471_1b3e:
    mov     bx, word ptr [bp+player_state]
    mov     al, byte ptr [bx+0xcf]
    sub     ah, ah
    push    ax
    push    cs
    call    near ptr audio_unk3
    add     sp, 0x4
LAB_1471_1b4f:
    sub     ax, ax
    push    ax
    mov     ax, word ptr [pState_minusRotate_y_1]
    neg     ax
    push    ax
    mov     ax, word ptr [pState_minusRotate_x_1]
    neg     ax
    push    ax
    mov     ax, word ptr [pState_minusRotate_z_1]
    neg     ax
    push    ax
    call    far ptr mat_rot_zxy
    add     sp, 0x8
    mov     word ptr [bp+var_EA], ax
    mov     byte ptr [bp+var_wheelIndex], 0x0
    jmp     near ptr LAB_1471_1c1c
LAB_1471_1b78:
    mov     ax, word ptr [planindex]
    mov     word ptr [bp+var_E], ax
    mov     al, byte ptr [bp+var_wheelIndex]
    cbw
    mov     di, ax
    shl     di, 0x1
    add     di, ax
    shl     di, 0x1
    mov     bx, word ptr [bp+player_state]
    push    si
    lea     si, [bx+di+0x8c]
    lea     di, [bp+vec_1C6]
    push    ss
    pop     es
    movsw
    movsw
    movsw
    pop     si
    lea     ax, [bp+vec_17C]
    push    ax
    lea     ax, [bp+vec_1C6]
    push    ax
    call    far ptr build_track_object
    add     sp, 0x4
    mov     ax, word ptr [planindex]
    cmp     word ptr [bp+var_E], ax
    jnz     LAB_1471_1bf9
    push    word ptr [bp+vec_1C6+4]
    push    word ptr [bp+vec_1C6+2]
    push    word ptr [bp+vec_1C6]
    push    ax
    push    cs
    call    near ptr plane_origin_op
    add     sp, 0x8
    mov     word ptr [bp+var_138], ax
    cmp     byte ptr [game_replay_mode], 0x1
    jz      LAB_1471_1bf9
    or      si, si
    jge     LAB_1471_1bde
    or      ax, ax
    jg      LAB_1471_1be9
LAB_1471_1bde:
    or      si, si
    jle     LAB_1471_1bf9
    cmp     word ptr [bp+var_138], 0x0
    jge     LAB_1471_1bf9
LAB_1471_1be9:
    mov     al, byte ptr [bp+is_opponent]
    cbw
    push    ax
    mov     ax, 0x5
    push    ax
    push    cs
    call    near ptr update_crash_state
    add     sp, 0x4
LAB_1471_1bf9:
    mov     al, byte ptr [bp+var_wheelIndex]
    cbw
    mov     di, ax
    shl     di, 0x1
    add     di, ax
    shl     di, 0x1
    mov     bx, word ptr [bp+player_state]
    push    si
    lea     di, [bx+di+0x8c]
    lea     si, [bp+vec_17C]
    push    ds
    pop     es
    movsw
    movsw
    movsw
    pop     si
    inc     byte ptr [bp+var_wheelIndex]
LAB_1471_1c1c:
    cmp     byte ptr [bp+var_wheelIndex], 0x4
    jl      LAB_1471_1c26
    jmp     near ptr LAB_1471_1d18
LAB_1471_1c26:
    mov     al, byte ptr [bp+var_wheelIndex]
    cbw
    mov     di, ax
    shl     di, 0x1
    add     di, ax
    shl     di, 0x1
    mov     bx, word ptr [bp+player_simd]
    push    si
    lea     si, [bx+di+0xd2]
    lea     di, [bp+vec_1C6]
    push    ss
    pop     es
    movsw
    movsw
    movsw
    pop     si
    mov     bx, word ptr [bp+player_simd]
    mov     ax, word ptr [bx+0xca]
    mov     cl, 0x6
    shl     ax, cl
    mov     word ptr [bp+vec_1C6+2], ax
    lea     ax, [bp+vec_FC]
    push    ax
    push    word ptr [bp+var_EA]
    lea     ax, [bp+vec_1C6]
    push    ax
    call    far ptr mat_mul_vector
    add     sp, 0x6
    mov     ax, word ptr [bp+vec_FC]
    cwd
    add     ax, word ptr [pState_lvec1_x]
    adc     dx, word ptr [pState_lvec1_x+2]
    mov     cl, 0x6
LAB_1471_1c79:
    sar     dx, 0x1
    rcr     ax, 0x1
    dec     cl
    jnz     LAB_1471_1c79
    mov     word ptr [bp+vec_1C6], ax
    mov     ax, word ptr [bp+vec_FC+2]
    cwd
    add     ax, word ptr [pState_lvec1_y]
    adc     dx, word ptr [pState_lvec1_y+2]
    mov     cl, 0x6
LAB_1471_1c94:
    sar     dx, 0x1
    rcr     ax, 0x1
    dec     cl
    jnz     LAB_1471_1c94
    mov     word ptr [bp+vec_1C6+2], ax
    mov     ax, word ptr [bp+vec_FC+4]
    cwd
    add     ax, word ptr [pState_lvec1_z]
    adc     dx, word ptr [pState_lvec1_z+2]
    mov     cl, 0x6
LAB_1471_1caf:
    sar     dx, 0x1
    rcr     ax, 0x1
    dec     cl
    jnz     LAB_1471_1caf
    mov     word ptr [bp+vec_1C6+4], ax
    push    si
    lea     di, [bp+vec_17C]
    lea     si, [bp+vec_1C6]
    push    ss
    pop     es
    movsw
    movsw
    movsw
    pop     si
    mov     al, byte ptr [bp+var_wheelIndex]
    cbw
    mov     cx, ax
    shl     ax, 0x1
    add     ax, cx
    shl     ax, 0x1
    add     ax, word ptr [bp+player_state]
    add     ax, 0x8c
    push    ax
    lea     ax, [bp+vec_1C6]
    push    ax
    call    far ptr build_track_object
    add     sp, 0x4
    push    word ptr [bp+vec_1C6+4]
    push    word ptr [bp+vec_1C6+2]
    push    word ptr [bp+vec_1C6]
    push    word ptr [planindex]
    push    cs
    call    near ptr plane_origin_op
    add     sp, 0x8
    mov     si, ax
    cmp     word ptr [planindex], 0x4
    jl      LAB_1471_1d0e
    jmp     near ptr LAB_1471_1b78
LAB_1471_1d0e:
    or      si, si
    jle     LAB_1471_1d15
    jmp     near ptr LAB_1471_1bf9
LAB_1471_1d15:
    jmp     near ptr LAB_1471_1be9
LAB_1471_1d18:
    mov     bx, word ptr [bp+player_state]
    mov     al, byte ptr [bx+0xbf]
    add     al, byte ptr [bx+0xc0]
    mov     byte ptr [bp+var_11C], al
    cmp     byte ptr [bp+is_opponent], 0x0
    jnz     LAB_1471_1d3c
; If al = 0 no wheels are 
; on the ground.  
    or      al, al
    jnz     LAB_1471_1d3c
; If the car is jumping do not count 
; as another jump.  
    cmp     byte ptr [bx+0xc1], 0x0
    jz      LAB_1471_1d3c
; jumpCount increased...  
    inc     word ptr [state.game_jumpCount]
LAB_1471_1d3c:
    mov     al, byte ptr [bp+var_11C]
    mov     byte ptr [bx+0xc1], al
    mov     ax, word ptr [pState_lvec1_x]
    mov     dx, word ptr [pState_lvec1_x+2]
    mov     cl, 0x6
LAB_1471_1d4d:
    sar     dx, 0x1
    rcr     ax, 0x1
    dec     cl
    jnz     LAB_1471_1d4d
    mov     word ptr [bp+var_11ApStateWorldCrds], ax
    mov     ax, word ptr [pState_lvec1_y]
    mov     dx, word ptr [pState_lvec1_y+2]
    mov     cl, 0x6
LAB_1471_1d62:
    sar     dx, 0x1
    rcr     ax, 0x1
    dec     cl
    jnz     LAB_1471_1d62
    mov     word ptr [bp+var_11ApStateWorldCrds+2], ax
    mov     ax, word ptr [pState_lvec1_z]
    mov     dx, word ptr [pState_lvec1_z+2]
    mov     cl, 0x6
LAB_1471_1d77:
    sar     dx, 0x1
    rcr     ax, 0x1
    dec     cl
    jnz     LAB_1471_1d77
    mov     word ptr [bp+var_11ApStateWorldCrds+4], ax
    mov     ax, word ptr [pState_minusRotate_z_1]
    mov     word ptr [bp+var_11ApStateWorldCrds+6], ax
    mov     ax, word ptr [pState_minusRotate_x_1]
    mov     word ptr [bp+var_11ApStateWorldCrds+8], ax
    mov     ax, word ptr [pState_minusRotate_y_1]
    mov     word ptr [bp+var_11ApStateWorldCrds+10], ax
    cmp     byte ptr [gameconfig.game_opponenttype], 0x0
    jnz     LAB_1471_1da2
    jmp     near ptr LAB_1471_1e68
LAB_1471_1da2:
    mov     bx, word ptr [bp+opp_state]
    mov     ax, word ptr [bx]
    mov     dx, word ptr [bx+0x2]
    mov     cl, 0x6
LAB_1471_1dac:
    sar     dx, 0x1
    rcr     ax, 0x1
    dec     cl
    jnz     LAB_1471_1dac
    mov     word ptr [bp+vec_18EoStateWorldCrds], ax
    mov     bx, word ptr [bp+opp_state]
    mov     ax, word ptr [bx+0x4]
    mov     dx, word ptr [bx+0x6]
    mov     cl, 0x6
LAB_1471_1dc3:
    sar     dx, 0x1
    rcr     ax, 0x1
    dec     cl
    jnz     LAB_1471_1dc3
    mov     word ptr [bp+vec_18EoStateWorldCrds+2], ax
    mov     bx, word ptr [bp+opp_state]
    mov     ax, word ptr [bx+0x8]
    mov     dx, word ptr [bx+0xa]
    mov     cl, 0x6
LAB_1471_1dda:
    sar     dx, 0x1
    rcr     ax, 0x1
    dec     cl
    jnz     LAB_1471_1dda
    mov     word ptr [bp+vec_18EoStateWorldCrds+4], ax
    mov     bx, word ptr [bp+opp_state]
    mov     ax, word ptr [bx+0x1c]
    mov     word ptr [bp+vec_18EoStateWorldCrds+6], ax
    mov     ax, word ptr [bx+0x1a]
    mov     word ptr [bp+vec_18EoStateWorldCrds+8], ax
    mov     ax, word ptr [bx+0x18]
    mov     word ptr [bp+vec_18EoStateWorldCrds+10], ax
    lea     ax, [bp+vec_18EoStateWorldCrds]
    push    ax
    mov     ax, word ptr [bp+opp_simd]
    add     ax, 0xc8
    push    ax
    lea     ax, [bp+var_11ApStateWorldCrds]
    push    ax
    mov     ax, word ptr [bp+player_simd]
    add     ax, 0xc8
    push    ax
    push    cs
    call    near ptr car_car_coll_detect_maybe
    add     sp, 0x8
; It seems the function returns zero if there 
; is no collision...  
    or      al, al
    jz      LAB_1471_1e68
    mov     bx, word ptr [bp+player_state]
    cmp     byte ptr [bx+0xc8], 0x0
    jz      LAB_1471_1e2e
    jmp     near ptr LAB_1471_2182
; This is called when cars make contact.  
LAB_1471_1e2e:
    push    word ptr [bp+opp_state]
    push    bx
    push    cs
    call    near ptr car_car_speed_adjust_maybe
    add     sp, 0x4
    or      al, al
    jnz     LAB_1471_1e40
    jmp     near ptr LAB_1471_2182
LAB_1471_1e40:
    mov     al, byte ptr [bp+is_opponent]
    cbw
    push    ax
    mov     ax, 0x1
    push    ax
    push    cs
    call    near ptr update_crash_state
    add     sp, 0x4
    mov     al, byte ptr [bp+is_opponent]
    cbw
    xor     al, 0x1
LAB_1471_1e56:
    push    ax
    mov     ax, 0x1
    push    ax
    push    cs
    call    near ptr update_crash_state
    add     sp, 0x4
    pop     si
    pop     di
    mov     sp, bp
    pop     bp
    retf
LAB_1471_1e68:
    mov     ax, word ptr [bp+var_11ApStateWorldCrds]
    mov     cl, 0xa
    sar     ax, cl
    mov     word ptr [bp+vec_FC], ax
    mov     ax, word ptr [bp+var_11ApStateWorldCrds+4]
    sar     ax, cl                             ; /2^10 : scale to tile index.
    sub     ax, 0x1d
    neg     ax
    mov     word ptr [bp+vec_FC+4], ax
    mov     word ptr [bp+vec_18EoStateWorldCrds+6], 0x0
    mov     word ptr [bp+vec_18EoStateWorldCrds+8], 0x0
    mov     word ptr [bp+vec_18EoStateWorldCrds+10], 0x0
    cmp     word ptr [bp+vec_FC], 0x0
    jge     LAB_1471_1e9f
    jmp     near ptr LAB_1471_2130
LAB_1471_1e9f:
    cmp     word ptr [bp+vec_FC], 0x1e
    jl      LAB_1471_1ea9
    jmp     near ptr LAB_1471_2130
LAB_1471_1ea9:
    or      ax, ax
    jge     LAB_1471_1eb0
    jmp     near ptr LAB_1471_2130
LAB_1471_1eb0:
    cmp     ax, 0x1e
    jl      LAB_1471_1eb8
    jmp     near ptr LAB_1471_2130
LAB_1471_1eb8:
    lea     ax, [bp+var_DC]
    push    ax
    push    word ptr [bp+vec_FC+4]
    push    word ptr [bp+vec_FC]
    call    far ptr bto_auxiliary1
    add     sp, 0x6
    mov     byte ptr [bp+var_EC], al
    or      al, al
    jz      LAB_1471_1f40
    sub     si, si
    jmp     LAB_1471_1ee0
    db 0x90
LAB_1471_1eda:
    add     word ptr [bp+var_144], 0x6
    inc     si
LAB_1471_1ee0:
    mov     al, byte ptr [bp+var_EC]
    sub     ah, ah
    cmp     ax, si
    jbe     LAB_1471_1f40
    mov     ax, si
    mov     cx, ax
    shl     ax, 0x1
    add     ax, cx
    shl     ax, 0x1
    mov     di, ax
    add     di, bp
    mov     ax, word ptr [di+var_DC]
    mov     word ptr [bp+vec_18EoStateWorldCrds], ax
    mov     ax, word ptr [di+var_DC+2]
    mov     word ptr [bp+vec_18EoStateWorldCrds+2], ax
    mov     ax, word ptr [di+var_DC+4]
    mov     word ptr [bp+vec_18EoStateWorldCrds+4], ax
    lea     ax, [bp+vec_18EoStateWorldCrds]
    push    ax
    mov     ax, offset unk_3BD6A
    push    ax
    lea     ax, [bp+var_11ApStateWorldCrds]
    push    ax
    mov     ax, word ptr [bp+player_simd]
    add     ax, 0xc8
    push    ax
    push    cs
    call    near ptr car_car_coll_detect_maybe
    add     sp, 0x8
    or      al, al
    jz      LAB_1471_1eda
    mov     bx, word ptr [bp+player_state]
    sub     word ptr [bx+0x36], 0x200
LAB_1471_1f38:
    mov     al, byte ptr [bp+is_opponent]
    cbw
    jmp     near ptr LAB_1471_1e56
    db 0x90
LAB_1471_1f40:
    mov     bx, word ptr [bp+vec_FC+4]
    shl     bx, 0x1
    mov     bx, word ptr [bx+trackrows]
    add     bx, word ptr [bp+vec_FC]
    les     di, [trackdata19]
    mov     al, byte ptr es:[bx+di]
    cbw
    mov     si, ax
    cmp     si, -0x1
    jnz     LAB_1471_1f60
    jmp     near ptr LAB_1471_2000
LAB_1471_1f60:
    cmp     byte ptr [si+0x911e], 0x0
    jz      LAB_1471_1f6a
    jmp     near ptr LAB_1471_2000
LAB_1471_1f6a:
    mov     bx, si
    shl     bx, 0x1
    add     bx, ax
    shl     bx, 0x1
    les     di, [td10_track_check_rel]
    mov     ax, word ptr es:[bx+di]
    mov     word ptr [bp+vec_18EoStateWorldCrds], ax
    mov     di, si
    mov     ax, di
    shl     di, 0x1
    add     di, ax
    shl     di, 0x1
    mov     bx, word ptr [td10_track_check_rel]
    mov     ax, word ptr es:[bx+di+0x2]
    mov     word ptr [bp+vec_18EoStateWorldCrds+2], ax
    mov     di, si
    mov     ax, di
    shl     di, 0x1
    add     di, ax
    shl     di, 0x1
    mov     ax, word ptr es:[bx+di+0x4]
    mov     word ptr [bp+vec_18EoStateWorldCrds+4], ax
    lea     ax, [bp+vec_18EoStateWorldCrds]
    push    ax
    mov     ax, offset unk_3BD5A
    push    ax
    lea     ax, [bp+var_11ApStateWorldCrds]
    push    ax
    mov     ax, word ptr [bp+player_simd]
    add     ax, 0xc8
    push    ax
    push    cs
    call    near ptr car_car_coll_detect_maybe
    add     sp, 0x8
    or      al, al
    jz      LAB_1471_2000
    mov     byte ptr [si+state.field_3FA], 0x1
    mov     ax, 0x3c00                         ; 15360 = track grid length / 2
    cwd
    push    dx
    push    ax
    mov     ax, 0x580                          ; 1408
    cwd
    push    dx
    push    ax
    mov     bx, word ptr [bp+player_state]
    sub     ax, ax
    push    ax
    push    word ptr [bx+0x2c]
    call    far ptr __aFlmul
    push    dx
    push    ax
    call    far ptr __aFuldiv                  ; *11/120
; 11/120 converts from the "internal" carstate units 
; to tiles per timestep (0.05s).  
    push    ax
    mov     bx, word ptr [bp+player_state]
    mov     ax, word ptr [bx+0x18]
    neg     ax
    push    ax
    lea     ax, [si+0x2]
    push    ax
    push    cs
    call    near ptr state_op_unk
    add     sp, 0x6
LAB_1471_2000:
    mov     al, byte ptr [startcol2]
    cbw
    mov     di, ax
    cmp     word ptr [bp+vec_FC], di
    jz      LAB_1471_200f
    jmp     near ptr LAB_1471_2130
LAB_1471_200f:
    mov     al, byte ptr [startrow2]
    cbw
    cmp     word ptr [bp+vec_FC+4], ax
    jz      LAB_1471_201c
    jmp     near ptr LAB_1471_2130
LAB_1471_201c:
    mov     ax, 0x7e
    push    ax
    mov     ax, word ptr [track_angle]
    add     ah, 0x1
    push    ax
    call    far ptr int_sin
    add     sp, 0x2
    push    ax
    call    far ptr multiply_and_scale
    add     sp, 0x4
    mov     bx, di
    shl     bx, 0x1
    mov     cx, word ptr [bx+trackcenterpos2]
    add     cx, ax
    mov     word ptr [bp+vec_18EoStateWorldCrds], cx
    mov     al, byte ptr [hillFlag]
    cbw
    mov     bx, ax
    shl     bx, 0x1
    mov     ax, word ptr [bx+hillHeightConsts]
    mov     word ptr [bp+vec_18EoStateWorldCrds+2], ax
    mov     ax, 0x7e
    push    ax
    mov     ax, word ptr [track_angle]
    add     ah, 0x1
    push    ax
    call    far ptr int_cos
    add     sp, 0x2
    push    ax
    call    far ptr multiply_and_scale
    add     sp, 0x4
    mov     cx, ax
    mov     al, byte ptr [startrow2]
    cbw
    mov     bx, ax
    shl     bx, 0x1
    add     cx, word ptr [bx+trackcenterpos]
    mov     word ptr [bp+vec_18EoStateWorldCrds+4], cx
    lea     ax, [bp+vec_18EoStateWorldCrds]
    push    ax
    mov     ax, offset unk_3BD62
    push    ax
    lea     ax, [bp+var_11ApStateWorldCrds]
    push    ax
    mov     ax, word ptr [bp+player_simd]
    add     ax, 0xc8
    push    ax
    push    cs
    call    near ptr car_car_coll_detect_maybe
    add     sp, 0x8
    cbw
    mov     word ptr [bp+var_138], ax
    or      ax, ax
    jnz     LAB_1471_2126
    mov     ax, 0x7e
    push    ax
    mov     ax, word ptr [track_angle]
    add     ah, 0x3
    push    ax
    call    far ptr int_sin
    add     sp, 0x2
    push    ax
    call    far ptr multiply_and_scale
    add     sp, 0x4
    mov     cx, ax
    mov     al, byte ptr [startcol2]
    cbw
    mov     bx, ax
    shl     bx, 0x1
    add     cx, word ptr [bx+trackcenterpos2]
    mov     word ptr [bp+vec_18EoStateWorldCrds], cx
    mov     ax, 0x7e
    push    ax
    mov     ax, word ptr [track_angle]
    add     ah, 0x3
    push    ax
    call    far ptr int_cos
    add     sp, 0x2
    push    ax
    call    far ptr multiply_and_scale
    add     sp, 0x4
    mov     cx, ax
    mov     al, byte ptr [startrow2]
    cbw
    mov     bx, ax
    shl     bx, 0x1
    add     cx, word ptr [bx+trackcenterpos]
    mov     word ptr [bp+vec_18EoStateWorldCrds+4], cx
    lea     ax, [bp+vec_18EoStateWorldCrds]
    push    ax
    mov     ax, offset unk_3BD62
    push    ax
    lea     ax, [bp+var_11ApStateWorldCrds]
    push    ax
    mov     ax, word ptr [bp+player_simd]
    add     ax, 0xc8
    push    ax
    push    cs
    call    near ptr car_car_coll_detect_maybe
    add     sp, 0x8
    cbw
    mov     word ptr [bp+var_138], ax
LAB_1471_2126:
    cmp     word ptr [bp+var_138], 0x0
    jz      LAB_1471_2130
    jmp     near ptr LAB_1471_1f38
; Storing the position updates.  
LAB_1471_2130:
    mov     bx, word ptr [bp+player_state]
    mov     ax, word ptr [pState_lvec1_x]
    mov     dx, word ptr [pState_lvec1_x+2]
    mov     word ptr [bx], ax
    mov     word ptr [bx+0x2], dx
    mov     bx, word ptr [bp+player_state]
    mov     ax, word ptr [pState_lvec1_y]
    mov     dx, word ptr [pState_lvec1_y+2]
    mov     word ptr [bx+0x4], ax
    mov     word ptr [bx+0x6], dx
    mov     bx, word ptr [bp+player_state]
    mov     ax, word ptr [pState_lvec1_z]
    mov     dx, word ptr [pState_lvec1_z+2]
    mov     word ptr [bx+0x8], ax
    mov     word ptr [bx+0xa], dx
    mov     bx, word ptr [bp+player_state]
    mov     ax, word ptr [pState_minusRotate_z_1]
    mov     word ptr [bx+0x1c], ax
    mov     bx, word ptr [bp+player_state]
    mov     ax, word ptr [pState_minusRotate_x_1]
    mov     word ptr [bx+0x1a], ax
    mov     bx, word ptr [bp+player_state]
    mov     ax, word ptr [pState_minusRotate_y_1]
    mov     word ptr [bx+0x18], ax
    mov     bx, word ptr [bp+player_state]
    mov     byte ptr [bx+0xc8], 0x0
LAB_1471_2182:
    pop     si
    pop     di
    mov     sp, bp
    pop     bp
    retf
update_player_state_asm_ endp

; void __cdecl16far init_carstate_from_simd(CARSTATE * carstate_, SIMD * simd_, char transmission, word pos_x_ax, word pos_x_dx, word pos_y_ax, word pos_y_dx, word pos_z_ax, word pos_z_dx, short track_angle_)
init_carstate_from_simd_asm_ proc far
    var_E      = word ptr  -14
    var_C      = word ptr  -12
    var_initX  = word ptr  -10
    var_initY  = word ptr   -8
    var_initZ  = word ptr   -6
    carstate_  = word ptr    6
    simd_      = word ptr    8
    transmission = byte ptr   10
    pos_x_ax   = word ptr   12
    pos_x_dx   = word ptr   14
    pos_y_ax   = word ptr   16
    pos_y_dx   = word ptr   18
    pos_z_ax   = word ptr   20
    pos_z_dx   = word ptr   22
    track_angle_ = word ptr   24

    push    bp
    mov     bp, sp
    sub     sp, 0xe
    push    di
    push    si
    sub     si, si
    mov     bx, word ptr [bp+carstate_]
    mov     ax, word ptr [bp+pos_x_ax]
    mov     dx, word ptr [bp+pos_x_dx]
    mov     word ptr [bx], ax
    mov     word ptr [bx+0x2], dx
    mov     bx, word ptr [bp+carstate_]
    mov     ax, word ptr [bp+pos_x_ax]
    mov     dx, word ptr [bp+pos_x_dx]
    mov     word ptr [bx+0xc], ax
    mov     word ptr [bx+0xe], dx
    mov     bx, word ptr [bp+carstate_]
    mov     ax, word ptr [bp+pos_y_ax]
    mov     dx, word ptr [bp+pos_y_dx]
    add     ax, 0x200
    adc     dx, si
    mov     word ptr [bx+0x4], ax
    mov     word ptr [bx+0x6], dx
    mov     bx, word ptr [bp+carstate_]
    mov     ax, word ptr [bp+pos_y_ax]
    mov     dx, word ptr [bp+pos_y_dx]
    mov     word ptr [bx+0x10], ax
    mov     word ptr [bx+0x12], dx
    mov     bx, word ptr [bp+carstate_]
    mov     ax, word ptr [bp+pos_z_ax]
    mov     dx, word ptr [bp+pos_z_dx]
    mov     word ptr [bx+0x8], ax
    mov     word ptr [bx+0xa], dx
    mov     bx, word ptr [bp+carstate_]
    mov     ax, word ptr [bp+pos_z_ax]
    mov     dx, word ptr [bp+pos_z_dx]
    mov     word ptr [bx+0x14], ax
    mov     word ptr [bx+0x16], dx
    mov     bx, word ptr [bp+carstate_]
    mov     ax, word ptr [bp+track_angle_]
    mov     word ptr [bx+0x18], ax
    mov     bx, word ptr [bp+carstate_]
    mov     word ptr [bx+0x1a], si
    mov     bx, word ptr [bp+carstate_]
    mov     word ptr [bx+0x1c], si
    mov     bx, word ptr [bp+carstate_]
    mov     word ptr [bx+0x36], si
    mov     bx, word ptr [bp+carstate_]
    mov     word ptr [bx+0x1e], si
    mov     bx, word ptr [bp+carstate_]
    mov     word ptr [bx+0x20], si
    mov     bx, word ptr [bp+carstate_]
    sub     al, al
    mov     byte ptr [bx+0xbc], al
    mov     bx, word ptr [bp+carstate_]
    mov     byte ptr [bx+0xbd], al
    mov     bx, word ptr [bp+simd_]
    mov     ax, word ptr [bx+0x6]
    mov     bx, word ptr [bp+carstate_]
    mov     word ptr [bx+0x22], ax
    mov     bx, word ptr [bp+carstate_]
    mov     ax, word ptr [bx+0x22]
    mov     word ptr [bx+0x24], ax
    mov     bx, word ptr [bp+carstate_]
    mov     ax, word ptr [bx+0x22]
    mov     word ptr [bx+0x26], ax
    mov     bx, word ptr [bp+carstate_]
    mov     byte ptr [bx+0xbe], 0x1
    mov     bx, word ptr [bp+carstate_]
    mov     word ptr [bx+0x28], si
    mov     bx, word ptr [bp+carstate_]
    mov     word ptr [bx+0x2a], si
    mov     bx, word ptr [bp+carstate_]
    mov     word ptr [bx+0x2c], si
    mov     bx, word ptr [bp+carstate_]
    mov     word ptr [bx+0x2e], si
    mov     bx, word ptr [bp+simd_]
    mov     ax, word ptr [bx+0x10]
    mov     bx, word ptr [bp+carstate_]
    mov     word ptr [bx+0x30], ax
    mov     bx, word ptr [bp+carstate_]
    mov     ax, word ptr [bx+0x30]
    mov     cl, 0x8
    shr     ax, cl
    mov     word ptr [bx+0x32], ax
    mov     bx, word ptr [bp+simd_]
    mov     ax, word ptr [bx+0x20]
    mov     bx, word ptr [bp+carstate_]
    mov     word ptr [bx+0x34], ax
    mov     bx, word ptr [bp+carstate_]
    mov     ax, word ptr [bx+0x34]
    mov     word ptr [bx+0x3a], ax
    mov     bx, word ptr [bp+simd_]
    mov     ax, word ptr [bx+0x22]
    mov     bx, word ptr [bp+carstate_]
    mov     word ptr [bx+0x38], ax
    mov     bx, word ptr [bp+carstate_]
    mov     ax, word ptr [bx+0x38]
    mov     word ptr [bx+0x3c], ax
    mov     bx, word ptr [bp+carstate_]
    mov     word ptr [bx+0x3e], si
    mov     bx, word ptr [bp+carstate_]
    mov     word ptr [bx+0x40], si
    mov     bx, word ptr [bp+carstate_]
    mov     word ptr [bx+0x42], si
    mov     bx, word ptr [bp+carstate_]
    mov     word ptr [bx+0x48], si
    mov     bx, word ptr [bp+carstate_]
    mov     word ptr [bx+0x4a], si
    mov     bx, word ptr [bp+carstate_]
    mov     byte ptr [bx+0xbf], 0x2
    mov     bx, word ptr [bp+carstate_]
    mov     byte ptr [bx+0xc0], 0x2
    mov     bx, word ptr [bp+carstate_]
    mov     byte ptr [bx+0xc1], 0x4
    mov     bx, word ptr [bp+carstate_]
    mov     word ptr [bx+0x44], si
    mov     bx, word ptr [bp+carstate_]
    mov     word ptr [bx+0x46], 0x3e8
    mov     ax, word ptr [bp+pos_x_ax]
    mov     dx, word ptr [bp+pos_x_dx]
    mov     cl, 0x6
; Undoing the 6x shl double 
; conversion done on setting 
; the arguments...  
LAB_1471_22f4:
    sar     dx, 0x1
    rcr     ax, 0x1
    dec     cl
    jnz     LAB_1471_22f4
    mov     word ptr [bp+var_initX], ax
    mov     ax, word ptr [bp+pos_y_ax]
    mov     dx, word ptr [bp+pos_y_dx]
    mov     cl, 0x6
LAB_1471_2307:
    sar     dx, 0x1
    rcr     ax, 0x1
    dec     cl
    jnz     LAB_1471_2307
    mov     word ptr [bp+var_initY], ax
    mov     ax, word ptr [bp+pos_z_ax]
    mov     dx, word ptr [bp+pos_z_dx]
    mov     cl, 0x6
LAB_1471_231a:
    sar     dx, 0x1
    rcr     ax, 0x1
    dec     cl
    jnz     LAB_1471_231a
    mov     word ptr [bp+var_initZ], ax
    sub     di, di
LAB_1471_2327:
    mov     bx, word ptr [bp+carstate_]
    mov     byte ptr [bx+di+0xc2], 0x1         ; initial surface = tarmac
    mov     ax, di
    shl     ax, 0x1
    mov     word ptr [bp+var_C], ax
    mov     bx, word ptr [bp+carstate_]
    add     bx, ax
    mov     word ptr [bx+0x4c], si             ; .rc1
    mov     bx, word ptr [bp+carstate_]
    add     bx, word ptr [bp+var_C]
    mov     word ptr [bx+0x54], si             ; rc2
    mov     bx, word ptr [bp+carstate_]
    add     bx, word ptr [bp+var_C]
    mov     word ptr [bx+0x5c], si             ; rc3
    mov     bx, word ptr [bp+carstate_]
    add     bx, word ptr [bp+var_C]
    mov     word ptr [bx+0x64], si             ; rc4
    mov     bx, word ptr [bp+carstate_]
    add     bx, word ptr [bp+var_C]
    mov     word ptr [bx+0x6c], si             ; rc5
    mov     ax, di
    mov     cx, ax
    shl     ax, 0x1
    add     ax, cx
    shl     ax, 0x1                            ; *6
    mov     word ptr [bp+var_E], ax
    mov     bx, word ptr [bp+carstate_]
    add     bx, ax
    push    si
    push    di
    lea     di, [bx+0x74]                      ; ax is added into the offset
    lea     si, [bp+var_initX]
    push    ds
    pop     es
    movsw
    movsw
    movsw
    pop     di
    pop     si
    mov     bx, word ptr [bp+carstate_]
    add     bx, word ptr [bp+var_E]
    push    si
    push    di
    lea     di, [bx+0x8c]
    lea     si, [bp+var_initX]                 ; moves x, y and z.
    movsw
    movsw
    movsw
    pop     di
    pop     si
    inc     di
    cmp     di, 0x4
    jl      LAB_1471_2327
    mov     bx, word ptr [bp+carstate_]
    mov     ax, si
    mov     byte ptr [bx+0xc6], al
    mov     bx, word ptr [bp+carstate_]
    mov     byte ptr [bx+0xc7], al
    mov     bx, word ptr [bp+carstate_]
    mov     byte ptr [bx+0xc8], al
    mov     bx, word ptr [bp+carstate_]
    mov     byte ptr [bx+0xc9], al
    mov     bx, word ptr [bp+carstate_]
    mov     byte ptr [bx+0xca], al
    mov     bx, word ptr [bp+carstate_]
    mov     byte ptr [bx+0xcb], al
    mov     bx, word ptr [bp+carstate_]
    mov     al, byte ptr [bp+transmission]
    mov     byte ptr [bx+0xcc], al
    mov     bx, word ptr [bp+carstate_]
    mov     ax, si
    mov     byte ptr [bx+0xcd], al
    mov     bx, word ptr [bp+carstate_]
    mov     byte ptr [bx+0xce], al
    mov     bx, word ptr [bp+carstate_]
    mov     byte ptr [bx+0xcf], 0x1
    pop     si
    pop     di
    mov     sp, bp
    pop     bp
    retf
init_carstate_from_simd_asm_ endp
    db 0x90

; void __cdecl16far init_game_state(int param_1)
init_game_state_asm_ proc far
    var_A      = word ptr  -10
    var_8      = word ptr   -8
    var_2      = word ptr   -2
    param_1    = word ptr    6

    push    bp
    mov     bp, sp
    sub     sp, 0xa
    push    di
    push    si
    sub     si, si
    cmp     word ptr [bp+param_1], -0x1
    jnz     LAB_1471_243d
    mov     word ptr [elapsed_time1], si
    sub     di, di
LAB_1471_2408:
    mov     ax, 0x460                          ; sizeof(struct GAMESTATE)
    cwd
    push    dx
    push    ax
    mov     ax, di
    cwd
    push    dx
    push    ax
    call    far ptr __aFlmul
    add     ax, 0x3f4
    adc     dx, 0x0
    add     ax, word ptr [cvxptr]
    adc     dx, 0x0
    mov     cx, 0xc
    shl     dx, cl
    add     dx, word ptr [cvxptr+2]
    mov     es, dx
    mov     bx, ax
    mov     ax, si
    mov     byte ptr es:[bx], al
    inc     di
    cmp     di, 0x14
    jl      LAB_1471_2408
LAB_1471_243d:
    cmp     word ptr [framespersec], 0xa
    jnz     LAB_1471_244c
    mov     word ptr [steerWhlRespTable_ptr], offset steerWhlRespTable_10fps
    jmp     LAB_1471_2452
LAB_1471_244c:
    mov     word ptr [steerWhlRespTable_ptr], offset steerWhlRespTable_20fps
LAB_1471_2452:
    mov     ax, 0x1e
    imul    word ptr [framespersec]
    mov     word ptr [g_rpfxrate], ax
    mov     ax, 0x64
    cwd
    mov     cx, word ptr [framespersec]
    idiv    cx
    mov     word ptr [word_4499C], ax
    cmp     word ptr [bp+param_1], -0x3
    jnz     LAB_1471_2472
    jmp     near ptr LAB_1471_2824
LAB_1471_2472:
    call    far ptr init_unknown
    mov     byte ptr [state.field_3F4], 0x1
    mov     word ptr [state.game_frames_per_sec], 0x1
    mov     ax, si
    mov     byte ptr [state.game_inputmode], al
    mov     byte ptr [state.game_3F6autoLoadEvalFlag], al
    mov     word ptr [state.game_frame_in_sec], si
    mov     word ptr [state.field_2F4], si
    mov     byte ptr [state.field_3F7], al
    mov     byte ptr [state.(field_3F7+1)], al
    mov     di, si
    jmp     LAB_1471_24a3
LAB_1471_249c:
    mov     ax, si
    mov     byte ptr [di+state.field_3FA], al
    inc     di
LAB_1471_24a3:
    cmp     di, 0x30
    jl      LAB_1471_249c
    mov     di, si
    jmp     LAB_1471_24b5
LAB_1471_24ac:
    mov     bx, di
    shl     bx, 0x1
    mov     word ptr [bx+state.field_38E], si
    inc     di
LAB_1471_24b5:
    cmp     di, 0x18
    jl      LAB_1471_24ac
    mov     ax, 0x200
    push    ax
    mov     ax, word ptr [track_angle]
    add     ah, 0x3
    push    ax
    call    far ptr int_sin
    add     sp, 0x2
    push    ax
    call    far ptr multiply_and_scale
    add     sp, 0x4
    mov     cx, 0x1000
    push    cx
    mov     cx, word ptr [track_angle]
    add     ch, 0x2
    push    cx
    mov     word ptr [bp+var_A], ax
    call    far ptr int_sin
    add     sp, 0x2
    push    ax
    call    far ptr multiply_and_scale
    add     sp, 0x4
    add     ax, word ptr [bp+var_A]
    mov     cx, ax
    mov     al, byte ptr [startcol2]
    cbw
    mov     dx, cx
    mov     cl, 0xa
    shl     ax, cl
    add     dx, ax
    mov     word ptr [state.game_vec1.vx], dx
    mov     al, byte ptr [hillFlag]
    cbw
    mov     bx, ax
    shl     bx, 0x1
    mov     ax, word ptr [bx+hillHeightConsts]
    add     ax, 0x3c0
    mov     word ptr [state.game_vec1.vy], ax
    mov     ax, 0x200
    push    ax
    mov     ax, word ptr [track_angle]
    add     ah, 0x3
    push    ax
    call    far ptr int_cos
    add     sp, 0x2
    push    ax
    call    far ptr multiply_and_scale
    add     sp, 0x4
    mov     cx, 0x1000
    push    cx
    mov     cx, word ptr [track_angle]
    add     ch, 0x2
    push    cx
    mov     word ptr [bp+var_A], ax
    call    far ptr int_cos
    add     sp, 0x2
    push    ax
    call    far ptr multiply_and_scale
    add     sp, 0x4
    mov     cx, ax
    mov     al, byte ptr [startrow2]
    cbw
    mov     bx, ax
    shl     bx, 0x1
    add     cx, word ptr [bx+trackpos]
    add     cx, word ptr [bp+var_A]
    mov     word ptr [state.game_vec1.vz], cx
    push    si
    push    di
    mov     di, offset state.game_vec2.vx
    mov     si, offset state.game_vec1.vx
    push    ds
    pop     es
    movsw
    movsw
    movsw
    pop     di
    pop     si
    push    si
    push    di
    mov     di, offset state.game_vec3.vx
    mov     si, offset state.game_vec1.vx
    movsw
    movsw
    movsw
    pop     di
    pop     si
    push    si
    push    di
    mov     di, offset state.game_vec4.vx
    mov     si, offset state.game_vec1.vx
    movsw
    movsw
    movsw
    pop     di
    pop     si
    sub     ax, ax
    mov     word ptr [state.game_travDist+2], ax
    mov     word ptr [state.game_travDist], ax
    mov     word ptr [state.game_frame], si
    mov     word ptr [state.game_total_finish], si
    mov     word ptr [state.field_144], si
    mov     word ptr [state.game_pEndFrame], si
    mov     word ptr [state.game_oEndFrame], si
    mov     word ptr [state.game_penalty], si
    mov     word ptr [state.game_impactSpeed], si
    mov     word ptr [state.game_topSpeed], si
    mov     word ptr [state.game_jumpCount], si
    mov     ax, 0xd2
    push    ax
    mov     ax, word ptr [track_angle]
    add     ah, 0x2
    push    ax
    call    far ptr int_sin
    add     sp, 0x2
    push    ax
    call    far ptr multiply_and_scale
    add     sp, 0x4
    mov     cx, 0x24
    push    cx
    mov     cx, word ptr [track_angle]
    add     ch, 0x1
    push    cx
    mov     word ptr [bp+var_A], ax
    call    far ptr int_sin
    add     sp, 0x2
    push    ax
    call    far ptr multiply_and_scale
    add     sp, 0x4
    add     ax, word ptr [bp+var_A]
    mov     word ptr [bp+var_8], ax
    mov     ax, 0xd2
    push    ax
    mov     ax, word ptr [track_angle]
    add     ah, 0x2
    push    ax
    call    far ptr int_cos
    add     sp, 0x2
    push    ax
    call    far ptr multiply_and_scale
    add     sp, 0x4
    mov     cx, 0x24
    push    cx
    mov     cx, word ptr [track_angle]
    add     ch, 0x1
    push    cx
    mov     word ptr [bp+var_A], ax
    call    far ptr int_cos
    add     sp, 0x2
    push    ax
    call    far ptr multiply_and_scale
    add     sp, 0x4
    add     ax, word ptr [bp+var_A]
    mov     word ptr [bp+var_2], ax
    mov     ax, word ptr [track_angle]
    neg     ax
    push    ax
    mov     al, byte ptr [startrow2]
    cbw
    mov     bx, ax
    shl     bx, 0x1
    mov     ax, word ptr [bx+trackcenterpos]
    add     ax, word ptr [bp+var_2]
    cwd
    mov     cl, 0x6
LAB_1471_265f:
    shl     ax, 0x1
    rcl     dx, 0x1
    dec     cl
    jnz     LAB_1471_265f
    push    dx
    push    ax
    mov     al, byte ptr [hillFlag]
    cbw
    mov     bx, ax
    shl     bx, 0x1
    mov     ax, word ptr [bx+hillHeightConsts]
    cwd
    mov     cl, 0x6
LAB_1471_2678:
    shl     ax, 0x1
    rcl     dx, 0x1
    dec     cl
    jnz     LAB_1471_2678
    push    dx
    push    ax
    mov     al, byte ptr [startcol2]
    cbw
    mov     bx, ax
    shl     bx, 0x1
    mov     ax, word ptr [bx+trackcenterpos2]
    add     ax, word ptr [bp+var_8]
    cwd
    mov     cl, 0x6
LAB_1471_2694:
    shl     ax, 0x1
    rcl     dx, 0x1
    dec     cl
    jnz     LAB_1471_2694
    push    dx
    push    ax
    mov     al, byte ptr [gameconfig.game_playertransmission]
    cbw
    push    ax
    mov     ax, offset simd_player             ; dseg: simd_copy
    push    ax
    mov     ax, offset state.playerstate.car_posWorld1.lx ; dseg: state.playerstate
    push    ax
    push    cs
    call    near ptr init_carstate_from_simd
    add     sp, 0x14
    mov     word ptr [state.field_2F2], si
    mov     ax, si
    mov     byte ptr [state.field_45D], al
    mov     byte ptr [state.field_45E], al
    mov     byte ptr [state.field_45B], al
    mov     byte ptr [state.field_45C], al
    mov     al, byte ptr [startcol2]
    cbw
    mov     word ptr [state.game_startcol], ax
    mov     word ptr [state.game_startcol2], ax
    mov     al, byte ptr [startrow2]
    cbw
    mov     word ptr [state.game_startrow], ax
    mov     word ptr [state.game_startrow2], ax
    cmp     word ptr [bp+param_1], -0x2
    jz      LAB_1471_26fa
    sub     ax, ax
    push    ax
    mov     al, byte ptr [state.playerstate.field_CE]
    inc     byte ptr [state.playerstate.field_CE]
    sub     ah, ah
    push    ax
    mov     ax, offset state.playerstate.car_vec_unk3.vx
    push    ax
    push    word ptr [state.playerstate.car_trackdata3_index]
    push    cs
    call    near ptr gettlistpoint
    add     sp, 0x8
LAB_1471_26fa:
    mov     ax, 0xd2
    push    ax
    mov     ax, word ptr [track_angle]
    add     ah, 0x2
    push    ax
    call    far ptr int_sin
    add     sp, 0x2
    push    ax
    call    far ptr multiply_and_scale
    add     sp, 0x4
    mov     cx, 0x24
    push    cx
    mov     cx, word ptr [track_angle]
    add     ch, 0x3
    push    cx
    mov     word ptr [bp+var_A], ax
    call    far ptr int_sin
    add     sp, 0x2
    push    ax
    call    far ptr multiply_and_scale
    add     sp, 0x4
    add     ax, word ptr [bp+var_A]
    mov     word ptr [bp+var_8], ax
    mov     ax, 0xd2
    push    ax
    mov     ax, word ptr [track_angle]
    add     ah, 0x2
    push    ax
    call    far ptr int_cos
    add     sp, 0x2
    push    ax
    call    far ptr multiply_and_scale
    add     sp, 0x4
    mov     cx, 0x24
    push    cx
    mov     cx, word ptr [track_angle]
    add     ch, 0x3
    push    cx
    mov     word ptr [bp+var_A], ax
    call    far ptr int_cos
    add     sp, 0x2
    push    ax
    call    far ptr multiply_and_scale
    add     sp, 0x4
    add     ax, word ptr [bp+var_A]
    mov     word ptr [bp+var_2], ax
    mov     ax, word ptr [track_angle]
    neg     ax
    push    ax
    mov     al, byte ptr [startrow2]
    cbw
    mov     bx, ax
    shl     bx, 0x1
    mov     ax, word ptr [bx+trackcenterpos]
    add     ax, word ptr [bp+var_2]
    cwd
    mov     cl, 0x6
LAB_1471_2796:
    shl     ax, 0x1
    rcl     dx, 0x1
    dec     cl
    jnz     LAB_1471_2796
    push    dx
    push    ax
    mov     al, byte ptr [hillFlag]
    cbw
    mov     bx, ax
    shl     bx, 0x1
    mov     ax, word ptr [bx+hillHeightConsts]
    cwd
    mov     cl, 0x6
LAB_1471_27af:
    shl     ax, 0x1
    rcl     dx, 0x1
    dec     cl
    jnz     LAB_1471_27af
    push    dx
    push    ax
    mov     al, byte ptr [startcol2]
    cbw
    mov     bx, ax
    shl     bx, 0x1
    mov     ax, word ptr [bx+trackcenterpos2]
    add     ax, word ptr [bp+var_8]
    cwd
    mov     cl, 0x6
LAB_1471_27cb:
    shl     ax, 0x1
    rcl     dx, 0x1
    dec     cl
    jnz     LAB_1471_27cb
    push    dx
    push    ax
    mov     ax, 0x1
    push    ax
    mov     ax, offset simd_opponent
    push    ax
    mov     ax, offset state.opponentstate.car_posWorld1.lx
    push    ax
    push    cs
    call    near ptr init_carstate_from_simd
    add     sp, 0x14
    cmp     byte ptr [gameconfig.game_opponenttype], 0x0
    jz      LAB_1471_281f
    cmp     word ptr [bp+param_1], -0x2
    jz      LAB_1471_281f
    mov     ax, offset state.field_3F9
    push    ax
    mov     al, byte ptr [state.opponentstate.field_CE]
    inc     byte ptr [state.opponentstate.field_CE]
    sub     ah, ah
    push    ax
    mov     ax, offset state.opponentstate.car_vec_unk3.vx
    push    ax
    mov     bx, word ptr [state.opponentstate.car_trackdata3_index]
    shl     bx, 0x1
    add     bx, word ptr [trackdata3]
    mov     es, word ptr [trackdata3+2]
    push    word ptr es:[bx]
    push    cs
    call    near ptr gettlistpoint
    add     sp, 0x8
LAB_1471_281f:
    mov     ax, si
    mov     byte ptr [state.field_42A], al
LAB_1471_2824:
    pop     si
    pop     di
    mov     sp, bp
    pop     bp
    retf
init_game_state_asm_ endp

; void __cdecl16far restore_gamestate(uint frame)
restore_gamestate_asm_ proc far
    frame      = word ptr    6

    push    bp
    mov     bp, sp
    sub     sp, 0x2
    push    di
    push    si
    cmp     word ptr [bp+frame], 0x0
    jnz     LAB_1471_2849
    cmp     word ptr [elapsed_time1], 0x0
    jnz     LAB_1471_2849
    sub     ax, ax
    push    ax
    push    cs
    call    near ptr init_game_state
    add     sp, 0x2
LAB_1471_2849:
    mov     ax, word ptr [bp+frame]
    cwd
    mov     cx, word ptr [g_rpfxrate]
    idiv    cx
    mov     si, ax
    cmp     si, 0x14
    jnz     LAB_1471_285b
    dec     si
LAB_1471_285b:
    mov     ax, word ptr [state.game_frame]
    cmp     word ptr [bp+frame], ax
    jc      LAB_1471_28a1
LAB_1471_2863:
    mov     ax, word ptr [g_rpfxrate]
    imul    si
    cmp     ax, word ptr [state.game_frame]
    ja      LAB_1471_2871
    jmp     near ptr LAB_1471_28f2
LAB_1471_2871:
    mov     ax, 0x460
    cwd
    push    dx
    push    ax
    mov     ax, si
    cwd
    push    dx
    push    ax
    call    far ptr __aFlmul
    add     ax, 0x3f4
    adc     dx, 0x0
    add     ax, word ptr [cvxptr]
    adc     dx, 0x0
    mov     cx, 0xc
    shl     dx, cl
    add     dx, word ptr [cvxptr+2]
    mov     es, dx
    mov     bx, ax
    cmp     byte ptr es:[bx], 0x0
    jz      LAB_1471_28ee
LAB_1471_28a1:
    mov     ax, 0x460
    cwd
    push    dx
    push    ax
    mov     ax, si
    cwd
    push    dx
    push    ax
    call    far ptr __aFlmul
    add     ax, word ptr [cvxptr]
    adc     dx, 0x0
    mov     cx, 0xc
    shl     dx, cl
    add     dx, word ptr [cvxptr+2]
    push    si
    mov     di, offset state
    mov     si, ax
    push    ds
    pop     es
    push    ds
    mov     ds, dx
    mov     cx, 0x230
    rep movsw
    pop     ds
    pop     si
    mov     ax, offset state.kevinseed
    push    ax
    call    far ptr init_kevinrandom
    add     sp, 0x2
    mov     ax, word ptr [state.game_frame]
    mov     word ptr [elapsed_time2], ax
    pop     si
    pop     di
    mov     sp, bp
    pop     bp
    retf
    db 3 dup (0x90)
LAB_1471_28ee:
    dec     si
    jmp     near ptr LAB_1471_2863
LAB_1471_28f2:
    pop     si
    pop     di
    mov     sp, bp
    pop     bp
    retf
restore_gamestate_asm_ endp

; ******************************************************************************
; * dbg: movesim
; ******************************************************************************

; void __cdecl16far update_gamestate(void)
update_gamestate_asm_ proc far
    var_carInputByte = byte ptr   -4

    push    bp
    mov     bp, sp
    sub     sp, 0x4
    push    di
    push    si
    mov     bx, word ptr [state.game_frame]
    les     di, [td16_rpl_buffer]
    mov     al, byte ptr es:[bx+di]
; The variable might be called 
; rplBufferByte, but it seems its 
; use is more general.  
    mov     byte ptr [bp+var_carInputByte], al
    or      al, al
    jz      LAB_1471_2917
    mov     byte ptr [state.game_inputmode], 0x1
LAB_1471_2917:
    mov     ax, bx
    sub     dx, dx
    div     word ptr [g_rpfxrate]
    or      dx, dx
    jnz     LAB_1471_2969
    mov     ax, bx
    sub     dx, dx
    div     word ptr [g_rpfxrate]
    mov     si, ax
    mov     ax, offset state.kevinseed
    push    ax
    call    far ptr get_kevinrandom_seed
    add     sp, 0x2
    mov     ax, 0x460
    cwd
    push    dx
    push    ax
    mov     ax, si
    cwd
    push    dx
    push    ax
    call    far ptr __aFlmul
    add     ax, word ptr [cvxptr]
    adc     dx, 0x0
    mov     cx, 0xc
    shl     dx, cl
    add     dx, word ptr [cvxptr+2]
    mov     bx, ax
    mov     es, dx
    push    si
    mov     di, bx
    mov     si, offset state
    mov     cx, 0x230
    rep movsw
    pop     si
LAB_1471_2969:
    inc     word ptr [state.game_frame]
    cmp     byte ptr [state.game_3F6autoLoadEvalFlag], 0x0
    jz      LAB_1471_29ae
    mov     ax, word ptr [state.game_frames_per_sec]
    cmp     word ptr [state.game_frame_in_sec], ax
    jge     LAB_1471_29ae
    inc     word ptr [state.game_frame_in_sec]
    cmp     word ptr [state.game_frame_in_sec], ax
    jnz     LAB_1471_29ae
    cmp     byte ptr [gabort], 0x0
    jnz     LAB_1471_29ae
    cmp     byte ptr [state.playerstate.car_crashBmpFlag], 0x1
    jnz     LAB_1471_29a2
    cmp     word ptr [state.playerstate.car_speed2], 0x0
    jz      LAB_1471_29a2
    inc     word ptr [state.game_frames_per_sec]
    jmp     LAB_1471_29ae
LAB_1471_29a2:
    cmp     byte ptr [game_replay_mode], 0x0
    jnz     LAB_1471_29ae
    mov     byte ptr [gabort], 0x1
LAB_1471_29ae:
    cmp     byte ptr [state.game_inputmode], 0x0
    jz      LAB_1471_29e6
    mov     al, byte ptr [bp+var_carInputByte]
    cbw
    push    ax
    push    cs
    call    near ptr player_op
    add     sp, 0x2
    cmp     byte ptr [gameconfig.game_opponenttype], 0x0
    jz      LAB_1471_29cc
    push    cs
    call    near ptr opponent_op
LAB_1471_29cc:
    call    far ptr move_helicopters
    cmp     byte ptr [state.field_42A], 0x0
    jz      LAB_1471_29dc
    push    cs
    call    near ptr move_explode
LAB_1471_29dc:
    push    cs
    call    near ptr audio_carstate
    pop     si
    pop     di
    mov     sp, bp
    pop     bp
    retf
LAB_1471_29e6:
    cmp     byte ptr [game_replay_mode], 0x1
    jz      LAB_1471_29f0
    jmp     near ptr LAB_1471_2ad1
LAB_1471_29f0:
    push    cs
    call    near ptr audio_carstate
    cmp     byte ptr [g_staging], 0x0
    jnz     LAB_1471_29fe
    jmp     near ptr LAB_1471_2ad1
LAB_1471_29fe:
    cmp     word ptr [g_truckdoor], 0x1c2
    jge     LAB_1471_2a0b
    add     word ptr [g_truckdoor], 0x8
LAB_1471_2a0b:
    cmp     byte ptr [g_staging], 0x1
    jnz     LAB_1471_2a1e
    cmp     word ptr [g_truckdoor], 0x180
    jle     LAB_1471_2a1e
    inc     byte ptr [g_staging]
LAB_1471_2a1e:
    cmp     byte ptr [g_staging], 0x2
    jz      LAB_1471_2a28
    jmp     near ptr LAB_1471_2ad1
LAB_1471_2a28:
    mov     al, byte ptr [startrow2]
    cbw
    mov     bx, ax
    shl     bx, 0x1
    mov     ax, word ptr [bx+trackcenterpos]
    mov     cx, word ptr [state.playerstate.car_posWorld1.lz]
    mov     bx, word ptr [state.playerstate.car_posWorld1.lz+2]
    mov     dx, cx
    mov     cl, 0x6
LAB_1471_2a40:
    sar     bx, 0x1
    rcr     dx, 0x1
    dec     cl
    jnz     LAB_1471_2a40
    sub     ax, dx
    push    ax
    push    word ptr [track_angle]
    call    far ptr int_cos
    add     sp, 0x2
    push    ax
    call    far ptr multiply_and_scale
    add     sp, 0x4
    mov     si, ax
    mov     al, byte ptr [startcol2]
    cbw
    mov     bx, ax
    shl     bx, 0x1
    mov     ax, word ptr [bx+trackcenterpos2]
    mov     cx, word ptr [state.playerstate.car_posWorld1.lx]
    mov     bx, word ptr [state.playerstate.car_posWorld1.lx+2]
    mov     dx, cx
    mov     cl, 0x6
LAB_1471_2a7a:
    sar     bx, 0x1
    rcr     dx, 0x1
    dec     cl
    jnz     LAB_1471_2a7a
    sub     ax, dx
    push    ax
    push    word ptr [track_angle]
    call    far ptr int_sin
    add     sp, 0x2
    push    ax
    call    far ptr multiply_and_scale
    add     sp, 0x4
    add     si, ax
    cmp     si, 0xe4
    jle     LAB_1471_2ac0
    cmp     word ptr [state.playerstate.car_speed], 0x500
    jnc     LAB_1471_2abc
    mov     ax, 0x1
LAB_1471_2aad:
    push    ax
    push    cs
    call    near ptr player_op
    add     sp, 0x2
    pop     si
    pop     di
    mov     sp, bp
    pop     bp
    retf
    db 0x90
LAB_1471_2abc:
    sub     ax, ax
    jmp     LAB_1471_2aad
LAB_1471_2ac0:
    cmp     word ptr [state.playerstate.car_speed], 0x0
    jz      LAB_1471_2acc
    mov     ax, 0x2
    jmp     LAB_1471_2aad
LAB_1471_2acc:
    mov     byte ptr [g_staging], 0x0
LAB_1471_2ad1:
    pop     si
    pop     di
    mov     sp, bp
    pop     bp
    retf
update_gamestate_asm_ endp
    db 0x90

; ******************************************************************************
; * dbg: moveplayer
; ******************************************************************************

; void __cdecl16far player_op(byte car_input)
player_op_asm_ proc far
    var_52     = byte ptr  -82
    var_3A     = byte ptr  -58
    var_38     = byte ptr  -56
    var_32     = byte ptr  -50
    var_2C     = byte ptr  -44
    var_2A     = byte ptr  -42
    var_28     = byte ptr  -40
    var_matptr = word ptr  -32
    var_1EpenaltyCounter = word ptr  -30
    var_1C     = byte ptr  -28
    var_1A     = byte ptr  -26
    var_2      = word ptr   -2
    car_input  = byte ptr    6

    push    bp
    mov     bp, sp
    sub     sp, 0x52
    push    di
    push    si
    cmp     byte ptr [show_penalty_counter], 0x0
    jz      LAB_1471_2aeb
    dec     byte ptr [show_penalty_counter]
LAB_1471_2aeb:
    mov     byte ptr [state.playerstate.field_CF], 0x1
    cmp     byte ptr [state.playerstate.car_crashBmpFlag], 0x0
    jz      LAB_1471_2b32
    mov     byte ptr [state.field_45D], 0x0
    mov     byte ptr [bp+car_input], 0x2
    cmp     word ptr [state.playerstate.car_speed2], 0x0
    jnz     LAB_1471_2b32
    mov     byte ptr [state.playerstate.field_CF], 0x0
    cmp     word ptr [state.playerstate.car_speed], 0x0
    jnz     LAB_1471_2b32
    cmp     word ptr [state.playerstate.car_rc1], 0x0
    jnz     LAB_1471_2b32
    cmp     word ptr [state.playerstate.(car_rc1+1*2)], 0x0
    jnz     LAB_1471_2b32
    cmp     word ptr [state.playerstate.(car_rc1+2*2)], 0x0
    jnz     LAB_1471_2b32
    cmp     word ptr [state.playerstate.(car_rc1+3*2)], 0x0
    jnz     LAB_1471_2b32
    jmp     near ptr LAB_1471_3100
LAB_1471_2b32:
    mov     ax, offset simd_player
    push    ax
    mov     ax, offset state.playerstate.car_posWorld1.lx
    push    ax
    sub     ax, ax
    push    ax
    mov     al, byte ptr [bp+car_input]
    cbw
    push    ax
    push    cs
    call    near ptr update_car_speed
    add     sp, 0x8
    mov     al, byte ptr [bp+car_input]
    cbw
    sar     ax, 0x1
    sar     ax, 0x1
    and     ax, 0x3                            ; masks all keys but the steering ones.
    push    ax
    push    cs
    call    near ptr upd_statef20_from_steer_input
    add     sp, 0x2
    mov     ax, 0x1
    push    ax
    mov     ax, offset simd_player
    push    ax
    mov     ax, offset state.playerstate.car_posWorld1.lx
    push    ax
    push    cs
    call    near ptr update_grip
    add     sp, 0x6
    sub     ax, ax
    push    ax
    mov     ax, offset simd_opponent           ; simd2
    push    ax
    mov     ax, offset state.opponentstate.car_posWorld1.lx ; opp CARSTATE
    push    ax
    mov     ax, offset simd_player
    push    ax
    mov     ax, offset state.playerstate.car_posWorld1.lx ; player CARSTATE
    push    ax
    push    cs
    call    near ptr update_player_state
    add     sp, 0xa
    mov     ax, word ptr [state.playerstate.car_speed2]
    sub     dx, dx
    add     word ptr [state.game_travDist], ax
    adc     word ptr [state.game_travDist+2], dx
    mov     al, byte ptr [state.field_45B]
    mov     byte ptr [bp+var_1C], al
    mov     ax, word ptr [state.field_2F2]
    mov     word ptr [bp+var_2], ax
    lea     ax, [bp+var_1EpenaltyCounter]
    push    ax
    lea     ax, [bp+var_2]
    push    ax
    push    cs
    call    near ptr detect_penalty
    add     sp, 0x4
    cbw
    mov     si, ax
    or      si, si
    jnz     LAB_1471_2bbb
    jmp     near ptr LAB_1471_2ca3
LAB_1471_2bbb:
    cmp     word ptr [bp+var_1EpenaltyCounter], -0x2
    jnz     LAB_1471_2bc8
    mov     byte ptr [state.field_45B], 0x1
    jmp     LAB_1471_2bd4
LAB_1471_2bc8:
    cmp     byte ptr [state.field_45B], 0x1
    jnz     LAB_1471_2bd9
    mov     byte ptr [state.field_45B], 0x0
LAB_1471_2bd4:
    mov     byte ptr [state.field_45C], 0x0
LAB_1471_2bd9:
    cmp     byte ptr [state.field_45B], 0x0
    jz      LAB_1471_2be3
    jmp     near ptr LAB_1471_2c9d
LAB_1471_2be3:
    cmp     word ptr [bp+var_2], 0x0
    jnz     LAB_1471_2bf8
    cmp     word ptr [state.field_2F4], 0x0
    jz      LAB_1471_2bf8
    inc     byte ptr [state.playerstate.field_CD]
    jmp     LAB_1471_2c6b
    db 0x90
    db 0x90
LAB_1471_2bf8:
    cmp     word ptr [bp+var_1EpenaltyCounter], 0x0
    jl      LAB_1471_2c12
; <2 skipped elements...  
    cmp     word ptr [bp+var_1EpenaltyCounter], 0x3
    jge     LAB_1471_2c12
    mov     byte ptr [state.field_45C], 0x0
    mov     ax, word ptr [bp+var_2]
    mov     word ptr [state.field_2F2], ax
    jmp     near ptr LAB_1471_2c9d
LAB_1471_2c12:
    cmp     word ptr [bp+var_1EpenaltyCounter], -0x1
    jz      LAB_1471_2c1e
    cmp     word ptr [bp+var_1EpenaltyCounter], 0x3
    jle     LAB_1471_2c9d
LAB_1471_2c1e:
    mov     di, word ptr [state.field_2F4]
    shl     di, 0x1
    les     bx, [td01_track_file_cpy]
    mov     ax, word ptr [bp+var_2]
    cmp     word ptr es:[bx+di], ax
    jz      LAB_1471_2c39
    les     bx, [td02_penalty_related]
    cmp     word ptr es:[bx+di], ax
    jnz     LAB_1471_2c40
LAB_1471_2c39:
    inc     byte ptr [state.field_45C]
    jmp     LAB_1471_2c64
    db 0x90
LAB_1471_2c40:
    mov     di, word ptr [bp+var_2]
    shl     di, 0x1
    les     bx, [td01_track_file_cpy]
    mov     ax, word ptr [state.field_2F4]
    cmp     word ptr es:[bx+di], ax
    jz      LAB_1471_2c5a
    les     bx, [td02_penalty_related]
    cmp     word ptr es:[bx+di], ax
    jnz     LAB_1471_2c5f
LAB_1471_2c5a:
    mov     byte ptr [state.field_45B], 0x2
LAB_1471_2c5f:
    mov     byte ptr [state.field_45C], 0x1
LAB_1471_2c64:
    cmp     byte ptr [state.field_45C], 0x3
    jl      LAB_1471_2c9d
LAB_1471_2c6b:
    mov     ax, word ptr [bp+var_2]
    mov     word ptr [state.field_2F2], ax
    mov     byte ptr [state.field_45C], 0x0
    cmp     word ptr [bp+var_1EpenaltyCounter], 0x0
    jle     LAB_1471_2c9d
    mov     ax, word ptr [bp+var_1EpenaltyCounter]
    imul    word ptr [framespersec]
    mov     cx, ax
    shl     ax, 0x1
    add     ax, cx
    mov     word ptr [penalty_time], ax
    mov     al, byte ptr [framespersec]
    shl     al, 0x1
    shl     al, 0x1
    mov     byte ptr [show_penalty_counter], al
    mov     ax, word ptr [penalty_time]
    add     word ptr [state.game_penalty], ax
LAB_1471_2c9d:
    mov     ax, word ptr [bp+var_2]
    mov     word ptr [state.field_2F4], ax
LAB_1471_2ca3:
    mov     byte ptr [state.field_45D], 0x0
    cmp     byte ptr [state.field_45B], 0x1
    jnz     LAB_1471_2cb2
    jmp     near ptr LAB_1471_3100
LAB_1471_2cb2:
    mov     ax, 0x1
    push    ax
    push    word ptr [state.playerstate.car_rotate.vx]
    push    word ptr [state.playerstate.car_rotate.vy]
    push    word ptr [state.playerstate.car_rotate.vz]
    call    far ptr mat_rot_zxy
    add     sp, 0x8
    mov     word ptr [bp+var_matptr], ax
    cmp     byte ptr [state.field_45B], 0x2
    jnz     LAB_1471_2ce6
    cmp     byte ptr [state.playerstate.car_crashBmpFlag], 0x0
    jnz     LAB_1471_2ce0
    mov     byte ptr [state.field_45D], 0x3
LAB_1471_2ce0:
    mov     ax, word ptr [state.field_2F4]
    jmp     near ptr LAB_1471_2db9
LAB_1471_2ce6:
    cmp     word ptr [state.playerstate.car_trackdata3_index], -0x1
    jnz     LAB_1471_2cf2
LAB_1471_2ced:
    sub     si, si
    jmp     near ptr LAB_1471_2da3
LAB_1471_2cf2:
    cmp     byte ptr [bp+var_1C], 0x0
    jz      LAB_1471_2cff
    cmp     byte ptr [state.field_45B], 0x0
    jz      LAB_1471_2d21
LAB_1471_2cff:
    mov     ax, word ptr [state.field_2F2]
    cmp     word ptr [state.playerstate.car_trackdata3_index], ax
    jz      LAB_1471_2d2a
    mov     di, ax
    shl     di, 0x1
    les     bx, [td01_track_file_cpy]
    mov     ax, word ptr [state.playerstate.car_trackdata3_index]
    cmp     word ptr es:[bx+di], ax
    jz      LAB_1471_2d2a
    les     bx, [td02_penalty_related]
    cmp     word ptr es:[bx+di], ax
    jz      LAB_1471_2d2a
LAB_1471_2d21:
    mov     word ptr [state.playerstate.car_trackdata3_index], 0xffff
    jmp     LAB_1471_2ced
    db 0x90
LAB_1471_2d2a:
    mov     ax, word ptr [state.playerstate.car_vec_unk3.vx]
    mov     cx, word ptr [state.playerstate.car_posWorld1.lx]
    mov     bx, word ptr [state.playerstate.car_posWorld1.lx+2]
    mov     dx, cx
    mov     cl, 0x6
LAB_1471_2d39:
    sar     bx, 0x1
    rcr     dx, 0x1
    dec     cl
    jnz     LAB_1471_2d39
    sub     ax, dx
    mov     word ptr [bp+var_32], ax
    cmp     word ptr [state.playerstate.car_vec_unk3.vy], -0x1
    jz      LAB_1471_2d6c
    mov     ax, word ptr [state.playerstate.car_vec_unk3.vy]
    mov     cx, word ptr [state.playerstate.car_posWorld1.ly]
    mov     bx, word ptr [state.playerstate.car_posWorld1.ly+2]
    mov     dx, cx
    mov     cl, 0x6
LAB_1471_2d5c:
    sar     bx, 0x1
    rcr     dx, 0x1
    dec     cl
    jnz     LAB_1471_2d5c
    sub     ax, dx
    mov     word ptr [bp+var_32+2], ax
    jmp     LAB_1471_2d71
    db 0x90
LAB_1471_2d6c:
    mov     word ptr [bp+var_32+2], 0x0
LAB_1471_2d71:
    mov     ax, word ptr [state.playerstate.car_vec_unk3.vz]
    mov     cx, word ptr [state.playerstate.car_posWorld1.lz]
    mov     bx, word ptr [state.playerstate.car_posWorld1.lz+2]
    mov     dx, cx
    mov     cl, 0x6
LAB_1471_2d80:
    sar     bx, 0x1
    rcr     dx, 0x1
    dec     cl
    jnz     LAB_1471_2d80
    sub     ax, dx
    mov     word ptr [bp+var_32+4], ax
    lea     ax, [bp+var_38]
    push    ax
    push    word ptr [bp+var_matptr]
    lea     ax, [bp+var_32]
    push    ax
    call    far ptr mat_mul_vector
    add     sp, 0x6
    mov     si, word ptr [bp+var_38+4]
LAB_1471_2da3:
    cmp     si, 0x113
    jl      LAB_1471_2dac
    jmp     near ptr LAB_1471_2f89
LAB_1471_2dac:
    cmp     word ptr [state.playerstate.car_trackdata3_index], -0x1
    jz      LAB_1471_2db6
    jmp     near ptr LAB_1471_2f3c
LAB_1471_2db6:
    mov     ax, word ptr [state.field_2F2]
LAB_1471_2db9:
    mov     word ptr [bp+var_2], ax
    mov     bx, ax
    shl     bx, 0x1
    les     di, [td02_penalty_related]
    cmp     word ptr es:[bx+di], -0x1
    jz      LAB_1471_2dcd
    jmp     near ptr LAB_1471_3061
LAB_1471_2dcd:
    mov     byte ptr [bp+var_2A], 0x0
    mov     byte ptr [bp+var_2C], 0x0
LAB_1471_2dd5:
    sub     ax, ax
    push    ax
    mov     al, byte ptr [bp+var_2C]
    sub     ah, ah
    push    ax
    mov     ax, offset state.playerstate.car_vec_unk3.vx
    push    ax
    push    word ptr [bp+var_2]
    push    cs
    call    near ptr gettlistpoint
    add     sp, 0x8
    mov     byte ptr [bp+var_2A], al
    push    si
    lea     di, [bp+var_28]
    mov     si, offset state.playerstate.car_vec_unk3.vx
    push    ss
    pop     es
    movsw
    movsw
    movsw
    pop     si
    mov     ax, word ptr [state.playerstate.car_posWorld1.lx]
    mov     dx, word ptr [state.playerstate.car_posWorld1.lx+2]
    mov     cl, 0x6
LAB_1471_2e05:
    sar     dx, 0x1
    rcr     ax, 0x1
    dec     cl
    jnz     LAB_1471_2e05
    sub     word ptr [bp+var_28], ax
    cmp     word ptr [bp+var_28+2], -0x1
    jnz     LAB_1471_2e2e
    mov     ax, word ptr [state.playerstate.car_posWorld1.ly]
    mov     dx, word ptr [state.playerstate.car_posWorld1.ly+2]
    mov     cl, 0x6
LAB_1471_2e1f:
    sar     dx, 0x1
    rcr     ax, 0x1
    dec     cl
    jnz     LAB_1471_2e1f
    neg     ax
    mov     word ptr [bp+var_28+2], ax
    jmp     LAB_1471_2e42
LAB_1471_2e2e:
    mov     ax, word ptr [state.playerstate.car_posWorld1.ly]
    mov     dx, word ptr [state.playerstate.car_posWorld1.ly+2]
    mov     cl, 0x6
LAB_1471_2e37:
    sar     dx, 0x1
    rcr     ax, 0x1
    dec     cl
    jnz     LAB_1471_2e37
    sub     word ptr [bp+var_28+2], ax
LAB_1471_2e42:
    mov     ax, word ptr [state.playerstate.car_posWorld1.lz]
    mov     dx, word ptr [state.playerstate.car_posWorld1.lz+2]
    mov     cl, 0x6
LAB_1471_2e4b:
    sar     dx, 0x1
    rcr     ax, 0x1
    dec     cl
    jnz     LAB_1471_2e4b
    sub     word ptr [bp+var_28+4], ax
    lea     ax, [bp+var_38]
    push    ax
    push    word ptr [bp+var_matptr]
    lea     ax, [bp+var_28]
    push    ax
    call    far ptr mat_mul_vector
    add     sp, 0x6
    cmp     byte ptr [bp+var_2C], 0x0
    jz      LAB_1471_2e7d
    mov     ax, word ptr [bp+var_32+4]
    cmp     word ptr [bp+var_38+4], ax
    jge     LAB_1471_2e89
    cmp     word ptr [bp+var_38+4], 0x0
    jle     LAB_1471_2e89
LAB_1471_2e7d:
    mov     al, byte ptr [bp+var_2C]
    mov     byte ptr [bp+var_3A], al
    mov     ax, word ptr [bp+var_38+4]
    mov     word ptr [bp+var_32+4], ax
LAB_1471_2e89:
    inc     byte ptr [bp+var_2C]
    cmp     byte ptr [bp+var_2A], 0x0
    jnz     LAB_1471_2e95
    jmp     near ptr LAB_1471_2dd5
LAB_1471_2e95:
    cmp     byte ptr [state.field_45B], 0x2
    jz      LAB_1471_2e9f
    jmp     near ptr LAB_1471_2f30
LAB_1471_2e9f:
    cmp     byte ptr [bp+var_3A], 0x0
    jnz     LAB_1471_2ec0
    sub     ax, ax
    push    ax
    push    ax
    lea     ax, [bp+var_52]
    push    ax
    push    word ptr [bp+var_2]
    push    cs
    call    near ptr gettlistpoint
    add     sp, 0x8
    sub     ax, ax
    push    ax
    mov     ax, 0x1
    jmp     LAB_1471_2ee0
    db 0x90
LAB_1471_2ec0:
    sub     ax, ax
    push    ax
    mov     al, byte ptr [bp+var_3A]
    dec     al
    cbw
    push    ax
    lea     ax, [bp+var_52]
    push    ax
    push    word ptr [bp+var_2]
    push    cs
    call    near ptr gettlistpoint
    add     sp, 0x8
    sub     ax, ax
    push    ax
    mov     al, byte ptr [bp+var_3A]
    sub     ah, ah
LAB_1471_2ee0:
    push    ax
    lea     ax, [bp+var_1A]
    push    ax
    push    word ptr [bp+var_2]
    push    cs
    call    near ptr gettlistpoint
    add     sp, 0x8
    mov     ax, word ptr [bp+var_1A+4]
    sub     ax, word ptr [bp+var_52+4]
    push    ax
    mov     ax, word ptr [bp+var_52]
    sub     ax, word ptr [bp+var_1A]
    push    ax
    call    far ptr int_atan2
    add     sp, 0x4
    mov     si, ax
    and     si, 0x3ff
    mov     ax, word ptr [state.playerstate.car_rotate.vx]
    sub     ax, si
    and     ah, 0x3
    mov     si, ax
    cmp     si, 0x380
    jg      LAB_1471_2f21
    cmp     si, 0x80
    jge     LAB_1471_2f3c
LAB_1471_2f21:
    mov     byte ptr [state.field_45B], 0x0
    mov     byte ptr [state.field_45C], 0x1
    mov     ax, word ptr [bp+var_2]
    jmp     LAB_1471_2f33
LAB_1471_2f30:
    mov     ax, word ptr [state.field_2F2]
LAB_1471_2f33:
    mov     word ptr [state.playerstate.car_trackdata3_index], ax
    mov     al, byte ptr [bp+var_3A]
    mov     byte ptr [state.playerstate.field_CE], al
LAB_1471_2f3c:
    sub     ax, ax
    push    ax
    mov     al, byte ptr [state.playerstate.field_CE]
    inc     byte ptr [state.playerstate.field_CE]
    sub     ah, ah
    push    ax
    mov     ax, offset state.playerstate.car_vec_unk3.vx
    push    ax
    push    word ptr [state.playerstate.car_trackdata3_index]
    push    cs
    call    near ptr gettlistpoint
    add     sp, 0x8
    or      al, al
    jz      LAB_1471_2f89
    mov     bx, word ptr [state.field_2F2]
    shl     bx, 0x1
    les     di, [td02_penalty_related]
    cmp     word ptr es:[bx+di], -0x1
    jz      LAB_1471_2f74
    mov     word ptr [state.playerstate.car_trackdata3_index], 0xffff
    jmp     LAB_1471_2f84
LAB_1471_2f74:
    mov     bx, word ptr [state.field_2F2]
    shl     bx, 0x1
    les     di, [td01_track_file_cpy]
    mov     ax, word ptr es:[bx+di]
    mov     word ptr [state.playerstate.car_trackdata3_index], ax
LAB_1471_2f84:
    mov     byte ptr [state.playerstate.field_CE], 0x0
LAB_1471_2f89:
    push    si
    lea     di, [bp+var_28]
    mov     si, offset state.playerstate.car_vec_unk3.vx
    push    ss
    pop     es
    movsw
    movsw
    movsw
    pop     si
    cmp     word ptr [state.playerstate.car_trackdata3_index], -0x1
    jnz     LAB_1471_2fa0
    jmp     near ptr LAB_1471_3061
LAB_1471_2fa0:
    cmp     byte ptr [state.field_45B], 0x0
    jz      LAB_1471_2faa
    jmp     near ptr LAB_1471_3061
LAB_1471_2faa:
    mov     ax, word ptr [state.playerstate.car_posWorld1.lx]
    mov     dx, word ptr [state.playerstate.car_posWorld1.lx+2]
    mov     cl, 0x6
LAB_1471_2fb3:
    sar     dx, 0x1
    rcr     ax, 0x1
    dec     cl
    jnz     LAB_1471_2fb3
    sub     word ptr [bp+var_28], ax
    cmp     word ptr [bp+var_28+2], -0x1
    jnz     LAB_1471_2fcc
    mov     word ptr [bp+var_28+2], 0x0
    jmp     LAB_1471_2fe0
    db 0x90
LAB_1471_2fcc:
    mov     ax, word ptr [state.playerstate.car_posWorld1.ly]
    mov     dx, word ptr [state.playerstate.car_posWorld1.ly+2]
    mov     cl, 0x6
LAB_1471_2fd5:
    sar     dx, 0x1
    rcr     ax, 0x1
    dec     cl
    jnz     LAB_1471_2fd5
    sub     word ptr [bp+var_28+2], ax
LAB_1471_2fe0:
    mov     ax, word ptr [state.playerstate.car_posWorld1.lz]
    mov     dx, word ptr [state.playerstate.car_posWorld1.lz+2]
    mov     cl, 0x6
LAB_1471_2fe9:
    sar     dx, 0x1
    rcr     ax, 0x1
    dec     cl
    jnz     LAB_1471_2fe9
    sub     word ptr [bp+var_28+4], ax
    mov     ax, 0x1
    push    ax
    push    word ptr [state.playerstate.car_rotate.vx]
    push    word ptr [state.playerstate.car_rotate.vy]
    push    word ptr [state.playerstate.car_rotate.vz]
    call    far ptr mat_rot_zxy
    add     sp, 0x8
    mov     word ptr [bp+var_matptr], ax
    lea     ax, [bp+var_38]
    push    ax
    push    word ptr [bp+var_matptr]
    lea     ax, [bp+var_28]
    push    ax
    call    far ptr mat_mul_vector
    add     sp, 0x6
    push    word ptr [bp+var_38+4]
    mov     ax, word ptr [bp+var_38]
    neg     ax
    push    ax
    call    far ptr int_atan2
    add     sp, 0x4
    and     ah, 0x3
    mov     word ptr [state.playerstate.field_48], ax
    cmp     byte ptr [state.playerstate.car_crashBmpFlag], 0x0
    jnz     LAB_1471_3061
    add     ax, 0x80
    and     ah, 0x3
    mov     cl, 0x8
    shr     ax, cl
    cmp     ax, 0x1
    jz      LAB_1471_305c
    cmp     ax, 0x3
    jz      LAB_1471_308e
LAB_1471_3054:
    mov     byte ptr [state.field_45D], 0x0
    jmp     LAB_1471_3061
    db 0x90
LAB_1471_305c:
    mov     byte ptr [state.field_45D], 0x1
LAB_1471_3061:
    cmp     byte ptr [state.playerstate.field_CD], 0x0
    jnz     LAB_1471_306b
    jmp     near ptr LAB_1471_3100
LAB_1471_306b:
    mov     al, byte ptr [startrow2]
    cbw
    mov     bx, ax
    shl     bx, 0x1
    mov     ax, word ptr [bx+trackcenterpos]
    mov     cx, word ptr [state.playerstate.car_posWorld1.lz]
    mov     bx, word ptr [state.playerstate.car_posWorld1.lz+2]
    mov     dx, cx
    mov     cl, 0x6
LAB_1471_3083:
    sar     bx, 0x1
    rcr     dx, 0x1
    dec     cl
    jz      LAB_1471_309c
    jmp     LAB_1471_3083
    db 0x90
LAB_1471_308e:
    cmp     word ptr [state.playerstate.field_B6], 0x0
    jnz     LAB_1471_3054
    mov     byte ptr [state.field_45D], 0x2
    jmp     LAB_1471_3061
LAB_1471_309c:
    sub     ax, dx
    push    ax
    push    word ptr [track_angle]
    call    far ptr int_cos
    add     sp, 0x2
    push    ax
    call    far ptr multiply_and_scale
    add     sp, 0x4
    mov     si, ax
    mov     al, byte ptr [startcol2]
    cbw
    mov     bx, ax
    shl     bx, 0x1
    mov     ax, word ptr [bx+trackcenterpos2]
    mov     cx, word ptr [state.playerstate.car_posWorld1.lx]
    mov     bx, word ptr [state.playerstate.car_posWorld1.lx+2]
    mov     dx, cx
    mov     cl, 0x6
LAB_1471_30ce:
    sar     bx, 0x1
    rcr     dx, 0x1
    dec     cl
    jnz     LAB_1471_30ce
    sub     ax, dx
    push    ax
    push    word ptr [track_angle]
    call    far ptr int_sin
    add     sp, 0x2
    push    ax
    call    far ptr multiply_and_scale
    add     sp, 0x4
    add     si, ax
    jns     LAB_1471_3100
    sub     ax, ax
    push    ax
    mov     ax, 0x3
    push    ax
    push    cs
    call    near ptr update_crash_state
    add     sp, 0x4
LAB_1471_3100:
    pop     si
    pop     di
    mov     sp, bp
    pop     bp
    retf
player_op_asm_ endp

; ******************************************************************************
; * dbg: findcar
; ******************************************************************************

; int __cdecl16far detect_penalty(char * unk, int * penalty_counter)
detect_penalty_asm_ proc far
    var_5A4    = word ptr  -1444
    var_5A2    = byte ptr  -1442
    var_21A    = word ptr  -538
    var_218    = byte ptr  -536
    var_116    = byte ptr  -278
    var_114    = byte ptr  -276
    var_110    = word ptr  -272
    var_E      = byte ptr  -14
    var_C      = byte ptr  -12
    var_A      = byte ptr  -10
    var_8      = word ptr   -8
    var_6      = word ptr   -6
    var_4      = byte ptr   -4
    var_2      = word ptr   -2
    unk        = word ptr    6
    penalty_counter = word ptr    8

    push    bp
    mov     bp, sp
    sub     sp, 0x5a4
    push    di
    push    si
    mov     al, byte ptr [state.playerstate.car_posWorld1.lx+2]
    mov     byte ptr [bp+var_4], al
    mov     al, 0x1d
    sub     al, byte ptr [state.playerstate.car_posWorld1.lz+2]
    mov     byte ptr [bp+var_A], al
    mov     al, byte ptr [bp+var_4]
    cbw
    mov     word ptr [bp+var_5A4], ax
    mov     ax, word ptr [state.game_startcol]
    cmp     word ptr [bp+var_5A4], ax
    jz      LAB_1471_3138
    mov     ax, word ptr [state.game_startcol2]
    cmp     word ptr [bp+var_5A4], ax
    jnz     LAB_1471_3162
LAB_1471_3138:
    mov     al, byte ptr [bp+var_A]
    cbw
    mov     word ptr [bp+var_5A4], ax
    mov     ax, word ptr [state.game_startrow]
    cmp     word ptr [bp+var_5A4], ax
    jz      LAB_1471_3152
    mov     ax, word ptr [state.game_startrow2]
    cmp     word ptr [bp+var_5A4], ax
    jnz     LAB_1471_3162
LAB_1471_3152:
    mov     bx, word ptr [bp+penalty_counter]
    mov     word ptr [bx], 0x0
    sub     ax, ax
    pop     si
    pop     di
    mov     sp, bp
    pop     bp
    retf
    db 0x90
LAB_1471_3162:
    cmp     byte ptr [bp+var_4], 0x0
    jge     LAB_1471_316b
    jmp     near ptr LAB_1471_321e
LAB_1471_316b:
    cmp     byte ptr [bp+var_4], 0x1d
    jle     LAB_1471_3174
    jmp     near ptr LAB_1471_321e
LAB_1471_3174:
    cmp     byte ptr [bp+var_A], 0x0
    jge     LAB_1471_317d
    jmp     near ptr LAB_1471_321e
LAB_1471_317d:
    cmp     byte ptr [bp+var_A], 0x1d
    jle     LAB_1471_3186
    jmp     near ptr LAB_1471_321e
LAB_1471_3186:
    mov     word ptr [bp+var_6], 0x0
    mov     word ptr [bp+var_21A], 0x0
    sub     di, di
    sub     si, si
    jmp     LAB_1471_319e
    db 0x90
LAB_1471_3198:
    mov     byte ptr [bp+si+0xfa5e], 0x0
    inc     si
LAB_1471_319e:
    cmp     word ptr [track_pieces_counter], si
    jg      LAB_1471_3198
    mov     bx, word ptr [bp+unk]
    mov     si, word ptr [bx]
LAB_1471_31a9:
    mov     bx, si
    shl     bx, 0x1
    add     bx, word ptr [td01_track_file_cpy]
    mov     es, word ptr [td01_track_file_cpy+2]
    mov     ax, word ptr es:[bx]
    mov     word ptr [bp+var_2], ax
    mov     bx, ax
    add     bx, bp
; var_5A2h is actually an array of potentially 
; 385h elements.  
    cmp     byte ptr [bx+0xfa5e], 0x0
    jz      LAB_1471_3228
    cmp     word ptr [bp+var_21A], 0x0
    jz      LAB_1471_31ea
    dec     word ptr [bp+var_21A]
    mov     ax, word ptr [bp+var_21A]
    shl     ax, 0x1
    add     ax, bp
    mov     word ptr [bp+var_5A4], ax
    mov     bx, ax
    mov     si, word ptr [bx+0xfdea]
    mov     di, word ptr [bx+0xfef2]
    jmp     LAB_1471_31a9
    db 0x90
LAB_1471_31ea:
    cmp     word ptr [bp+var_6], 0x0
    jz      LAB_1471_320a
    mov     bx, word ptr [bp+unk]
    mov     ax, word ptr [bp+var_110]
    mov     word ptr [bx], ax
    mov     bx, word ptr [bp+penalty_counter]
    mov     ax, word ptr [bp+var_6]
    mov     word ptr [bx], ax
LAB_1471_3201:
    mov     ax, 0x1
    pop     si
    pop     di
    mov     sp, bp
    pop     bp
    retf
LAB_1471_320a:
    mov     al, byte ptr [bp+var_4]
    cbw
    mov     word ptr [state.game_startcol], ax
    mov     word ptr [state.game_startcol2], ax
    mov     al, byte ptr [bp+var_A]
    cbw
    mov     word ptr [state.game_startrow], ax
    mov     word ptr [state.game_startrow2], ax
LAB_1471_321e:
    mov     bx, word ptr [bp+penalty_counter]
    mov     word ptr [bx], 0xfffe
    jmp     LAB_1471_3201
    db 0x90
LAB_1471_3228:
    mov     bx, word ptr [bp+var_2]
    add     bx, bp
    mov     byte ptr [bx+0xfa5e], 0x1
    mov     bx, word ptr [bp+var_2]
    add     bx, word ptr [td22_row_from_path]
    mov     es, word ptr [td22_row_from_path+2]
    mov     al, byte ptr es:[bx]
    mov     byte ptr [bp+var_E], al
    mov     bx, word ptr [bp+var_2]
    add     bx, word ptr [td17_trk_elem_ordered]
    mov     es, word ptr [td17_trk_elem_ordered+2]
    mov     al, byte ptr es:[bx]
    sub     ah, ah
    mov     bx, ax
    shl     bx, 0x1
    add     bx, ax
    shl     bx, 0x1
    add     bx, ax
    shl     bx, 0x1
    mov     al, byte ptr [bx+trkObjectList.ss_multiTileFlag]
    mov     byte ptr [bp+var_116], al
    test    byte ptr [bp+var_116], 0x1
    jz      LAB_1471_3276
    mov     al, byte ptr [bp+var_E]
    inc     al
    jmp     LAB_1471_3279
    db 0x90
LAB_1471_3276:
    mov     al, byte ptr [bp+var_E]
LAB_1471_3279:
    mov     byte ptr [bp+var_218], al
    mov     bx, word ptr [bp+var_2]
    add     bx, word ptr [td21_col_from_path]
    mov     es, word ptr [td21_col_from_path+2]
    mov     al, byte ptr es:[bx]
    mov     byte ptr [bp+var_C], al
    test    byte ptr [bp+var_116], 0x2
    jz      LAB_1471_329a
    inc     al
    jmp     LAB_1471_329d
    db 0x90
LAB_1471_329a:
    mov     al, byte ptr [bp+var_C]
LAB_1471_329d:
    mov     byte ptr [bp+var_114], al
    mov     al, byte ptr [bp+var_4]
    cmp     byte ptr [bp+var_C], al
    jz      LAB_1471_32af
    cmp     byte ptr [bp+var_114], al
    jnz     LAB_1471_3309
LAB_1471_32af:
    mov     al, byte ptr [bp+var_A]
    cmp     byte ptr [bp+var_E], al
    jz      LAB_1471_32bd
    cmp     byte ptr [bp+var_218], al
    jnz     LAB_1471_3309
LAB_1471_32bd:
    mov     bx, si
    shl     bx, 0x1
    add     bx, word ptr [td02_penalty_related]
    mov     es, word ptr [td02_penalty_related+2]
    cmp     word ptr es:[bx], -0x1
    jz      LAB_1471_32d2
    mov     word ptr [bp+var_2], si
LAB_1471_32d2:
    mov     al, byte ptr [bp+var_C]
    cbw
    mov     word ptr [state.game_startcol], ax
    mov     al, byte ptr [bp+var_114]
    cbw
    mov     word ptr [state.game_startcol2], ax
    mov     al, byte ptr [bp+var_E]
    cbw
    mov     word ptr [state.game_startrow], ax
    mov     al, byte ptr [bp+var_218]
    cbw
    mov     word ptr [state.game_startrow2], ax
    or      di, di
    jle     LAB_1471_334e
    cmp     word ptr [bp+var_6], 0x0
    jz      LAB_1471_32ff
    cmp     word ptr [bp+var_6], di
    jle     LAB_1471_3309
LAB_1471_32ff:
    mov     ax, word ptr [bp+var_2]
    mov     word ptr [bp+var_110], ax
    mov     word ptr [bp+var_6], di
LAB_1471_3309:
    mov     bx, si
    shl     bx, 0x1
    add     bx, word ptr [td02_penalty_related]
    mov     es, word ptr [td02_penalty_related+2]
    mov     ax, word ptr es:[bx]
    mov     word ptr [bp+var_8], ax
    cmp     ax, 0xffff
    jz      LAB_1471_333f
    mov     bx, word ptr [bp+var_21A]
    shl     bx, 0x1
    add     bx, bp
    mov     word ptr [bx+0xfef2], di
    mov     bx, word ptr [bp+var_21A]
    inc     word ptr [bp+var_21A]
    shl     bx, 0x1
    add     bx, bp
    mov     ax, word ptr [bp+var_8]
    mov     word ptr [bx+0xfdea], ax
LAB_1471_333f:
    cmp     word ptr [bp+var_2], 0x0
    jz      LAB_1471_335e
    cmp     di, -0x1
    jz      LAB_1471_3361
    inc     di
    jmp     LAB_1471_3361
    db 0x90
LAB_1471_334e:
    mov     bx, word ptr [bp+unk]
    mov     ax, word ptr [bp+var_2]
    mov     word ptr [bx], ax
    mov     bx, word ptr [bp+penalty_counter]
    mov     word ptr [bx], di
    jmp     near ptr LAB_1471_3201
LAB_1471_335e:
    mov     di, 0xffff
LAB_1471_3361:
    mov     si, word ptr [bp+var_2]
    jmp     near ptr LAB_1471_31a9
detect_penalty_asm_ endp
    db 0x90

; ******************************************************************************
; * dbg: doengine
; ******************************************************************************

; void __cdecl16far update_car_speed(char car_input, int is_opponent, CARSTATE * carstate_, SIMD * simd_)
update_car_speed_asm_ proc far
    var_currTorque = byte ptr  -10
    var_deltaSpeed = word ptr   -8
    var_updatedSpeed = word ptr   -6
    var_4      = word ptr   -4
    var_2      = word ptr   -2
    car_input  = byte ptr    6
    is_opponent = word ptr    8
    carstate_  = word ptr   10
    simd_      = word ptr   12

    push    bp                                 ; former update_car_state
    mov     bp, sp
    sub     sp, 0xa
    push    di
    push    si
    cmp     word ptr [framespersec], 0x14
    jnz     LAB_1471_337e
    mov     word ptr [bp+var_2], 0x6
    jmp     LAB_1471_3383
LAB_1471_337e:
    mov     word ptr [bp+var_2], 0xc
; fC6 looks like an 
; externally-stored counter.  
LAB_1471_3383:
    mov     bx, word ptr [bp+carstate_]
    cmp     byte ptr [bx+0xc6], 0x0
    jz      LAB_1471_3391
    dec     byte ptr [bx+0xc6]
LAB_1471_3391:
    mov     bx, word ptr [bp+carstate_]
    mov     si, bx
    mov     ax, word ptr [si+0x2c]
    sub     ax, word ptr [si+0x2e]
    mov     word ptr [bx+0x28], ax
    mov     bx, word ptr [bp+carstate_]
    mov     si, bx
    mov     ax, word ptr [si+0x2c]
    mov     word ptr [bx+0x2e], ax
    mov     bx, word ptr [bp+carstate_]
    mov     si, bx
    mov     ax, word ptr [si+0x22]
    mov     word ptr [bx+0x24], ax
    mov     bx, word ptr [bp+carstate_]
    cmp     byte ptr [bx+0xcc], 0x0
    jnz     LAB_1471_33d6
    cmp     byte ptr [bx+0xca], 0x0
    jnz     LAB_1471_33d6
; Shift up key.  
    test    byte ptr [bp+car_input], 0x10
    jnz     LAB_1471_33ff
; Shift down key.  
    test    byte ptr [bp+car_input], 0x20
    jnz     LAB_1471_341e
    jmp     near ptr LAB_1471_3476
    db 0x90
LAB_1471_33d6:
    cmp     byte ptr [bx+0xbe], 0x0
    jnz     LAB_1471_33e0
    jmp     near ptr LAB_1471_3476
LAB_1471_33e0:
    cmp     byte ptr [bx+0xca], 0x0
    jz      LAB_1471_33ea
    jmp     near ptr LAB_1471_3476
LAB_1471_33ea:
    cmp     byte ptr [bx+0xc0], 0x0
    jnz     LAB_1471_33f4
    jmp     near ptr LAB_1471_3476
LAB_1471_33f4:
    mov     si, word ptr [bp+simd_]
    mov     ax, word ptr [si+0xa]
    cmp     word ptr [bx+0x22], ax
    jbe     LAB_1471_3410
LAB_1471_33ff:
    mov     si, word ptr [bp+simd_]
    mov     al, byte ptr [si]
    cmp     byte ptr [bx+0xbe], al
    jz      LAB_1471_3476
    inc     byte ptr [bx+0xbe]
    jmp     LAB_1471_3429
LAB_1471_3410:
    mov     bx, word ptr [bp+carstate_]
    mov     si, word ptr [bp+simd_]
    mov     ax, word ptr [si+0x8]
    cmp     word ptr [bx+0x22], ax
    jnc     LAB_1471_3476
LAB_1471_341e:
    cmp     byte ptr [bx+0xbe], 0x1
    jle     LAB_1471_3476
    dec     byte ptr [bx+0xbe]
LAB_1471_3429:
    mov     bx, word ptr [bp+carstate_]
    mov     byte ptr [bx+0xca], 0x1
    mov     al, byte ptr [framespersec]
    cbw
    sar     ax, 0x1
    add     al, byte ptr [framespersec]
    mov     bx, word ptr [bp+carstate_]
    mov     byte ptr [bx+0xcb], al
    mov     bx, word ptr [bp+carstate_]
    mov     al, byte ptr [bx+0xbe]
    cbw
    mov     si, ax
    shl     si, 0x1
    shl     si, 0x1
    mov     bx, word ptr [bp+simd_]
    mov     ax, word ptr [bx+si+0x1c]
    mov     bx, word ptr [bp+carstate_]
    mov     word ptr [bx+0x3a], ax
    mov     bx, word ptr [bp+carstate_]
    mov     al, byte ptr [bx+0xbe]
    cbw
    mov     si, ax
    shl     si, 0x1
    shl     si, 0x1
    mov     bx, word ptr [bp+simd_]
    mov     ax, word ptr [bx+si+0x1e]
    mov     bx, word ptr [bp+carstate_]
    mov     word ptr [bx+0x3c], ax
LAB_1471_3476:
    mov     bx, word ptr [bp+carstate_]
    cmp     byte ptr [bx+0xca], 0x0
    jnz     LAB_1471_3483
    jmp     near ptr LAB_1471_358e
LAB_1471_3483:
    mov     si, bx
    mov     ax, word ptr [si+0x3a]
    cmp     word ptr [bx+0x34], ax
    jnz     LAB_1471_34fc
    mov     ax, word ptr [bx+0x3c]
    sub     ax, word ptr [bx+0x38]
    mov     word ptr [bp+var_4], ax
    or      ax, ax
    jnz     LAB_1471_34ca
; Probably it goes here when the knob movement is done.  
    mov     byte ptr [bx+0xca], 0x0
    mov     bx, word ptr [bp+carstate_]
    mov     al, byte ptr [bx+0xbe]
    cbw
    mov     si, ax
    shl     si, 0x1
    mov     bx, word ptr [bp+simd_]
    mov     ax, word ptr [bx+si+0xe]
    mov     bx, word ptr [bp+carstate_]
    mov     word ptr [bx+0x30], ax
    mov     bx, word ptr [bp+carstate_]
    mov     si, bx
    mov     ax, word ptr [si+0x30]
    mov     cl, 0x8
    shr     ax, cl
    mov     word ptr [bx+0x32], ax
    jmp     near ptr LAB_1471_359c
    db 0x90
LAB_1471_34ca:
    push    word ptr [bp+var_4]                ; int
    call    far ptr _abs
    add     sp, 0x2
    cmp     ax, word ptr [bp+var_2]
    jg      LAB_1471_34e6
    mov     bx, word ptr [bp+carstate_]
    mov     si, bx
    mov     ax, word ptr [si+0x3c]
    jmp     near ptr LAB_1471_3574
    db 0x90
LAB_1471_34e6:
    cmp     word ptr [bp+var_4], 0x0
    jle     LAB_1471_34ef
    jmp     near ptr LAB_1471_3583
LAB_1471_34ef:
    mov     bx, word ptr [bp+carstate_]
    mov     ax, word ptr [bp+var_2]
    sub     word ptr [bx+0x38], ax
    jmp     near ptr LAB_1471_359c
    db 0x90
LAB_1471_34fc:
    mov     bx, word ptr [bp+simd_]
    mov     si, word ptr [bp+carstate_]
    mov     ax, word ptr [si+0x38]
    cmp     word ptr [bx+0x1e], ax
    jnz     LAB_1471_354e
    mov     bx, si
    mov     ax, word ptr [bx+0x3a]
    sub     ax, word ptr [bx+0x34]
    mov     word ptr [bp+var_4], ax
    push    ax                                 ; int
    call    far ptr _abs
    add     sp, 0x2
    cmp     ax, word ptr [bp+var_2]
    jg      LAB_1471_3530
    mov     bx, word ptr [bp+carstate_]
    mov     si, bx
    mov     ax, word ptr [si+0x3a]
    mov     word ptr [bx+0x34], ax
    jmp     LAB_1471_359c
LAB_1471_3530:
    cmp     word ptr [bp+var_4], 0x0
    jle     LAB_1471_3542
    mov     bx, word ptr [bp+carstate_]
    mov     ax, word ptr [bp+var_2]
    add     word ptr [bx+0x34], ax
    jmp     LAB_1471_359c
    db 0x90
LAB_1471_3542:
    mov     bx, word ptr [bp+carstate_]
    mov     ax, word ptr [bp+var_2]
    sub     word ptr [bx+0x34], ax
    jmp     LAB_1471_359c
    db 0x90
LAB_1471_354e:
    mov     bx, word ptr [bp+simd_]
    mov     ax, word ptr [bx+0x1e]
    mov     bx, word ptr [bp+carstate_]
    sub     ax, word ptr [bx+0x38]
    mov     word ptr [bp+var_4], ax
    push    ax                                 ; int
    call    far ptr _abs
    add     sp, 0x2
    cmp     ax, word ptr [bp+var_2]
    jg      LAB_1471_357a
    mov     bx, word ptr [bp+carstate_]
    mov     si, word ptr [bp+simd_]
    mov     ax, word ptr [si+0x1e]
LAB_1471_3574:
    mov     word ptr [bx+0x38], ax
    jmp     LAB_1471_359c
    db 0x90
LAB_1471_357a:
    cmp     word ptr [bp+var_4], 0x0
    jg      LAB_1471_3583
    jmp     near ptr LAB_1471_34ef
LAB_1471_3583:
    mov     bx, word ptr [bp+carstate_]
    mov     ax, word ptr [bp+var_2]
    add     word ptr [bx+0x38], ax
    jmp     LAB_1471_359c
LAB_1471_358e:
    mov     bx, word ptr [bp+carstate_]
    cmp     byte ptr [bx+0xcb], 0x0
    jz      LAB_1471_359c
    dec     byte ptr [bx+0xcb]
LAB_1471_359c:
    mov     bx, word ptr [bp+carstate_]
    mov     ax, word ptr [bx+0x2a]
    mov     word ptr [bp+var_updatedSpeed], ax
    mov     si, ax
    mov     cl, 0xa
    shr     si, cl
    shl     si, 0x1                            ; this is NOT part of the calculations *LOL*
    mov     bx, word ptr [bp+simd_]
    les     bx, [bx+0x304]
    mov     di, word ptr [bp+carstate_]
    mov     ax, word ptr [di+0x1e]
    sub     ax, word ptr es:[bx+si]
; Something really important here. si is being used as 
; index to access the aerotable, whose array indices 
; are car speeds normalized to the 0h...39h. This  
; should prove beyond doubts the variable in question 
; (formerly called trackgrip) is the scalar car speed. 
; Also note we have a sub above, not an add.  
    mov     word ptr [bp+var_deltaSpeed], ax
; Aero drag is active at all times, including midair, 
; so it is computed before any key checking is done.  
    mov     bx, di
    mov     si, word ptr [bp+simd_]
    mov     ax, word ptr [si+0xc]
    cmp     word ptr [bx+0x22], ax
    jbe     LAB_1471_35da
; Current rpm is set to max and then 
; brakes are applied.  
    dec     ax
    mov     word ptr [bx+0x22], ax
LAB_1471_35d1:
    mov     bx, word ptr [bp+simd_]
    mov     ax, word ptr [bx+0x4]
    jmp     LAB_1471_3626
    db 0x90
; and ax, 3 masks out all bits but 
; accelerate and brake.  
LAB_1471_35da:
    mov     al, byte ptr [bp+car_input]
    and     ax, 0x3
    cmp     ax, 0x1
    jnz     LAB_1471_35e8
    jmp     near ptr LAB_1471_3672
LAB_1471_35e8:
    cmp     ax, 0x2
    jz      LAB_1471_3600
; Neither key being pressed, or both.  
    mov     bx, word ptr [bp+carstate_]
    mov     byte ptr [bx+0xbd], 0x0
    mov     bx, word ptr [bp+carstate_]
    mov     byte ptr [bx+0xbc], 0x0
    jmp     LAB_1471_3629
    db 0x90
; Brake key being pressed.  
LAB_1471_3600:
    mov     bx, word ptr [bp+carstate_]
    mov     byte ptr [bx+0xbd], 0x0
    mov     bx, word ptr [bp+carstate_]
    mov     byte ptr [bx+0xc6], 0x0
    mov     bx, word ptr [bp+carstate_]
    mov     byte ptr [bx+0xbc], 0x1
    cmp     byte ptr [bp+is_opponent], 0x0
    jz      LAB_1471_35d1
; Weird.  
    mov     bx, word ptr [bp+simd_]
    mov     ax, word ptr [bx+0x4]
    shl     ax, 0x1
; There is no division by mass, so 
; the brakes are applied as 
; acceleration.  
LAB_1471_3626:
    sub     word ptr [bp+var_deltaSpeed], ax
LAB_1471_3629:
    cmp     word ptr [framespersec], 0xa
    jnz     LAB_1471_3636
; Doubles acceleration at 10fps.  
    mov     ax, word ptr [bp+var_deltaSpeed]
    add     word ptr [bp+var_deltaSpeed], ax
LAB_1471_3636:
    cmp     word ptr [bp+var_deltaSpeed], 0x0
    jge     LAB_1471_363f
; Deceleration.  
    jmp     near ptr LAB_1471_37d2
; Acceleration. 
; Keep in mind that at this point 
; the speed was not updated yet. 
; 8000h = 128mph  
LAB_1471_363f:
    cmp     word ptr [bp+var_updatedSpeed], 0x8000
    jc      LAB_1471_3649
    jmp     near ptr LAB_1471_37b2
; Modifies speed.  
LAB_1471_3649:
    mov     ax, word ptr [bp+var_deltaSpeed]
    add     word ptr [bp+var_updatedSpeed], ax
LAB_1471_364f:
    mov     bx, word ptr [bp+carstate_]
    cmp     byte ptr [bx+0xc0], 0x0
    jnz     LAB_1471_365c
    jmp     near ptr LAB_1471_382c
LAB_1471_365c:
    mov     ax, word ptr [bx+0x2c]
    sub     ax, word ptr [bp+var_updatedSpeed]
    mov     word ptr [bp+var_4], ax
    or      ax, ax
    jl      LAB_1471_366c
    jmp     near ptr LAB_1471_37e8
LAB_1471_366c:
    neg     ax
    jmp     near ptr LAB_1471_37eb
    db 0x90
; Accelerate key being pressed.  
LAB_1471_3672:
    mov     bx, word ptr [bp+carstate_]
    mov     byte ptr [bx+0xbc], 0x0
    mov     bx, word ptr [bp+carstate_]
    mov     byte ptr [bx+0xbd], 0x1
    mov     bx, word ptr [bp+carstate_]
    cmp     byte ptr [bx+0xca], 0x0
    jz      LAB_1471_36ac
    mov     byte ptr [bx+0xc6], 0x0
    cmp     word ptr [framespersec], 0xa
    jnz     LAB_1471_36a2
    mov     bx, word ptr [bp+carstate_]
    sub     word ptr [bx+0x22], 0x50
    jmp     LAB_1471_3629
    db 0x90
LAB_1471_36a2:
    mov     bx, word ptr [bp+carstate_]
    sub     word ptr [bx+0x22], 0x28
    jmp     near ptr LAB_1471_3629
LAB_1471_36ac:
    mov     bx, word ptr [bp+carstate_]
    cmp     byte ptr [bx+0xc0], 0x0
    jnz     LAB_1471_36d6
    mov     si, word ptr [bp+simd_]
    mov     ax, word ptr [si+0xc]
    cmp     word ptr [bx+0x22], ax
    jc      LAB_1471_36c4
    jmp     near ptr LAB_1471_3629
; 250mph, that is, always.  
LAB_1471_36c4:
    cmp     word ptr [bp+var_updatedSpeed], 0xfa00
    jc      LAB_1471_36ce
    jmp     near ptr LAB_1471_3629
; Extra 3mph per TS... airtime speed boost.  
LAB_1471_36ce:
    add     byte ptr [bp+var_deltaSpeed+1], 0x3
    jmp     near ptr LAB_1471_3629
    db 0x90
LAB_1471_36d6:
    cmp     byte ptr [bx+0xbe], 0x1
    jg      LAB_1471_36ec
; 0A28h is the limit for idle rpm usage 
; at first gear.  
    cmp     word ptr [bx+0x22], 0xa28
    jge     LAB_1471_36ec
    mov     bx, word ptr [bp+simd_]
    mov     al, byte ptr [bx+0x3a]
    jmp     LAB_1471_36fc
LAB_1471_36ec:
    mov     bx, word ptr [bp+carstate_]
    mov     si, word ptr [bx+0x22]
    mov     cl, 0x7
    shr     si, cl                             ; divide rpm by 2^7 to find offset.
    mov     bx, word ptr [bp+simd_]
    mov     al, byte ptr [bx+si+0x3b]
LAB_1471_36fc:
    mov     byte ptr [bp+var_currTorque], al
    mov     bx, word ptr [bp+carstate_]
    cmp     byte ptr [bx+0xc6], 0x0
    jz      LAB_1471_3724
    cmp     word ptr [bx+0x22], 0x1388
    jge     LAB_1471_3724
; Averaging idle and current torque.  
    mov     bx, word ptr [bp+simd_]
    mov     al, byte ptr [bx+0x3a]
    sub     ah, ah
    mov     cl, byte ptr [bp+var_currTorque]
    sub     ch, ch
    add     ax, cx
    shr     ax, 0x1
    mov     byte ptr [bp+var_currTorque], al
LAB_1471_3724:
    mov     al, byte ptr [bp+var_currTorque]
    sub     ah, ah
    mov     cx, ax
    mov     bx, word ptr [bp+carstate_]
    mov     ax, word ptr [bx+0x32]
    mul     cx
    mov     cl, 0x4
    shr     ax, cl                             ; torque * ratio / 4096
    add     word ptr [bp+var_deltaSpeed], ax
    mov     bx, word ptr [bp+simd_]
    sub     ax, ax
    push    ax
    push    word ptr [bx+0x2]                  ; push cwd(MASS)
    mov     ax, 0x19
    cwd
    push    dx
    push    ax
    mov     ax, word ptr [bp+var_deltaSpeed]
    cwd
    push    dx
    push    ax
    call    far ptr __aFlmul
    push    dx
    push    ax
    call    far ptr __aFuldiv
; Fuldiv is designed to take a dword divisor 
; Given that mass is a word value, there is no 
; clear reason to use that here...  
    sar     ax, 0x1
    mov     word ptr [bp+var_deltaSpeed], ax
; ovrForce = ovrForce * 25 / (2 * mass) 
; This is a convertion to acceleration.  
    cmp     byte ptr [bp+is_opponent], 0x0
    jz      LAB_1471_379d
; This seems to be a correction 
; for opponent maximum speeds.  
    mov     al, byte ptr [oppnentSped]
    sub     ah, ah
    sub     ax, 0xc8
    neg     ax
    shr     ax, 0x1
    mov     byte ptr [bp+var_currTorque], al
    or      al, al
    jz      LAB_1471_379d
    mov     ax, 0xc8
    cwd
    push    dx
    push    ax
    mov     ax, word ptr [bp+var_deltaSpeed]
    cwd
    push    dx
    push    ax
    mov     al, byte ptr [bp+var_currTorque]
    sub     ah, ah
    sub     cx, cx
    push    cx
    push    ax
    call    far ptr __aFlmul
    push    dx
    push    ax
    call    far ptr __aFldiv
    sub     word ptr [bp+var_deltaSpeed], ax
LAB_1471_379d:
    cmp     word ptr [bp+var_deltaSpeed], 0x128 ; (37/32)mph, a quite large value
    jg      LAB_1471_37a7
    jmp     near ptr LAB_1471_3629
LAB_1471_37a7:
    mov     bx, word ptr [bp+carstate_]
    mov     byte ptr [bx+0xc6], 0x5
    jmp     near ptr LAB_1471_3629
LAB_1471_37b2:
    mov     ax, word ptr [bp+var_deltaSpeed]
    add     word ptr [bp+var_updatedSpeed], ax
    cmp     word ptr [bp+var_updatedSpeed], 0x8000
; This jump to _17ED9 would make for a 
; colossal bug, but the condition is 
; impossible to meet xD.  
    jc      LAB_1471_37c9
    cmp     word ptr [bp+var_updatedSpeed], 0xf500
    ja      LAB_1471_37c9
    jmp     near ptr LAB_1471_364f
; F500h = 245mph = speed limit.  
LAB_1471_37c9:
    mov     word ptr [bp+var_updatedSpeed], 0xf500
    jmp     near ptr LAB_1471_364f
    db 0x90
LAB_1471_37d2:
    mov     ax, word ptr [bp+var_deltaSpeed]
    neg     ax
    cmp     ax, word ptr [bp+var_updatedSpeed]
    ja      LAB_1471_37df
    jmp     near ptr LAB_1471_3649
; Car stops.  
LAB_1471_37df:
    mov     word ptr [bp+var_updatedSpeed], 0x0
    jmp     near ptr LAB_1471_364f
    db 0x90
; ; everything from here just flows to the end  
LAB_1471_37e8:
    mov     ax, word ptr [bp+var_4]
LAB_1471_37eb:
    cmp     ax, 0x1400                         ; abs.delta = 20mph: a lot
    jle     LAB_1471_3818
; Likely this is here to adjust speeds after 
; landing from a jump, when speed and speed2 
; diverge.  
    mov     si, bx
    mov     ax, word ptr [si+0x2a]
    sub     dx, dx
    add     ax, word ptr [si+0x2c]
    adc     dx, dx
    shr     dx, 0x1
    rcr     ax, 0x1                            ; an average
    mov     word ptr [bx+0x2a], ax
    mov     bx, word ptr [bp+carstate_]
    mov     si, bx
    mov     ax, word ptr [si+0x2a]
    mov     word ptr [bx+0x2c], ax
    mov     bx, word ptr [bp+carstate_]
    mov     byte ptr [bx+0xc6], 0x5
    jmp     LAB_1471_3835
LAB_1471_3818:
    mov     bx, word ptr [bp+carstate_]
    mov     ax, word ptr [bp+var_updatedSpeed]
    mov     word ptr [bx+0x2a], ax
    mov     bx, word ptr [bp+carstate_]
    mov     ax, word ptr [bp+var_updatedSpeed]
    mov     word ptr [bx+0x2c], ax
    jmp     LAB_1471_3835
; Note that speed2 is NOT updated 
; if the car is airborne.  
LAB_1471_382c:
    mov     bx, word ptr [bp+carstate_]
    mov     ax, word ptr [bp+var_updatedSpeed]
    mov     word ptr [bx+0x2a], ax
LAB_1471_3835:
    mov     bx, word ptr [bp+simd_]
    push    word ptr [bx+0x6]
    mov     bx, word ptr [bp+carstate_]
    mov     al, byte ptr [bx+0xca]
    cbw
    push    ax
    push    word ptr [bx+0x30]
    push    word ptr [bx+0x2a]
    push    word ptr [bx+0x22]
    call    far ptr update_rpm_from_speed
    add     sp, 0xa
    mov     bx, word ptr [bp+carstate_]
    mov     word ptr [bx+0x22], ax
    mov     bx, word ptr [bp+carstate_]
    cmp     byte ptr [bx+0xc1], 0x0
    jz      LAB_1471_38af
    mov     si, bx
    mov     ax, word ptr [si+0x22]
    cmp     word ptr [bx+0x24], ax
    jle     LAB_1471_38af
    mov     ax, word ptr [bx+0x24]
    sub     ax, word ptr [bx+0x22]
    cmp     ax, 0x7d0                          ; 2000rpm
    jle     LAB_1471_3894
    mov     bx, word ptr [bp+simd_]
    mov     al, byte ptr [bx+0x3a]
    sub     ah, ah
    mov     bx, si
    mul     word ptr [bx+0x32]
    cmp     ax, 0x2ee0
    jle     LAB_1471_38af
    mov     byte ptr [bx+0xc6], 0x1e
    jmp     LAB_1471_38af
    db 0x90
LAB_1471_3894:
    mov     bx, word ptr [bp+carstate_]
    mov     ax, word ptr [bx+0x22]
    sub     ax, word ptr [bx+0x24]
    cmp     ax, 0x7d0                          ; 2000rpm
    jle     LAB_1471_38af
    mov     byte ptr [bx+0xc6], 0xa
    mov     bx, word ptr [bp+carstate_]
    sub     word ptr [bx+0x2c], 0x500          ; 5mph
LAB_1471_38af:
    mov     bx, word ptr [bp+carstate_]
    mov     ax, word ptr [state.game_topSpeed]
    cmp     word ptr [bx+0x2c], ax
    jbe     LAB_1471_38c0
    mov     ax, word ptr [bx+0x2c]
    mov     word ptr [state.game_topSpeed], ax
LAB_1471_38c0:
    pop     si
    pop     di
    mov     sp, bp
    pop     bp
    retf
update_car_speed_asm_ endp

; ******************************************************************************
; * dbg: dohandling
; ******************************************************************************
;  
; update_grip: 
;  
; former update_player_carstate  

; void __cdecl16far update_grip(CARSTATE * carstate_, SIMD * simd_, int is_player)
update_grip_asm_ proc far
    var_addf20f36Initial = word ptr  -16
    var_E      = byte ptr  -14
    var_C      = word ptr  -12
    var_A      = byte ptr  -10
    var_8      = word ptr   -8
    var_combinedGrip = word ptr   -6
    var_4      = word ptr   -4
    var_speedshr8 = word ptr   -2
    carstate_  = word ptr    6
    simd_      = word ptr    8
    is_player  = word ptr   10

    push    bp
    mov     bp, sp
    sub     sp, 0x10
    push    di
    push    si
    mov     bx, word ptr [bp+carstate_]
    cmp     byte ptr [bx+0xc1], 0x0
; If the car is flying the whole subroutine 
; is skipped.  
    jnz     LAB_1471_38ec
    mov     word ptr [bx+0x40], 0x0
    mov     bx, word ptr [bp+carstate_]
    mov     byte ptr [bx+0xc7], 0x0
    pop     si
    pop     di
    mov     sp, bp
    pop     bp
    retf
    db 0x90
; Wheels on grass...  
LAB_1471_38ec:
    mov     word ptr [bp+var_8], 0x0
    mov     bx, word ptr [bp+carstate_]
    cmp     byte ptr [bx+0xc2], 0x4
    jnz     LAB_1471_38fe
    inc     word ptr [bp+var_8]
LAB_1471_38fe:
    cmp     byte ptr [bx+0xc3], 0x4
    jnz     LAB_1471_3908
    inc     word ptr [bp+var_8]
LAB_1471_3908:
    cmp     byte ptr [bx+0xc4], 0x4
    jnz     LAB_1471_3912
    inc     word ptr [bp+var_8]
LAB_1471_3912:
    cmp     byte ptr [bx+0xc5], 0x4
    jnz     LAB_1471_391c
    inc     word ptr [bp+var_8]
LAB_1471_391c:
    cmp     word ptr [bp+var_8], 0x0
    jz      LAB_1471_3941
; Grass slowdown!  
    mov     ax, word ptr [bx+0x2c]
    sub     dx, dx
    mov     bx, word ptr [bp+var_8]
    shl     bx, 0x1
    div     word ptr [bx+0x688]
    mov     bx, word ptr [bp+carstate_]
    sub     word ptr [bx+0x2c], ax
    mov     bx, word ptr [bp+carstate_]
    mov     si, bx
    mov     ax, word ptr [si+0x2c]
    mov     word ptr [bx+0x2a], ax
LAB_1471_3941:
    mov     bx, word ptr [bp+carstate_]
    mov     ax, word ptr [bx+0x20]
    add     ax, word ptr [bx+0x36]
    mov     word ptr [bp+var_addf20f36Initial], ax
    mov     word ptr [bp+var_C], ax
    mov     ax, word ptr [bx+0x2a]
    mov     cl, 0x8
    shr     ax, cl
    mov     word ptr [bp+var_speedshr8], ax
    cmp     word ptr [bp+var_C], 0x0
    jge     LAB_1471_3968
    mov     ax, word ptr [bp+var_C]
    neg     ax
    jmp     LAB_1471_396b
    db 0x90
LAB_1471_3968:
    mov     ax, word ptr [bp+var_C]
; Grip modifiers...  
LAB_1471_396b:
    mov     cl, 0x3
    sar     ax, cl
    mov     word ptr [bp+var_8], ax
    mov     ax, word ptr [bp+var_speedshr8]
    mul     ax
    mov     cl, 0x6
    shr     ax, cl
    mul     word ptr [bp+var_8]
    mov     word ptr [bp+var_4], ax
; var_4 = speedshr8^2 * var_C_angleConstant / 2^9  
    mov     bx, word ptr [bp+simd_]
    mov     ax, word ptr [bx+0xa4]
    shl     ax, 0x1
    mov     word ptr [bp+var_combinedGrip], ax
    cwd
    push    dx
    push    ax
    mov     bx, word ptr [bp+carstate_]
    mov     al, byte ptr [bx+0xc5]
    cbw
    mov     si, ax
    shl     si, 0x1
    mov     bx, word ptr [bp+simd_]
    mov     di, word ptr [bp+carstate_]
    mov     al, byte ptr [di+0xc4]
    cbw
    mov     di, ax
    shl     di, 0x1
    mov     ax, word ptr [bx+si+0xb4]
    mov     bx, word ptr [bp+carstate_]
    mov     cx, ax
    mov     al, byte ptr [bx+0xc3]
    cbw
    mov     si, ax
    shl     si, 0x1
    mov     bx, word ptr [bp+simd_]
    mov     ax, word ptr [bx+si+0xb4]
    mov     bx, word ptr [bp+carstate_]
    mov     dx, ax
    mov     al, byte ptr [bx+0xc2]
    cbw
    mov     si, ax
    shl     si, 0x1
    mov     bx, word ptr [bp+simd_]
    mov     ax, word ptr [bx+si+0xb4]
    add     ax, dx
    add     ax, word ptr [bx+di+0xb4]
    add     ax, cx
    cwd
    push    dx
    push    ax
    call    far ptr __aFlmul
; Returns 2 * (baseGrip * sumWhlSurfGrip)  
    mov     cl, 0xa
LAB_1471_39eb:
    sar     dx, 0x1
    rcr     ax, 0x1
    dec     cl
    jnz     LAB_1471_39eb
    mov     word ptr [bp+var_combinedGrip], ax
    mov     bx, word ptr [bp+carstate_]
    mov     ax, word ptr [bp+var_4]
    mov     word ptr [bx+0x44], ax
    mov     bx, word ptr [bp+carstate_]
    mov     ax, word ptr [bp+var_combinedGrip]
    mov     word ptr [bx+0x46], ax
    cmp     word ptr [bp+is_player], 0x0
    jnz     LAB_1471_3a11
    jmp     near ptr LAB_1471_3c4e
LAB_1471_3a11:
    mov     bx, word ptr [bp+carstate_]
    cmp     word ptr [bx+0x20], 0x0
    jnz     LAB_1471_3a58
    mov     al, byte ptr [bx+0x18]
    sub     ah, ah
    mov     word ptr [bp+var_8], ax
    cmp     ax, 0x7f
    jle     LAB_1471_3a2c
    sub     word ptr [bp+var_8], 0x100
LAB_1471_3a2c:
    cmp     word ptr [bp+var_8], 0x0
    jz      LAB_1471_3a58
    jge     LAB_1471_3a3c
    mov     ax, word ptr [bp+var_8]
    neg     ax
    jmp     LAB_1471_3a3f
    db 0x90
LAB_1471_3a3c:
    mov     ax, word ptr [bp+var_8]
LAB_1471_3a3f:
    cmp     ax, 0x8
    jge     LAB_1471_3a58
    cmp     word ptr [bp+var_8], 0x0
    jle     LAB_1471_3a52
    mov     bx, word ptr [bp+carstate_]
    dec     word ptr [bx+0x18]
    jmp     LAB_1471_3a58
LAB_1471_3a52:
    mov     bx, word ptr [bp+carstate_]
    inc     word ptr [bx+0x18]
LAB_1471_3a58:
    mov     ax, word ptr [bp+var_combinedGrip]
    cmp     word ptr [bp+var_4], ax
    jle     LAB_1471_3abe
; This must have something to do 
; with spinning / sliding.  
    mov     bx, word ptr [bp+carstate_]
    mov     byte ptr [bx+0xc7], 0x1
    mov     ax, word ptr [bp+var_speedshr8]
    cwd
    push    dx
    push    ax
    cwd
    push    dx
    push    ax
    call    far ptr __aFlmul
    push    dx
    push    ax
    mov     ax, word ptr [bp+var_combinedGrip]
    cwd
    mov     dh, dl
    mov     dl, ah
    mov     ah, al
    sub     al, al                             ; *2^8
    push    dx
    push    ax
    call    far ptr __aFldiv
    mov     word ptr [bp+var_C], ax
    cmp     word ptr [bp+var_addf20f36Initial], 0x0
    jge     LAB_1471_3a9d
    mov     ax, 0xffff
    imul    word ptr [bp+var_C]
    mov     word ptr [bp+var_C], ax
LAB_1471_3a9d:
    mov     ax, word ptr [bp+var_C]
    mov     cx, ax
    shl     ax, 0x1
    add     ax, cx
    add     ax, word ptr [bp+var_addf20f36Initial]
    sar     ax, 0x1
    sar     ax, 0x1
    mov     word ptr [bp+var_C], ax
    mov     bx, word ptr [bp+carstate_]
    mov     ax, word ptr [bp+var_addf20f36Initial]
    sub     ax, word ptr [bp+var_C]
    mov     word ptr [bx+0x42], ax
    jmp     LAB_1471_3af7
LAB_1471_3abe:
    mov     bx, word ptr [bp+carstate_]
    mov     byte ptr [bx+0xc7], 0x0
    mov     bx, word ptr [bp+carstate_]
    cmp     word ptr [bx+0x42], 0x0
    jz      LAB_1471_3af7
    mov     si, bx
    mov     ax, word ptr [si+0x42]
    mov     cl, 0x4
    sar     ax, cl
    sub     word ptr [bx+0x42], ax
    mov     bx, word ptr [bp+carstate_]
    cmp     word ptr [bx+0x42], 0x0
    jge     LAB_1471_3aec
    mov     ax, word ptr [bx+0x42]
    neg     ax
    jmp     LAB_1471_3aef
    db 0x90
LAB_1471_3aec:
    mov     ax, word ptr [bx+0x42]
LAB_1471_3aef:
    cmp     ax, 0x10
    jge     LAB_1471_3af7
    sar     word ptr [bx+0x42], 0x1
LAB_1471_3af7:
    mov     bx, word ptr [bp+carstate_]
    cmp     word ptr [bx+0x3e], 0x0
    jnz     LAB_1471_3b10
    cmp     byte ptr [bx+0xc9], 0x1
    jz      LAB_1471_3b10
    mov     ax, word ptr [bp+var_C]
    mov     word ptr [bx+0x40], ax
    jmp     LAB_1471_3b18
    db 0x90
LAB_1471_3b10:
    mov     bx, word ptr [bp+carstate_]
    mov     word ptr [bx+0x40], 0x0
LAB_1471_3b18:
    mov     bx, word ptr [bp+carstate_]
    cmp     word ptr [bx+0x1c], 0x0
    jnz     LAB_1471_3b24
    jmp     near ptr LAB_1471_3bad
LAB_1471_3b24:
    jge     LAB_1471_3b2e
    mov     ax, word ptr [bx+0x1c]
    neg     ax
    jmp     LAB_1471_3b31
    db 0x90
LAB_1471_3b2e:
    mov     ax, word ptr [bx+0x1c]
LAB_1471_3b31:
    cmp     ax, 0x4
    jle     LAB_1471_3bad
    mov     al, byte ptr [bx+0x2]
    mov     byte ptr [bp+var_A], al
    mov     al, byte ptr [bx+0xa]
    mov     byte ptr [bp+var_E], al
    mov     bl, al                             ; hi-word > word : div by 2^8
    sub     bh, bh
    shl     bx, 0x1
    mov     bx, word ptr [bx+0x8c3c]
    mov     al, byte ptr [bp+var_A]
    sub     ah, ah
    add     bx, ax
    les     si, [td14_elem_map_main]
    mov     al, byte ptr es:[bx+si]
    cmp     ax, 0xfd
    jz      LAB_1471_3b6c
    cmp     ax, 0xfe
    jz      LAB_1471_3b6f
    cmp     ax, 0xff
    jz      LAB_1471_3b98
    jmp     LAB_1471_3b72
    db 0x90
LAB_1471_3b6c:
    dec     byte ptr [bp+var_A]
LAB_1471_3b6f:
    inc     byte ptr [bp+var_E]
LAB_1471_3b72:
    mov     bl, byte ptr [bp+var_E]
    sub     bh, bh
    shl     bx, 0x1
    mov     bx, word ptr [bx+terrainrows]
    mov     al, byte ptr [bp+var_A]
    sub     ah, ah
    add     bx, ax
    les     si, [td14_elem_map_main]
    mov     al, byte ptr es:[bx+si]
; Test for banked corners...!  
    cmp     ax, 0x34
    jc      LAB_1471_3bad
    cmp     ax, 0x37
    jbe     LAB_1471_3b9e
    jmp     LAB_1471_3bad
    db 0x90
LAB_1471_3b98:
    dec     byte ptr [bp+var_A]
    jmp     LAB_1471_3b72
    db 0x90
; That's what a banked corner does: it makes 
; the car turn by itself by an ammount 
; proportional to the banking slope (tested 
; and confirmed).  
LAB_1471_3b9e:
    mov     bx, word ptr [bp+carstate_]
    mov     ax, word ptr [bx+0x1c]
    cwd
    mov     cx, 0x5
    idiv    cx
    add     word ptr [bx+0x40], ax
LAB_1471_3bad:
    mov     ax, word ptr [bp+var_combinedGrip]
    add     ax, 0x3e8
    cmp     ax, word ptr [bp+var_4]
    jge     LAB_1471_3bda
    mov     ax, word ptr [bp+var_C]
    sub     ax, word ptr [bp+var_addf20f36Initial]
    cwd
    mov     cx, 0xe
    idiv    cx
    mov     bx, word ptr [bp+carstate_]
    add     word ptr [bx+0x3e], ax
    mov     bx, word ptr [bp+carstate_]
    mov     cx, 0x2
    mov     ax, word ptr [bx+0x3e]
    cwd
    idiv    cx
    jmp     near ptr LAB_1471_3c7b
    db 0x90
LAB_1471_3bda:
    mov     bx, word ptr [bp+carstate_]
    cmp     word ptr [bx+0x3e], 0x0
    jnz     LAB_1471_3be6
    jmp     near ptr LAB_1471_3c7e
LAB_1471_3be6:
    mov     ax, word ptr [bp+var_C]
    sub     ax, word ptr [bp+var_addf20f36Initial]
    cwd
    mov     cx, 0xe
    idiv    cx
    add     word ptr [bx+0x3e], ax
    mov     bx, word ptr [bp+carstate_]
    mov     cx, 0x2
    mov     ax, word ptr [bx+0x3e]
    cwd
    idiv    cx
    mov     word ptr [bx+0x3e], ax
    mov     bx, word ptr [bp+carstate_]
    cmp     word ptr [bx+0x3e], 0x0
    jnz     LAB_1471_3c7e
    push    word ptr [bx+0x2c]
    push    word ptr [bx+0x36]
    call    far ptr int_cos
    add     sp, 0x2
    push    ax
    call    far ptr multiply_and_scale
    add     sp, 0x4
    mov     bx, word ptr [bp+carstate_]
    mov     word ptr [bx+0x2c], ax
    mov     bx, word ptr [bp+carstate_]
    push    word ptr [bx+0x36]
    call    far ptr int_cos
    add     sp, 0x2
    or      ax, ax
    jge     LAB_1471_3c44
    mov     bx, word ptr [bp+carstate_]
    mov     word ptr [bx+0x2c], 0x0
LAB_1471_3c44:
    mov     bx, word ptr [bp+carstate_]
    mov     word ptr [bx+0x36], 0x0
    jmp     LAB_1471_3c7e
LAB_1471_3c4e:
    mov     bx, word ptr [bp+carstate_]
    mov     si, bx
    mov     ax, word ptr [si+0x20]
    shl     ax, 0x1
    shl     ax, 0x1
    mov     word ptr [bx+0x40], ax
    mov     bx, word ptr [bp+carstate_]
    cmp     word ptr [bx+0x3e], 0x0
    jz      LAB_1471_3c7e
    mov     si, bx
    mov     ax, word ptr [si+0x3e]
    mov     cx, ax
    shl     ax, 0x1
    shl     ax, 0x1
    shl     ax, 0x1
    shl     ax, 0x1
    sub     ax, cx
    mov     cl, 0x4
    sar     ax, cl
LAB_1471_3c7b:
    mov     word ptr [bx+0x3e], ax
LAB_1471_3c7e:
    mov     bx, word ptr [bp+carstate_]
    cmp     word ptr [bx+0x36], 0x0
    jz      LAB_1471_3ca5
    cmp     word ptr [bx+0x3e], 0x0
    jnz     LAB_1471_3ca5
    mov     si, bx
    mov     ax, word ptr [si+0x36]
    mov     cx, ax
    shl     ax, 0x1
    shl     ax, 0x1
    shl     ax, 0x1
    shl     ax, 0x1
    sub     ax, cx
    mov     cl, 0x4
    sar     ax, cl
    mov     word ptr [bx+0x36], ax
LAB_1471_3ca5:
    mov     bx, word ptr [bp+carstate_]
    cmp     word ptr [bx+0x3e], 0x0
    jz      LAB_1471_3cb6
    mov     si, bx
    mov     ax, word ptr [si+0x3e]
    sub     word ptr [bx+0x36], ax
LAB_1471_3cb6:
    mov     bx, word ptr [bp+carstate_]
    cmp     byte ptr [bx+0xc7], 0x0
    jnz     LAB_1471_3cc3
    jmp     near ptr LAB_1471_3d48
LAB_1471_3cc3:
    cmp     word ptr [bx+0x42], 0x0
    jge     LAB_1471_3cd0
    mov     ax, word ptr [bx+0x42]
    neg     ax
    jmp     LAB_1471_3cd3
LAB_1471_3cd0:
    mov     ax, word ptr [bx+0x42]
LAB_1471_3cd3:
    shl     ax, 0x1
    mov     word ptr [bp+var_8], ax
    cmp     word ptr [bx+0x2a], ax
    jbe     LAB_1471_3d38
    cmp     word ptr [bx+0x2c], ax
    jbe     LAB_1471_3cf0
    sub     word ptr [bx+0x2a], ax
    mov     bx, word ptr [bp+carstate_]
    mov     ax, word ptr [bp+var_8]
    sub     word ptr [bx+0x2c], ax
    jmp     LAB_1471_3d00
LAB_1471_3cf0:
    mov     bx, word ptr [bp+carstate_]
    mov     word ptr [bx+0x2a], 0x0
    mov     bx, word ptr [bp+carstate_]
    mov     word ptr [bx+0x2c], 0x0
LAB_1471_3d00:
    mov     bx, word ptr [bp+carstate_]
    cmp     byte ptr [bx+0xc9], 0x0
    jnz     LAB_1471_3d48
    cmp     byte ptr [bx+0xc2], 0x1
    jz      LAB_1471_3d26
    cmp     byte ptr [bx+0xc3], 0x1
    jz      LAB_1471_3d26
    cmp     byte ptr [bx+0xc4], 0x1
    jz      LAB_1471_3d26
    cmp     byte ptr [bx+0xc5], 0x1
    jnz     LAB_1471_3d2e
LAB_1471_3d26:
    or      byte ptr [bx+0xcf], 0x2
    jmp     LAB_1471_3d48
    db 0x90
LAB_1471_3d2e:
    mov     bx, word ptr [bp+carstate_]
    or      byte ptr [bx+0xcf], 0x4
    jmp     LAB_1471_3d48
LAB_1471_3d38:
    mov     bx, word ptr [bp+carstate_]
    mov     word ptr [bx+0x2a], 0x0
    mov     bx, word ptr [bp+carstate_]
    mov     word ptr [bx+0x2c], 0x0
LAB_1471_3d48:
    mov     bx, word ptr [bp+carstate_]
    mov     word ptr [bx+0x42], 0x0
    pop     si
    pop     di
    mov     sp, bp
    pop     bp
    retf
update_grip_asm_ endp

; int __cdecl16far car_car_speed_adjust_maybe(CARSTATE * player_state, CARSTATE * opp_state)
car_car_speed_adjust_maybe_asm_ proc far
    var_18     = word ptr  -24
    var_16     = word ptr  -22
    var_14     = word ptr  -20
    var_12     = word ptr  -18
    var_10     = word ptr  -16
    var_E      = word ptr  -14
    var_C      = word ptr  -12
    var_A      = word ptr  -10
    var_8      = word ptr   -8
    var_6      = word ptr   -6
    var_4      = word ptr   -4
    var_2      = word ptr   -2
    player_state = word ptr    6
    opp_state  = word ptr    8

    push    bp
    mov     bp, sp
    sub     sp, 0x18
    push    si
    mov     bx, word ptr [bp+player_state]
    mov     byte ptr [bx+0xc8], 0x1
    mov     bx, word ptr [bp+opp_state]
    mov     byte ptr [bx+0xc8], 0x1
    mov     bx, word ptr [bp+player_state]
    mov     ax, word ptr [bx+0x2c]
    mov     word ptr [bp+var_6], ax
    mov     bx, word ptr [bp+opp_state]
    mov     ax, word ptr [bx+0x2c]
    mov     word ptr [bp+var_C], ax
    mov     bx, word ptr [bp+player_state]
    mov     ax, word ptr [bx+0x18]
    mov     word ptr [bp+var_2], ax
    mov     bx, word ptr [bp+opp_state]
    mov     ax, word ptr [bx+0x18]
    mov     word ptr [bp+var_4], ax
    push    word ptr [bp+var_2]
    call    far ptr int_sin
    add     sp, 0x2
    push    ax
    mov     ax, word ptr [bp+var_6]
    mov     cl, 0x8
    shr     ax, cl
    push    ax
    call    far ptr multiply_and_scale
    add     sp, 0x4
    mov     word ptr [bp+var_10], ax
    push    word ptr [bp+var_4]
    call    far ptr int_sin
    add     sp, 0x2
    push    ax
    mov     ax, word ptr [bp+var_C]
    mov     cl, 0x8
    shr     ax, cl
    push    ax
    call    far ptr multiply_and_scale
    add     sp, 0x4
    mov     word ptr [bp+var_14], ax
    push    word ptr [bp+var_2]
    call    far ptr int_cos
    add     sp, 0x2
    push    ax
    mov     ax, word ptr [bp+var_6]
    mov     cl, 0x8
    shr     ax, cl
    push    ax
    call    far ptr multiply_and_scale
    add     sp, 0x4
    mov     word ptr [bp+var_12], ax
    push    word ptr [bp+var_4]
    call    far ptr int_cos
    add     sp, 0x2
    push    ax
    mov     ax, word ptr [bp+var_C]
    mov     cl, 0x8
    shr     ax, cl
    push    ax
    call    far ptr multiply_and_scale
    add     sp, 0x4
    mov     word ptr [bp+var_16], ax
    sub     ax, word ptr [bp+var_12]
    push    ax
    mov     ax, word ptr [bp+var_14]
    sub     ax, word ptr [bp+var_10]
    push    ax
    call    far ptr int_hypot
    add     sp, 0x4
    mov     word ptr [bp+var_A], ax
    cmp     ax, 0xa
    jge     LAB_1471_3e2d
    mov     word ptr [bp+var_A], 0xa
LAB_1471_3e2d:
    mov     ax, word ptr [bp+var_2]
    sub     ax, word ptr [bp+var_4]
    and     ah, 0x3
    mov     word ptr [bp+var_8], ax
    mov     ah, byte ptr [bp+var_A]
    sub     al, al
    mov     word ptr [bp+var_E], ax
    mov     ax, 0x300
    imul    word ptr [bp+var_A]
    sar     ax, 0x1
    sar     ax, 0x1
    mov     word ptr [bp+var_18], ax
    mov     bx, word ptr [bp+player_state]
    cmp     word ptr [bx+0x2c], ax
    jnc     LAB_1471_3e5e
    mov     word ptr [bx+0x2c], 0x0
    jmp     LAB_1471_3e67
    db 0x90
LAB_1471_3e5e:
    mov     bx, word ptr [bp+player_state]
    mov     ax, word ptr [bp+var_18]
    sub     word ptr [bx+0x2c], ax
LAB_1471_3e67:
    mov     bx, word ptr [bp+player_state]
    mov     ax, word ptr [bp+var_4]
    sub     ax, word ptr [bp+var_2]
    mov     word ptr [bx+0x36], ax
    mov     bx, word ptr [bp+player_state]
    cmp     word ptr [bx+0x36], 0x200
    jl      LAB_1471_3e82
    sub     word ptr [bx+0x36], 0x400
LAB_1471_3e82:
    mov     bx, word ptr [bp+player_state]
    cmp     word ptr [bx+0x36], 0xfe00
    jg      LAB_1471_3e90
    add     byte ptr [bx+0x37], 0x4
LAB_1471_3e90:
    mov     bx, word ptr [bp+opp_state]
    mov     ax, word ptr [bp+var_2]
    sub     ax, word ptr [bp+var_4]
    mov     word ptr [bx+0x36], ax
    mov     bx, word ptr [bp+opp_state]
    cmp     word ptr [bx+0x36], 0x200
    jl      LAB_1471_3eab
    sub     word ptr [bx+0x36], 0x400
LAB_1471_3eab:
    mov     bx, word ptr [bp+opp_state]
    cmp     word ptr [bx+0x36], 0xfe00
    jg      LAB_1471_3eb9
    add     byte ptr [bx+0x37], 0x4
LAB_1471_3eb9:
    mov     bx, word ptr [bp+player_state]
    mov     si, bx
    mov     ax, word ptr [si+0x2c]
    mov     word ptr [bx+0x2a], ax
    mov     bx, word ptr [bp+opp_state]
    mov     si, bx
    mov     ax, word ptr [si+0x2c]
    mov     word ptr [bx+0x2a], ax
    cmp     word ptr [bp+var_A], 0x1e
    jle     LAB_1471_3ede
    mov     ax, 0x1
    pop     si
    mov     sp, bp
    pop     bp
    retf
    db 0x90
LAB_1471_3ede:
    sub     ax, ax
    pop     si
    mov     sp, bp
    pop     bp
    retf
car_car_speed_adjust_maybe_asm_ endp
    db 0x90

; int __cdecl16far carState_rc_op(CARSTATE * car, int unk, int wheel_idx)
carState_rc_op_asm_ proc far
    var_6      = word ptr   -6
    var_4      = word ptr   -4
    var_2      = word ptr   -2
    car        = word ptr    6
    unk        = word ptr    8
    wheel_idx  = word ptr   10

    push    bp
    mov     bp, sp
    sub     sp, 0x6
    push    di
    push    si
    mov     si, word ptr [bp+wheel_idx]
    shl     si, 0x1
    add     si, word ptr [bp+car]
    mov     ax, word ptr [si+0x54]             ; rc accesses are offset by the wheel index.
    mov     word ptr [bp+var_2], ax
    mov     word ptr [bp+var_4], 0x0
    mov     word ptr [bp+var_6], 0x0
    cmp     word ptr [si+0x6c], 0x0
    jz      LAB_1471_3f49
    jge     LAB_1471_3f26
    add     word ptr [si+0x6c], 0x4
    mov     si, word ptr [bp+wheel_idx]
    shl     si, 0x1
    add     si, word ptr [bp+car]
    add     si, 0x6c
    mov     ax, word ptr [si]
    cmp     word ptr [bp+var_6], ax
    jge     LAB_1471_3f49
    jmp     LAB_1471_3f44
LAB_1471_3f26:
    mov     di, word ptr [bp+wheel_idx]
    shl     di, 0x1
    mov     bx, word ptr [bp+car]
    sub     word ptr [bx+di+0x6c], 0x4
    mov     si, word ptr [bp+wheel_idx]
    shl     si, 0x1
    add     si, word ptr [bp+car]
    add     si, 0x6c
    mov     ax, word ptr [si]
    cmp     word ptr [bp+var_6], ax
    jle     LAB_1471_3f49
LAB_1471_3f44:
    mov     ax, word ptr [bp+var_6]
    mov     word ptr [si], ax
LAB_1471_3f49:
    mov     di, word ptr [bp+wheel_idx]
    shl     di, 0x1
    mov     bx, word ptr [bp+car]
    mov     si, word ptr [bx+di+0x6c]
    mov     di, word ptr [bp+wheel_idx]
    shl     di, 0x1
    mov     word ptr [bx+di+0x6c], si
    cmp     word ptr [bp+unk], 0x0
    jge     LAB_1471_3f79
    mov     di, word ptr [bp+wheel_idx]
    shl     di, 0x1
    mov     bx, word ptr [bp+car]
    mov     ax, word ptr [bp+unk]
    neg     ax
    cmp     word ptr [bx+di+0x54], ax
    jle     LAB_1471_3f79
    mov     word ptr [bp+unk], 0x0
LAB_1471_3f79:
    cmp     word ptr [bp+unk], 0x0
    jnz     LAB_1471_3fea
    mov     si, word ptr [bp+wheel_idx]
    shl     si, 0x1
    add     si, word ptr [bp+car]
    mov     ax, word ptr [si+0x6c]
    cmp     word ptr [si+0x54], ax
    jle     LAB_1471_3fb8
    sub     word ptr [si+0x54], 0x80
    mov     si, word ptr [bp+wheel_idx]
    shl     si, 0x1
    add     si, word ptr [bp+car]
    mov     ax, word ptr [si+0x6c]
    cmp     word ptr [si+0x54], ax
    jge     LAB_1471_3fa7
    mov     word ptr [si+0x54], ax
LAB_1471_3fa7:
    mov     ax, word ptr [bp+var_2]
    mov     si, word ptr [bp+wheel_idx]
    shl     si, 0x1
    mov     bx, word ptr [bp+car]
    sub     ax, word ptr [bx+si+0x54]
    jmp     near ptr LAB_1471_4092
LAB_1471_3fb8:
    mov     si, word ptr [bp+wheel_idx]
    shl     si, 0x1
    add     si, word ptr [bp+car]
    mov     ax, word ptr [si+0x6c]
    cmp     word ptr [si+0x54], ax
    jl      LAB_1471_3fcb
    jmp     near ptr LAB_1471_4095
LAB_1471_3fcb:
    add     word ptr [si+0x54], 0x80
    mov     si, word ptr [bp+wheel_idx]
    shl     si, 0x1
    add     si, word ptr [bp+car]
    mov     ax, word ptr [si+0x6c]
    cmp     word ptr [si+0x54], ax
    jg      LAB_1471_3fe3
    jmp     near ptr LAB_1471_4095
LAB_1471_3fe3:
    mov     word ptr [si+0x54], ax
    jmp     near ptr LAB_1471_4095
    db 0x90
LAB_1471_3fea:
    cmp     word ptr [bp+unk], 0x0
    jle     LAB_1471_4038
    cmp     word ptr [bp+unk], 0xc0
    jle     LAB_1471_4006
    mov     si, word ptr [bp+wheel_idx]
    shl     si, 0x1
    mov     bx, word ptr [bp+car]
    add     word ptr [bx+si+0x54], 0xc0
    jmp     LAB_1471_4014
LAB_1471_4006:
    mov     si, word ptr [bp+wheel_idx]
    shl     si, 0x1
    mov     bx, word ptr [bp+car]
    mov     ax, word ptr [bp+unk]
    add     word ptr [bx+si+0x54], ax
LAB_1471_4014:
    mov     si, word ptr [bp+wheel_idx]
    shl     si, 0x1
    add     si, word ptr [bp+car]
    add     si, 0x54                           ; 54 = car_rc2
    cmp     word ptr [si], 0x180
    jle     LAB_1471_4029
    mov     word ptr [si], 0x180
LAB_1471_4029:
    mov     si, word ptr [bp+wheel_idx]
    shl     si, 0x1
    mov     bx, word ptr [bp+car]
    mov     word ptr [bx+si+0x64], 0x0         ; 64 = car_rc4
    jmp     LAB_1471_4095
LAB_1471_4038:
    mov     si, word ptr [bp+wheel_idx]
    shl     si, 0x1
    add     si, word ptr [bp+car]
    add     si, 0x54
    mov     ax, word ptr [bp+unk]
    add     ax, word ptr [si]
    cmp     ax, 0xfee0
    jle     LAB_1471_4054
    mov     ax, word ptr [bp+unk]
    add     word ptr [si], ax
    jmp     LAB_1471_4081
LAB_1471_4054:
    mov     di, word ptr [bp+wheel_idx]
    shl     di, 0x1
    mov     bx, word ptr [bp+car]
    mov     ax, word ptr [bp+unk]
    mov     cx, ax
    shl     ax, 0x1
    add     ax, cx
    sar     ax, 0x1
    sar     ax, 0x1
    add     word ptr [bx+di+0x54], ax
    mov     si, word ptr [bp+wheel_idx]
    shl     si, 0x1
    add     si, word ptr [bp+car]
    add     si, 0x54
    cmp     word ptr [si], 0xfe80
    jge     LAB_1471_4081
    mov     word ptr [si], 0xfe80
LAB_1471_4081:
    mov     ax, word ptr [bp+var_2]
    mov     si, word ptr [bp+wheel_idx]
    shl     si, 0x1
    mov     bx, word ptr [bp+car]
    sub     ax, word ptr [bx+si+0x54]
    add     ax, word ptr [bp+unk]
LAB_1471_4092:
    mov     word ptr [bp+var_4], ax
LAB_1471_4095:
    mov     ax, word ptr [bp+var_2]
    add     ax, word ptr [bp+var_4]
    pop     si
    pop     di
    mov     sp, bp
    pop     bp
    retf
carState_rc_op_asm_ endp
    db 0x90

; ******************************************************************************
; * dbg: dosteering
; ******************************************************************************

; void __cdecl16far upd_statef20_from_steer_input(char steering)
upd_statef20_from_steer_input_asm_ proc far
    var_speed2shr0AandFC = byte ptr   -4
    steering   = byte ptr    6

    push    bp
    mov     bp, sp
    sub     sp, 0x6
    push    di
    push    si
    mov     di, word ptr [state.playerstate.car_steeringAngle]
    mov     ax, word ptr [state.playerstate.car_speed2]
    mov     cl, 0xa
    shr     ax, cl
    and     al, 0xfc
    mov     byte ptr [bp+var_speed2shr0AandFC], al
    cbw
    mov     bx, ax
    mov     al, byte ptr [bp+steering]
    cbw
    add     bx, ax
; After (add bx, ax) it seems the low bx byte contains 
; speed2 / 4096 on the middle 4 bits and the 
; steering input on the lowest-significant two.  
    add     bx, word ptr [steerWhlRespTable_ptr]
; That means there are 64 possible values for it, 
; which makes sense considering how it is used...  
    mov     al, byte ptr [bx]
    cbw
    mov     si, ax
    or      si, si
    jle     LAB_1471_40d8
    cmp     di, -0x1
    jge     LAB_1471_40e5
    jmp     LAB_1471_40e1
    db 0x90
LAB_1471_40d8:
    or      si, si
    jz      LAB_1471_40e5
    cmp     di, 0x1
    jle     LAB_1471_40e5
LAB_1471_40e1:
    mov     cl, 0x2
    shl     si, cl
LAB_1471_40e5:
    or      si, si
    jnz     LAB_1471_4125
; This parenthetical block seems to be a 
; corrective procedure for low speeds.  
    cmp     word ptr [state.playerstate.car_speed2], 0x0
    jz      LAB_1471_4125
; di = field20  
    or      di, di
    jz      LAB_1471_4125
    mov     al, byte ptr [bp+var_speed2shr0AandFC]
    cbw
    mov     bx, ax
    add     bx, word ptr [steerWhlRespTable_ptr]
    mov     al, byte ptr [bx+0x1]              ; tables?! With 40h values!!
    cbw
    mov     si, ax
    shl     si, 0x1
    or      di, di
    jge     LAB_1471_4110
    mov     ax, di
    neg     ax
    jmp     LAB_1471_4112
LAB_1471_4110:
    mov     ax, di
LAB_1471_4112:
    cmp     ax, si
    jle     LAB_1471_411e
    or      di, di
    jle     LAB_1471_4125
    mov     ax, si
    jmp     LAB_1471_4121
LAB_1471_411e:
    mov     ax, word ptr [state.playerstate.car_steeringAngle]
LAB_1471_4121:
    neg     ax
    mov     si, ax
LAB_1471_4125:
    cmp     word ptr [framespersec], 0xa
    jnz     LAB_1471_4140
    cmp     si, 0xa0
    jle     LAB_1471_4135
    mov     si, 0xa0
LAB_1471_4135:
    cmp     si, 0xff60
    jge     LAB_1471_4150
    mov     si, 0xff60
    jmp     LAB_1471_4150
LAB_1471_4140:
    cmp     si, 0x50
    jle     LAB_1471_4148
    mov     si, 0x50
LAB_1471_4148:
    cmp     si, -0x50
    jge     LAB_1471_4150
    mov     si, 0xffb0
LAB_1471_4150:
    add     di, si
    cmp     di, 0xf0
    jle     LAB_1471_415b
    mov     di, 0xf0
LAB_1471_415b:
    cmp     di, 0xff10
    jge     LAB_1471_4164
    mov     di, 0xff10
LAB_1471_4164:
    mov     al, byte ptr [bp+var_speed2shr0AandFC]
    cbw
    mov     bx, ax
    mov     al, byte ptr [bp+steering]
    cbw
    add     bx, ax
    add     bx, word ptr [steerWhlRespTable_ptr]
    cmp     byte ptr [bx], 0x0
    jnz     LAB_1471_4189
    push    di                                 ; int
    call    far ptr _abs
    add     sp, 0x2
    cmp     ax, 0x8
    jge     LAB_1471_4189
    sub     di, di
LAB_1471_4189:
    mov     word ptr [state.playerstate.car_steeringAngle], di
    pop     si
    pop     di
    mov     sp, bp
    pop     bp
    retf
upd_statef20_from_steer_input_asm_ endp
    db 0x90

; ******************************************************************************
; * dbg: myupdatesfx
; ******************************************************************************

; void __cdecl16far audio_carstate(void)
audio_carstate_asm_ proc far
    var_34     = dword ptr -52
    var_30     = word ptr  -48
    var_2E     = word ptr  -46
    var_2C     = word ptr  -44
    var_2A     = word ptr  -42
    var_28     = word ptr  -40
    var_26     = word ptr  -38
    var_24     = word ptr  -36
    var_22     = word ptr  -34
    var_20     = word ptr  -32
    var_1E     = word ptr  -30
    var_1C     = word ptr  -28
    var_1A     = word ptr  -26
    var_18     = word ptr  -24
    var_16     = byte ptr  -22
    var_14     = word ptr  -20
    var_12     = word ptr  -18
    var_10     = word ptr  -16
    var_E      = word ptr  -14
    var_C      = word ptr  -12
    var_A      = word ptr  -10
    var_8      = word ptr   -8
    var_6      = word ptr   -6
    var_4      = word ptr   -4
    var_2      = word ptr   -2

    push    bp
    mov     bp, sp
    sub     sp, 0x34
    push    di
    push    si
    cmp     byte ptr [is_in_replay], 0x0
    jnz     LAB_1471_41a6
    jmp     near ptr LAB_1471_422a
LAB_1471_41a6:
    cmp     byte ptr [byte_459D8], 0x0
    jz      LAB_1471_4215
    mov     ax, word ptr [word_449E4]
    mov     word ptr [word_44D1E], ax
    test    byte ptr [byte_42D26], 0x6
    jz      LAB_1471_41c6
    push    word ptr [word_43964]
    call    far ptr audio_op_unk7
    add     sp, 0x2
LAB_1471_41c6:
    test    byte ptr [byte_42D26], 0x1
    jz      LAB_1471_41d9
    push    word ptr [word_43964]
    call    far ptr audio_function2
    add     sp, 0x2
LAB_1471_41d9:
    cmp     byte ptr [gameconfig.game_opponenttype], 0x0
    jz      LAB_1471_4206
    test    byte ptr [byte_42D2A], 0x6
    jz      LAB_1471_41f3
    push    word ptr [word_4408C]
    call    far ptr audio_op_unk7
    add     sp, 0x2
LAB_1471_41f3:
    test    byte ptr [byte_42D2A], 0x1
    jz      LAB_1471_4206
    push    word ptr [word_4408C]
    call    far ptr audio_function2
    add     sp, 0x2
LAB_1471_4206:
    mov     byte ptr [byte_459D8], 0x0
    mov     byte ptr [byte_42D26], 0x0
    mov     byte ptr [byte_42D2A], 0x0
LAB_1471_4215:
    mov     al, byte ptr [byte_3BE02]
    cmp     byte ptr [is_in_replay], al
    jnz     LAB_1471_4221
    jmp     near ptr LAB_1471_45bc
LAB_1471_4221:
    call    far ptr sub_38178
    jmp     near ptr LAB_1471_45bc
    db 0x90
LAB_1471_422a:
    mov     ax, word ptr [state.playerstate.car_posWorld2.lx]
    mov     dx, word ptr [state.playerstate.car_posWorld2.lx+2]
    mov     cl, 0x6
LAB_1471_4233:
    sar     dx, 0x1
    rcr     ax, 0x1
    dec     cl
    jnz     LAB_1471_4233
    mov     word ptr [bp+var_1C], ax
    mov     ax, word ptr [state.playerstate.car_posWorld2.ly]
    mov     dx, word ptr [state.playerstate.car_posWorld2.ly+2]
    mov     cl, 0x6
LAB_1471_4247:
    sar     dx, 0x1
    rcr     ax, 0x1
    dec     cl
    jnz     LAB_1471_4247
    mov     word ptr [bp+var_1A], ax
    mov     ax, word ptr [state.playerstate.car_posWorld2.lz]
    mov     dx, word ptr [state.playerstate.car_posWorld2.lz+2]
    mov     cl, 0x6
LAB_1471_425b:
    sar     dx, 0x1
    rcr     ax, 0x1
    dec     cl
    jnz     LAB_1471_425b
    mov     word ptr [bp+var_18], ax
    mov     ax, word ptr [state.playerstate.car_posWorld1.lx]
    mov     dx, word ptr [state.playerstate.car_posWorld1.lx+2]
    mov     cl, 0x6
LAB_1471_426f:
    sar     dx, 0x1
    rcr     ax, 0x1
    dec     cl
    jnz     LAB_1471_426f
    mov     word ptr [bp+var_8], ax
    mov     ax, word ptr [state.playerstate.car_posWorld1.ly]
    mov     dx, word ptr [state.playerstate.car_posWorld1.ly+2]
    mov     cl, 0x6
LAB_1471_4283:
    sar     dx, 0x1
    rcr     ax, 0x1
    dec     cl
    jnz     LAB_1471_4283
    mov     word ptr [bp+var_6], ax
    mov     ax, word ptr [state.playerstate.car_posWorld1.lz]
    mov     dx, word ptr [state.playerstate.car_posWorld1.lz+2]
    mov     cl, 0x6
LAB_1471_4297:
    sar     dx, 0x1
    rcr     ax, 0x1
    dec     cl
    jnz     LAB_1471_4297
    mov     word ptr [bp+var_4], ax
    cmp     byte ptr [gameconfig.game_opponenttype], 0x0
    jz      LAB_1471_4321
    mov     ax, word ptr [state.opponentstate.car_posWorld2.lx]
    mov     dx, word ptr [state.opponentstate.car_posWorld2.lx+2]
    mov     cl, 0x6
LAB_1471_42b2:
    sar     dx, 0x1
    rcr     ax, 0x1
    dec     cl
    jnz     LAB_1471_42b2
    mov     word ptr [bp+var_24], ax
    mov     ax, word ptr [state.opponentstate.car_posWorld2.ly]
    mov     dx, word ptr [state.opponentstate.car_posWorld2.ly+2]
    mov     cl, 0x6
LAB_1471_42c6:
    sar     dx, 0x1
    rcr     ax, 0x1
    dec     cl
    jnz     LAB_1471_42c6
    mov     word ptr [bp+var_22], ax
    mov     ax, word ptr [state.opponentstate.car_posWorld2.lz]
    mov     dx, word ptr [state.opponentstate.car_posWorld2.lz+2]
    mov     cl, 0x6
LAB_1471_42da:
    sar     dx, 0x1
    rcr     ax, 0x1
    dec     cl
    jnz     LAB_1471_42da
    mov     word ptr [bp+var_20], ax
    mov     ax, word ptr [state.opponentstate.car_posWorld1.lx]
    mov     dx, word ptr [state.opponentstate.car_posWorld1.lx+2]
    mov     cl, 0x6
LAB_1471_42ee:
    sar     dx, 0x1
    rcr     ax, 0x1
    dec     cl
    jnz     LAB_1471_42ee
    mov     word ptr [bp+var_E], ax
    mov     ax, word ptr [state.opponentstate.car_posWorld1.ly]
    mov     dx, word ptr [state.opponentstate.car_posWorld1.ly+2]
    mov     cl, 0x6
LAB_1471_4302:
    sar     dx, 0x1
    rcr     ax, 0x1
    dec     cl
    jnz     LAB_1471_4302
    mov     word ptr [bp+var_C], ax
    mov     ax, word ptr [state.opponentstate.car_posWorld1.lz]
    mov     dx, word ptr [state.opponentstate.car_posWorld1.lz+2]
    mov     cl, 0x6
LAB_1471_4316:
    sar     dx, 0x1
    rcr     ax, 0x1
    dec     cl
    jnz     LAB_1471_4316
    mov     word ptr [bp+var_A], ax
LAB_1471_4321:
    mov     al, byte ptr [cameramode]
    cbw
    or      ax, ax
    jz      LAB_1471_4342
    cmp     ax, 0x1
    jnz     LAB_1471_4331
    jmp     near ptr LAB_1471_4432
LAB_1471_4331:
    cmp     ax, 0x2
    jz      LAB_1471_4342
    cmp     ax, 0x3
    jnz     LAB_1471_433e
    jmp     near ptr LAB_1471_445e
LAB_1471_433e:
    jmp     LAB_1471_4372
    db 2 dup (0x90)
LAB_1471_4342:
    cmp     byte ptr [followOpponentFlag], 0x0
    jz      LAB_1471_435e
    lea     di, [bp+var_14]
    lea     si, [bp+var_E]
    push    ss
    pop     es
    movsw
    movsw
    movsw
    lea     di, [bp+var_2A]
    lea     si, [bp+var_24]
LAB_1471_435a:
    push    ss
    pop     es
    jmp     LAB_1471_436f
LAB_1471_435e:
    lea     di, [bp+var_14]
    lea     si, [bp+var_8]
    push    ss
    pop     es
    movsw
    movsw
    movsw
    lea     di, [bp+var_2A]
    lea     si, [bp+var_1C]
LAB_1471_436f:
    movsw
    movsw
    movsw
; Copying car data to dseg...  
LAB_1471_4372:
    mov     ax, 0x22
    imul    word ptr [word_449E4]
    add     ax, offset unk_44F4C
    mov     word ptr [bp+var_2], ax
    mov     bx, ax
    mov     ax, word ptr [bp+var_2A]
    sub     ax, word ptr [bp+var_1C]
    mov     word ptr [bx+0x6], ax
    mov     bx, word ptr [bp+var_2]
    mov     ax, word ptr [bp+var_28]
    sub     ax, word ptr [bp+var_1A]
    mov     word ptr [bx+0x8], ax
    mov     bx, word ptr [bp+var_2]
    mov     ax, word ptr [bp+var_26]
    sub     ax, word ptr [bp+var_18]
    mov     word ptr [bx+0xa], ax
    mov     bx, word ptr [bp+var_2]
    mov     ax, word ptr [bp+var_14]
    sub     ax, word ptr [bp+var_8]
    mov     word ptr [bx+0xc], ax
    mov     bx, word ptr [bp+var_2]
    mov     ax, word ptr [bp+var_12]
    sub     ax, word ptr [bp+var_6]
    mov     word ptr [bx+0xe], ax
    mov     bx, word ptr [bp+var_2]
    mov     ax, word ptr [bp+var_10]
    sub     ax, word ptr [bp+var_4]
    mov     word ptr [bx+0x10], ax
    mov     bx, word ptr [bp+var_2]
    mov     ax, word ptr [state.playerstate.car_currpm]
    mov     word ptr [bx+0x1e], ax
    cmp     byte ptr [gameconfig.game_opponenttype], 0x0
    jnz     LAB_1471_43d9
    jmp     near ptr LAB_1471_44a6
LAB_1471_43d9:
    mov     bx, word ptr [bp+var_2]
    mov     ax, word ptr [bp+var_2A]
    sub     ax, word ptr [bp+var_24]
    mov     word ptr [bx+0x12], ax
    mov     bx, word ptr [bp+var_2]
    mov     ax, word ptr [bp+var_28]
    sub     ax, word ptr [bp+var_22]
    mov     word ptr [bx+0x14], ax
    mov     bx, word ptr [bp+var_2]
    mov     ax, word ptr [bp+var_26]
    sub     ax, word ptr [bp+var_20]
    mov     word ptr [bx+0x16], ax
    mov     bx, word ptr [bp+var_2]
    mov     ax, word ptr [bp+var_14]
    sub     ax, word ptr [bp+var_E]
    mov     word ptr [bx+0x18], ax
    mov     bx, word ptr [bp+var_2]
    mov     ax, word ptr [bp+var_12]
    sub     ax, word ptr [bp+var_C]
    mov     word ptr [bx+0x1a], ax
    mov     bx, word ptr [bp+var_2]
    mov     ax, word ptr [bp+var_10]
    sub     ax, word ptr [bp+var_A]
    mov     word ptr [bx+0x1c], ax
    mov     bx, word ptr [bp+var_2]
    mov     ax, word ptr [state.opponentstate.car_currpm]
    mov     word ptr [bx+0x20], ax
    mov     word ptr [bp+var_30], 0x2
    jmp     LAB_1471_44ab
    db 0x90
LAB_1471_4432:
    mov     al, byte ptr [followOpponentFlag]
    cbw
    mov     cx, ax
    shl     ax, 0x1
    add     ax, cx
    shl     ax, 0x1
    mov     si, ax
    push    si
    lea     di, [bp+var_14]
    lea     si, [si+state.game_vec1.vx]
    push    ss
    pop     es
    movsw
    movsw
    movsw
    pop     si
    push    si
    lea     di, [bp+var_2A]
    lea     si, [si+state.game_vec3.vx]
    movsw
    movsw
    movsw
    pop     si
    jmp     near ptr LAB_1471_4372
    db 0x90
LAB_1471_445e:
    mov     al, byte ptr [followOpponentFlag]
    cbw
    mov     bx, ax
    mov     al, byte ptr [bx+state.field_3F7]
    cbw
    mov     cx, ax
    shl     ax, 0x1
    add     ax, cx
    shl     ax, 0x1
    add     ax, word ptr [trackdata9]
    mov     dx, word ptr [trackdata9+2]
    mov     word ptr [bp+var_34], ax
    mov     word ptr [bp+var_34+2], dx
    les     bx, [bp+var_34]
    mov     ax, word ptr es:[bx]
    mov     word ptr [bp+var_14], ax
    mov     ax, word ptr es:[bx+0x2]
    add     ax, word ptr [word_44D20]
    add     ax, 0x5a
    mov     word ptr [bp+var_12], ax
    mov     ax, word ptr es:[bx+0x4]
    mov     word ptr [bp+var_10], ax
    lea     di, [bp+var_2A]
    lea     si, [bp+var_14]
    jmp     near ptr LAB_1471_435a
LAB_1471_44a6:
    mov     word ptr [bp+var_30], 0x1
LAB_1471_44ab:
    mov     word ptr [bp+var_1E], 0x0
    jmp     near ptr LAB_1471_4583
    db 0x90
LAB_1471_44b4:
    mov     word ptr [bp+var_2C], offset state.playerstate.car_posWorld1.lx
    mov     ax, word ptr [word_43964]
    mov     word ptr [bp+var_2E], ax
    mov     al, byte ptr [byte_42D26]
LAB_1471_44c2:
    mov     byte ptr [bp+var_16], al
    mov     bx, word ptr [bp+var_2C]
    test    byte ptr [bx+0xcf], 0x1
    jz      LAB_1471_44e4
    test    byte ptr [bp+var_16], 0x1
    jnz     LAB_1471_44f8
    or      byte ptr [bp+var_16], 0x1
    push    word ptr [bp+var_2E]
    call    far ptr audio_op_unk
    jmp     LAB_1471_44f5
    db 0x90
LAB_1471_44e4:
    test    byte ptr [bp+var_16], 0x1
    jz      LAB_1471_44f8
    dec     byte ptr [bp+var_16]
    push    word ptr [bp+var_2E]
    call    far ptr audio_function2
LAB_1471_44f5:
    add     sp, 0x2
LAB_1471_44f8:
    mov     bx, word ptr [bp+var_2C]
    test    byte ptr [bx+0xcf], 0x6
    jz      LAB_1471_4546
    mov     al, byte ptr [bp+var_16]
    and     al, 0x6
    mov     byte ptr [bp+var_34], al
    mov     al, byte ptr [bx+0xcf]
    and     al, 0x6
    cmp     al, byte ptr [bp+var_34]
    jz      LAB_1471_456b
    test    byte ptr [bp+var_16], 0x6
    jnz     LAB_1471_454c
    test    byte ptr [bx+0xcf], 0x2
    jz      LAB_1471_4534
    push    word ptr [bp+var_2E]
    call    far ptr audio_op_unk5
    add     sp, 0x2
    add     byte ptr [bp+var_16], 0x2
    jmp     LAB_1471_456b
    db 0x90
LAB_1471_4534:
    push    word ptr [bp+var_2E]
    call    far ptr audio_op_unk6
    add     sp, 0x2
    add     byte ptr [bp+var_16], 0x4
    jmp     LAB_1471_456b
    db 0x90
LAB_1471_4546:
    test    byte ptr [bp+var_16], 0x6
    jz      LAB_1471_456b
LAB_1471_454c:
    test    byte ptr [bp+var_16], 0x2
    jz      LAB_1471_4556
    sub     byte ptr [bp+var_16], 0x2
LAB_1471_4556:
    test    byte ptr [bp+var_16], 0x4
    jz      LAB_1471_4560
    sub     byte ptr [bp+var_16], 0x4
LAB_1471_4560:
    push    word ptr [bp+var_2E]
    call    far ptr audio_op_unk7
    add     sp, 0x2
LAB_1471_456b:
    cmp     word ptr [bp+var_1E], 0x0
    jz      LAB_1471_457a
    mov     al, byte ptr [bp+var_16]
    mov     byte ptr [byte_42D2A], al
    jmp     LAB_1471_4580
    db 0x90
LAB_1471_457a:
    mov     al, byte ptr [bp+var_16]
    mov     byte ptr [byte_42D26], al
LAB_1471_4580:
    inc     word ptr [bp+var_1E]
LAB_1471_4583:
    mov     ax, word ptr [bp+var_30]
    cmp     word ptr [bp+var_1E], ax
    jge     LAB_1471_45a6
    cmp     word ptr [bp+var_1E], 0x0
    jnz     LAB_1471_4594
    jmp     near ptr LAB_1471_44b4
LAB_1471_4594:
    mov     word ptr [bp+var_2C], offset state.opponentstate.car_posWorld1.lx
    mov     ax, word ptr [word_4408C]
    mov     word ptr [bp+var_2E], ax
    mov     al, byte ptr [byte_42D2A]
    jmp     near ptr LAB_1471_44c2
    db 0x90
LAB_1471_45a6:
    mov     byte ptr [byte_459D8], 0x1
    inc     word ptr [word_449E4]
    cmp     word ptr [word_449E4], 0x28
    jnz     LAB_1471_45bc
    mov     word ptr [word_449E4], 0x0
LAB_1471_45bc:
    mov     al, byte ptr [is_in_replay]
    mov     byte ptr [byte_3BE02], al
    pop     si
    pop     di
    mov     sp, bp
    pop     bp
    retf
audio_carstate_asm_ endp

; void __cdecl16far audio_unk3(byte flags, int unk)
audio_unk3_asm_ proc far
    flags      = byte ptr    6
    unk        = word ptr    8

    push    bp
    mov     bp, sp
    cmp     byte ptr [byte_459D8], 0x0
    jz      LAB_1471_45f4
    test    byte ptr [bp+flags], 0x10
    jz      LAB_1471_45e3
    push    word ptr [bp+unk]
    call    far ptr audio_op_unk4
    add     sp, 0x2
LAB_1471_45e3:
    test    byte ptr [bp+flags], 0x20
    jz      LAB_1471_45f4
    push    word ptr [bp+unk]
    call    far ptr audio_op_unk3
    add     sp, 0x2
LAB_1471_45f4:
    pop     bp
    retf
audio_unk3_asm_ endp

; undefined __cdecl16far sub_18D06(int param_1, uint param_2)
sub_18D06_asm_ proc far
    param_1    = word ptr    6
    param_2    = word ptr    8

    push    bp
    mov     bp, sp
    push    word ptr [bp+param_2]
    mov     bx, word ptr [bp+param_1]
    push    word ptr [bx+0x10]
    push    word ptr [bx+0xe]
    push    word ptr [bx+0xc]
    push    word ptr [bx+0xa]
    push    word ptr [bx+0x8]
    push    word ptr [bx+0x6]
    push    word ptr [bx+0x1e]
    push    word ptr [word_43964]
    call    far ptr audio_op_unk2
    add     sp, 0x12
    cmp     byte ptr [gameconfig.game_opponenttype], 0x0
    jz      LAB_1471_464e
    push    word ptr [bp+param_2]
    mov     bx, word ptr [bp+param_1]
    push    word ptr [bx+0x1c]
    push    word ptr [bx+0x1a]
    push    word ptr [bx+0x18]
    push    word ptr [bx+0x16]
    push    word ptr [bx+0x14]
    push    word ptr [bx+0x12]
    push    word ptr [bx+0x20]
    push    word ptr [word_4408C]
    call    far ptr audio_op_unk2
    add     sp, 0x12
LAB_1471_464e:
    pop     bp
    retf
sub_18D06_asm_ endp

; undefined2 __cdecl16far gettlistpoint(int param_1, uint * param_2, char param_3, byte * param_4)
gettlistpoint_asm_ proc far
    var_30     = word ptr  -48
    var_2E     = word ptr  -46
    var_2C     = word ptr  -44
    var_2A     = word ptr  -42
    var_td18connStatus = byte ptr  -40
    var_offsetTrkObject = word ptr  -38
    var_24     = word ptr  -36
    var_22     = word ptr  -34
    var_20     = word ptr  -32
    var_1E     = word ptr  -30
    var_td18subTOI = byte ptr  -28
    var_1A     = word ptr  -26
    var_18     = byte ptr  -24
    var_16     = byte ptr  -22
    var_TOInfoPtr = word ptr  -20
    var_12     = word ptr  -18
    var_10     = byte ptr  -16
    var_E      = word ptr  -14
    var_C      = word ptr  -12
    var_A      = word ptr  -10
    var_8      = word ptr   -8
    var_6      = dword ptr  -6
    var_tileElem = byte ptr   -2
    param_1    = word ptr    6
    param_2    = word ptr    8
    param_3    = byte ptr   10
    param_4    = word ptr   12

    push    bp
    mov     bp, sp
    sub     sp, 0x30
    push    di
    push    si
    mov     bx, word ptr [bp+param_1]
    les     si, [td17_trk_elem_ordered]
    mov     al, byte ptr es:[bx+si]
    mov     byte ptr [bp+var_tileElem], al
    les     si, [trackdata18]
    mov     al, byte ptr es:[bx+si]
    and     al, 0xf
    mov     byte ptr [bp+var_td18subTOI], al
    mov     al, byte ptr es:[bx+si]
    and     al, 0x10
    mov     byte ptr [bp+var_td18connStatus], al
    mov     al, byte ptr [bp+var_tileElem]
    sub     ah, ah
    mov     cx, ax                             ; * sizeof(struct TRACKOBJECT)
    shl     ax, 0x1
    add     ax, cx
    shl     ax, 0x1
    add     ax, cx
    shl     ax, 0x1
    add     ax, offset trkObjectList
    mov     word ptr [bp+var_offsetTrkObject], ax
    mov     bx, ax
    mov     ax, word ptr [bx]
    mov     word ptr [bp+var_TOInfoPtr], ax
    mov     word ptr [bp+var_12], ds
    mov     al, byte ptr [bp+var_td18subTOI]
    sub     ah, ah
    mov     cx, ax                             ; * sizeof(struct TRKOBJINFO)
    shl     ax, 0x1
    add     ax, cx
    shl     ax, 0x1
    add     ax, cx
    shl     ax, 0x1
    add     ax, word ptr [bp+var_TOInfoPtr]
    mov     dx, ds
    mov     word ptr [bp+var_6], ax
    mov     word ptr [bp+var_6+2], dx
    mov     word ptr [bp+var_24], 0x0
    les     bx, [bp+var_6]
    mov     al, byte ptr es:[bx+0x5]
    mov     byte ptr [bp+var_18], al
    cmp     byte ptr [bp+var_td18connStatus], 0x0
    jnz     LAB_1471_46d2
    mov     al, byte ptr [bp+param_3]
    shl     al, 0x1
    jmp     LAB_1471_46dc
LAB_1471_46d2:
    mov     al, byte ptr [bp+var_18]
    sub     al, byte ptr [bp+param_3]
    shl     al, 0x1
    sub     al, 0x2
LAB_1471_46dc:
    mov     byte ptr [bp+var_10], al
    cmp     word ptr [bp+param_4], 0x0
    jz      LAB_1471_470a
    mov     al, byte ptr es:[bx+0xd]
    mov     byte ptr [bp+var_16], al
    mov     bx, word ptr [bp+var_offsetTrkObject]
    mov     al, byte ptr [bx+0x9]
    mov     byte ptr [bp+var_1A], al
    mov     si, word ptr [bp+var_1A]
    and     si, 0xff
    mov     bl, byte ptr [bp+var_16]
    sub     bh, bh
    mov     al, byte ptr [bx+si+0x95e0]
    mov     bx, word ptr [bp+param_4]
    mov     byte ptr [bx], al
LAB_1471_470a:
    les     bx, [bp+var_6]
    cmp     word ptr es:[bx+0xa], 0x0
    jz      LAB_1471_4719
    mov     word ptr [bp+var_24], 0x1
LAB_1471_4719:
    cmp     byte ptr [bp+var_td18connStatus], 0x0
    jz      LAB_1471_4766
    cmp     word ptr [bp+var_24], 0x0
    jz      LAB_1471_472c
    mov     ax, word ptr es:[bx+0xa]
    jmp     LAB_1471_476d
    db 0x90
LAB_1471_472c:
    les     bx, [bp+var_6]
    mov     ax, word ptr es:[bx+0x8]
    mov     word ptr [bp+var_2C], ax
    mov     word ptr [bp+var_2A], ds
    mov     al, byte ptr [bp+var_10]
    sub     ah, ah
    mov     cx, ax
    shl     ax, 0x1
    add     ax, cx
    shl     ax, 0x1
    add     ax, word ptr [bp+var_2C]
    mov     dx, ds
    mov     word ptr [bp+var_30], ax
    mov     word ptr [bp+var_2E], dx
    add     ax, 0x6
    lea     di, [bp+var_C]
    mov     si, ax
    push    ss
    pop     es
    push    ds
    movsw
    movsw
    movsw
    pop     ds
    mov     ax, word ptr [bp+var_30]
    jmp     LAB_1471_479a
    db 0x90
LAB_1471_4766:
    les     bx, [bp+var_6]
    mov     ax, word ptr es:[bx+0x8]
LAB_1471_476d:
    mov     word ptr [bp+var_2C], ax
    mov     word ptr [bp+var_2A], ds
    mov     al, byte ptr [bp+var_10]
    sub     ah, ah
    mov     cx, ax
    shl     ax, 0x1
    add     ax, cx
    shl     ax, 0x1
    add     ax, word ptr [bp+var_2C]
    mov     dx, ds
    mov     word ptr [bp+var_30], ax
    mov     word ptr [bp+var_2E], dx
    lea     di, [bp+var_C]
    mov     si, ax
    push    ss
    pop     es
    push    ds
    movsw
    movsw
    movsw
    pop     ds
    add     ax, 0x6
LAB_1471_479a:
    lea     di, [bp+var_22]
    mov     si, ax
    push    ds
    mov     ds, dx
    movsw
    movsw
    movsw
    pop     ds
    les     bx, [bp+var_6]
    mov     ax, word ptr es:[bx+0x6]
    cmp     ax, 0x100
    jnz     LAB_1471_47b5
    jmp     near ptr LAB_1471_4864
LAB_1471_47b5:
    cmp     ax, 0x200
    jnz     LAB_1471_47bd
    jmp     near ptr LAB_1471_4842
LAB_1471_47bd:
    cmp     ax, 0x300
    jnz     LAB_1471_47ea
    mov     ax, word ptr [bp+var_C]
    mov     word ptr [bp+var_E], ax
    mov     ax, word ptr [bp+var_8]
    neg     ax
    mov     word ptr [bp+var_C], ax
    mov     ax, word ptr [bp+var_E]
    mov     word ptr [bp+var_8], ax
    mov     ax, word ptr [bp+var_22]
    mov     word ptr [bp+var_E], ax
    mov     ax, word ptr [bp+var_1E]
    neg     ax
    mov     word ptr [bp+var_22], ax
    mov     ax, word ptr [bp+var_E]
LAB_1471_47e7:
    mov     word ptr [bp+var_1E], ax
LAB_1471_47ea:
    mov     bx, word ptr [bp+param_1]
    les     si, [td21_col_from_path]
    mov     al, byte ptr es:[bx+si]
    mov     byte ptr [bp+var_16], al
    les     si, [td22_row_from_path]
    mov     al, byte ptr es:[bx+si]
    mov     byte ptr [bp+var_1A], al
    cmp     word ptr [bp+var_A], -0x1
    jz      LAB_1471_482b
    mov     bl, al
    sub     bh, bh
    shl     bx, 0x1
    mov     bx, word ptr [bx+terrainrows]
    mov     al, byte ptr [bp+var_16]
    sub     ah, ah
    add     bx, ax
    les     si, [td15_terr_map_main]
    cmp     byte ptr es:[bx+si], 0x6
    jnz     LAB_1471_482b
    mov     ax, word ptr [(hillHeightConsts+1*2)]
    add     word ptr [bp+var_A], ax
    add     word ptr [bp+var_20], ax
LAB_1471_482b:
    mov     bx, word ptr [bp+var_offsetTrkObject]
    test    byte ptr [bx+0xb], 0x1
    jz      LAB_1471_488c
    mov     bl, byte ptr [bp+var_1A]
    sub     bh, bh
    shl     bx, 0x1
    mov     si, word ptr [bx+trackpos]
    jmp     LAB_1471_4897
    db 0x90
LAB_1471_4842:
    mov     ax, word ptr [bp+var_8]
    neg     ax
    mov     word ptr [bp+var_8], ax
    mov     ax, word ptr [bp+var_C]
    neg     ax
    mov     word ptr [bp+var_C], ax
    mov     ax, word ptr [bp+var_1E]
    neg     ax
    mov     word ptr [bp+var_1E], ax
    mov     ax, word ptr [bp+var_22]
    neg     ax
    mov     word ptr [bp+var_22], ax
    jmp     LAB_1471_47ea
LAB_1471_4864:
    mov     ax, word ptr [bp+var_C]
    mov     word ptr [bp+var_E], ax
    mov     ax, word ptr [bp+var_8]
    mov     word ptr [bp+var_C], ax
    mov     ax, word ptr [bp+var_E]
    neg     ax
    mov     word ptr [bp+var_8], ax
    mov     ax, word ptr [bp+var_22]
    mov     word ptr [bp+var_E], ax
    mov     ax, word ptr [bp+var_1E]
    mov     word ptr [bp+var_22], ax
    mov     ax, word ptr [bp+var_E]
    neg     ax
    jmp     near ptr LAB_1471_47e7
LAB_1471_488c:
    mov     bl, byte ptr [bp+var_1A]
    sub     bh, bh
    shl     bx, 0x1
    mov     si, word ptr [bx+trackcenterpos]
LAB_1471_4897:
    add     word ptr [bp+var_8], si
    add     word ptr [bp+var_1E], si
    mov     bx, word ptr [bp+var_offsetTrkObject]
    test    byte ptr [bx+0xb], 0x2
    jz      LAB_1471_48b4
    mov     bl, byte ptr [bp+var_16]
    sub     bh, bh
    shl     bx, 0x1
    mov     si, word ptr [bx+(trackpos2+1*2)]
    jmp     LAB_1471_48bf
    db 0x90
LAB_1471_48b4:
    mov     bl, byte ptr [bp+var_16]
    sub     bh, bh
    shl     bx, 0x1
    mov     si, word ptr [bx+trackcenterpos2]
LAB_1471_48bf:
    add     word ptr [bp+var_C], si
    add     word ptr [bp+var_22], si
    mov     ax, word ptr [bp+var_22]
    cwd
    mov     cx, ax
    mov     ax, word ptr [bp+var_C]
    mov     bx, dx
    cwd
    add     ax, cx
    adc     dx, bx
    sar     dx, 0x1
    rcr     ax, 0x1
    mov     bx, word ptr [bp+param_2]
    mov     word ptr [bx], ax
    cmp     word ptr [bp+var_A], -0x1
    jnz     LAB_1471_48ee
    mov     bx, word ptr [bp+param_2]
    mov     word ptr [bx+0x2], 0xffff
    jmp     LAB_1471_4908
LAB_1471_48ee:
    mov     ax, word ptr [bp+var_20]
    cwd
    mov     cx, ax
    mov     ax, word ptr [bp+var_A]
    mov     bx, dx
    cwd
    add     ax, cx
    adc     dx, bx
    sar     dx, 0x1
    rcr     ax, 0x1
    mov     bx, word ptr [bp+param_2]
    mov     word ptr [bx+0x2], ax
LAB_1471_4908:
    mov     ax, word ptr [bp+var_1E]
    cwd
    mov     cx, ax
    mov     ax, word ptr [bp+var_8]
    mov     bx, dx
    cwd
    add     ax, cx
    adc     dx, bx
    sar     dx, 0x1
    rcr     ax, 0x1
    mov     bx, word ptr [bp+param_2]
    mov     word ptr [bx+0x4], ax
    mov     bx, word ptr [bp+param_2]
    lea     di, [bx+0x6]
    lea     si, [bp+var_C]
    push    ds
    pop     es
    movsw
    movsw
    movsw
    mov     bx, word ptr [bp+param_2]
    lea     di, [bx+0xc]
    lea     si, [bp+var_22]
    movsw
    movsw
    movsw
    mov     bx, word ptr [bp+param_2]
    mov     ax, word ptr [bp+var_24]
    mov     word ptr [bx+0x12], ax
    mov     al, byte ptr [bp+param_3]
    cbw
    mov     cl, byte ptr [bp+var_18]
    sub     ch, ch
    dec     cx
    cmp     cx, ax
    jnz     LAB_1471_495c
    mov     ax, 0x1
    pop     si
    pop     di
    mov     sp, bp
    pop     bp
    retf
LAB_1471_495c:
    sub     ax, ax
    pop     si
    pop     di
    mov     sp, bp
    pop     bp
    retf
gettlistpoint_asm_ endp

; int __cdecl16far car_car_coll_detect_maybe(POINT2D * points1, VECTOR * vec1, POINT2D * points2, VECTOR * vec2)
car_car_coll_detect_maybe_asm_ proc far
    var_2A     = word ptr  -42
    var_28     = word ptr  -40
    var_26     = word ptr  -38
    var_24     = byte ptr  -36
    var_C      = word ptr  -12
    var_A      = word ptr  -10
    var_8      = word ptr   -8
    var_6      = byte ptr   -6
    var_4      = word ptr   -4
    points1    = word ptr    6
    vec1       = word ptr    8
    points2    = word ptr   10
    vec2       = word ptr   12

    push    bp
    mov     bp, sp
    sub     sp, 0x2a
    push    di
    push    si
    mov     bx, word ptr [bp+points1]
    mov     si, word ptr [bx+0x6]              ; the 4th field of collPoints
    mov     bx, word ptr [bp+points2]
    add     si, word ptr [bx+0x6]
    mov     bx, word ptr [bp+vec1]
    mov     di, word ptr [bp+vec2]
    mov     ax, word ptr [di]
    cmp     word ptr [bx], ax
    jl      LAB_1471_4988
    mov     ax, word ptr [bx]
    mov     bx, di
LAB_1471_4988:
    sub     ax, word ptr [bx]
    cmp     ax, si
    jg      LAB_1471_49c2
    mov     bx, word ptr [bp+vec1]
    mov     di, word ptr [bp+vec2]
    mov     ax, word ptr [di+0x4]
    cmp     word ptr [bx+0x4], ax
    jl      LAB_1471_49a1
    mov     ax, word ptr [bx+0x4]
    mov     bx, di
LAB_1471_49a1:
    sub     ax, word ptr [bx+0x4]
    cmp     ax, si
    jg      LAB_1471_49c2
    mov     bx, word ptr [bp+vec1]
    mov     di, word ptr [bp+vec2]
    mov     ax, word ptr [di+0x2]
    cmp     word ptr [bx+0x2], ax
    jl      LAB_1471_49bb
    mov     ax, word ptr [bx+0x2]
    mov     bx, di
LAB_1471_49bb:
    sub     ax, word ptr [bx+0x2]
    cmp     ax, si
    jle     LAB_1471_49ca
LAB_1471_49c2:
    sub     ax, ax
    pop     si
    pop     di
    mov     sp, bp
    pop     bp
    retf
; The output of polarRadius3D is 
; the distance between the cars. 
; If the cars are furhter apart 
; than si, the function returns.  
LAB_1471_49ca:
    mov     bx, word ptr [bp+vec1]
    mov     ax, word ptr [bx]
    mov     bx, word ptr [bp+vec2]
    sub     ax, word ptr [bx]
    mov     word ptr [bp+var_2A], ax
    mov     bx, word ptr [bp+vec1]
    mov     ax, word ptr [bx+0x2]
    mov     bx, word ptr [bp+vec2]
    sub     ax, word ptr [bx+0x2]
    mov     word ptr [bp+var_28], ax
    mov     bx, word ptr [bp+vec1]
    mov     ax, word ptr [bx+0x4]
    mov     bx, word ptr [bp+vec2]
    sub     ax, word ptr [bx+0x4]
    mov     word ptr [bp+var_26], ax
    lea     ax, [bp+var_2A]
    push    ax
    call    far ptr int_hypot_3d
    add     sp, 0x2
    cmp     ax, si
    ja      LAB_1471_49c2
    sub     ax, ax
    push    ax
    mov     bx, word ptr [bp+vec1]
    mov     ax, word ptr [bx+0xa]
    neg     ax
    push    ax
    mov     ax, word ptr [bx+0x8]
    neg     ax
    push    ax
    mov     ax, word ptr [bx+0x6]
    neg     ax
    push    ax
    call    far ptr mat_rot_zxy
    add     sp, 0x8
    mov     word ptr [bp+var_4], ax
    mov     byte ptr [bp+var_6], 0x0
    jmp     LAB_1471_4aa2
LAB_1471_4a2e:
    mov     bx, word ptr [bp+points1]
    mov     ax, word ptr [bx]
    neg     ax
LAB_1471_4a35:
    mov     word ptr [bp+var_C], ax
    mov     word ptr [bp+var_A], 0x0
    mov     al, byte ptr [bp+var_6]
    cbw
    mov     bx, ax
    shl     bx, 0x1
    cmp     word ptr [bx+0x69c], 0x0
    jnz     LAB_1471_4a54
    mov     bx, word ptr [bp+points1]
    mov     ax, word ptr [bx+0x4]
    jmp     LAB_1471_4a5c
LAB_1471_4a54:
    mov     bx, word ptr [bp+points1]
    mov     ax, word ptr [bx+0x4]
    neg     ax
LAB_1471_4a5c:
    mov     word ptr [bp+var_8], ax
    lea     ax, [bp+var_2A]
    push    ax
    push    word ptr [bp+var_4]
    lea     ax, [bp+var_C]
    push    ax
    call    far ptr mat_mul_vector
    add     sp, 0x6
    mov     bx, word ptr [bp+vec1]
    mov     ax, word ptr [bx]
    add     word ptr [bp+var_2A], ax
    mov     ax, word ptr [bx+0x2]
    add     word ptr [bp+var_28], ax
    mov     ax, word ptr [bx+0x4]
    add     word ptr [bp+var_26], ax
    mov     al, byte ptr [bp+var_6]
    cbw
    mov     di, ax
    shl     di, 0x1
    add     di, ax
    shl     di, 0x1
    push    si
    lea     di, [bp+di-0x24]
    lea     si, [bp+var_2A]
    push    ss
    pop     es
    movsw
    movsw
    movsw
    pop     si
    inc     byte ptr [bp+var_6]
LAB_1471_4aa2:
    cmp     byte ptr [bp+var_6], 0x4
    jge     LAB_1471_4ac2
    mov     al, byte ptr [bp+var_6]
    cbw
    mov     bx, ax
    shl     bx, 0x1
    cmp     word ptr [bx+word_3BE04], 0x0
    jz      LAB_1471_4aba
    jmp     near ptr LAB_1471_4a2e
LAB_1471_4aba:
    mov     bx, word ptr [bp+points1]
    mov     ax, word ptr [bx]
    jmp     near ptr LAB_1471_4a35
LAB_1471_4ac2:
    mov     ax, 0x1
    push    ax
    mov     bx, word ptr [bp+vec2]
    push    word ptr [bx+0xa]
    push    word ptr [bx+0x8]
    push    word ptr [bx+0x6]
    call    far ptr mat_rot_zxy
    add     sp, 0x8
    mov     word ptr [bp+var_4], ax
    mov     byte ptr [bp+var_6], 0x0
    jmp     LAB_1471_4ae7
    db 0x90
LAB_1471_4ae4:
    inc     byte ptr [bp+var_6]
LAB_1471_4ae7:
    cmp     byte ptr [bp+var_6], 0x4
    jge     LAB_1471_4b6a
    mov     al, byte ptr [bp+var_6]
    cbw
    mov     cx, ax
    shl     ax, 0x1
    add     ax, cx
    shl     ax, 0x1
    mov     di, ax
    add     di, bp
    mov     bx, word ptr [bp+vec2]
    mov     ax, word ptr [bx]
    sub     ax, word ptr [di-0x24]
    mov     word ptr [bp+var_C], ax
    mov     ax, word ptr [bx+0x2]
    sub     ax, word ptr [di-0x22]
    mov     word ptr [bp+var_A], ax
    mov     ax, word ptr [bx+0x4]
    sub     ax, word ptr [di-0x20]
    mov     word ptr [bp+var_8], ax
    lea     ax, [bp+var_2A]
    push    ax
    push    word ptr [bp+var_4]
    lea     ax, [bp+var_C]
    push    ax
    call    far ptr mat_mul_vector
    add     sp, 0x6
    cmp     word ptr [bp+var_28], 0x0
    jl      LAB_1471_4ae4
    mov     bx, word ptr [bp+points2]
    mov     ax, word ptr [bp+var_28]
    cmp     word ptr [bx+0x2], ax
    jl      LAB_1471_4ae4
    mov     di, word ptr [bx]
    mov     ax, di
    neg     ax
    cmp     word ptr [bp+var_2A], ax
    jl      LAB_1471_4ae4
    cmp     word ptr [bp+var_2A], di
    jg      LAB_1471_4ae4
    mov     ax, word ptr [bx+0x4]
    neg     ax
    cmp     ax, word ptr [bp+var_26]
    jg      LAB_1471_4ae4
    mov     ax, word ptr [bp+var_26]
    cmp     word ptr [bx+0x4], ax
    jl      LAB_1471_4ae4
LAB_1471_4b60:
    mov     ax, 0x1
    pop     si
    pop     di
    mov     sp, bp
    pop     bp
    retf
    db 0x90
LAB_1471_4b6a:
    sub     ax, ax
    push    ax
    mov     bx, word ptr [bp+vec2]
    mov     ax, word ptr [bx+0xa]
    neg     ax
    push    ax
    mov     ax, word ptr [bx+0x8]
    neg     ax
    push    ax
    mov     ax, word ptr [bx+0x6]
    neg     ax
    push    ax
    call    far ptr mat_rot_zxy
    add     sp, 0x8
    mov     word ptr [bp+var_4], ax
    mov     byte ptr [bp+var_6], 0x0
    jmp     LAB_1471_4c08
    db 0x90
LAB_1471_4b94:
    mov     bx, word ptr [bp+points2]
    mov     ax, word ptr [bx]
    neg     ax
LAB_1471_4b9b:
    mov     word ptr [bp+var_C], ax
    mov     word ptr [bp+var_A], 0x0
    mov     al, byte ptr [bp+var_6]
    cbw
    mov     bx, ax
    shl     bx, 0x1
    cmp     word ptr [bx+word_3BE0C], 0x0
    jnz     LAB_1471_4bba
    mov     bx, word ptr [bp+points2]
    mov     ax, word ptr [bx+0x4]
    jmp     LAB_1471_4bc2
LAB_1471_4bba:
    mov     bx, word ptr [bp+points2]
    mov     ax, word ptr [bx+0x4]
    neg     ax
LAB_1471_4bc2:
    mov     word ptr [bp+var_8], ax
    lea     ax, [bp+var_2A]
    push    ax
    push    word ptr [bp+var_4]
    lea     ax, [bp+var_C]
    push    ax
    call    far ptr mat_mul_vector
    add     sp, 0x6
    mov     bx, word ptr [bp+vec2]
    mov     ax, word ptr [bx]
    add     word ptr [bp+var_2A], ax
    mov     ax, word ptr [bx+0x2]
    add     word ptr [bp+var_28], ax
    mov     ax, word ptr [bx+0x4]
    add     word ptr [bp+var_26], ax
    mov     al, byte ptr [bp+var_6]
    cbw
    mov     di, ax
    shl     di, 0x1
    add     di, ax
    shl     di, 0x1
    push    si
    lea     di, [bp+di-0x24]
    lea     si, [bp+var_2A]
    push    ss
    pop     es
    movsw
    movsw
    movsw
    pop     si
    inc     byte ptr [bp+var_6]
LAB_1471_4c08:
    cmp     byte ptr [bp+var_6], 0x4
    jge     LAB_1471_4c28
    mov     al, byte ptr [bp+var_6]
    cbw
    mov     bx, ax
    shl     bx, 0x1
    cmp     word ptr [bx+word_3BE04], 0x0
    jz      LAB_1471_4c20
    jmp     near ptr LAB_1471_4b94
LAB_1471_4c20:
    mov     bx, word ptr [bp+points2]
    mov     ax, word ptr [bx]
    jmp     near ptr LAB_1471_4b9b
LAB_1471_4c28:
    mov     ax, 0x1
    push    ax
    mov     bx, word ptr [bp+vec1]
    push    word ptr [bx+0xa]
    push    word ptr [bx+0x8]
    push    word ptr [bx+0x6]
    call    far ptr mat_rot_zxy
    add     sp, 0x8
    mov     word ptr [bp+var_4], ax
    mov     byte ptr [bp+var_6], 0x0
    jmp     LAB_1471_4c4d
    db 0x90
LAB_1471_4c4a:
    inc     byte ptr [bp+var_6]
LAB_1471_4c4d:
    cmp     byte ptr [bp+var_6], 0x4
    jl      LAB_1471_4c56
    jmp     near ptr LAB_1471_49c2
LAB_1471_4c56:
    mov     al, byte ptr [bp+var_6]
    cbw
    mov     cx, ax
    shl     ax, 0x1
    add     ax, cx
    shl     ax, 0x1
    mov     di, ax
    add     di, bp
    mov     bx, word ptr [bp+vec1]
    mov     ax, word ptr [bx]
    sub     ax, word ptr [di-0x24]
    mov     word ptr [bp+var_C], ax
    mov     ax, word ptr [bx+0x2]
    sub     ax, word ptr [di-0x22]
    mov     word ptr [bp+var_A], ax
    mov     ax, word ptr [bx+0x4]
    sub     ax, word ptr [di-0x20]
    mov     word ptr [bp+var_8], ax
    lea     ax, [bp+var_2A]
    push    ax
    push    word ptr [bp+var_4]
    lea     ax, [bp+var_C]
    push    ax
    call    far ptr mat_mul_vector
    add     sp, 0x6
    cmp     word ptr [bp+var_28], 0x0
    jl      LAB_1471_4c4a
    mov     bx, word ptr [bp+points1]
    mov     ax, word ptr [bp+var_28]
    cmp     word ptr [bx+0x2], ax
    jl      LAB_1471_4c4a
    mov     di, word ptr [bx]
    mov     ax, di
    neg     ax
    cmp     word ptr [bp+var_2A], ax
    jl      LAB_1471_4c4a
    cmp     word ptr [bp+var_2A], di
    jg      LAB_1471_4c4a
    mov     ax, word ptr [bx+0x4]
    neg     ax
    cmp     ax, word ptr [bp+var_26]
    jg      LAB_1471_4c4a
    mov     ax, word ptr [bp+var_26]
    cmp     word ptr [bx+0x4], ax
    jl      LAB_1471_4ccc
    jmp     near ptr LAB_1471_4b60
LAB_1471_4ccc:
    jmp     near ptr LAB_1471_4c4a
car_car_coll_detect_maybe_asm_ endp
    db 0x90

; void __cdecl16far init_plantrak(void)
init_plantrak_asm_ proc far
    push    bp
    mov     bp, sp
    sub     sp, 0x2
    push    di
    push    si
    mov     ax, 0xfffd
    push    ax
    push    cs
    call    near ptr init_game_state
    add     sp, 0x2
    sub     si, si
    mov     byte ptr [state.game_inputmode], 0x2
    mov     word ptr [planptr], 0x0
; <REPLACE>
    mov     word ptr [planptr+2], seg seg038
; </REPLACE>
;    mov     word ptr [planptr+2], 0x3b1c
    mov     byte ptr [startcol2], 0x1
    mov     byte ptr [startrow2], 0x1c
    les     bx, [td17_trk_elem_ordered]
    mov     byte ptr es:[bx], 0x7
    les     bx, [td21_col_from_path]
    mov     byte ptr es:[bx], 0x1
    les     bx, [td22_row_from_path]
    mov     al, byte ptr [startrow2]
    mov     byte ptr es:[bx], al
    les     bx, [trackdata18]
    mov     byte ptr es:[bx], 0x0
    les     bx, [td17_trk_elem_ordered]
    mov     byte ptr es:[bx+0x1], 0x6
    les     bx, [td21_col_from_path]
    mov     byte ptr es:[bx+0x1], 0x0
    les     bx, [td22_row_from_path]
    mov     al, byte ptr [startrow2]
    mov     byte ptr es:[bx+0x1], al
    les     bx, [trackdata18]
    mov     byte ptr es:[bx+0x1], 0x0
    les     bx, [td17_trk_elem_ordered]
    mov     byte ptr es:[bx+0x2], 0x8
    les     bx, [td21_col_from_path]
    mov     byte ptr es:[bx+0x2], 0x0
    les     bx, [td22_row_from_path]
    mov     al, byte ptr [startrow2]
    inc     al
    mov     byte ptr es:[bx+0x2], al
    les     bx, [trackdata18]
    mov     byte ptr es:[bx+0x2], 0x0
    les     bx, [td17_trk_elem_ordered]
    mov     byte ptr es:[bx+0x3], 0x9
    les     bx, [td21_col_from_path]
    mov     byte ptr es:[bx+0x3], 0x1
    les     bx, [td22_row_from_path]
    mov     al, byte ptr [startrow2]
    inc     al
    mov     byte ptr es:[bx+0x3], al
    les     bx, [trackdata18]
    mov     byte ptr es:[bx+0x3], 0x0
    les     bx, [td17_trk_elem_ordered]
    mov     byte ptr es:[bx+0x4], 0x7
    les     bx, [td21_col_from_path]
    mov     byte ptr es:[bx+0x4], 0x1
    les     bx, [td22_row_from_path]
    mov     al, byte ptr [startrow2]
    mov     byte ptr es:[bx+0x4], al
    les     bx, [trackdata18]
    mov     byte ptr es:[bx+0x4], 0x0
    les     bx, [trackdata3]
    mov     word ptr es:[bx], si
    les     bx, [trackdata3]
    mov     word ptr es:[bx+0x2], 0x1
    les     bx, [trackdata3]
    mov     word ptr es:[bx+0x4], 0x2
    les     bx, [trackdata3]
    mov     word ptr es:[bx+0x6], 0x3
    les     bx, [trackdata3]
    mov     word ptr es:[bx+0x8], 0x4
    les     bx, [trackdata3]
    mov     word ptr es:[bx+0xa], 0x1
    les     bx, [trackdata3]
    mov     word ptr es:[bx+0xc], 0x2
    les     bx, [trackdata3]
    mov     word ptr es:[bx+0xe], 0x3
    les     bx, [trackdata3]
    mov     word ptr es:[bx+0x10], 0x4
    les     bx, [trackdata3]
    mov     word ptr es:[bx+0x12], 0x1
    les     bx, [trackdata3]
    mov     word ptr es:[bx+0x14], 0x2
    les     bx, [trackdata3]
    mov     word ptr es:[bx+0x16], 0x3
    les     bx, [trackdata3]
    mov     word ptr es:[bx+0x18], 0x4
    les     bx, [trackdata3]
    mov     word ptr es:[bx+0x1a], si
    les     bx, [trackdata3]
    mov     word ptr es:[bx+0x1c], 0x1
    les     bx, [trackdata3]
    mov     word ptr es:[bx+0x1e], 0x2
    les     bx, [trackdata3]
    mov     word ptr es:[bx+0x20], 0x3
    les     bx, [trackdata3]
    mov     word ptr es:[bx+0x22], si
    mov     byte ptr [oppnentSped], 0xc8
    sub     ax, ax
    push    ax
    mov     ax, word ptr [(trackpos+28*2)]
    add     ax, 0x12e
    cwd
    mov     cl, 0x6
LAB_1471_4e7c:
    shl     ax, 0x1
    rcl     dx, 0x1
    dec     cl
    jnz     LAB_1471_4e7c
    push    dx
    push    ax
    sub     ax, ax
    push    ax
    push    ax
    mov     ax, 0x7700
    mov     dx, 0x1
    push    dx
    push    ax
    mov     ax, dx
    push    ax
    mov     ax, offset simd_opponent
    push    ax
    mov     ax, offset state.opponentstate.car_posWorld1.lx
    push    ax
    push    cs
    call    near ptr init_carstate_from_simd
    add     sp, 0x14
    mov     ax, offset state.field_3F9
    push    ax
    mov     al, byte ptr [state.opponentstate.field_CE]
    inc     byte ptr [state.opponentstate.field_CE]
    sub     ah, ah
    push    ax
    mov     ax, offset state.opponentstate.car_vec_unk3.vx
    push    ax
    mov     bx, word ptr [state.opponentstate.car_trackdata3_index]
    shl     bx, 0x1
    les     di, [trackdata3]
    push    word ptr es:[bx+di]
    push    cs
    call    near ptr gettlistpoint
    add     sp, 0x8
    pop     si
    pop     di
    mov     sp, bp
    pop     bp
    retf
init_plantrak_asm_ endp

; void __cdecl16far do_opponent_op(void)
do_opponent_op_asm_ proc far
    push    cs
    call    near ptr opponent_op
    retf
do_opponent_op_asm_ endp
    db 0x90

; ******************************************************************************
; * dbg: finishgame
; ******************************************************************************
; former audio_engine_unk / set_AV_event_triggers 
; Sets a player as crashed. 
; Events include special sounds, bitmaps and animations 
; and game screens triggered by game events such as 
; crashes.  

; void __cdecl16far update_crash_state(int unk, int is_opponent)
update_crash_state_asm_ proc far
    var_cState = word ptr   -4
    var_2      = byte ptr   -2
    unk        = word ptr    6
    is_opponent = word ptr    8

    push    bp
    mov     bp, sp
    sub     sp, 0x4
    push    di
    push    si
    mov     ax, word ptr [bp+is_opponent]
    or      ax, ax
    jz      LAB_1471_4eec
    cmp     ax, 0x1
    jz      LAB_1471_4f02
    jmp     LAB_1471_4ef1
LAB_1471_4eec:
    mov     word ptr [bp+var_cState], offset state.playerstate.car_posWorld1.lx
LAB_1471_4ef1:
    mov     bx, word ptr [bp+var_cState]
    cmp     byte ptr [bx+0xc9], 0x0
    jz      LAB_1471_4f0a
    pop     si
    pop     di
    mov     sp, bp
    pop     bp
    retf
    db 0x90
LAB_1471_4f02:
    mov     word ptr [bp+var_cState], offset state.opponentstate.car_posWorld1.lx
    jmp     LAB_1471_4ef1
    db 0x90
LAB_1471_4f0a:
    mov     byte ptr [bp+var_2], 0x0
    mov     ax, word ptr [bp+unk]
    cmp     ax, 0x1
    jz      LAB_1471_4f6f
    cmp     ax, 0x2
    jnz     LAB_1471_4f1e
    jmp     near ptr LAB_1471_4fce
LAB_1471_4f1e:
    cmp     ax, 0x3
    jnz     LAB_1471_4f26
    jmp     near ptr LAB_1471_5020
LAB_1471_4f26:
    cmp     ax, 0x4
    jz      LAB_1471_4f32
    cmp     ax, 0x5
    jz      LAB_1471_4f66
    jmp     LAB_1471_4f3e
LAB_1471_4f32:
    mov     word ptr [state.game_frame_in_sec], 0x1
    mov     word ptr [state.game_frames_per_sec], 0x1
LAB_1471_4f3e:
    cmp     byte ptr [bp+var_2], 0x0
    jz      LAB_1471_4f54
    mov     bx, word ptr [bp+var_cState]
    mov     word ptr [bx+0x2c], 0x0
    mov     bx, word ptr [bp+var_cState]
    mov     word ptr [bx+0x2a], 0x0
LAB_1471_4f54:
    cmp     word ptr [bp+is_opponent], 0x0
    jnz     LAB_1471_4f5d
    jmp     near ptr LAB_1471_5050
LAB_1471_4f5d:
    mov     ax, word ptr [state.game_frame]
    mov     word ptr [state.game_oEndFrame], ax
    jmp     near ptr LAB_1471_5056
LAB_1471_4f66:
    mov     word ptr [bp+unk], 0x1
    mov     byte ptr [bp+var_2], 0x1
; Is field C9 is the death flag?  
LAB_1471_4f6f:
    mov     bx, word ptr [bp+var_cState]
    mov     byte ptr [bx+0xc9], 0x1
    sub     ax, ax
    push    ax
    mov     bx, word ptr [bp+var_cState]
    push    word ptr [bx+0x18]
    push    word ptr [bp+is_opponent]
    push    cs
    call    near ptr state_op_unk
    add     sp, 0x6
    cmp     word ptr [bp+is_opponent], 0x0
    jnz     LAB_1471_4fa3
    mov     bx, word ptr [bp+var_cState]
    mov     ax, word ptr [bx+0x2c]
    mov     word ptr [state.game_impactSpeed], ax
    mov     ax, word ptr [framespersec]
    shl     ax, 0x1
    shl     ax, 0x1
    mov     word ptr [state.game_frames_per_sec], ax
LAB_1471_4fa3:
    cmp     byte ptr [is_in_replay], 0x0
    jnz     LAB_1471_4f3e
    cmp     byte ptr [byte_459D8], 0x0
    jz      LAB_1471_4f3e
    cmp     word ptr [bp+is_opponent], 0x0
    jnz     LAB_1471_4fbe
    push    word ptr [word_43964]
    jmp     LAB_1471_4fc2
    db 0x90
LAB_1471_4fbe:
    push    word ptr [word_4408C]
LAB_1471_4fc2:
    call    far ptr audio_function2_wrap
    add     sp, 0x2
    jmp     near ptr LAB_1471_4f3e
    db 0x90
LAB_1471_4fce:
    cmp     byte ptr [is_in_replay], 0x0
    jnz     LAB_1471_4ff4
    cmp     byte ptr [byte_459D8], 0x0
    jz      LAB_1471_4ff4
    cmp     word ptr [bp+is_opponent], 0x0
    jnz     LAB_1471_4fe8
    push    word ptr [word_43964]
    jmp     LAB_1471_4fec
LAB_1471_4fe8:
    push    word ptr [word_4408C]
LAB_1471_4fec:
    call    far ptr audio_function2_wrap
    add     sp, 0x2
LAB_1471_4ff4:
    mov     bx, word ptr [bp+var_cState]
    mov     byte ptr [bx+0xc9], 0x2
    mov     byte ptr [bp+var_2], 0x1
    cmp     word ptr [bp+is_opponent], 0x0
    jz      LAB_1471_5009
    jmp     near ptr LAB_1471_4f3e
LAB_1471_5009:
    mov     bx, word ptr [bp+var_cState]
    mov     ax, word ptr [bx+0x2c]
    mov     word ptr [state.game_impactSpeed], ax
    mov     ax, word ptr [framespersec]
    shl     ax, 0x1
    shl     ax, 0x1
LAB_1471_5019:
    mov     word ptr [state.game_frames_per_sec], ax
    jmp     near ptr LAB_1471_4f3e
    db 0x90
LAB_1471_5020:
    mov     bx, word ptr [bp+var_cState]
    mov     byte ptr [bx+0xc9], 0x3
    cmp     word ptr [bp+is_opponent], 0x0
    jnz     LAB_1471_5042
    mov     ax, word ptr [state.game_frame]
    add     ax, word ptr [state.game_penalty]
    add     ax, word ptr [elapsed_time1]
    mov     word ptr [state.game_total_finish], ax
    mov     ax, word ptr [framespersec]
    jmp     LAB_1471_5019
    db 0x90
LAB_1471_5042:
    mov     ax, word ptr [state.game_frame]
    add     ax, word ptr [elapsed_time1]
    mov     word ptr [state.field_144], ax
    jmp     near ptr LAB_1471_4f3e
    db 0x90
LAB_1471_5050:
    mov     ax, word ptr [state.game_frame]
    mov     word ptr [state.game_pEndFrame], ax
LAB_1471_5056:
    cmp     byte ptr [state.game_3F6autoLoadEvalFlag], 0x0
    jnz     LAB_1471_5069
    cmp     word ptr [bp+is_opponent], 0x0
    jnz     LAB_1471_5069
    mov     al, byte ptr [bp+unk]
    mov     byte ptr [state.game_3F6autoLoadEvalFlag], al
LAB_1471_5069:
    test    byte ptr [byte_43966], 0x4
    jnz     LAB_1471_507d
; This seems to be very very important! 
; It seems these copied variables are 
; used in the evaluation screen.  
    mov     di, offset gState_travDist
    mov     si, offset state.game_travDist
    push    ds
    pop     es
    mov     cx, 0xb
    rep movsw
LAB_1471_507d:
    pop     si
    pop     di
    mov     sp, bp
    pop     bp
    retf
update_crash_state_asm_ endp
    db 0x90
;  
; This function appears to be used to rotate the 
; velocity vector to its correct orientation according 
; to both car direction and plane inclination.  

; void __cdecl16far plane_rotate_op(void)
plane_rotate_op_asm_ proc far
    var_planptr = dword ptr -54
    var_32     = byte ptr  -50
    var_2C     = byte ptr  -44
    var_1A     = byte ptr  -26
    var_8      = byte ptr   -8

    push    bp
    mov     bp, sp
    sub     sp, 0x36
    push    di
    push    si
    cmp     word ptr [planindex_copy], -0x1
    jnz     LAB_1471_5096
    jmp     near ptr LAB_1471_51b2
LAB_1471_5096:
    mov     ax, 0x22
    imul    word ptr [planindex_copy]
    add     ax, word ptr [planptr]
    mov     dx, word ptr [planptr+2]
    mov     word ptr [bp+var_planptr], ax
    mov     word ptr [bp+var_planptr+2], dx
    les     bx, [bp+var_planptr]
    mov     ax, word ptr [pState_minusRotate_x_2]
    cmp     word ptr es:[bx+0x2], ax
    jnz     LAB_1471_50c6
    mov     ax, word ptr [pState_minusRotate_z_2]
    cmp     word ptr es:[bx], ax
    jnz     LAB_1471_50c6
    mov     si, word ptr [pState_minusRotate_y_2]
    jmp     LAB_1471_5135
    db 0x90
LAB_1471_50c6:
    lea     ax, [bp+var_8]
    push    ax
    mov     ax, offset mat_unk
    push    ax
    mov     ax, offset vec_unk2
    push    ax
    call    far ptr mat_mul_vector
    add     sp, 0x6
    mov     ax, 0x22
    imul    word ptr [planindex_copy]
    add     ax, word ptr [planptr]
    mov     dx, word ptr [planptr+2]
    add     ax, 0x10                           ; plane rotation matrix
    push    si
    lea     di, [bp+var_1A]
    mov     si, ax
    push    ss
    pop     es
    push    ds
    mov     ds, dx
    mov     cx, 0x9
    rep movsw
    pop     ds
    pop     si
    lea     ax, [bp+var_2C]
    push    ax
    lea     ax, [bp+var_1A]
    push    ax
    call    far ptr mat_invert
    add     sp, 0x4
    lea     ax, [bp+var_32]
    push    ax
    lea     ax, [bp+var_2C]
    push    ax
    lea     ax, [bp+var_8]
    push    ax
    call    far ptr mat_mul_vector
    add     sp, 0x6
    push    word ptr [bp+var_32+4]
    mov     ax, word ptr [bp+var_32]
    neg     ax
    push    ax
    call    far ptr int_atan2
    add     sp, 0x4
    mov     si, ax
; Hey...pState_f36Mminf40sar2 is an angle!  
LAB_1471_5135:
    add     si, word ptr [pState_f36Mminf40sar2]
    jz      LAB_1471_5194
    cmp     word ptr [word_3BE16], si
    jz      LAB_1471_5156
    mov     ax, si
    neg     ax
    push    ax
    mov     ax, offset mat_planetmp
    push    ax
    call    far ptr mat_rot_y
    add     sp, 0x4
    mov     word ptr [word_3BE16], si
LAB_1471_5156:
    lea     ax, [bp+var_32]
    push    ax
    mov     ax, offset mat_planetmp
    push    ax
    mov     ax, offset vec_unk2
    push    ax
    call    far ptr mat_mul_vector
    add     sp, 0x6
    mov     ax, offset vec_planerotopresult
    push    ax
    mov     ax, 0x22
    imul    word ptr [planindex_copy]
    add     ax, word ptr [planptr]
    mov     dx, word ptr [planptr+2]
    add     ax, 0x10                           ; plane rotation matrix.
    push    dx
    push    ax
    lea     ax, [bp+var_32]
LAB_1471_5185:
    push    ax
    push    cs
    call    near ptr mat_mul_vector2
    add     sp, 0x8
    pop     si
    pop     di
    mov     sp, bp
    pop     bp
    retf
    db 0x90
LAB_1471_5194:
    mov     ax, offset vec_planerotopresult
    push    ax
    mov     ax, 0x22                           ; sizeof plane
    imul    word ptr [planindex_copy]
    add     ax, word ptr [planptr]
    mov     dx, word ptr [planptr+2]
    add     ax, 0x10
    push    dx
    push    ax
    mov     ax, offset vec_unk2
    jmp     LAB_1471_5185
    db 0x90
LAB_1471_51b2:
    cmp     word ptr [pState_f36Mminf40sar2], 0x0
    jz      LAB_1471_51fc
    mov     ax, word ptr [f36f40_whlData]
    cmp     word ptr [pState_f36Mminf40sar2], ax
    jz      LAB_1471_51da
    mov     ax, word ptr [pState_f36Mminf40sar2]
    neg     ax
    push    ax
    mov     ax, offset mat_unk2
    push    ax
    call    far ptr mat_rot_y
    add     sp, 0x4
    mov     ax, word ptr [pState_f36Mminf40sar2]
    mov     word ptr [f36f40_whlData], ax
LAB_1471_51da:
    lea     ax, [bp+var_32]
    push    ax
    mov     ax, offset mat_unk2
    push    ax
    mov     ax, offset vec_unk2
    push    ax
    call    far ptr mat_mul_vector
    add     sp, 0x6
    mov     ax, offset vec_planerotopresult
    push    ax
    mov     ax, offset mat_unk
    push    ax
    lea     ax, [bp+var_32]
    jmp     LAB_1471_5207
    db 0x90
LAB_1471_51fc:
    mov     ax, offset vec_planerotopresult
    push    ax
    mov     ax, offset mat_unk
    push    ax
    mov     ax, offset vec_unk2
LAB_1471_5207:
    push    ax
    call    far ptr mat_mul_vector
    add     sp, 0x6
    pop     si
    pop     di
    mov     sp, bp
    pop     bp
    retf
plane_rotate_op_asm_ endp
;  
; plane_origin_op: 
; Given a global coordinates vector and a 
; planindex, calculates the inner product 
; between the corresponding vector in 
; coordinates relative to the plane origin 
; and the plane normal. Obvious use is to 
; find on which side of a plane we are. 
;   

; int __cdecl16far plane_origin_op(int index, int x_, int y_, int z_)
plane_origin_op_asm_ proc far
    var_10     = byte ptr  -16
    var_A      = byte ptr  -10
    var_4      = dword ptr  -4
    index      = word ptr    6
    x_         = word ptr    8
    y_         = word ptr   10
    z_         = word ptr   12

    push    bp
    mov     bp, sp
    sub     sp, 0x10
    mov     ax, word ptr [planindex]
    cmp     word ptr [bp+index], ax
    jnz     LAB_1471_522e
    mov     ax, word ptr [current_planptr]
    mov     dx, word ptr [current_planptr+2]
    jmp     LAB_1471_523c
    db 0x90
LAB_1471_522e:
    mov     ax, 0x22                           ; sizeof PLANE
    imul    word ptr [bp+index]
    add     ax, word ptr [planptr]
    mov     dx, word ptr [planptr+2]
LAB_1471_523c:
    mov     word ptr [bp+var_4], ax
    mov     word ptr [bp+var_4+2], dx
    les     bx, [bp+var_4]
    mov     ax, word ptr es:[bx+0x6]
    add     ax, word ptr [terrainHeight]
    mov     word ptr [bp+var_10+2], ax
    mov     ax, word ptr [bp+y_]
    sub     ax, word ptr [bp+var_10+2]
    mov     word ptr [bp+var_A+2], ax          ; y
    cmp     word ptr [bp+index], 0x4
    jl      LAB_1471_529e
; So this eventually becomes an inner product 
; between the plane normal and the projected 
; position vector in tile coordinates.  
    mov     ax, word ptr es:[bx+0x4]
    add     ax, word ptr [elem_xCenter]
    mov     word ptr [bp+var_10], ax
    mov     ax, word ptr es:[bx+0x8]
    add     ax, word ptr [elem_zCenter]
    mov     word ptr [bp+var_10+4], ax
    mov     ax, word ptr [bp+x_]
    sub     ax, word ptr [bp+var_10]
    mov     word ptr [bp+var_A], ax            ; x
    mov     ax, word ptr [bp+z_]
    sub     ax, word ptr [bp+var_10+4]
    mov     word ptr [bp+var_A+4], ax          ; z
    mov     ax, bx
    add     ax, 0xa
    push    dx
    push    ax
    push    word ptr [bp+var_A+4]
    push    word ptr [bp+var_A+2]
    push    word ptr [bp+var_A]
    push    cs
    call    near ptr vec_normalInnerProduct
    add     sp, 0xa
LAB_1471_529e:
    mov     sp, bp
    pop     bp
    retf
plane_origin_op_asm_ endp

; int __cdecl16far vec_normalInnerProduct(int x_, int y_, int z_, VECTOR * normal)
vec_normalInnerProduct_asm_ proc far
    var_4      = word ptr   -4
    var_2      = word ptr   -2
    x_         = word ptr    6
    y_         = word ptr    8
    z_         = word ptr   10
    normal     = dword ptr  12

    push    bp
    mov     bp, sp
    sub     sp, 0x4
    push    di
    push    si
    mov     ax, 0x2000                         ; length of normal vector => normalization
    cwd
    push    dx
    push    ax
    mov     ax, word ptr [bp+x_]
    cwd
    push    dx
    push    ax
    les     bx, [bp+normal]
    mov     ax, word ptr es:[bx]
    cwd
    push    dx
    push    ax
    call    far ptr __aFlmul
    mov     cx, ax
    mov     ax, word ptr [bp+z_]
    mov     bx, dx
    cwd
    push    dx
    push    ax
    les     si, [bp+normal]
    mov     ax, word ptr es:[si+0x4]
    cwd
    push    dx
    push    ax
    mov     si, cx
    mov     di, bx
    call    far ptr __aFlmul
    mov     cx, ax
    mov     ax, word ptr [bp+y_]
    mov     bx, dx
    cwd
    push    dx
    push    ax
    mov     ax, bx
    les     bx, [bp+normal]
    mov     dx, ax
    mov     ax, word ptr es:[bx+0x2]
    mov     word ptr [bp+var_4], cx            ; 1st multiplication lo-byte
    mov     word ptr [bp+var_2], dx            ; 1st multiplication hi-byte
    cwd
    push    dx
    push    ax
    call    far ptr __aFlmul
    add     ax, word ptr [bp+var_4]
    adc     dx, word ptr [bp+var_2]
    add     ax, si
    adc     dx, di
    push    dx
    push    ax
    call    far ptr __aFldiv                   ; /2000h
    pop     si
    pop     di
    mov     sp, bp
    pop     bp
    retf
vec_normalInnerProduct_asm_ endp
    db 0x90

; void __cdecl16far state_op_unk(int is_opponent, int car_rot_x, int unk_speed)
state_op_unk_asm_ proc far
    var_18     = word ptr  -24
    var_16     = word ptr  -22
    var_14     = word ptr  -20
    var_12     = word ptr  -18
    var_10     = word ptr  -16
    var_E      = word ptr  -14
    var_C      = word ptr  -12
    var_8      = word ptr   -8
    var_6      = word ptr   -6
    var_2      = word ptr   -2
    is_opponent = word ptr    6
    car_rot_x  = word ptr    8
    unk_speed  = word ptr   10

    push    bp
    mov     bp, sp
    sub     sp, 0x18
    push    di
    push    si
    cmp     word ptr [bp+is_opponent], 0x2
    jge     LAB_1471_534e
    mov     ax, word ptr [bp+car_rot_x]
    mov     word ptr [bp+var_6], ax
    mov     word ptr [bp+var_2], 0x400
    mov     word ptr [bp+var_E], 0x12
    mov     ax, word ptr [bp+is_opponent]
    shl     ax, 0x1
    shl     ax, 0x1
    add     ax, 0x4
    mov     word ptr [bp+var_10], ax
    mov     word ptr [bp+var_8], 0x6
    jmp     LAB_1471_536b
LAB_1471_534e:
    mov     ax, word ptr [bp+car_rot_x]
    sub     ax, 0x60
    mov     word ptr [bp+var_6], ax
    mov     word ptr [bp+var_2], 0xc0
    mov     word ptr [bp+var_E], 0x8
    mov     word ptr [bp+var_10], 0x0
    mov     word ptr [bp+var_8], 0x1
LAB_1471_536b:
    mov     byte ptr [state.field_42A], 0x1
    mov     word ptr [bp+var_12], 0x0
    sub     si, si
LAB_1471_5377:
    mov     bx, si
    shl     bx, 0x1
    cmp     word ptr [bx+state.field_38E], 0x0
    jnz     LAB_1471_5385
    inc     word ptr [bp+var_12]
LAB_1471_5385:
    inc     si
    cmp     si, 0x18
    jl      LAB_1471_5377
    mov     ax, word ptr [bp+var_E]
    cmp     word ptr [bp+var_12], ax
    jle     LAB_1471_5396
    mov     word ptr [bp+var_12], ax
LAB_1471_5396:
    mov     word ptr [bp+var_C], 0x0
    sub     si, si
    jmp     LAB_1471_53a1
    db 0x90
LAB_1471_53a0:
    inc     si
LAB_1471_53a1:
    cmp     si, 0x18
    jl      LAB_1471_53a9
    jmp     near ptr LAB_1471_5489
LAB_1471_53a9:
    mov     ax, si
    shl     ax, 0x1
    mov     word ptr [bp+var_14], ax
    mov     bx, ax
    cmp     word ptr [bx+state.field_38E], 0x0
    jnz     LAB_1471_53a0
    mov     al, byte ptr [bp+is_opponent]
    mov     byte ptr [si+state.field_443], al
    mov     al, byte ptr [bp+var_C]
    and     al, 0x3
    add     al, byte ptr [bp+var_10]
    mov     byte ptr [si+state.field_42B], al
    mov     ax, si
    shl     ax, 0x1
    shl     ax, 0x1
    mov     word ptr [bp+var_16], ax
    mov     bx, ax
    sub     ax, ax
    mov     word ptr [bx+state.game_longs1+2], ax
    mov     word ptr [bx+state], ax
    mov     bx, word ptr [bp+var_16]
    mov     word ptr [bx+state.game_longs2+2], ax
    mov     word ptr [bx+state.game_longs2], ax
    mov     bx, word ptr [bp+var_16]
    mov     word ptr [bx+state.game_longs3+2], ax
    mov     word ptr [bx+state.game_longs3], ax
    call    far ptr get_kevinrandom
    shl     ax, 0x1
    shl     ax, 0x1
    mov     bx, word ptr [bp+var_14]
    mov     word ptr [bx+state.field_2FE], ax
    call    far ptr get_kevinrandom
    shl     ax, 0x1
    shl     ax, 0x1
    mov     bx, si
    shl     bx, 0x1
    mov     word ptr [bx+state.field_32E], ax
    mov     ax, word ptr [bp+var_12]
    cwd
    push    dx
    push    ax
    mov     ax, word ptr [bp+var_C]
    cwd
    push    dx
    push    ax
    mov     ax, word ptr [bp+var_2]
    cwd
    push    dx
    push    ax
    call    far ptr __aFlmul
    push    dx
    push    ax
    call    far ptr __aFldiv
    add     ax, word ptr [bp+var_6]
    and     ah, 0x3
    mov     bx, si
    shl     bx, 0x1
    mov     word ptr [bx+state.field_35E], ax
    call    far ptr get_kevinrandom
    mov     cx, ax
    shl     ax, 0x1
    add     ax, cx
    shl     ax, 0x1
    mov     di, ax
    mov     cl, 0x2
    sar     di, cl
    add     di, word ptr [bp+unk_speed]
    add     di, 0x180
    mov     ax, si
    shl     ax, 0x1
    mov     word ptr [bp+var_18], ax
    mov     bx, ax
    mov     word ptr [bx+state.field_38E], di
    mov     ax, word ptr [bp+var_8]
    imul    di
    sar     ax, 0x1
    sar     ax, 0x1
    mov     bx, word ptr [bp+var_18]
    mov     word ptr [bx+state.field_3BE], ax
    inc     word ptr [bp+var_C]
    mov     ax, word ptr [bp+var_12]
    cmp     word ptr [bp+var_C], ax
    jz      LAB_1471_5489
    jmp     near ptr LAB_1471_53a0
LAB_1471_5489:
    pop     si
    pop     di
    mov     sp, bp
    pop     bp
    retf
state_op_unk_asm_ endp
    db 0x90

; void __cdecl16far move_explode(void)
move_explode_asm_ proc far
    var_14     = word ptr  -20
    var_12     = word ptr  -18
    var_E      = word ptr  -14
    var_C      = word ptr  -12
    var_A      = word ptr  -10
    var_8      = word ptr   -8
    var_4      = word ptr   -4
    var_2      = byte ptr   -2

    push    bp
    mov     bp, sp
    sub     sp, 0x14
    push    di
    push    si
    mov     byte ptr [bp+var_2], 0x0
    sub     si, si
    jmp     LAB_1471_54b3
LAB_1471_54a0:
    mov     byte ptr [bp+var_2], 0x1
    mov     di, si
    shl     di, 0x1
    add     word ptr [di+state.field_2FE], 0x10
    add     word ptr [di+state.field_32E], 0x10
LAB_1471_54b2:
    inc     si
LAB_1471_54b3:
    cmp     si, 0x18
    jl      LAB_1471_54bb
    jmp     near ptr LAB_1471_5586
LAB_1471_54bb:
    mov     di, si
    shl     di, 0x1
    cmp     word ptr [di+state.field_38E], 0x0
    jz      LAB_1471_54b2
    mov     ax, 0x1
    push    ax
    push    word ptr [di+state.field_35E]
    sub     ax, ax
    push    ax
    push    ax
    call    far ptr mat_rot_zxy
    add     sp, 0x8
    mov     word ptr [bp+var_4], ax
    mov     word ptr [bp+var_C], 0x0
    mov     word ptr [bp+var_A], 0x0
    mov     bx, si
    shl     bx, 0x1
    mov     ax, word ptr [bx+state.field_38E]
    mov     word ptr [bp+var_8], ax
    lea     ax, [bp+var_12]
    push    ax
    push    word ptr [bp+var_4]
    lea     ax, [bp+var_C]
    push    ax
    call    far ptr mat_mul_vector
    add     sp, 0x6
    mov     di, si
    mov     cl, 0x2
    shl     di, cl
    mov     ax, word ptr [bp+var_12]
    cwd
    add     word ptr [di+state], ax
    adc     word ptr [di+state.game_longs1+2], dx
    mov     ax, word ptr [bp+var_E]
    cwd
    add     word ptr [di+state.game_longs3], ax
    adc     word ptr [di+state.game_longs3+2], dx
    mov     ax, si
    shl     ax, 0x1
    add     ax, offset state.field_3BE
    mov     word ptr [bp+var_14], ax
    mov     bx, ax
    sub     word ptr [bx], 0x13
    mov     bx, word ptr [bp+var_14]
    mov     ax, word ptr [bx]
    cwd
    add     word ptr [di+state.game_longs2], ax
    adc     word ptr [di+state.game_longs2+2], dx
    cmp     word ptr [framespersec], 0xa
    jnz     LAB_1471_555b
    mov     bx, word ptr [bp+var_14]
    sub     word ptr [bx], 0x13
    mov     bx, word ptr [bp+var_14]
    mov     ax, word ptr [bx]
    cwd
    add     word ptr [di+state.game_longs2], ax
    adc     word ptr [di+state.game_longs2+2], dx
LAB_1471_555b:
    mov     bx, si
    shl     bx, 0x1
    shl     bx, 0x1
    mov     ax, word ptr [bx+state.game_longs2]
    mov     dx, word ptr [bx+state.game_longs2+2]
    add     ax, word ptr [state.playerstate.car_posWorld1.ly]
    adc     dx, word ptr [state.playerstate.car_posWorld1.ly+2]
    or      dx, dx
    jl      LAB_1471_5578
    jmp     near ptr LAB_1471_54a0
LAB_1471_5578:
    mov     bx, si
    shl     bx, 0x1
    mov     word ptr [bx+state.field_38E], 0x0
    jmp     near ptr LAB_1471_54b2
    db 0x90
LAB_1471_5586:
    mov     al, byte ptr [bp+var_2]
    mov     byte ptr [state.field_42A], al
    pop     si
    pop     di
    mov     sp, bp
    pop     bp
    retf
move_explode_asm_ endp

; ******************************************************************************
; * dbg: getsimdata
; ******************************************************************************

; void __cdecl16far setup_aero_trackdata(void * car_res_ptr, int is_opponent)
setup_aero_trackdata_asm_ proc far
    car_res_ptr = dword ptr   6
    is_opponent = word ptr   10

    push    bp
    mov     bp, sp
    sub     sp, 0x2
    push    di
    push    si
    cmp     word ptr [bp+is_opponent], 0x0
    jz      LAB_1471_55a3
    jmp     near ptr LAB_1471_5626
LAB_1471_55a3:
    mov     ax, offset aSimd
    push    ax
    push    word ptr [bp+car_res_ptr+2]
    push    word ptr [bp+car_res_ptr]
    call    far ptr locate_shape_alt
    add     sp, 0x6
    push    si
    mov     di, offset simd_player
    mov     si, ax
    push    ds
    pop     es
    push    ds
    mov     ds, dx
    mov     cx, 0x184
    rep movsw
    pop     ds
    pop     si
    mov     ax, word ptr [td04_aerotable_pl]
    mov     dx, word ptr [td04_aerotable_pl+2]
    mov     word ptr [simd_player.aerorestable], ax
    mov     word ptr [simd_player.aerorestable+2], dx
    sub     si, si
; Looping over scaled car speeds, doing 
; FDrag = kAero * speed * speeed.  
LAB_1471_55d7:
    mov     ax, si
    cwd
    push    dx
    push    ax
    cwd
    push    dx
    push    ax
    mov     ax, word ptr [simd_player.aero_resistance]
    cwd
    push    dx
    push    ax
    call    far ptr __aFlmul
    push    dx
    push    ax
    call    far ptr __aFlmul
    mov     cl, 0x9
; Division by 2^9. 
; 2^8 shifts one full 
; byte, and it is 
; known there is a 1/2 
; factor in FDrag.  
LAB_1471_55f3:
    sar     dx, 0x1
    rcr     ax, 0x1
    dec     cl
    jnz     LAB_1471_55f3
; Writing the table. Maximum 
; speed is 40h.  
    mov     bx, si
    shl     bx, 0x1
    les     di, [td04_aerotable_pl]
    mov     word ptr es:[bx+di], ax
    inc     si
    cmp     si, 0x40
    jl      LAB_1471_55d7
    mov     ax, offset aGnam
    push    ax
    push    word ptr [bp+car_res_ptr+2]
    push    word ptr [bp+car_res_ptr]
    call    far ptr locate_shape_alt
    add     sp, 0x6
    push    dx
    push    ax
    mov     ax, offset gnam_string
    jmp     near ptr LAB_1471_56a6
LAB_1471_5626:
    mov     ax, offset aSimd_0
    push    ax
    push    word ptr [bp+car_res_ptr+2]
    push    word ptr [bp+car_res_ptr]
    call    far ptr locate_shape_alt
    add     sp, 0x6
    push    si
    mov     di, offset simd_opponent
    mov     si, ax
    push    ds
    pop     es
    push    ds
    mov     ds, dx
    mov     cx, 0x184
    rep movsw
    pop     ds
    pop     si
    mov     ax, word ptr [td05_aerotable_op]
    mov     dx, word ptr [td05_aerotable_op+2]
    mov     word ptr [simd_opponent.aerorestable], ax
    mov     word ptr [simd_opponent.aerorestable+2], dx
    sub     si, si
LAB_1471_565a:
    mov     ax, si
    cwd
    push    dx
    push    ax
    cwd
    push    dx
    push    ax
    mov     ax, word ptr [simd_opponent.aero_resistance]
    cwd
    push    dx
    push    ax
    call    far ptr __aFlmul
    push    dx
    push    ax
    call    far ptr __aFlmul
    mov     cl, 0x9
LAB_1471_5676:
    sar     dx, 0x1
    rcr     ax, 0x1
    dec     cl
    jnz     LAB_1471_5676
    mov     bx, si
    shl     bx, 0x1
    les     di, [td05_aerotable_op]
    mov     word ptr es:[bx+di], ax
    inc     si
    cmp     si, 0x40
    jl      LAB_1471_565a
    mov     ax, offset aGsna
    push    ax
    push    word ptr [bp+car_res_ptr+2]
    push    word ptr [bp+car_res_ptr]
    call    far ptr locate_shape_alt
    add     sp, 0x6
    push    dx
    push    ax
    mov     ax, offset gsna_string
LAB_1471_56a6:
    push    ax
    call    far ptr copy_string
    add     sp, 0x6
    pop     si
    pop     di
    mov     sp, bp
    pop     bp
    retf
setup_aero_trackdata_asm_ endp

seg001 ends
end
