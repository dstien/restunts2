; Generated by restunts-export.py (Ghidra)
.8086
.model medium

include seg024.inc

seg024 segment byte public use16 'STUNTSC'
    assume cs:seg024, es:nothing, ss:nothing, ds:dseg

    db 0x90

; void __cdecl16far mat_rot_x(MATRIX * outmat, int angle)
mat_rot_x_asm_ proc far
    var_4      = word ptr   -4
    var_2      = word ptr   -2
    outmat     = word ptr    6
    angle      = word ptr    8

    push    bp
    mov     bp, sp
    sub     sp, 0x4
    push    word ptr [bp+angle]
    call    far ptr cos_fast
    add     sp, 0x2
    mov     word ptr [bp+var_2], ax
    push    word ptr [bp+angle]
    call    far ptr sin_fast
    mov     word ptr [bp+var_4], ax
    mov     bx, word ptr [bp+outmat]
    mov     word ptr [bx], 0x4000
    mov     word ptr [bx+0x2], 0x0
    mov     word ptr [bx+0x4], 0x0
    mov     word ptr [bx+0x6], 0x0
    mov     ax, word ptr [bp+var_2]
    mov     word ptr [bx+0x8], ax
    mov     ax, word ptr [bp+var_4]
    mov     word ptr [bx+0xa], ax
    mov     word ptr [bx+0xc], 0x0
    neg     ax
    mov     word ptr [bx+0xe], ax
    mov     ax, word ptr [bp+var_2]
    mov     word ptr [bx+0x10], ax
    mov     sp, bp
    pop     bp
    retf
    db 0x90
mat_rot_x_asm_ endp
; Calvin's notation names rotation matrices according 
; to the axis of rotation, while Duplode tends to 
; think in terms of the plane on which the rotating 
; angle lies. So mat_rot_y might be called matRotXZ. 
; This remark is just to avoid possible interpretation 
; mistakes.

; void __cdecl16far mat_rot_y(MATRIX * outmat, int angle)
mat_rot_y_asm_ proc far
    var_4      = word ptr   -4
    var_2      = word ptr   -2
    outmat     = word ptr    6
    angle      = word ptr    8

    push    bp
    mov     bp, sp
    sub     sp, 0x4
    push    word ptr [bp+angle]
    call    far ptr cos_fast
    add     sp, 0x2
    mov     word ptr [bp+var_2], ax
    push    word ptr [bp+angle]
    call    far ptr sin_fast
    mov     word ptr [bp+var_4], ax
    mov     bx, word ptr [bp+outmat]
    mov     ax, word ptr [bp+var_2]
    mov     word ptr [bx], ax
    mov     word ptr [bx+0x2], 0x0
    mov     ax, word ptr [bp+var_4]
    neg     ax
    mov     word ptr [bx+0x4], ax
    mov     word ptr [bx+0x6], 0x0
    mov     word ptr [bx+0x8], 0x4000
    mov     word ptr [bx+0xa], 0x0
    mov     ax, word ptr [bp+var_4]
    mov     word ptr [bx+0xc], ax
    mov     word ptr [bx+0xe], 0x0
    mov     ax, word ptr [bp+var_2]
    mov     word ptr [bx+0x10], ax
    mov     sp, bp
    pop     bp
    retf
mat_rot_y_asm_ endp

; void __cdecl16far mat_rot_z(MATRIX * outmat, int angle)
mat_rot_z_asm_ proc far
    var_4      = word ptr   -4
    var_2      = word ptr   -2
    outmat     = word ptr    6
    angle      = word ptr    8

    push    bp
    mov     bp, sp
    sub     sp, 0x4
    push    word ptr [bp+angle]
    call    far ptr cos_fast
    add     sp, 0x2
    mov     word ptr [bp+var_2], ax
    push    word ptr [bp+angle]
    call    far ptr sin_fast
    mov     word ptr [bp+var_4], ax
    mov     bx, word ptr [bp+outmat]
    mov     ax, word ptr [bp+var_2]
    mov     word ptr [bx], ax
    mov     ax, word ptr [bp+var_4]
    mov     word ptr [bx+0x2], ax
    mov     word ptr [bx+0x4], 0x0
    neg     ax
    mov     word ptr [bx+0x6], ax
    mov     ax, word ptr [bp+var_2]
    mov     word ptr [bx+0x8], ax
    mov     word ptr [bx+0xa], 0x0
    mov     word ptr [bx+0xc], 0x0
    mov     word ptr [bx+0xe], 0x0
    mov     word ptr [bx+0x10], 0x4000
    mov     sp, bp
    pop     bp
    retf
mat_rot_z_asm_ endp

seg024 ends
end
