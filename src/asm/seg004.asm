; Generated by restunts-export.py (Ghidra)
.8086
.model medium

include custom.inc
include structs.inc
include seg000.inc
include seg001.inc
include seg002.inc
include seg003.inc
include seg005.inc
include seg006.inc
include seg007.inc
include seg008.inc
include seg009.inc
include seg010.inc
include seg011.inc
include seg012.inc
include seg013.inc
include seg014.inc
include seg015.inc
include seg016.inc
include seg017.inc
include seg018.inc
include seg019.inc
include seg020.inc
include seg021.inc
include seg022.inc
include seg023.inc
include seg024.inc
include seg025.inc
include seg026.inc
include seg027.inc
include seg028.inc
include seg029.inc
include seg030.inc
include seg031.inc
include seg032.inc
include seg033.inc
include seg034.inc
include seg035.inc
include seg036.inc
include seg037.inc
include seg038.inc
include seg039.inc
include dseg.inc
include dsegu.inc

seg004 segment byte public use16 'STUNTSC'
    assume cs:seg004, es:nothing, ss:nothing, ds:dseg

    public build_track_object
    public bto_branches
    public loc_1F87E
    public bto_auxiliary1
    public shape3d_load_all
    public shape3d_free_all
    public shape3d_load_car_shapes
    public shape3d_null_opp_car_thunk
    public shape3d_null_opp_car
    public shape3d_free_car_shapes
    public sub_204AE
    public track_setup
    public off_1F896
    public load_opponent_data
    public subst_hillroad_track

; void __cdecl16far build_track_object(VECTOR * a, VECTOR * b)
build_track_object proc far
    var_curr_wallptr = dword ptr -64
    var_misc3C = word ptr  -60
    var_trkObjList = word ptr  -58
    var_wallOrientMod = word ptr  -56
    var_36     = word ptr  -54
    var_tileTerr = byte ptr  -52
    var_absXElemCrds = word ptr  -50
    var_absZElemCrds = word ptr  -46
    var_posElemCrds = byte ptr  -44
    var_physModel = word ptr  -36
    var_misc22 = word ptr  -34
    var_trkRow = byte ptr  -32
    var_misc1E = word ptr  -30
    var_misc1C = word ptr  -28
    var_trkCol = byte ptr  -26
    var_nextPosElemCrds = byte ptr  -24
    var_surfaceType = byte ptr  -18
    var_elemOrient = word ptr  -16
    var_E      = word ptr  -14
    var_C      = word ptr  -12
    var_turnRadius = word ptr  -10
    var_tileElem = byte ptr   -8
    var_06effX = word ptr   -6
    var_02effZ = word ptr   -2
    a          = word ptr    6
    b          = word ptr    8

    push    bp
    mov     bp, sp
    sub     sp, 0x40
    push    di
    push    si
    mov     word ptr [planindex], 0x0
    mov     word ptr [wallindex], 0xffff
    mov     word ptr [wallHeight], 0xfff4
    mov     word ptr [elRdWallRelated], 0xfc18 ; -1000
    mov     byte ptr [corkFlag], 0x0
    mov     byte ptr [current_surf_type], grass ; grass is the default surface
    mov     byte ptr [byte_4392C], 0x1
    sub     si, si
    mov     word ptr [bp+var_wallOrientMod], si
    mov     word ptr [bp+var_elemOrient], si
    mov     word ptr [terrainHeight], si
    mov     bx, word ptr [bp+a]
    mov     ax, word ptr [bx]
    mov     cl, 0xa
    sar     ax, cl                             ; divide by 1024
    mov     byte ptr [bp+var_trkCol], al
    mov     ax, word ptr [bx+0x4]              ; 2D word vector... world xz coords?
    sar     ax, cl
    mov     byte ptr [bp+var_trkRow], al
    mov     word ptr [bp+var_physModel], 0xffff
    cmp     byte ptr [bp+var_trkCol], 0x0
    jge     LAB_1e1a_005d
    jmp     near ptr LAB_1e1a_172d
LAB_1e1a_005d:
    cmp     byte ptr [bp+var_trkCol], 0x1d
    jle     LAB_1e1a_0066
    jmp     near ptr LAB_1e1a_172d
LAB_1e1a_0066:
    or      al, al
    jge     LAB_1e1a_006d
    jmp     near ptr LAB_1e1a_172d
LAB_1e1a_006d:
    cmp     al, 0x1d
    jle     LAB_1e1a_0074
    jmp     near ptr LAB_1e1a_172d
LAB_1e1a_0074:
    mov     al, byte ptr [bp+var_trkCol]
    cbw
    mov     di, ax
    mov     bx, di
    shl     bx, 0x1
; no way _1A is not a col index  
    mov     ax, word ptr [bx+trackcenterpos2]
    mov     word ptr [elem_xCenter], ax
    mov     al, byte ptr [bp+var_trkRow]
    cbw
    shl     ax, 0x1
    mov     word ptr [bp+var_misc3C], ax
    mov     bx, ax
    mov     ax, word ptr [bx+terraincenterpos]
    mov     word ptr [elem_zCenter], ax
    mov     bx, word ptr [bx+trackrows]
    add     bx, word ptr [td15_terr_map_main]
    mov     es, word ptr [td15_terr_map_main+2]
    mov     al, byte ptr es:[bx+di]
    mov     byte ptr [bp+var_tileTerr], al     ; terrain tile
    or      al, al
    jz      LAB_1e1a_00d6
    sub     ah, ah
    cmp     ax, 0x1
    jnz     LAB_1e1a_00b7
    jmp     near ptr LAB_1e1a_015b
LAB_1e1a_00b7:
    cmp     ax, 0x2                            ; coast
; this is deciding coastline angle  
    jz      LAB_1e1a_00fa
    cmp     ax, 0x3
    jz      LAB_1e1a_0100
    cmp     ax, 0x4
    jz      LAB_1e1a_0106
    cmp     ax, 0x5
    jz      LAB_1e1a_010c
    cmp     ax, 0x6
    jnz     LAB_1e1a_00d6
code_addHillHeight:
    mov     ax, word ptr [(hillHeightConsts+1*2)]
    mov     word ptr [terrainHeight], ax
LAB_1e1a_00d6:
    mov     al, byte ptr [bp+var_trkRow]
    cbw
    mov     bx, ax
    shl     bx, 0x1
    mov     bx, word ptr [bx+terrainrows]
    mov     al, byte ptr [bp+var_trkCol]
    cbw
    add     bx, ax
    les     di, [td14_elem_map_main]
    mov     al, byte ptr es:[bx+di]
    mov     byte ptr [bp+var_tileElem], al
    or      al, al
    jnz     LAB_1e1a_0164
    jmp     near ptr code_bto_blank
    db 0x90
LAB_1e1a_00fa:
    mov     si, 0x80
    jmp     LAB_1e1a_010f
    db 0x90
LAB_1e1a_0100:
    mov     si, 0xfd80
    jmp     LAB_1e1a_010f
    db 0x90
LAB_1e1a_0106:
    mov     si, 0xfe80
    jmp     LAB_1e1a_010f
    db 0x90
LAB_1e1a_010c:
    mov     si, 0xff80
; Here, the game makes up an unit 
; vector along the coastline (cos 
; and sin), and find its inner  
; product (misc22) with the 
; relative position vector.  
LAB_1e1a_010f:
    mov     bx, word ptr [bp+a]
    mov     ax, word ptr [bx]
    sub     ax, word ptr [elem_xCenter]
    mov     word ptr [bp+var_posElemCrds], ax
    mov     ax, word ptr [bx+0x4]
    sub     ax, word ptr [elem_zCenter]
    mov     word ptr [bp+var_posElemCrds+4], ax
    push    ax
    push    si
    call    far ptr sin_fast
    add     sp, 0x2
    push    ax
    call    far ptr multiply_and_scale
    add     sp, 0x4
    push    word ptr [bp+var_posElemCrds]
    push    si
    mov     di, ax
    call    far ptr cos_fast
    add     sp, 0x2
    push    ax
    call    far ptr multiply_and_scale
    add     sp, 0x4
    add     ax, di
    mov     word ptr [bp+var_misc22], ax
    or      ax, ax
    jl      LAB_1e1a_015b
    jmp     near ptr LAB_1e1a_00d6
LAB_1e1a_015b:
    mov     byte ptr [current_surf_type], water
    jmp     near ptr LAB_1e1a_00d6
    db 0x90
LAB_1e1a_0164:
    cmp     byte ptr [bp+var_tileElem], 0xfd   ; filler tests
    jnc     LAB_1e1a_016d
    jmp     near ptr LAB_1e1a_026c
LAB_1e1a_016d:
    mov     al, byte ptr [bp+var_tileElem]
    sub     ah, ah
    cmp     ax, 0xfd
    jz      LAB_1e1a_0188
    cmp     ax, 0xfe
    jz      LAB_1e1a_01f0
    cmp     ax, 0xff
    jnz     LAB_1e1a_0184
    jmp     near ptr LAB_1e1a_022c
LAB_1e1a_0184:
    jmp     near ptr LAB_1e1a_02c4
    db 0x90
LAB_1e1a_0188:
    mov     al, byte ptr [bp+var_trkRow]
    cbw
    mov     di, ax
    shl     di, 0x1
    mov     al, byte ptr [bp+var_trkCol]
    cbw
    mov     bx, ax
    add     bx, word ptr [di+(terrainrows+1*2)]
    add     bx, word ptr [td14_elem_map_main]
    mov     es, word ptr [td14_elem_map_main+2]
    mov     al, byte ptr es:[bx-0x1]
    mov     byte ptr [bp+var_tileElem], al
    sub     ah, ah
    mov     bx, ax
    shl     bx, 0x1
    add     bx, ax
    shl     bx, 0x1
    add     bx, ax
    shl     bx, 0x1
    test    byte ptr [bx+trkObjectList.ss_multiTileFlag], 0x1
    jz      LAB_1e1a_01c5
    mov     ax, word ptr [di+(terrainpos+1*2)]
LAB_1e1a_01c2:
    mov     word ptr [elem_zCenter], ax
LAB_1e1a_01c5:
    mov     al, byte ptr [bp+var_tileElem]
    sub     ah, ah
    mov     bx, ax
    shl     bx, 0x1
    add     bx, ax
    shl     bx, 0x1
    add     bx, ax
    shl     bx, 0x1
    test    byte ptr [bx+trkObjectList.ss_multiTileFlag], 0x2
    jnz     LAB_1e1a_01e0
    jmp     near ptr LAB_1e1a_02c4
LAB_1e1a_01e0:
    mov     al, byte ptr [bp+var_trkCol]
    cbw
    mov     bx, ax
    shl     bx, 0x1
    mov     ax, word ptr [bx+trackpos2]
    jmp     near ptr LAB_1e1a_02c1
    db 0x90
LAB_1e1a_01f0:
    mov     al, byte ptr [bp+var_trkRow]
    cbw
    mov     di, ax
    shl     di, 0x1
    mov     al, byte ptr [bp+var_trkCol]
    cbw
    mov     bx, ax
    add     bx, word ptr [di+(terrainrows+1*2)]
    add     bx, word ptr [td14_elem_map_main]
    mov     es, word ptr [td14_elem_map_main+2]
    mov     al, byte ptr es:[bx]
    mov     byte ptr [bp+var_tileElem], al
    sub     ah, ah
    mov     bx, ax
    shl     bx, 0x1
    add     bx, ax
    shl     bx, 0x1
    add     bx, ax
    shl     bx, 0x1
    test    byte ptr [bx+trkObjectList.ss_multiTileFlag], 0x1
    jz      LAB_1e1a_029d
    mov     ax, word ptr [di+(terrainpos+1*2)]
    jmp     LAB_1e1a_029a
    db 0x90
LAB_1e1a_022c:
    mov     al, byte ptr [bp+var_trkRow]
    cbw
    mov     di, ax
    shl     di, 0x1
    mov     al, byte ptr [bp+var_trkCol]
    cbw
    mov     bx, ax
    add     bx, word ptr [di+terrainrows]
    add     bx, word ptr [td14_elem_map_main]
    mov     es, word ptr [td14_elem_map_main+2]
    mov     al, byte ptr es:[bx-0x1]
    mov     byte ptr [bp+var_tileElem], al
    sub     ah, ah
    mov     bx, ax
    shl     bx, 0x1
    add     bx, ax
    shl     bx, 0x1
    add     bx, ax
    shl     bx, 0x1
    test    byte ptr [bx+trkObjectList.ss_multiTileFlag], 0x1
    jnz     LAB_1e1a_0265
    jmp     near ptr LAB_1e1a_01c5
LAB_1e1a_0265:
    mov     ax, word ptr [di+terrainpos]
    jmp     near ptr LAB_1e1a_01c2
; general case  
LAB_1e1a_026c:
    mov     al, byte ptr [bp+var_tileElem]
    sub     ah, ah
    mov     bx, ax
    shl     bx, 0x1
    add     bx, ax
    shl     bx, 0x1
    add     bx, ax
    shl     bx, 0x1
    mov     al, byte ptr [bx+trkObjectList.ss_multiTileFlag]
    mov     byte ptr [bp+var_misc3C], al
    cmp     al, ah
    jz      LAB_1e1a_02c4
    test    byte ptr [bp+var_misc3C], 0x1
    jz      LAB_1e1a_029d
    mov     al, byte ptr [bp+var_trkRow]
    cbw
    mov     bx, ax
    shl     bx, 0x1
    mov     ax, word ptr [bx+terrainpos]
LAB_1e1a_029a:
    mov     word ptr [elem_zCenter], ax
LAB_1e1a_029d:
    mov     al, byte ptr [bp+var_tileElem]
    sub     ah, ah
    mov     bx, ax
    shl     bx, 0x1
    add     bx, ax
    shl     bx, 0x1
    add     bx, ax
    shl     bx, 0x1
    test    byte ptr [bx+trkObjectList.ss_multiTileFlag], 0x2
    jz      LAB_1e1a_02c4
    mov     al, byte ptr [bp+var_trkCol]
    cbw
    mov     bx, ax
    shl     bx, 0x1
    mov     ax, word ptr [bx+(trackpos2+1*2)]
LAB_1e1a_02c1:
    mov     word ptr [elem_xCenter], ax
LAB_1e1a_02c4:
    mov     bx, word ptr [bp+a]
    mov     ax, word ptr [bx]
    sub     ax, word ptr [elem_xCenter]
    mov     word ptr [bp+var_posElemCrds], ax
    mov     ax, word ptr [bx+0x4]
    sub     ax, word ptr [elem_zCenter]
    mov     word ptr [bp+var_posElemCrds+4], ax
    mov     bx, word ptr [bp+b]
    mov     ax, word ptr [bx]
    sub     ax, word ptr [elem_xCenter]
    mov     word ptr [bp+var_nextPosElemCrds], ax
    mov     ax, word ptr [bx+0x4]
    sub     ax, word ptr [elem_zCenter]
    mov     word ptr [bp+var_nextPosElemCrds+4], ax
    cmp     byte ptr [bp+var_tileElem], 0x0
    jz      LAB_1e1a_0316
    cmp     byte ptr [bp+var_tileTerr], 0x7
    jc      LAB_1e1a_0316
    cmp     byte ptr [bp+var_tileTerr], 0xb
    jnc     LAB_1e1a_0316
    mov     al, byte ptr [bp+var_tileElem]
    sub     ah, ah
    push    ax
    mov     al, byte ptr [bp+var_tileTerr]
    push    ax
    push    cs
    call    near ptr offset subst_hillroad_track
    add     sp, 0x4
    mov     byte ptr [bp+var_tileElem], al
LAB_1e1a_0316:
    mov     al, byte ptr [bp+var_tileElem]
    sub     ah, ah
    mov     cx, ax
    shl     ax, 0x1
    add     ax, cx
    shl     ax, 0x1
    add     ax, cx
    shl     ax, 0x1
    add     ax, offset trkObjectList
    mov     word ptr [bp+var_trkObjList], ax
    mov     bx, ax                             ; loading physical model indices!
    mov     al, byte ptr [bx+0xc]
    cbw
    mov     word ptr [bp+var_physModel], ax
    mov     ax, word ptr [bx+0x2]
    mov     word ptr [bp+var_elemOrient], ax
; now the posElemCrds will be rotated.  
    or      ax, ax
    jz      LAB_1e1a_034f
    cmp     ax, 0x100
    jz      LAB_1e1a_03c2
    cmp     ax, 0x200
    jz      LAB_1e1a_03a0
    cmp     ax, 0x300
    jz      LAB_1e1a_0376
LAB_1e1a_034f:
    mov     word ptr [bp+var_36], 0x0
    mov     bx, word ptr [bp+var_trkObjList]
    mov     al, byte ptr [bx+0x9]
    inc     al
    mov     byte ptr [bp+var_surfaceType], al
    cmp     al, 0x1
    jge     LAB_1e1a_0367
    mov     byte ptr [bp+var_surfaceType], 0x1
LAB_1e1a_0367:
    cmp     word ptr [bp+var_posElemCrds], 0x0
    jge     LAB_1e1a_03ea
    mov     ax, word ptr [bp+var_posElemCrds]
    neg     ax
    jmp     LAB_1e1a_03ed
    db 2 dup (0x90)
LAB_1e1a_0376:
    mov     ax, word ptr [bp+var_posElemCrds]
    mov     word ptr [bp+var_misc1E], ax
    mov     ax, word ptr [bp+var_posElemCrds+4]
    mov     word ptr [bp+var_posElemCrds], ax
    mov     ax, word ptr [bp+var_misc1E]
    neg     ax
    mov     word ptr [bp+var_posElemCrds+4], ax
    mov     ax, word ptr [bp+var_nextPosElemCrds]
    mov     word ptr [bp+var_misc1E], ax
    mov     ax, word ptr [bp+var_nextPosElemCrds+4]
    mov     word ptr [bp+var_nextPosElemCrds], ax
    mov     ax, word ptr [bp+var_misc1E]
    neg     ax
LAB_1e1a_039b:
    mov     word ptr [bp+var_nextPosElemCrds+4], ax
    jmp     LAB_1e1a_034f
LAB_1e1a_03a0:
    mov     ax, word ptr [bp+var_posElemCrds+4]
    neg     ax
    mov     word ptr [bp+var_posElemCrds+4], ax
    mov     ax, word ptr [bp+var_posElemCrds]
    neg     ax
    mov     word ptr [bp+var_posElemCrds], ax
    mov     ax, word ptr [bp+var_nextPosElemCrds+4]
    neg     ax
    mov     word ptr [bp+var_nextPosElemCrds+4], ax
    mov     ax, word ptr [bp+var_nextPosElemCrds]
    neg     ax
    mov     word ptr [bp+var_nextPosElemCrds], ax
    jmp     LAB_1e1a_034f
LAB_1e1a_03c2:
    mov     ax, word ptr [bp+var_posElemCrds]
    mov     word ptr [bp+var_misc1E], ax
    mov     ax, word ptr [bp+var_posElemCrds+4]
    neg     ax
    mov     word ptr [bp+var_posElemCrds], ax
    mov     ax, word ptr [bp+var_misc1E]
    mov     word ptr [bp+var_posElemCrds+4], ax
    mov     ax, word ptr [bp+var_nextPosElemCrds]
    mov     word ptr [bp+var_misc1E], ax
    mov     ax, word ptr [bp+var_nextPosElemCrds+4]
    neg     ax
    mov     word ptr [bp+var_nextPosElemCrds], ax
    mov     ax, word ptr [bp+var_misc1E]
    jmp     LAB_1e1a_039b
    db 0x90
LAB_1e1a_03ea:
    mov     ax, word ptr [bp+var_posElemCrds]
LAB_1e1a_03ed:
    mov     word ptr [bp+var_absXElemCrds], ax
    cmp     word ptr [bp+var_posElemCrds+4], 0x0
    jge     LAB_1e1a_03fe
    mov     ax, word ptr [bp+var_posElemCrds+4]
    neg     ax
    jmp     LAB_1e1a_0401
    db 0x90
LAB_1e1a_03fe:
    mov     ax, word ptr [bp+var_posElemCrds+4]
LAB_1e1a_0401:
    mov     word ptr [bp+var_absZElemCrds], ax
    mov     ax, word ptr [bp+var_physModel]
    cmp     ax, 0x4a
    jbe     code_bto_root
    jmp     near ptr code_bto_blank
code_bto_root:
    add     ax, ax
    xchg    ax, bx
    jmp     word ptr cs:[bx+bto_branches]
    db 0x90
code_bto_sfLine:
    cmp     byte ptr [state.game_inputmode], 0x0
    jnz     code_bto_road
    cmp     word ptr [bp-0x2c], 0x0
    jle     code_bto_road
    cmp     word ptr [bp-0x28], 0xfe84
    jge     LAB_1e1a_0434
    mov     word ptr [planindex], 0x83
    jmp     code_bto_road
LAB_1e1a_0434:
    cmp     word ptr [bp-0x28], 0xfed4
    jge     code_bto_road
    mov     word ptr [planindex], 0x84
code_bto_road:
    cmp     word ptr [bp-0x32], 0x78
LAB_1e1a_0445:
    jl      code_set_pavement
    jmp     near ptr code_bto_blank
code_set_pavement:
    mov     al, byte ptr [bp-0x12]
    mov     byte ptr [current_surf_type], al
    jmp     near ptr code_bto_blank
    db 0x90
code_bto_crossroad:
    cmp     word ptr [bp-0x32], 0x78
    jl      code_set_pavement
    cmp     word ptr [bp-0x2e], 0x78
    jmp     LAB_1e1a_0445
code_bto_chicaneLR:
    mov     ax, word ptr [bp-0x2c]
    neg     ax
    mov     word ptr [bp-0x2c], ax
code_bto_chicaneRL:
    mov     al, byte ptr [bp-0x12]
    mov     byte ptr [current_surf_type], al
; ...and thus fast grass was born.  
    cmp     word ptr [bp-0x2c], 0x0
    jle     code_bto_lCorner
; An attempt to mirror half of the 
; element along both axes. Broken.  
    mov     ax, word ptr [bp-0x28]
    neg     ax
    mov     word ptr [bp-0x28], ax
    mov     ax, word ptr [bp-0x2c]
    neg     ax
    mov     word ptr [bp-0x2c], ax
; Only difference between small 
; and large corners is radius.  
code_bto_lCorner:
    mov     ax, word ptr [bp-0x28]
    add     ah, 0x4
    push    ax
    mov     ax, word ptr [bp-0x2c]
    add     ah, 0x4
code_lCorner_radius:
    push    ax
    call    far ptr polarRadius2D
    add     sp, 0x4
    mov     word ptr [bp-0xa], ax
    cmp     ax, 0x588
    jg      LAB_1e1a_04a5
    jmp     near ptr code_bto_blank
LAB_1e1a_04a5:
    cmp     ax, 0x678
    jmp     LAB_1e1a_0445
code_bto_sSplitA:
    cmp     word ptr [bp-0x32], 0x78
    jl      code_set_pavement
; Switching origin to bottom-left 
; of tile before tracing the arc.  
code_bto_sCorner:
    mov     ax, word ptr [bp-0x28]
    add     ah, 0x2
    push    ax
    mov     ax, word ptr [bp-0x2c]
    add     ah, 0x2
code_sCorner_radius:
    push    ax
    call    far ptr polarRadius2D
    add     sp, 0x4
    mov     word ptr [bp-0xa], ax
    cmp     ax, 0x188
    jg      LAB_1e1a_04d1
    jmp     near ptr code_bto_blank
LAB_1e1a_04d1:
    cmp     ax, 0x278
    jmp     near ptr LAB_1e1a_0445
    db 0x90
code_bto_sSplitB:
    cmp     word ptr [bp-0x32], 0x78
    jge     LAB_1e1a_04e1
    jmp     near ptr code_set_pavement
LAB_1e1a_04e1:
    mov     ax, word ptr [bp-0x28]
    add     ah, 0x2
    push    ax
    mov     ax, 0x200
    sub     ax, word ptr [bp-0x2c]
    jmp     code_sCorner_radius
code_bto_lSplitA:
    cmp     word ptr [bp-0x2c], 0x188
    jl      code_bto_lCorner
    cmp     word ptr [bp-0x2c], 0x278
    jg      LAB_1e1a_0501
    jmp     near ptr code_set_pavement
LAB_1e1a_0501:
    jmp     code_bto_lCorner
    db 0x90
code_bto_lSplitB:
    cmp     word ptr [bp-0x2c], 0xfd88
    jl      LAB_1e1a_0515
    cmp     word ptr [bp-0x2c], 0xfe78
    jg      LAB_1e1a_0515
    jmp     near ptr code_set_pavement
LAB_1e1a_0515:
    mov     ax, word ptr [bp-0x28]
    add     ah, 0x4
    push    ax
    mov     ax, 0x400
    sub     ax, word ptr [bp-0x2c]
    jmp     near ptr code_lCorner_radius
    db 0x90
code_bto_highEntrance:
    cmp     word ptr [bp-0x2c], 0x0
    jge     LAB_1e1a_0534
    mov     ax, word ptr [bp-0x2c]
    neg     ax
; abs. value  
    jmp     LAB_1e1a_0537
    db 0x90
LAB_1e1a_0534:
    mov     ax, word ptr [bp-0x2c]
; misc1C is abs(x)  
LAB_1e1a_0537:
    mov     word ptr [bp-0x1c], ax
    sub     si, si
    jmp     LAB_1e1a_053f
LAB_1e1a_053e:
    inc     si
LAB_1e1a_053f:
    mov     bx, si
    shl     bx, 0x1
    mov     ax, word ptr [bp-0x28]
    cmp     word ptr [bx+highEntrZBounds1], ax
    jl      LAB_1e1a_053e
    mov     di, si
    shl     di, 0x1
    mov     ax, word ptr [di+highEntrXInnBounds0]
    cmp     word ptr [di+highEntrXInnBounds1], ax
    jz      LAB_1e1a_058e
; This bit implements a line equation 
; in order to find where the wall is.  
    mov     di, si
    shl     di, 0x1
    mov     ax, word ptr [di+highEntrZBounds1]
    sub     ax, word ptr [di+highEntrZBounds0]
    cwd
    push    dx
    push    ax
    mov     ax, word ptr [bp-0x28]
    sub     ax, word ptr [di+highEntrZBounds0]
    cwd
    push    dx
    push    ax
    mov     ax, word ptr [di+highEntrXInnBounds1]
    sub     ax, word ptr [di+highEntrXInnBounds0]
    cwd
    push    dx
    push    ax
    call    far ptr __aFlmul
    push    dx
    push    ax
    call    far ptr __aFldiv
    add     ax, word ptr [di+highEntrXInnBounds0]
; misc1E = wall x coord.  
LAB_1e1a_058e:
    mov     word ptr [bp-0x1e], ax
    mov     di, si
    shl     di, 0x1
    mov     ax, word ptr [di+highEntrXOutBounds0]
    cmp     word ptr [di+highEntrXOutBounds1], ax
    jz      LAB_1e1a_05d3
; Same idea, now with the outer pavement 
; limits.  
    mov     di, si
    shl     di, 0x1
    mov     ax, word ptr [di+highEntrZBounds1]
    sub     ax, word ptr [di+highEntrZBounds0]
    cwd
    push    dx
    push    ax
    mov     ax, word ptr [bp-0x28]
    sub     ax, word ptr [di+highEntrZBounds0]
    cwd
    push    dx
    push    ax
    mov     ax, word ptr [di+highEntrXOutBounds1]
    sub     ax, word ptr [di+highEntrXOutBounds0]
    cwd
    push    dx
    push    ax
    call    far ptr __aFlmul
    push    dx
    push    ax
    call    far ptr __aFldiv
    add     ax, word ptr [di+highEntrXOutBounds0]
; misc22 = outer pavement 
; boundary.  
LAB_1e1a_05d3:
    mov     word ptr [bp-0x22], ax
    mov     ax, word ptr [bp-0x1e]
; misc1C is abs(x)  
    cmp     word ptr [bp-0x1c], ax
    jle     LAB_1e1a_05e9
    mov     ax, word ptr [bp-0x22]
    cmp     word ptr [bp-0x1c], ax
    jge     LAB_1e1a_05e9
    jmp     near ptr code_set_pavement
; About half of the if/else paths in 
; this section are useless.  
LAB_1e1a_05e9:
    cmp     word ptr [bp-0x28], 0x0
    jge     LAB_1e1a_05f2
    jmp     near ptr code_bto_blank
LAB_1e1a_05f2:
    cmp     word ptr [bp-0x1c], 0x78
; to hig. divider  
    jle     LAB_1e1a_05fb
    jmp     near ptr code_bto_blank
LAB_1e1a_05fb:
    mov     word ptr [planindex], 0x1
    cmp     word ptr [bp-0x28], 0x14e
    jl      LAB_1e1a_0620
    cmp     word ptr [bp-0x18], -0x78
    jle     LAB_1e1a_0659
LAB_1e1a_060e:
    cmp     word ptr [bp-0x18], 0x78
    jge     LAB_1e1a_0617
    jmp     near ptr code_bto_blank
LAB_1e1a_0617:
    mov     word ptr [wallindex], 0xba
    jmp     near ptr code_bto_blank
LAB_1e1a_0620:
    cmp     word ptr [bp-0x18], 0x0
    jl      LAB_1e1a_0630
    mov     word ptr [wallindex], 0xbb
    jmp     near ptr code_bto_blank
    db 0x90
LAB_1e1a_0630:
    mov     word ptr [wallindex], 0xbd
    jmp     near ptr code_bto_blank
    db 0x90
code_bto_highway:
    cmp     word ptr [bp-0x32], 0x168
    jle     LAB_1e1a_0644
    jmp     near ptr code_bto_blank
LAB_1e1a_0644:
    cmp     word ptr [bp-0x32], 0x78
    jle     LAB_1e1a_064d
    jmp     near ptr code_set_pavement
LAB_1e1a_064d:
    mov     word ptr [planindex], 0x1
    cmp     word ptr [bp-0x18], -0x78
    jg      LAB_1e1a_060e
LAB_1e1a_0659:
    mov     word ptr [wallindex], 0xbc
    jmp     near ptr code_bto_blank
code_bto_ramp:
    cmp     word ptr [bp-0x28], 0x0
    jle     LAB_1e1a_0670
    mov     byte ptr [byte_4392C], 0x0
    jmp     LAB_1e1a_068b
    db 0x90
LAB_1e1a_0670:
    cmp     word ptr [bp-0x14], 0x0
    jl      LAB_1e1a_068b
    mov     word ptr [wallindex], 0x66
    jmp     LAB_1e1a_068b
code_bto_solidRamp:
    cmp     word ptr [bp-0x14], 0x1dc
    jl      LAB_1e1a_068b
    mov     word ptr [wallindex], 0x67
LAB_1e1a_068b:
    cmp     word ptr [bp-0x18], 0x0
    jge     LAB_1e1a_0698
    mov     ax, word ptr [bp-0x18]
    neg     ax
    jmp     LAB_1e1a_069b
LAB_1e1a_0698:
    mov     ax, word ptr [bp-0x18]
LAB_1e1a_069b:
    cmp     ax, 0x78
    jge     LAB_1e1a_06e6
    mov     word ptr [planindex], 0x3
    mov     al, byte ptr [bp-0x12]
    mov     byte ptr [current_surf_type], al
    cmp     word ptr [wallindex], -0x1
    jz      LAB_1e1a_06b6
    jmp     near ptr code_bto_blank
LAB_1e1a_06b6:
    cmp     word ptr [bp-0x28], 0x0
    jge     LAB_1e1a_06bf
    jmp     near ptr code_bto_blank
LAB_1e1a_06bf:
    cmp     word ptr [bp-0x32], 0x78
    jge     LAB_1e1a_06c8
    jmp     near ptr code_bto_blank
LAB_1e1a_06c8:
    mov     word ptr [wallHeight], 0x2a
    mov     word ptr [elRdWallRelated], 0xfff4
    cmp     word ptr [bp-0x2c], 0x0
    jge     LAB_1e1a_06dd
    jmp     near ptr LAB_1e1a_07cf
LAB_1e1a_06dd:
    mov     word ptr [wallindex], 0x65
    jmp     near ptr code_bto_blank
LAB_1e1a_06e6:
    cmp     byte ptr [byte_4392C], 0x0
    jnz     LAB_1e1a_06f0
    jmp     near ptr code_bto_blank
LAB_1e1a_06f0:
    cmp     word ptr [bp-0x32], 0x78
    jle     LAB_1e1a_06f9
    jmp     near ptr code_bto_blank
LAB_1e1a_06f9:
    mov     word ptr [planindex], 0x3
    cmp     word ptr [wallindex], -0x1
    jz      LAB_1e1a_0709
    jmp     near ptr code_bto_blank
LAB_1e1a_0709:
    mov     word ptr [bp-0x38], 0x200
LAB_1e1a_070e:
    cmp     word ptr [bp-0x2c], 0x0
    jmp     near ptr LAB_1e1a_07ca
    db 0x90
code_bto_overpass:
    mov     bx, word ptr [bp+0x6]
    mov     ax, word ptr [bx+0x2]
    sub     ax, word ptr [terrainHeight]
    cmp     ax, 0x186
    jle     LAB_1e1a_0738
LAB_1e1a_0725:
    mov     byte ptr [byte_4392C], 0x0
code_bto_solidRoad:
    cmp     word ptr [bp-0x18], 0x0
    jge     LAB_1e1a_0758
    mov     ax, word ptr [bp-0x18]
    neg     ax
    jmp     LAB_1e1a_075b
    db 0x90
LAB_1e1a_0738:
    cmp     word ptr [bp-0x2e], 0x78
LAB_1e1a_073c:
    jle     LAB_1e1a_0741
    jmp     near ptr code_bto_blank
LAB_1e1a_0741:
    jmp     near ptr code_set_pavement
code_bto_elevRoad:
    mov     bx, word ptr [bp+0x6]
    mov     ax, word ptr [bx+0x2]
    sub     ax, word ptr [terrainHeight]
    cmp     ax, 0x186
; If <390, ignore bridge  
    jg      LAB_1e1a_0756
    jmp     near ptr code_bto_blank
LAB_1e1a_0756:
    jmp     LAB_1e1a_0725
LAB_1e1a_0758:
    mov     ax, word ptr [bp-0x18]
LAB_1e1a_075b:
    cmp     ax, 0x78
    jg      LAB_1e1a_07a2
    mov     word ptr [planindex], 0x2
    mov     al, byte ptr [bp-0x12]
    mov     byte ptr [current_surf_type], al
    cmp     byte ptr [byte_4392C], 0x0
    jz      LAB_1e1a_078f
    cmp     word ptr [bp-0x14], 0x1dc
    jl      LAB_1e1a_0782
    mov     word ptr [wallindex], 0x67
    jmp     LAB_1e1a_078f
LAB_1e1a_0782:
    cmp     word ptr [bp-0x14], 0xfe24
    jg      LAB_1e1a_078f
    mov     word ptr [wallindex], 0x68
LAB_1e1a_078f:
    cmp     word ptr [bp-0x32], 0x78
    jge     LAB_1e1a_0798
    jmp     near ptr code_bto_blank
LAB_1e1a_0798:
    mov     word ptr [wallHeight], 0x2a
    jmp     near ptr LAB_1e1a_070e
    db 0x90
LAB_1e1a_07a2:
    cmp     byte ptr [byte_4392C], 0x0
    jnz     LAB_1e1a_07ac
    jmp     near ptr code_bto_blank
LAB_1e1a_07ac:
    cmp     word ptr [bp-0x32], 0x78
    jle     LAB_1e1a_07b5
    jmp     near ptr code_bto_blank
LAB_1e1a_07b5:
    mov     word ptr [planindex], 0x2
    mov     word ptr [wallHeight], 0x2a
    mov     word ptr [bp-0x38], 0x200
    cmp     word ptr [bp-0x18], 0x0
LAB_1e1a_07ca:
    jl      LAB_1e1a_07cf
    jmp     near ptr LAB_1e1a_06dd
LAB_1e1a_07cf:
    mov     word ptr [wallindex], 0x64
    jmp     near ptr code_bto_blank
code_bto_elevCorner:
    mov     bx, word ptr [bp+0x6]
    mov     ax, word ptr [bx+0x2]
    sub     ax, word ptr [terrainHeight]
    cmp     ax, 0x186
    jg      LAB_1e1a_07ea
    jmp     near ptr code_bto_blank
LAB_1e1a_07ea:
    mov     ax, word ptr [bp-0x28]
    add     ah, 0x4
    push    ax
    mov     ax, word ptr [bp-0x2c]
    add     ah, 0x4
    push    ax
    call    far ptr polarRadius2D
    add     sp, 0x4
    sub     ax, 0x600
; delta from centerline  
    mov     word ptr [bp-0xa], ax
    cmp     ax, 0xff6a
    jg      LAB_1e1a_080e
    jmp     near ptr code_bto_blank
LAB_1e1a_080e:
    cmp     ax, 0x96
    jl      LAB_1e1a_0816
    jmp     near ptr code_bto_blank
LAB_1e1a_0816:
    mov     al, byte ptr [bp-0x12]
    mov     byte ptr [current_surf_type], al
    mov     word ptr [planindex], 0x2
    mov     byte ptr [byte_4392C], 0x0
    cmp     word ptr [bp-0xa], -0x6c
    jl      LAB_1e1a_0836
    cmp     word ptr [bp-0xa], 0x6c
    jg      LAB_1e1a_0836
    jmp     near ptr code_bto_blank
; This code selects from the polar 
; coordinates an adequate wall 
; index for the current elevated 
; corner segment.  
LAB_1e1a_0836:
    mov     ax, word ptr [bp-0x28]
    add     ah, 0x4
    push    ax
    mov     ax, word ptr [bp-0x2c]
    add     ah, 0x4
    push    ax
    call    far ptr polarAngle
    add     sp, 0x4
    sub     ah, ah
    mov     cx, 0x12
    imul    cx
    mov     word ptr [bp-0x22], ax
    mov     cl, 0x8
    sar     ax, cl
    sub     ax, 0x11
    neg     ax
    mov     word ptr [bp-0x1e], ax
    mov     word ptr [wallHeight], 0x2a
    mov     word ptr [elRdWallRelated], 0xfff4
    cmp     word ptr [bp-0xa], 0x0
    jge     LAB_1e1a_087a
    add     ax, 0x69
    jmp     LAB_1e1a_0880
    db 0x90
LAB_1e1a_087a:
    mov     ax, word ptr [bp-0x1e]
    add     ax, 0x7b
LAB_1e1a_0880:
    mov     word ptr [wallindex], ax
    jmp     near ptr code_bto_blank
code_bto_bankEntranceA:
    mov     word ptr [bp-0x1c], 0x23
    mov     word ptr [bp-0x1e], 0x0
; si is an angle. Values for 
; types A and B are pi apart.  
    mov     si, 0xfd60
    jmp     LAB_1e1a_08a3
    db 0x90
code_bto_bankEntranceB:
    mov     word ptr [bp-0x1c], 0x19
    mov     word ptr [bp-0x1e], 0x1
    mov     si, 0xa0
; misc1C will be the planindex. 
; misc1E is an "internal" plan index.  
LAB_1e1a_08a3:
    cmp     word ptr [bp-0x32], 0x78
    jle     LAB_1e1a_08ac
    jmp     near ptr code_bto_blank
LAB_1e1a_08ac:
    cmp     word ptr [bp-0x1e], 0x0
    jnz     LAB_1e1a_08c6
    cmp     word ptr [bp-0x18], -0x78
    jg      LAB_1e1a_08c6
    mov     word ptr [bp-0x38], 0x200
    mov     word ptr [wallindex], 0x64
    jmp     LAB_1e1a_08dd
    db 0x90
LAB_1e1a_08c6:
    cmp     word ptr [bp-0x1e], 0x0
    jz      LAB_1e1a_08dd
    cmp     word ptr [bp-0x18], 0x78
    jl      LAB_1e1a_08dd
    mov     word ptr [bp-0x38], 0x200
    mov     word ptr [wallindex], 0x65
LAB_1e1a_08dd:
    mov     al, byte ptr [bp-0x12]
    mov     byte ptr [current_surf_type], al
    cmp     word ptr [bp-0x28], 0xfeb2
    jge     LAB_1e1a_08f0
    mov     ax, word ptr [bp-0x1c]
    jmp     LAB_1e1a_08fd
    db 0x90
LAB_1e1a_08f0:
    cmp     word ptr [bp-0x28], 0x14e
    jl      LAB_1e1a_0904
    mov     ax, word ptr [bp-0x1c]
    add     ax, 0x9
LAB_1e1a_08fd:
    mov     word ptr [planindex], ax
    jmp     near ptr code_bto_blank
    db 0x90
LAB_1e1a_0904:
    cmp     word ptr [bp-0x28], 0xff58
    jge     LAB_1e1a_091a
    mov     ax, word ptr [bp-0x1c]
    inc     ax
    mov     word ptr [planindex], ax
    mov     word ptr [bp-0x1e], 0x0
    jmp     LAB_1e1a_095d
    db 0x90
LAB_1e1a_091a:
    cmp     word ptr [bp-0x28], 0x0
    jge     LAB_1e1a_0930
    mov     ax, word ptr [bp-0x1c]
    add     ax, 0x3
    mov     word ptr [planindex], ax
    mov     word ptr [bp-0x1e], 0x1
    jmp     LAB_1e1a_095d
LAB_1e1a_0930:
    cmp     word ptr [bp-0x28], 0xa8
    jge     LAB_1e1a_0948
    mov     ax, word ptr [bp-0x1c]
    add     ax, 0x5
    mov     word ptr [planindex], ax
    mov     word ptr [bp-0x1e], 0x2
    jmp     LAB_1e1a_095d
    db 0x90
LAB_1e1a_0948:
    cmp     word ptr [bp-0x28], 0x14e
    jge     LAB_1e1a_095d
    mov     ax, word ptr [bp-0x1c]
    add     ax, 0x7
    mov     word ptr [planindex], ax
    mov     word ptr [bp-0x1e], 0x3
; This block adjusts planindex to 
; choose the correct plane from 
; the triangulated pairs which make 
; up a banked road entrance.  
LAB_1e1a_095d:
    mov     ax, word ptr [bp-0x28]
    mov     bx, word ptr [bp-0x1e]
    shl     bx, 0x1
    sub     ax, word ptr [bx+bkRdEntr_triang_zAdjust]
    push    ax
    push    si
    call    far ptr sin_fast
    add     sp, 0x2
    push    ax
    call    far ptr multiply_and_scale
    add     sp, 0x4
    push    word ptr [bp-0x2c]
    push    si
    mov     di, ax
    call    far ptr cos_fast
    add     sp, 0x2
    push    ax
    call    far ptr multiply_and_scale
    add     sp, 0x4
    add     ax, di
    mov     word ptr [bp-0x22], ax
    or      ax, ax
    jg      LAB_1e1a_099f
    jmp     near ptr code_bto_blank
LAB_1e1a_099f:
    inc     word ptr [planindex]
    jmp     near ptr code_bto_blank
code_bto_bankRoad:
    cmp     word ptr [bp-0x32], 0x78
    jle     LAB_1e1a_09af
    jmp     near ptr code_bto_blank
LAB_1e1a_09af:
    mov     al, byte ptr [bp-0x12]
    mov     byte ptr [current_surf_type], al
    mov     word ptr [planindex], 0x6
    cmp     word ptr [bp-0x18], 0x78
    jge     LAB_1e1a_09c4
    jmp     near ptr code_bto_blank
LAB_1e1a_09c4:
    mov     word ptr [bp-0x38], 0x200
    jmp     near ptr LAB_1e1a_06dd
code_bto_bankCorner:
    mov     ax, word ptr [bp-0x28]
    add     ah, 0x4
    push    ax
    mov     ax, word ptr [bp-0x2c]
    add     ah, 0x4
    push    ax
    call    far ptr polarRadius2D
    add     sp, 0x4
    sub     ax, 0x600
    mov     word ptr [bp-0xa], ax
    cmp     ax, 0xff88
    jg      LAB_1e1a_09f0
    jmp     near ptr code_bto_blank
LAB_1e1a_09f0:
    cmp     ax, 0x7e
    jl      LAB_1e1a_09f8
    jmp     near ptr code_bto_blank
; misc1E is the "internal" plan and wall 
; index.  
LAB_1e1a_09f8:
    mov     ax, word ptr [bp-0x28]
    add     ah, 0x4
    push    ax
    mov     ax, word ptr [bp-0x2c]
    add     ah, 0x4
    push    ax
    call    far ptr polarAngle
    add     sp, 0x4
    sub     ah, ah
    mov     cx, 0x12
    imul    cx
    mov     word ptr [bp-0x22], ax
    mov     cl, 0x8
    sar     ax, cl
    sub     ax, 0x11
    neg     ax
    mov     word ptr [bp-0x1e], ax
    add     ax, 0x7
    mov     word ptr [planindex], ax
    mov     al, byte ptr [bp-0x12]
    mov     byte ptr [current_surf_type], al
    cmp     word ptr [bp-0xa], 0x66
    jg      LAB_1e1a_0a39
    jmp     near ptr code_bto_blank
LAB_1e1a_0a39:
    mov     word ptr [bp-0x38], 0x200
    mov     ax, word ptr [bp-0x1e]
    add     ax, 0x7b
    mov     word ptr [wallindex], ax
LAB_1e1a_0a47:
    mov     byte ptr [byte_4392C], 0x0
    jmp     near ptr code_bto_blank
    db 0x90
code_bto_loop:
    cmp     word ptr [bp-0x28], 0x0
    jge     LAB_1e1a_0a6a
; back leg = x and z mirror 
; of front leg.  
    mov     word ptr [bp-0x1c], 0x33
    mov     ax, word ptr [bp-0x2c]
    neg     ax
    mov     word ptr [bp-0x6], ax
    mov     ax, word ptr [bp-0x28]
    neg     ax
    jmp     LAB_1e1a_0a78
; misc1C = planindex. This code 
; chooses the "leg" of the loop.  
LAB_1e1a_0a6a:
    mov     word ptr [bp-0x1c], 0x2d
    mov     ax, word ptr [bp-0x2c]
    mov     word ptr [bp-0x6], ax
    mov     ax, word ptr [bp-0x28]
LAB_1e1a_0a78:
    mov     word ptr [bp-0x2], ax
    mov     ax, word ptr [loopSurface_maxZ]
    dec     ax
    cmp     word ptr [bp-0x2], ax
    jle     LAB_1e1a_0a98
    mov     ax, word ptr [loopSurface_maxZ]
    add     ax, 0x64
    cmp     word ptr [bp-0x2], ax
    jle     LAB_1e1a_0a92
    jmp     near ptr code_bto_loopBase
LAB_1e1a_0a92:
    mov     ax, word ptr [loopSurface_maxZ]
    dec     ax
    jmp     LAB_1e1a_0a9b
LAB_1e1a_0a98:
    mov     ax, word ptr [bp-0x2]
; misc1E = abs(z)  
LAB_1e1a_0a9b:
    mov     word ptr [bp-0x1e], ax
    sub     si, si
    jmp     LAB_1e1a_0aa3
LAB_1e1a_0aa2:
    inc     si
; Chooses the slice of the loop.  
LAB_1e1a_0aa3:
    mov     bx, si
    shl     bx, 0x1
    mov     ax, word ptr [bp-0x1e]
    cmp     word ptr [bx+loopSurface_ZBounds1], ax
    jl      LAB_1e1a_0aa2
    mov     bx, word ptr [bp+0x6]
    mov     ax, word ptr [bx+0x2]
    sub     ax, word ptr [terrainHeight]
    cmp     ax, 0x20c                          ; upside-down limit
    jg      LAB_1e1a_0ac2
    jmp     near ptr LAB_1e1a_0b64
LAB_1e1a_0ac2:
    mov     ax, 0x5
    sub     ax, si
    mov     si, ax
    mov     di, si
    shl     di, 0x1
    mov     ax, word ptr [bp-0x6]
    cmp     word ptr [di+loopSurface_XBounds0], ax
    jle     LAB_1e1a_0ad9
    jmp     near ptr code_bto_blank
LAB_1e1a_0ad9:
    mov     ax, word ptr [di+loopSurface_XBounds1]
    add     ax, 0x190
    cmp     ax, word ptr [bp-0x6]
    jge     LAB_1e1a_0ae8
    jmp     near ptr code_bto_blank
LAB_1e1a_0ae8:
    mov     ax, word ptr [bp-0x6]
    cmp     word ptr [di+loopSurface_XBounds1], ax
    jge     LAB_1e1a_0afd
    mov     ax, word ptr [di+loopSurface_XBounds0]
    add     ax, 0x190
    cmp     ax, word ptr [bp-0x6]
    jg      LAB_1e1a_0b53
; Line equation for loop x bounds, lower 
; half. misc3C gets the x limits.  
LAB_1e1a_0afd:
    mov     di, si
    shl     di, 0x1
    mov     ax, word ptr [di+loopSurface_ZBounds1]
    sub     ax, word ptr [di+loopSurface_ZBounds0]
    cwd
    push    dx
    push    ax
    mov     ax, word ptr [di+loopSurface_ZBounds0]
    sub     ax, word ptr [bp-0x1e]
    cwd
    push    dx
    push    ax
    mov     ax, word ptr [di+loopSurface_XBounds0]
    sub     ax, word ptr [di+loopSurface_XBounds1]
    cwd
    push    dx
    push    ax
    call    far ptr __aFlmul
    push    dx
    push    ax
    call    far ptr __aFldiv
    mov     word ptr [bp-0x22], ax
    mov     ax, word ptr [di+loopSurface_XBounds0]
    add     ax, word ptr [bp-0x22]
    mov     word ptr [bp-0x3c], ax
    mov     ax, word ptr [bp-0x6]
    cmp     word ptr [bp-0x3c], ax
    jl      LAB_1e1a_0b45
    jmp     near ptr code_bto_blank
LAB_1e1a_0b45:
    mov     ax, word ptr [bp-0x3c]
    add     ax, 0x190
    cmp     ax, word ptr [bp-0x6]
    jg      LAB_1e1a_0b53
    jmp     near ptr code_bto_blank
LAB_1e1a_0b53:
    mov     ax, word ptr [bp-0x1c]
    add     ax, si
    mov     word ptr [planindex], ax
    mov     al, byte ptr [bp-0x12]
    mov     byte ptr [current_surf_type], al
    jmp     near ptr LAB_1e1a_0a47
LAB_1e1a_0b64:
    cmp     si, 0x1
    jle     LAB_1e1a_0b7b
    mov     bx, word ptr [bp+0x6]
    mov     ax, word ptr [bx+0x2]
    sub     ax, word ptr [terrainHeight]
    cmp     ax, 0x64
    jge     LAB_1e1a_0b7b
    jmp     near ptr code_bto_loopBase
LAB_1e1a_0b7b:
    mov     di, si
    shl     di, 0x1
    mov     ax, word ptr [bp-0x6]
    cmp     word ptr [di+loopSurface_XBounds0], ax
    jle     LAB_1e1a_0b8b
    jmp     near ptr code_bto_loopBase
LAB_1e1a_0b8b:
    mov     ax, word ptr [di+loopSurface_XBounds1]
    add     ax, 0x190
    cmp     ax, word ptr [bp-0x6]
    jl      code_bto_loopBase
    mov     ax, word ptr [bp-0x6]
    cmp     word ptr [di+loopSurface_XBounds1], ax
    jge     LAB_1e1a_0bac
    mov     ax, word ptr [di+loopSurface_XBounds0]
    add     ax, 0x190
    cmp     ax, word ptr [bp-0x6]
    jg      LAB_1e1a_0b53
LAB_1e1a_0bac:
    mov     di, si
    shl     di, 0x1
    mov     ax, word ptr [di+loopSurface_XBounds0]
    cmp     word ptr [di+loopSurface_XBounds1], ax
    jz      code_bto_loopBase
; Line equation for loop x bounds, lower 
; half. misc3C gets the x limits.  
    mov     di, si
    shl     di, 0x1
    mov     ax, word ptr [di+loopSurface_ZBounds1]
    sub     ax, word ptr [di+loopSurface_ZBounds0]
    cwd
    push    dx
    push    ax
    mov     ax, word ptr [di+loopSurface_ZBounds0]
    sub     ax, word ptr [bp-0x1e]
    cwd
    push    dx
    push    ax
    mov     ax, word ptr [di+loopSurface_XBounds0]
    sub     ax, word ptr [di+loopSurface_XBounds1]
    cwd
    push    dx
    push    ax
    call    far ptr __aFlmul
    push    dx
    push    ax
    call    far ptr __aFldiv
    mov     word ptr [bp-0x22], ax
    mov     ax, word ptr [di+loopSurface_XBounds0]
    add     ax, word ptr [bp-0x22]
    mov     word ptr [bp-0x3c], ax
    mov     ax, word ptr [bp-0x6]
    cmp     word ptr [bp-0x3c], ax
    jge     code_bto_loopBase
    mov     ax, word ptr [bp-0x3c]
; 190h = loop width  
    add     ax, 0x190
    cmp     ax, word ptr [bp-0x6]
    jle     code_bto_loopBase
    jmp     near ptr LAB_1e1a_0b53
code_bto_loopBase:
    sub     si, si
    jmp     LAB_1e1a_0c13
    db 0x90
LAB_1e1a_0c12:
    inc     si
LAB_1e1a_0c13:
    mov     bx, si
    shl     bx, 0x1
    mov     ax, word ptr [bp-0x2]
    cmp     word ptr [bx+loopBase_ZBounds1], ax
    jl      LAB_1e1a_0c12
; Line equation for the base of the loop.  
    mov     di, si
    shl     di, 0x1
    mov     ax, word ptr [di+loopBase_ZBounds1]
    sub     ax, word ptr [di+loopBase_ZBounds0]
    cwd
    push    dx
    push    ax
    mov     ax, word ptr [bp-0x2]
    sub     ax, word ptr [di+loopBase_ZBounds0]
    cwd
    push    dx
    push    ax
    mov     ax, word ptr [di+loopBase_InnXBounds1]
    sub     ax, word ptr [di+loopBae_InnXBounds0]
    cwd
    push    dx
    push    ax
    call    far ptr __aFlmul
    push    dx
    push    ax
    call    far ptr __aFldiv
    add     ax, word ptr [di+loopBae_InnXBounds0]
    mov     word ptr [bp-0x1e], ax
    mov     ax, word ptr [di+loopBase_ZBounds1]
    sub     ax, word ptr [di+loopBase_ZBounds0]
    cwd
    push    dx
    push    ax
    mov     ax, word ptr [bp-0x2]
    sub     ax, word ptr [di+loopBase_ZBounds0]
    cwd
    push    dx
    push    ax
    mov     ax, word ptr [di+loopBase_OutXBounds1]
    sub     ax, word ptr [di+loopBase_OutXBounds0]
    cwd
    push    dx
    push    ax
    call    far ptr __aFlmul
    push    dx
    push    ax
    call    far ptr __aFldiv
    add     ax, word ptr [di+loopBase_OutXBounds0]
    mov     word ptr [bp-0x22], ax
    mov     ax, word ptr [bp-0x1e]
    cmp     word ptr [bp-0x6], ax
    jge     LAB_1e1a_0c95
    jmp     near ptr code_bto_blank
LAB_1e1a_0c95:
    mov     ax, word ptr [bp-0x22]
    cmp     word ptr [bp-0x6], ax
    jmp     near ptr LAB_1e1a_073c
code_bto_tunnel:
    mov     bx, word ptr [bp+0x6]
    mov     ax, word ptr [bx+0x2]
    sub     ax, word ptr [terrainHeight]
    cmp     ax, 0x90
    jge     LAB_1e1a_0cbc
    mov     bx, word ptr [bp+0x8]
    mov     ax, word ptr [bx+0x2]
    sub     ax, word ptr [terrainHeight]
    cmp     ax, 0x90
    jl      LAB_1e1a_0cd6
LAB_1e1a_0cbc:
    cmp     word ptr [bp-0x32], 0x10e
    jl      LAB_1e1a_0cc6
    jmp     near ptr code_bto_blank
LAB_1e1a_0cc6:
    mov     al, byte ptr [bp-0x12]
    mov     byte ptr [current_surf_type], al
    mov     word ptr [planindex], 0x85
    jmp     near ptr code_bto_blank
    db 0x90
LAB_1e1a_0cd6:
    cmp     word ptr [bp-0x32], 0x78
    jge     LAB_1e1a_0ce2
    mov     al, byte ptr [bp-0x12]
    mov     byte ptr [current_surf_type], al
LAB_1e1a_0ce2:
    cmp     word ptr [bp-0x2c], 0x78
    jl      LAB_1e1a_0d26
    cmp     word ptr [bp-0x2c], 0x10e
    jg      LAB_1e1a_0d26
    mov     word ptr [wallHeight], 0x90
    cmp     word ptr [bp-0x14], 0xfe00
    jle     LAB_1e1a_0d46
    cmp     word ptr [bp-0x14], 0x200
    jge     LAB_1e1a_0d57
    cmp     word ptr [bp-0x18], 0x78
    jg      LAB_1e1a_0d12
    mov     word ptr [wallindex], 0x98
    jmp     near ptr code_bto_blank
LAB_1e1a_0d12:
    cmp     word ptr [bp-0x18], 0x10e
    jge     LAB_1e1a_0d1c
    jmp     near ptr code_bto_blank
LAB_1e1a_0d1c:
    mov     word ptr [wallindex], 0x96
    jmp     near ptr code_bto_blank
    db 0x90
LAB_1e1a_0d26:
    cmp     word ptr [bp-0x2c], -0x78
    jle     LAB_1e1a_0d2f
    jmp     near ptr code_bto_blank
LAB_1e1a_0d2f:
    cmp     word ptr [bp-0x2c], 0xfef2
    jge     LAB_1e1a_0d39
    jmp     near ptr code_bto_blank
LAB_1e1a_0d39:
    mov     word ptr [wallHeight], 0x90
    cmp     word ptr [bp-0x14], 0xfe00
    jg      LAB_1e1a_0d50
LAB_1e1a_0d46:
    mov     word ptr [wallindex], 0x9a
    jmp     near ptr code_bto_blank
    db 0x90
LAB_1e1a_0d50:
    cmp     word ptr [bp-0x14], 0x200
    jl      LAB_1e1a_0d60
LAB_1e1a_0d57:
    mov     word ptr [wallindex], 0x99
    jmp     near ptr code_bto_blank
LAB_1e1a_0d60:
    cmp     word ptr [bp-0x18], -0x78
    jl      LAB_1e1a_0d70
    mov     word ptr [wallindex], 0x97
    jmp     near ptr code_bto_blank
    db 0x90
LAB_1e1a_0d70:
    cmp     word ptr [bp-0x18], 0xfef2
    jle     LAB_1e1a_0d7a
    jmp     near ptr code_bto_blank
LAB_1e1a_0d7a:
    mov     word ptr [wallindex], 0x95
    jmp     near ptr code_bto_blank
    db 0x90
code_bto_pipeEntrance:
    cmp     word ptr [bp-0x18], 0x0
    jge     LAB_1e1a_0d92
    mov     ax, word ptr [bp-0x18]
    neg     ax
    jmp     LAB_1e1a_0d95
    db 0x90
LAB_1e1a_0d92:
    mov     ax, word ptr [bp-0x18]
LAB_1e1a_0d95:
    cmp     ax, 0x73
    jl      LAB_1e1a_0dc0
; >A4h is outside pipe wall  
    cmp     word ptr [bp-0x32], 0xa4
    jg      LAB_1e1a_0dc0
; Height of pipe wall entrance. 
; Since there is no line equation 
; to provide variable heights, we 
; have the annoying invisible 
; pipe entrance wall bug.  
    mov     word ptr [wallHeight], 0x97
    cmp     word ptr [bp-0x18], 0x0
    jle     LAB_1e1a_0db6
    mov     word ptr [wallindex], 0x9f
    jmp     near ptr code_bto_blank
LAB_1e1a_0db6:
    mov     word ptr [wallindex], 0xa0
    jmp     near ptr code_bto_blank
    db 0x90
LAB_1e1a_0dc0:
    cmp     word ptr [bp-0x32], 0x73
    jl      LAB_1e1a_0dc9
    jmp     near ptr code_bto_blank
LAB_1e1a_0dc9:
    mov     bx, word ptr [bp+0x6]
    mov     ax, word ptr [bx+0x2]
    sub     ax, word ptr [terrainHeight]
    cmp     ax, 0xab
    jl      LAB_1e1a_0ddb
    jmp     near ptr code_bto_blank
LAB_1e1a_0ddb:
    mov     al, byte ptr [bp-0x12]
    mov     byte ptr [current_surf_type], al
    cmp     word ptr [bp-0x32], 0x1f
    jge     LAB_1e1a_0df0
    mov     word ptr [planindex], 0x46
    jmp     near ptr code_bto_blank
LAB_1e1a_0df0:
    cmp     word ptr [bp-0x2c], -0x54
    jge     LAB_1e1a_0e06
    mov     word ptr [planindex], 0x49
    mov     word ptr [bp-0x1e], 0xff9c
    mov     si, 0xfffb
    jmp     LAB_1e1a_0e40
LAB_1e1a_0e06:
    cmp     word ptr [bp-0x2c], 0x0
    jge     LAB_1e1a_0e1c
    mov     word ptr [planindex], 0x47
    mov     word ptr [bp-0x1e], 0xffc7
    mov     si, 0xfff8
    jmp     LAB_1e1a_0e40
LAB_1e1a_0e1c:
    cmp     word ptr [bp-0x2c], 0x54
    jle     LAB_1e1a_0e32
    mov     word ptr [planindex], 0x4d
    mov     word ptr [bp-0x1e], 0x64
    mov     si, 0x5
    jmp     LAB_1e1a_0e40
LAB_1e1a_0e32:
    mov     word ptr [planindex], 0x4b
    mov     word ptr [bp-0x1e], 0x39
    mov     si, 0x8
; pipe entrance plan triangulation.  
LAB_1e1a_0e40:
    push    word ptr [bp-0x28]
    push    si
    call    far ptr sin_fast
    add     sp, 0x2
    push    ax
    call    far ptr multiply_and_scale
    add     sp, 0x4
    mov     cx, word ptr [bp-0x2c]
    sub     cx, word ptr [bp-0x1e]
    push    cx
    push    si
    mov     di, ax
    call    far ptr cos_fast
    add     sp, 0x2
    push    ax
    call    far ptr multiply_and_scale
    add     sp, 0x4
    add     ax, di
    mov     word ptr [bp-0x22], ax
    or      ax, ax
    jl      LAB_1e1a_0e7c
    jmp     near ptr code_bto_blank
LAB_1e1a_0e7c:
    jmp     near ptr LAB_1e1a_099f
    db 0x90
; misc22 is obstacle flag.  
code_bto_halfPipe:
    mov     word ptr [bp-0x22], 0x1
    jmp     LAB_1e1a_0e8d
    db 0x90
code_bto_pipe:
    mov     word ptr [bp-0x22], 0x0
LAB_1e1a_0e8d:
    cmp     word ptr [bp-0x18], 0x0
    jge     LAB_1e1a_0e9a
    mov     ax, word ptr [bp-0x18]
    neg     ax
    jmp     LAB_1e1a_0e9d
LAB_1e1a_0e9a:
    mov     ax, word ptr [bp-0x18]
LAB_1e1a_0e9d:
    cmp     ax, 0xa4
    jl      LAB_1e1a_0ec8
    cmp     word ptr [bp-0x32], 0xa4
    jg      LAB_1e1a_0ec8
; Height of pipe wall.  
    mov     word ptr [wallHeight], 0x97
    cmp     word ptr [bp-0x18], 0x0
    jle     LAB_1e1a_0ebe
    mov     word ptr [wallindex], 0x9b
    jmp     near ptr code_bto_blank
LAB_1e1a_0ebe:
    mov     word ptr [wallindex], 0x9c
    jmp     near ptr code_bto_blank
    db 0x90
LAB_1e1a_0ec8:
    cmp     word ptr [bp-0x32], 0xa4
    jl      LAB_1e1a_0ed2
    jmp     near ptr code_bto_blank
LAB_1e1a_0ed2:
    mov     bx, word ptr [bp+0x6]
    mov     ax, word ptr [bx+0x2]
    sub     ax, word ptr [terrainHeight]
    cmp     ax, 0x109
    jl      LAB_1e1a_0ee4
    jmp     near ptr code_bto_blank
LAB_1e1a_0ee4:
    cmp     word ptr [bp-0x32], 0x82
    jge     LAB_1e1a_0ef1
    mov     al, byte ptr [bp-0x12]
    mov     byte ptr [current_surf_type], al
; 97h = height of maximum z. 
; Unsurprisingly, this is almost 
; the same as the cork l/r.  
LAB_1e1a_0ef1:
    mov     ax, word ptr [bx+0x2]
    sub     ax, word ptr [terrainHeight]
    cmp     ax, 0x97
    jle     LAB_1e1a_0f04
    mov     word ptr [bp-0x1e], 0x1
    jmp     LAB_1e1a_0f09
LAB_1e1a_0f04:
    mov     word ptr [bp-0x1e], 0x0
LAB_1e1a_0f09:
    cmp     word ptr [bp-0x22], 0x0
    jz      LAB_1e1a_0f48
; with obstacle.  
    cmp     word ptr [bp-0x1e], 0x0
    jnz     LAB_1e1a_0f48
    cmp     word ptr [bp-0x32], 0x54
    jg      LAB_1e1a_0f48
    cmp     word ptr [bp-0x2e], 0x4b
    jg      LAB_1e1a_0f48
; obstacle plan.  
    mov     word ptr [planindex], 0x45
    cmp     word ptr [bp-0x14], -0x4b
    jg      LAB_1e1a_0f36
    mov     word ptr [wallindex], 0x9d
    jmp     near ptr code_bto_blank
LAB_1e1a_0f36:
    cmp     word ptr [bp-0x14], 0x4b
    jge     LAB_1e1a_0f3f
    jmp     near ptr code_bto_blank
LAB_1e1a_0f3f:
    mov     word ptr [wallindex], 0x9e
    jmp     near ptr code_bto_blank
LAB_1e1a_0f48:
    mov     bx, word ptr [bp+0x6]
    mov     ax, word ptr [bx+0x2]
    sub     ax, word ptr [terrainHeight]
    cmp     ax, 0x58
    jle     LAB_1e1a_0f76
    cmp     word ptr [bp-0x1e], 0x0
    jnz     LAB_1e1a_0f76
    cmp     word ptr [bp-0x2c], 0x0
    jge     LAB_1e1a_0f6c
    mov     word ptr [planindex], 0x3c
    jmp     near ptr code_bto_blank
LAB_1e1a_0f6c:
    mov     word ptr [planindex], 0x42
    jmp     near ptr code_bto_blank
    db 0x90
LAB_1e1a_0f76:
    cmp     word ptr [bp-0x32], 0x1f
    jge     LAB_1e1a_0f96
    cmp     word ptr [bp-0x1e], 0x0
    jz      LAB_1e1a_0f8c
    mov     word ptr [planindex], 0x3f
    jmp     near ptr code_bto_blank
    db 0x90
LAB_1e1a_0f8c:
    mov     word ptr [planindex], 0x39
    jmp     near ptr code_bto_blank
    db 0x90
LAB_1e1a_0f96:
    cmp     word ptr [bp-0x2c], -0x54
    jge     LAB_1e1a_0fb6
    cmp     word ptr [bp-0x1e], 0x0
    jz      LAB_1e1a_0fac
    mov     word ptr [planindex], 0x3d
    jmp     near ptr code_bto_blank
    db 0x90
LAB_1e1a_0fac:
    mov     word ptr [planindex], 0x3b
    jmp     near ptr code_bto_blank
    db 0x90
LAB_1e1a_0fb6:
    cmp     word ptr [bp-0x2c], 0x0
    jge     LAB_1e1a_0fd6
    cmp     word ptr [bp-0x1e], 0x0
    jz      LAB_1e1a_0fcc
    mov     word ptr [planindex], 0x3e
    jmp     near ptr code_bto_blank
    db 0x90
LAB_1e1a_0fcc:
    mov     word ptr [planindex], 0x3a
    jmp     near ptr code_bto_blank
    db 0x90
LAB_1e1a_0fd6:
    cmp     word ptr [bp-0x2c], 0x54
    jle     LAB_1e1a_0ff6
    cmp     word ptr [bp-0x1e], 0x0
    jz      LAB_1e1a_0fec
    mov     word ptr [planindex], 0x41
    jmp     near ptr code_bto_blank
    db 0x90
LAB_1e1a_0fec:
    mov     word ptr [planindex], 0x43
    jmp     near ptr code_bto_blank
    db 0x90
LAB_1e1a_0ff6:
    cmp     word ptr [bp-0x1e], 0x0
    jz      LAB_1e1a_1006
    mov     word ptr [planindex], 0x40
    jmp     near ptr code_bto_blank
    db 0x90
LAB_1e1a_1006:
    mov     word ptr [planindex], 0x44
    jmp     near ptr code_bto_blank
    db 0x90
code_bto_corkLr:
    cmp     word ptr [bp-0x32], 0x96
    jl      LAB_1e1a_101a
    jmp     near ptr code_bto_blank
LAB_1e1a_101a:
    mov     bx, word ptr [bp+0x6]
    mov     ax, word ptr [bx+0x2]
    sub     ax, word ptr [terrainHeight]
    cmp     ax, 0x109
    jl      LAB_1e1a_102c
    jmp     near ptr code_bto_blank
LAB_1e1a_102c:
    mov     al, byte ptr [bp-0x12]
    mov     byte ptr [current_surf_type], al
    mov     ax, word ptr [bx+0x2]
    sub     ax, word ptr [terrainHeight]
    cmp     ax, 0x97
; 97h is the height of maximum x. 
; This is analogous to the loop code.  
    jle     LAB_1e1a_1046
; misc1E = upper half flag.  
    mov     word ptr [bp-0x1e], 0x1
    jmp     LAB_1e1a_104b
    db 0x90
LAB_1e1a_1046:
    mov     word ptr [bp-0x1e], 0x0
; misc22 = plan selector  
LAB_1e1a_104b:
    mov     word ptr [bp-0x22], 0x0
    mov     ax, word ptr [bx+0x2]
    sub     ax, word ptr [terrainHeight]
    cmp     ax, 0x58
    jle     LAB_1e1a_107a
    cmp     word ptr [bp-0x1e], 0x0
    jnz     LAB_1e1a_107a
    cmp     word ptr [bp-0x2c], 0x0
    jge     LAB_1e1a_1072
    mov     word ptr [bp-0x22], 0x3
    jmp     near ptr LAB_1e1a_10f5
    db 2 dup (0x90)
LAB_1e1a_1072:
    mov     word ptr [bp-0x22], 0x9
    jmp     LAB_1e1a_10f5
    db 0x90
LAB_1e1a_107a:
    cmp     word ptr [bp-0x32], 0x1f
    jge     LAB_1e1a_108e
    cmp     word ptr [bp-0x1e], 0x0
    jz      LAB_1e1a_10f5
    mov     word ptr [bp-0x22], 0x6
    jmp     LAB_1e1a_10f5
    db 0x90
LAB_1e1a_108e:
    cmp     word ptr [bp-0x2c], -0x54
    jge     LAB_1e1a_10aa
    cmp     word ptr [bp-0x1e], 0x0
    jz      LAB_1e1a_10a2
    mov     word ptr [bp-0x22], 0x4
    jmp     LAB_1e1a_10f5
    db 0x90
LAB_1e1a_10a2:
    mov     word ptr [bp-0x22], 0x2
    jmp     LAB_1e1a_10f5
    db 0x90
LAB_1e1a_10aa:
    cmp     word ptr [bp-0x2c], 0x0
    jge     LAB_1e1a_10c6
    cmp     word ptr [bp-0x1e], 0x0
    jz      LAB_1e1a_10be
    mov     word ptr [bp-0x22], 0x5
    jmp     LAB_1e1a_10f5
    db 0x90
LAB_1e1a_10be:
    mov     word ptr [bp-0x22], 0x1
    jmp     LAB_1e1a_10f5
    db 0x90
LAB_1e1a_10c6:
    cmp     word ptr [bp-0x2c], 0x54
    jle     LAB_1e1a_10e2
    cmp     word ptr [bp-0x1e], 0x0
    jz      LAB_1e1a_10da
    mov     word ptr [bp-0x22], 0x8
    jmp     LAB_1e1a_10f5
    db 0x90
LAB_1e1a_10da:
    mov     word ptr [bp-0x22], 0xa
    jmp     LAB_1e1a_10f5
    db 0x90
LAB_1e1a_10e2:
    cmp     word ptr [bp-0x1e], 0x0
    jz      LAB_1e1a_10f0
    mov     word ptr [bp-0x22], 0x7
    jmp     LAB_1e1a_10f5
    db 0x90
LAB_1e1a_10f0:
    mov     word ptr [bp-0x22], 0xb
LAB_1e1a_10f5:
    cmp     word ptr [bp-0x22], 0x0
    jz      LAB_1e1a_1118
; Shockingly enough, no line equations.  
    mov     di, word ptr [bp-0x22]
    shl     di, 0x1
    mov     ax, word ptr [bp-0x28]
    cmp     word ptr [di+corkLR_negZBound], ax
    jge     LAB_1e1a_1118
    cmp     word ptr [di+corkLR_posZBound], ax
    jle     LAB_1e1a_1118
    mov     ax, word ptr [bp-0x22]
    add     ax, 0x39
    mov     word ptr [planindex], ax
LAB_1e1a_1118:
    cmp     word ptr [planindex], 0x0
    jz      LAB_1e1a_1122
    jmp     near ptr code_bto_blank
LAB_1e1a_1122:
    cmp     word ptr [bp-0x2e], 0x200
    jl      LAB_1e1a_112c
    jmp     near ptr code_bto_blank
; The dreaded cork l/r wall...  
LAB_1e1a_112c:
    mov     word ptr [wallindex], 0xb9
    mov     byte ptr [corkFlag], 0x1
    mov     word ptr [wallHeight], 0x75
    jmp     near ptr code_bto_blank
; LH cork = x mirroring of RH cork.  
code_bto_corkUdLH:
    mov     ax, word ptr [bp-0x2c]
    neg     ax
    mov     word ptr [bp-0x1e], ax
    mov     word ptr [bp-0x22], 0x4f
    mov     word ptr [bp-0xc], 0x32
    mov     word ptr [bp-0xe], 0x4b
    jmp     LAB_1e1a_116f
    db 0x90
; misc1E = effective x. 
; misc22 = planindex base value. 
; C = wallindex base value (outer wall). 
; E = wallindex base value (inner wall).  
code_bto_corkUdRH:
    mov     ax, word ptr [bp-0x2c]
    mov     word ptr [bp-0x1e], ax
    mov     word ptr [bp-0x22], 0x69
    mov     word ptr [bp-0xc], 0x0
    mov     word ptr [bp-0xe], 0x19
LAB_1e1a_116f:
    mov     byte ptr [corkFlag], 0x1
    cmp     word ptr [bp-0x28], 0x0
    jge     LAB_1e1a_11b0
    mov     bx, word ptr [bp+0x6]
    mov     ax, word ptr [bx+0x2]
    sub     ax, word ptr [terrainHeight]
    cmp     ax, 0x64
    jge     LAB_1e1a_11b0
    cmp     word ptr [bp-0x1e], 0x0
    jle     LAB_1e1a_11b0
    cmp     word ptr [bp-0x1e], 0x278
    jl      LAB_1e1a_1199
    jmp     near ptr code_bto_blank
LAB_1e1a_1199:
    cmp     word ptr [bp-0x1e], 0x188
    jg      LAB_1e1a_11a3
    jmp     near ptr code_bto_blank
; Flat bridge entrance.  
LAB_1e1a_11a3:
    mov     al, byte ptr [bp-0x12]
    mov     byte ptr [current_surf_type], al
    mov     ax, word ptr [bp-0x22]
    jmp     near ptr LAB_1e1a_08fd
    db 0x90
LAB_1e1a_11b0:
    cmp     word ptr [bp-0x28], 0x0
    jle     LAB_1e1a_1208
    mov     bx, word ptr [bp+0x6]
    mov     ax, word ptr [bx+0x2]
    sub     ax, word ptr [terrainHeight]
    cmp     ax, 0x15e
    jle     LAB_1e1a_1208
    cmp     word ptr [bp-0x1e], 0x2b4
    jge     LAB_1e1a_1208
    cmp     word ptr [bp-0x1e], 0x14c
    jle     LAB_1e1a_1208
    mov     word ptr [wallHeight], 0x2a
    mov     word ptr [elRdWallRelated], 0xfff4
    cmp     word ptr [bp-0x1e], 0x200
    jle     LAB_1e1a_11ec
    mov     ax, word ptr [bp-0xc]
    jmp     LAB_1e1a_11ef
    db 0x90
LAB_1e1a_11ec:
    mov     ax, word ptr [bp-0xe]
LAB_1e1a_11ef:
    add     ax, 0x18
    mov     word ptr [wallindex], ax
    mov     al, byte ptr [bp-0x12]
    mov     byte ptr [current_surf_type], al
    mov     ax, word ptr [bp-0x22]
    add     ax, 0x19
    mov     word ptr [planindex], ax
    jmp     near ptr LAB_1e1a_0a47
    db 0x90
; u/d corks rotate around (0,0).  
LAB_1e1a_1208:
    push    word ptr [bp-0x28]
    push    word ptr [bp-0x1e]
    call    far ptr polarRadius2D
    add     sp, 0x4
    mov     word ptr [bp-0xa], ax
    cmp     ax, 0x14c
    jg      LAB_1e1a_1221
    jmp     near ptr code_bto_blank
LAB_1e1a_1221:
    cmp     ax, 0x2b4
    jl      LAB_1e1a_1229
    jmp     near ptr code_bto_blank
; ax = plan selector. 
; si = wall selector.  
LAB_1e1a_1229:
    push    word ptr [bp-0x28]
    push    word ptr [bp-0x1e]
    call    far ptr polarAngle
    add     sp, 0x4
    sub     ax, 0x100
    neg     ax
    and     ah, 0x3
    mov     cx, 0x18
    imul    cx
    mov     si, ax
    mov     cl, 0xa
    sar     si, cl
    mov     ax, word ptr [bp-0x22]
    add     ax, si
    inc     ax
    mov     word ptr [planindex], ax
    mov     al, byte ptr [bp-0x12]
    mov     byte ptr [current_surf_type], al
    mov     byte ptr [byte_4392C], 0x0
    mov     word ptr [wallHeight], 0x2a
    mov     word ptr [elRdWallRelated], 0xfff4
    mov     ax, word ptr [bp-0xa]
    sub     ax, 0x200
    cmp     ax, 0x5a
    jle     LAB_1e1a_127e
    mov     ax, word ptr [bp-0xc]
LAB_1e1a_1278:
    add     ax, si
    jmp     near ptr LAB_1e1a_0880
    db 0x90
LAB_1e1a_127e:
    mov     ax, word ptr [bp-0xa]
    sub     ax, 0x200
    cmp     ax, 0xffa6
    jl      LAB_1e1a_128c
    jmp     near ptr code_bto_blank
LAB_1e1a_128c:
    mov     ax, word ptr [bp-0xe]
    jmp     LAB_1e1a_1278
    db 0x90
code_bto_slalom:
    cmp     word ptr [bp-0x32], 0x78
    jge     LAB_1e1a_129e
    mov     al, byte ptr [bp-0x12]
    mov     byte ptr [current_surf_type], al
LAB_1e1a_129e:
    cmp     word ptr [bp-0x2c], 0x17
    jl      LAB_1e1a_1300
    cmp     word ptr [bp-0x2c], 0x61
    jg      LAB_1e1a_1300
    cmp     word ptr [bp-0x28], 0xfef1
    jle     LAB_1e1a_1300
    cmp     word ptr [bp-0x28], 0xff0f
    jge     LAB_1e1a_1300
    mov     word ptr [wallHeight], 0x2a
    cmp     word ptr [bp-0x14], 0xfef1
    jge     LAB_1e1a_12ce
    mov     word ptr [wallindex], 0x91
    jmp     near ptr code_bto_blank
LAB_1e1a_12ce:
    cmp     word ptr [bp-0x14], 0xff0f
    jle     LAB_1e1a_12de
    mov     word ptr [wallindex], 0x92
    jmp     near ptr code_bto_blank
LAB_1e1a_12de:
    cmp     word ptr [bp-0x18], 0x17
    jge     LAB_1e1a_12ee
    mov     word ptr [wallindex], 0x94
    jmp     near ptr code_bto_blank
    db 0x90
LAB_1e1a_12ee:
    cmp     word ptr [bp-0x18], 0x61
    jg      LAB_1e1a_12f7
    jmp     near ptr code_bto_blank
LAB_1e1a_12f7:
    mov     word ptr [wallindex], 0x93
    jmp     near ptr code_bto_blank
LAB_1e1a_1300:
    cmp     word ptr [bp-0x2c], -0x17
    jle     LAB_1e1a_1309
    jmp     near ptr code_bto_blank
LAB_1e1a_1309:
    cmp     word ptr [bp-0x2c], -0x61
    jge     LAB_1e1a_1312
    jmp     near ptr code_bto_blank
LAB_1e1a_1312:
    cmp     word ptr [bp-0x28], 0x10f
    jl      LAB_1e1a_131c
    jmp     near ptr code_bto_blank
LAB_1e1a_131c:
    cmp     word ptr [bp-0x28], 0xf1
    jg      LAB_1e1a_1326
    jmp     near ptr code_bto_blank
LAB_1e1a_1326:
    mov     word ptr [wallHeight], 0x2a
    cmp     word ptr [bp-0x14], 0x10f
    jle     LAB_1e1a_133c
    mov     word ptr [wallindex], 0x8d
    jmp     near ptr code_bto_blank
LAB_1e1a_133c:
    cmp     word ptr [bp-0x14], 0xf1
    jge     LAB_1e1a_134c
    mov     word ptr [wallindex], 0x8e
    jmp     near ptr code_bto_blank
LAB_1e1a_134c:
    cmp     word ptr [bp-0x18], -0x17
    jle     LAB_1e1a_135c
    mov     word ptr [wallindex], 0x8f
    jmp     near ptr code_bto_blank
    db 0x90
LAB_1e1a_135c:
    cmp     word ptr [bp-0x18], -0x61
    jl      LAB_1e1a_1365
    jmp     near ptr code_bto_blank
LAB_1e1a_1365:
    mov     word ptr [wallindex], 0x90
    jmp     near ptr code_bto_blank
code_bto_barn:
    cmp     word ptr [bp-0x32], 0x96
    jle     LAB_1e1a_1378
    jmp     near ptr code_bto_blank
LAB_1e1a_1378:
    cmp     word ptr [bp-0x2e], 0x96
    jle     LAB_1e1a_1382
    jmp     near ptr code_bto_blank
LAB_1e1a_1382:
    mov     word ptr [wallHeight], 0x1a9
    cmp     word ptr [bp-0x14], 0xff6a
    jg      LAB_1e1a_1398
    mov     word ptr [wallindex], 0xa1
    jmp     near ptr code_bto_blank
LAB_1e1a_1398:
    cmp     word ptr [bp-0x14], 0x96
    jl      LAB_1e1a_13a8
    mov     word ptr [wallindex], 0xa2
    jmp     near ptr code_bto_blank
LAB_1e1a_13a8:
    cmp     word ptr [bp-0x18], 0x96
    jl      LAB_1e1a_13b8
    mov     word ptr [wallindex], 0xa3
    jmp     near ptr code_bto_blank
LAB_1e1a_13b8:
    cmp     word ptr [bp-0x18], 0xff6a
    jle     LAB_1e1a_13c2
    jmp     near ptr code_bto_blank
LAB_1e1a_13c2:
    mov     word ptr [wallindex], 0xa4
    jmp     near ptr code_bto_blank
    db 0x90
code_bto_gasStation:
    cmp     word ptr [bp-0x2c], 0xff38
    jge     LAB_1e1a_13d6
    jmp     near ptr code_bto_blank
LAB_1e1a_13d6:
    cmp     word ptr [bp-0x2c], 0x104
    jle     LAB_1e1a_13e0
    jmp     near ptr code_bto_blank
LAB_1e1a_13e0:
    cmp     word ptr [bp-0x2e], 0x50
    jle     LAB_1e1a_13e9
    jmp     near ptr code_bto_blank
LAB_1e1a_13e9:
    mov     word ptr [wallHeight], 0xe6
    cmp     word ptr [bp-0x14], -0x50
    jg      LAB_1e1a_13fe
    mov     word ptr [wallindex], 0xa5
    jmp     near ptr code_bto_blank
LAB_1e1a_13fe:
    cmp     word ptr [bp-0x14], 0x50
    jl      LAB_1e1a_140e
    mov     word ptr [wallindex], 0xa8
    jmp     near ptr code_bto_blank
    db 0x90
LAB_1e1a_140e:
    cmp     word ptr [bp-0x18], 0xff38
    jg      LAB_1e1a_141e
    mov     word ptr [wallindex], 0xa6
    jmp     near ptr code_bto_blank
LAB_1e1a_141e:
    cmp     word ptr [bp-0x18], 0x104
    jge     LAB_1e1a_1428
    jmp     near ptr code_bto_blank
LAB_1e1a_1428:
    mov     word ptr [wallindex], 0xa7
    jmp     near ptr code_bto_blank
    db 0x90
code_bto_joes:
    cmp     word ptr [bp-0x32], 0xb4
    jle     LAB_1e1a_143c
    jmp     near ptr code_bto_blank
LAB_1e1a_143c:
    cmp     word ptr [bp-0x2e], 0x64
    jle     LAB_1e1a_1445
    jmp     near ptr code_bto_blank
LAB_1e1a_1445:
    mov     word ptr [wallHeight], 0xf8
    cmp     word ptr [bp-0x14], -0x64
    jg      LAB_1e1a_145a
    mov     word ptr [wallindex], 0xa9
    jmp     near ptr code_bto_blank
LAB_1e1a_145a:
    cmp     word ptr [bp-0x14], 0x64
    jl      LAB_1e1a_146a
    mov     word ptr [wallindex], 0xac
    jmp     near ptr code_bto_blank
    db 0x90
LAB_1e1a_146a:
    cmp     word ptr [bp-0x18], 0xff4c
    jg      LAB_1e1a_147a
    mov     word ptr [wallindex], 0xab
    jmp     near ptr code_bto_blank
LAB_1e1a_147a:
    cmp     word ptr [bp-0x18], 0xb4
    jge     LAB_1e1a_1484
    jmp     near ptr code_bto_blank
LAB_1e1a_1484:
    mov     word ptr [wallindex], 0xaa
    jmp     near ptr code_bto_blank
    db 0x90
code_bto_office:
    cmp     word ptr [bp-0x32], 0xc8
    jle     LAB_1e1a_1498
    jmp     near ptr code_bto_blank
LAB_1e1a_1498:
    cmp     word ptr [bp-0x2e], 0xc8
    jle     LAB_1e1a_14a2
    jmp     near ptr code_bto_blank
LAB_1e1a_14a2:
    mov     word ptr [wallHeight], 0x226
    cmp     word ptr [bp-0x14], 0xff38
    jg      LAB_1e1a_14b8
    mov     word ptr [wallindex], 0xad
    jmp     near ptr code_bto_blank
LAB_1e1a_14b8:
    cmp     word ptr [bp-0x14], 0xc8
    jl      LAB_1e1a_14c8
    mov     word ptr [wallindex], 0xae
    jmp     near ptr code_bto_blank
LAB_1e1a_14c8:
    cmp     word ptr [bp-0x18], 0xff38
    jg      LAB_1e1a_14d8
    mov     word ptr [wallindex], 0xaf
    jmp     near ptr code_bto_blank
LAB_1e1a_14d8:
    cmp     word ptr [bp-0x18], 0xc8
    jge     LAB_1e1a_14e2
    jmp     near ptr code_bto_blank
LAB_1e1a_14e2:
    mov     word ptr [wallindex], 0xb0
    jmp     near ptr code_bto_blank
    db 0x90
code_bto_windmill:
    cmp     word ptr [bp-0x32], 0x72
    jle     LAB_1e1a_14f5
    jmp     near ptr code_bto_blank
LAB_1e1a_14f5:
    cmp     word ptr [bp-0x2e], 0x72
    jle     LAB_1e1a_14fe
    jmp     near ptr code_bto_blank
LAB_1e1a_14fe:
    mov     word ptr [wallHeight], 0x1ef
    cmp     word ptr [bp-0x14], -0x72
    jg      LAB_1e1a_1514
    mov     word ptr [wallindex], 0xb4
    jmp     near ptr code_bto_blank
    db 0x90
LAB_1e1a_1514:
    cmp     word ptr [bp-0x14], 0x72
    jl      LAB_1e1a_1524
    mov     word ptr [wallindex], 0xb2
    jmp     near ptr code_bto_blank
    db 0x90
LAB_1e1a_1524:
    cmp     word ptr [bp-0x18], -0x72
    jg      LAB_1e1a_1534
    mov     word ptr [wallindex], 0xb1
    jmp     near ptr code_bto_blank
    db 0x90
LAB_1e1a_1534:
    cmp     word ptr [bp-0x18], 0x72
    jge     LAB_1e1a_153d
    jmp     near ptr code_bto_blank
LAB_1e1a_153d:
    mov     word ptr [wallindex], 0xb3
    jmp     near ptr code_bto_blank
code_bto_ship:
    cmp     word ptr [bp-0x2c], 0xff56
    jge     LAB_1e1a_1550
    jmp     near ptr code_bto_blank
LAB_1e1a_1550:
    cmp     word ptr [bp-0x2c], 0x104
    jle     LAB_1e1a_155a
    jmp     near ptr code_bto_blank
LAB_1e1a_155a:
    cmp     word ptr [bp-0x2e], 0x6e
    jle     LAB_1e1a_1563
    jmp     near ptr code_bto_blank
LAB_1e1a_1563:
    mov     word ptr [wallHeight], 0xe6
    cmp     word ptr [bp-0x14], -0x6e
    jg      LAB_1e1a_157a
    mov     word ptr [wallindex], 0xb5
    jmp     near ptr code_bto_blank
    db 2 dup (0x90)
LAB_1e1a_157a:
    cmp     word ptr [bp-0x14], 0x6e
    jl      LAB_1e1a_158a
    mov     word ptr [wallindex], 0xb8
    jmp     near ptr code_bto_blank
    db 0x90
LAB_1e1a_158a:
    cmp     word ptr [bp-0x18], 0xff56
    jg      LAB_1e1a_159c
    mov     word ptr [wallindex], 0xb7
    jmp     near ptr code_bto_blank
    db 0x90
    db 0x90
LAB_1e1a_159c:
    cmp     word ptr [bp-0x18], 0x104
    jge     LAB_1e1a_15a6
    jmp     near ptr code_bto_blank
LAB_1e1a_15a6:
    mov     word ptr [wallindex], 0xb6
    jmp     near ptr code_bto_blank
    db 0x90
bto_branches:
    dw code_bto_sfLine
    dw code_bto_road                           ; road
    dw code_bto_sCorner                        ; sharp corner
    dw code_bto_lCorner                        ; corner
    dw code_bto_chicaneRL                      ; chicane B
    dw code_bto_chicaneLR                      ; chicane A
    dw code_bto_sSplitA                        ; sharp split A
    dw code_bto_sSplitB                        ; sharp split B
    dw code_bto_lSplitA                        ; split A
    dw code_bto_lSplitB                        ; split B
    dw code_bto_highEntrance                   ; highway entrance
    dw code_bto_highway                        ; highway
    dw code_bto_crossroad                      ; crossroad
    dw code_bto_blank
    dw code_bto_blank
    dw code_bto_blank
    dw code_bto_ramp                           ; ramp
    dw code_bto_solidRamp                      ; solid ramp
    dw code_bto_elevRoad                       ; elevated road
    dw code_bto_elevRoad                       ; elevated span
    dw code_bto_solidRoad                      ; solid road
    dw code_bto_elevCorner                     ; elevated corner
    dw code_bto_overpass                       ; overpass
    dw code_bto_bankEntranceB                  ; bank rd. entrance B
    dw code_bto_bankEntranceA                  ; bank rd. entrance A
    dw code_bto_bankRoad                       ; banked road
    dw code_bto_bankCorner                     ; banked corner
    dw code_bto_loop                           ; loop
    dw code_bto_tunnel                         ; tunnel
    dw code_bto_pipeEntrance                   ; pipe entrance
    dw code_bto_pipe                           ; pipe
    dw code_bto_halfPipe                       ; half-pipe
    dw code_bto_corkUdLH                       ; cork u/d A
    dw code_bto_corkUdRH                       ; cork u/d B
    dw code_bto_slalom                         ; slalom
    dw code_bto_corkLr                         ; cork l/r
    dw code_bto_blank
    dw code_bto_blank
    dw code_bto_blank
    dw code_bto_blank
    dw code_bto_blank
    dw code_bto_blank
    dw code_bto_blank
    dw code_bto_blank
    dw code_bto_blank
    dw code_bto_blank
    dw code_bto_blank
    dw code_bto_blank
    dw code_bto_blank
    dw code_bto_blank
    dw code_bto_blank
    dw code_bto_blank
    dw code_bto_blank
    dw code_bto_blank
    dw code_bto_blank
    dw code_bto_blank
    dw code_bto_blank
    dw code_bto_blank
    dw code_bto_blank
    dw code_bto_blank
    dw code_bto_blank
    dw code_bto_blank
    dw code_bto_blank
    dw code_bto_blank
    dw code_bto_blank                          ; empty
    dw code_bto_barn                           ; barn
    dw code_bto_gasStation                     ; gas station
    dw code_bto_joes                           ; Joe's
    dw code_bto_office                         ; office
    dw code_bto_windmill                       ; windmill
    dw code_bto_ship                           ; ship
    dw code_bto_blank                          ; pine
    dw code_bto_blank                          ; cactus
    dw code_bto_blank                          ; tennis
    dw code_bto_blank                          ; palm
code_bto_blank:
    cmp     byte ptr [bp+var_tileTerr], 0x7
    jnc     code_hillslope_parsing
    jmp     near ptr LAB_1e1a_172d
; First, get coordinate origin on tile.  
code_hillslope_parsing:
    mov     al, byte ptr [bp+var_trkCol]
    cbw
    mov     bx, ax
    shl     bx, 0x1
    mov     di, word ptr [bp+a]
    mov     ax, word ptr [di]
    sub     ax, word ptr [bx+trackcenterpos2]
    mov     word ptr [bp+var_posElemCrds], ax
    mov     al, byte ptr [bp+var_trkRow]
    cbw
    mov     bx, ax
    shl     bx, 0x1
    mov     ax, word ptr [di+0x4]
    sub     ax, word ptr [bx+terraincenterpos]
    mov     word ptr [bp+var_posElemCrds+4], ax
    mov     al, byte ptr [bp+var_tileTerr]
    sub     ah, ah
    sub     ax, 0x7
    cmp     ax, 0xb
    ja      LAB_1e1a_16f6
; Straight slopes.  
    add     ax, ax
    xchg    ax, bx
    jmp     word ptr cs:[bx+loc_1F87E]
LAB_1e1a_168a:
    mov     word ptr [bp-0x10], 0x0
    jmp     LAB_1e1a_16f6
    db 0x90
LAB_1e1a_1692:
    mov     word ptr [bp-0x10], 0x300
    mov     ax, word ptr [bp-0x2c]
    mov     word ptr [bp-0x1e], ax
    mov     ax, word ptr [bp-0x28]
    mov     word ptr [bp-0x2c], ax
    mov     ax, word ptr [bp-0x1e]
    neg     ax
LAB_1e1a_16a8:
    mov     word ptr [bp-0x28], ax
    jmp     LAB_1e1a_16f6
    db 0x90
LAB_1e1a_16ae:
    mov     word ptr [bp-0x10], 0x200
    mov     ax, word ptr [bp-0x28]
    neg     ax
    mov     word ptr [bp-0x28], ax
    mov     ax, word ptr [bp-0x2c]
    neg     ax
    mov     word ptr [bp-0x2c], ax
    jmp     LAB_1e1a_16f6
    db 0x90
LAB_1e1a_16c6:
    mov     word ptr [bp-0x10], 0x100
    mov     ax, word ptr [bp-0x2c]
    mov     word ptr [bp-0x1e], ax
    mov     ax, word ptr [bp-0x28]
    neg     ax
    mov     word ptr [bp-0x2c], ax
    mov     ax, word ptr [bp-0x1e]
    jmp     LAB_1e1a_16a8
loc_1F87E:
    dw LAB_1e1a_168a
    dw LAB_1e1a_1692
    dw LAB_1e1a_16ae
    dw LAB_1e1a_16c6
; Only the four next offsets are referred to by off_1F78E[bx]  
    dw LAB_1e1a_168a
    dw LAB_1e1a_1692
    dw LAB_1e1a_16ae
    dw LAB_1e1a_16c6
    dw LAB_1e1a_168a
    dw LAB_1e1a_1692
    dw LAB_1e1a_16ae
    dw LAB_1e1a_16c6
LAB_1e1a_16f6:
    mov     al, byte ptr [bp+var_tileTerr]
    sub     ah, ah
    cmp     ax, 0x7
    jc      LAB_1e1a_172d
    cmp     ax, 0xa
    jbe     LAB_1e1a_1720
; Angled slopes.  
    cmp     ax, 0xb
    jc      LAB_1e1a_172d
    cmp     ax, 0xe
    jbe     LAB_1e1a_175c
    cmp     ax, 0xf
    jc      LAB_1e1a_172d
    cmp     ax, 0x12
    ja      LAB_1e1a_171c
    jmp     near ptr LAB_1e1a_17a0
LAB_1e1a_171c:
    jmp     LAB_1e1a_172d
    db 0x90
    db 0x90
LAB_1e1a_1720:
    cmp     word ptr [planindex], 0x0
    jnz     LAB_1e1a_172d
    mov     word ptr [planindex], 0x3
LAB_1e1a_172d:
    cmp     word ptr [planindex], 0x0
    jg      LAB_1e1a_1737
    jmp     near ptr LAB_1e1a_17f2
; Shifting planindex according to orientation.  
LAB_1e1a_1737:
    mov     cl, 0x2
    shl     word ptr [planindex], cl
    mov     ax, word ptr [bp+var_elemOrient]
    cmp     ax, 0x100
    jnz     LAB_1e1a_1748
    jmp     near ptr LAB_1e1a_182c
LAB_1e1a_1748:
    cmp     ax, 0x200
    jnz     LAB_1e1a_1750
    jmp     near ptr LAB_1e1a_1824
LAB_1e1a_1750:
    cmp     ax, 0x300
    jnz     LAB_1e1a_1758
    jmp     near ptr LAB_1e1a_17ee
LAB_1e1a_1758:
    jmp     near ptr LAB_1e1a_17f2
    db 0x90
; Outer angled slopes  
LAB_1e1a_175c:
    push    word ptr [bp+var_posElemCrds+4]
    mov     ax, 0xff80
    push    ax
    call    far ptr sin_fast
    add     sp, 0x2
    push    ax
    call    far ptr multiply_and_scale
    add     sp, 0x4
    push    word ptr [bp+var_posElemCrds]
    mov     cx, 0xff80
    push    cx
    mov     di, ax
    call    far ptr cos_fast
    add     sp, 0x2
    push    ax
    call    far ptr multiply_and_scale
    add     sp, 0x4
    add     ax, di
    mov     word ptr [bp+var_misc22], ax
    or      ax, ax
    jge     LAB_1e1a_172d
    mov     word ptr [planindex], 0x4
    jmp     LAB_1e1a_172d
    db 0x90
; Inner angled slopes.  
LAB_1e1a_17a0:
    push    word ptr [bp+var_posElemCrds+4]
    mov     ax, 0xff80
    push    ax
    call    far ptr sin_fast
    add     sp, 0x2
    push    ax
    call    far ptr multiply_and_scale
    add     sp, 0x4
    push    word ptr [bp+var_posElemCrds]
    mov     cx, 0xff80
    push    cx
    mov     di, ax
    call    far ptr cos_fast
    add     sp, 0x2
    push    ax
    call    far ptr multiply_and_scale
    add     sp, 0x4
    add     ax, di
    mov     word ptr [bp+var_misc22], ax
    or      ax, ax
    jle     LAB_1e1a_17e4
    mov     word ptr [planindex], 0x5
    jmp     near ptr LAB_1e1a_172d
LAB_1e1a_17e4:
    mov     word ptr [terrainHeight], 0x1c2
    jmp     near ptr LAB_1e1a_172d
    db 0x90
LAB_1e1a_17ee:
    inc     word ptr [planindex]
; planindex -> planptr, finally.  
LAB_1e1a_17f2:
    mov     ax, 0x22
    imul    word ptr [planindex]
    add     ax, word ptr [planptr]
    mov     dx, word ptr [planptr+2]
    mov     word ptr [current_planptr], ax
    mov     word ptr [current_planptr+2], dx
    cmp     byte ptr [current_surf_type], 0x4
    jnz     LAB_1e1a_1834
; Weird...  
    mov     bx, word ptr [bp+a]
    mov     ax, word ptr [bx+0x4]
    xor     ax, word ptr [bx]
    mov     cl, 0x8
    sar     ax, cl
    and     ax, 0x1
    add     word ptr [terrainHeight], ax
    jmp     LAB_1e1a_1839
LAB_1e1a_1824:
    add     word ptr [planindex], 0x2
    jmp     LAB_1e1a_17f2
    db 0x90
LAB_1e1a_182c:
    add     word ptr [planindex], 0x3
    jmp     LAB_1e1a_17f2
    db 0x90
LAB_1e1a_1834:
    add     word ptr [terrainHeight], 0x2
LAB_1e1a_1839:
    cmp     word ptr [wallindex], 0x0
    jge     LAB_1e1a_1843
    jmp     near ptr LAB_1e1a_193e
LAB_1e1a_1843:
    mov     bx, word ptr [wallindex]
    mov     ax, bx
    shl     bx, 0x1
    add     bx, ax
    shl     bx, 0x1                            ; *6
    les     di, [wallptr]
    mov     ax, word ptr es:[bx+di]
    neg     ax
    add     ax, word ptr [bp+var_elemOrient]
    add     ax, word ptr [bp+var_wallOrientMod]
    and     ah, 0x3
    mov     word ptr [wallOrientation], ax
    mov     ax, word ptr [bp+var_elemOrient]
    or      ax, ax
    jz      LAB_1e1a_1880
    cmp     ax, 0x100
    jnz     LAB_1e1a_1873
    jmp     near ptr LAB_1e1a_1906
LAB_1e1a_1873:
    cmp     ax, 0x200
    jz      LAB_1e1a_18d8
    cmp     ax, 0x300
    jz      LAB_1e1a_18ac
    jmp     near ptr LAB_1e1a_1930
LAB_1e1a_1880:
    mov     ax, word ptr [wallindex]
    mov     cx, ax
    shl     ax, 0x1
    add     ax, cx
    shl     ax, 0x1
    add     ax, word ptr [wallptr]
    mov     dx, es
    mov     word ptr [bp+var_curr_wallptr], ax
    mov     word ptr [bp+var_curr_wallptr+2], dx
    les     bx, [bp+var_curr_wallptr]
    mov     ax, word ptr es:[bx+0x2]
    mov     word ptr [wallStartX], ax
    mov     ax, word ptr es:[bx+0x4]
LAB_1e1a_18a5:
    mov     word ptr [wallStartZ], ax
    jmp     near ptr LAB_1e1a_1930
    db 0x90
LAB_1e1a_18ac:
    mov     ax, word ptr [wallindex]
    mov     cx, ax
    shl     ax, 0x1
    add     ax, cx
    shl     ax, 0x1
    add     ax, word ptr [wallptr]
    mov     dx, word ptr [wallptr+2]
    mov     word ptr [bp+var_curr_wallptr], ax
    mov     word ptr [bp+var_curr_wallptr+2], dx
    les     bx, [bp+var_curr_wallptr]
    mov     ax, word ptr es:[bx+0x4]
    neg     ax
    mov     word ptr [wallStartX], ax
    mov     ax, word ptr es:[bx+0x2]
    jmp     LAB_1e1a_18a5
    db 0x90
LAB_1e1a_18d8:
    mov     ax, word ptr [wallindex]
    mov     cx, ax
    shl     ax, 0x1
    add     ax, cx
    shl     ax, 0x1
    add     ax, word ptr [wallptr]
    mov     dx, word ptr [wallptr+2]
    mov     word ptr [bp+var_curr_wallptr], ax
    mov     word ptr [bp+var_curr_wallptr+2], dx
    les     bx, [bp+var_curr_wallptr]
    mov     ax, word ptr es:[bx+0x2]
    neg     ax
    mov     word ptr [wallStartX], ax
    mov     ax, word ptr es:[bx+0x4]
LAB_1e1a_1901:
    neg     ax
    jmp     LAB_1e1a_18a5
    db 0x90
LAB_1e1a_1906:
    mov     ax, word ptr [wallindex]
    mov     cx, ax
    shl     ax, 0x1
    add     ax, cx
    shl     ax, 0x1
    add     ax, word ptr [wallptr]
    mov     dx, word ptr [wallptr+2]
    mov     word ptr [bp+var_curr_wallptr], ax
    mov     word ptr [bp+var_curr_wallptr+2], dx
    les     bx, [bp+var_curr_wallptr]
    mov     ax, word ptr es:[bx+0x4]
    mov     word ptr [wallStartX], ax
    mov     ax, word ptr es:[bx+0x2]
    jmp     LAB_1e1a_1901
    db 0x90
; Translating to world coords.  
LAB_1e1a_1930:
    mov     ax, word ptr [elem_xCenter]
    add     word ptr [wallStartX], ax
    mov     ax, word ptr [elem_zCenter]
    add     word ptr [wallStartZ], ax
LAB_1e1a_193e:
    pop     si
    pop     di
    mov     sp, bp
    pop     bp
    retf
build_track_object endp

; int __cdecl16far bto_auxiliary1(int param_1, int param_2, VECTOR * vecs)
bto_auxiliary1 proc far
    var_14     = word ptr  -20
    var_10     = byte ptr  -16
    var_C      = word ptr  -12
    var_A      = word ptr  -10
    var_elemOrient = word ptr   -8
    var_6      = word ptr   -6
    var_elemDepOffset = word ptr   -4
    var_tileElem = byte ptr   -2
    param_1    = word ptr    6
    param_2    = word ptr    8
    vecs       = word ptr   10

    push    bp
    mov     bp, sp
    sub     sp, 0x14
    push    di
    push    si
    mov     bx, word ptr [bp+param_2]
    shl     bx, 0x1
    mov     bx, word ptr [bx+trackrows]
    add     bx, word ptr [bp+param_1]
    add     bx, word ptr [td14_elem_map_main]
    mov     es, word ptr [td14_elem_map_main+2]
    mov     al, byte ptr es:[bx]
    mov     byte ptr [bp+var_tileElem], al
    or      al, al
    jnz     LAB_1e1a_1972
LAB_1e1a_196a:
    sub     ax, ax
    pop     si
    pop     di
    mov     sp, bp
    pop     bp
    retf
LAB_1e1a_1972:
    mov     bx, word ptr [bp+param_1]
    shl     bx, 0x1
    mov     ax, word ptr [bx+trackcenterpos2]
    mov     word ptr [bp+var_6], ax
    mov     bx, word ptr [bp+param_2]
    shl     bx, 0x1
    mov     ax, word ptr [bx+trackcenterpos]
    mov     word ptr [bp+var_C], ax
    cmp     byte ptr [bp+var_tileElem], 0xfd
    jnc     LAB_1e1a_1993
    jmp     near ptr LAB_1e1a_1a94
LAB_1e1a_1993:
    mov     al, byte ptr [bp+var_tileElem]
    sub     ah, ah
    cmp     ax, 0xfd
    jz      LAB_1e1a_19ae
    cmp     ax, 0xfe
    jz      LAB_1e1a_1a14
    cmp     ax, 0xff
    jnz     LAB_1e1a_19aa
    jmp     near ptr LAB_1e1a_1a52
LAB_1e1a_19aa:
    jmp     near ptr LAB_1e1a_1ae6
    db 0x90
LAB_1e1a_19ae:
    mov     ax, word ptr [bp+param_2]
    shl     ax, 0x1
    mov     word ptr [bp+var_14], ax
    mov     bx, ax
    mov     bx, word ptr [bx+word_45D3E]       ; is really trackrows[bx -1]
    add     bx, word ptr [bp+param_1]
    add     bx, word ptr [td14_elem_map_main]
    mov     es, word ptr [td14_elem_map_main+2]
    mov     al, byte ptr es:[bx-0x1]
    mov     byte ptr [bp+var_tileElem], al
    sub     ah, ah
    mov     bx, ax
    shl     bx, 0x1
    add     bx, ax
    shl     bx, 0x1
    add     bx, ax
    shl     bx, 0x1
    test    byte ptr [bx+trkObjectList.ss_multiTileFlag], 0x1
    jz      LAB_1e1a_19ed
    mov     bx, word ptr [bp+var_14]
    mov     ax, word ptr [bx+(trackpos+1*2)]
LAB_1e1a_19ea:
    mov     word ptr [bp+var_C], ax
LAB_1e1a_19ed:
    mov     al, byte ptr [bp+var_tileElem]
    sub     ah, ah
    mov     bx, ax
    shl     bx, 0x1
    add     bx, ax
    shl     bx, 0x1
    add     bx, ax
    shl     bx, 0x1
    test    byte ptr [bx+trkObjectList.ss_multiTileFlag], 0x2
    jnz     LAB_1e1a_1a08
    jmp     near ptr LAB_1e1a_1ae6
LAB_1e1a_1a08:
    mov     bx, word ptr [bp+param_1]
    shl     bx, 0x1
    mov     ax, word ptr [bx+trackpos2]
    jmp     near ptr LAB_1e1a_1ae3
LAB_1e1a_1a14:
    mov     ax, word ptr [bp+param_2]
    shl     ax, 0x1
    mov     word ptr [bp+var_14], ax
    mov     bx, ax
    mov     bx, word ptr [bx+word_45D3E]       ; is really trackrows[bx -1]
    add     bx, word ptr [bp+param_1]
    add     bx, word ptr [td14_elem_map_main]
    mov     es, word ptr [td14_elem_map_main+2]
    mov     al, byte ptr es:[bx]
    mov     byte ptr [bp+var_tileElem], al
    sub     ah, ah
    mov     bx, ax
    shl     bx, 0x1
    add     bx, ax
    shl     bx, 0x1
    add     bx, ax
    shl     bx, 0x1
    test    byte ptr [bx+trkObjectList.ss_multiTileFlag], 0x1
    jz      LAB_1e1a_1ac2
    mov     bx, word ptr [bp+var_14]
    mov     ax, word ptr [bx+(trackpos+1*2)]
    jmp     LAB_1e1a_1abf
    db 0x90
LAB_1e1a_1a52:
    mov     ax, word ptr [bp+param_2]
    shl     ax, 0x1
    mov     word ptr [bp+var_14], ax
    mov     bx, ax
    mov     bx, word ptr [bx+trackrows]
    add     bx, word ptr [bp+param_1]
    add     bx, word ptr [td14_elem_map_main]
    mov     es, word ptr [td14_elem_map_main+2]
    mov     al, byte ptr es:[bx-0x1]
    mov     byte ptr [bp+var_tileElem], al
    sub     ah, ah
    mov     bx, ax
    shl     bx, 0x1
    add     bx, ax
    shl     bx, 0x1
    add     bx, ax
    shl     bx, 0x1
    test    byte ptr [bx+trkObjectList.ss_multiTileFlag], 0x1
    jnz     LAB_1e1a_1a8a
    jmp     near ptr LAB_1e1a_19ed
LAB_1e1a_1a8a:
    mov     bx, word ptr [bp+var_14]
    mov     ax, word ptr [bx+trackpos]
    jmp     near ptr LAB_1e1a_19ea
LAB_1e1a_1a94:
    mov     al, byte ptr [bp+var_tileElem]
    sub     ah, ah
    mov     bx, ax
    shl     bx, 0x1
    add     bx, ax
    shl     bx, 0x1
    add     bx, ax
    shl     bx, 0x1
    mov     al, byte ptr [bx+trkObjectList.ss_multiTileFlag]
    mov     byte ptr [bp+var_14], al
    cmp     al, ah
    jz      LAB_1e1a_1ae6
    test    byte ptr [bp+var_14], 0x1
    jz      LAB_1e1a_1ac2
    mov     bx, word ptr [bp+param_2]
    shl     bx, 0x1
    mov     ax, word ptr [bx+trackpos]
LAB_1e1a_1abf:
    mov     word ptr [bp+var_C], ax
LAB_1e1a_1ac2:
    mov     al, byte ptr [bp+var_tileElem]
    sub     ah, ah
    mov     bx, ax
    shl     bx, 0x1
    add     bx, ax
    shl     bx, 0x1
    add     bx, ax
    shl     bx, 0x1
    test    byte ptr [bx+trkObjectList.ss_multiTileFlag], 0x2
    jz      LAB_1e1a_1ae6
    mov     bx, word ptr [bp+param_1]
    shl     bx, 0x1
    mov     ax, word ptr [bx+(trackpos2+1*2)]
LAB_1e1a_1ae3:
    mov     word ptr [bp+var_6], ax
LAB_1e1a_1ae6:
    sub     di, di
    mov     al, byte ptr [bp+var_tileElem]
    sub     ah, ah
    mov     bx, ax
    shl     bx, 0x1
    add     bx, ax
    shl     bx, 0x1
    add     bx, ax
    shl     bx, 0x1
    mov     al, byte ptr [bx+trkObjectList.ss_physicalModel]
    cbw
    cmp     ax, 0x20
    jz      LAB_1e1a_1b22
    jg      LAB_1e1a_1b54
    cmp     ax, 0xb
    jz      LAB_1e1a_1b40
    cmp     ax, 0x12
    jz      LAB_1e1a_1b4a
    jmp     LAB_1e1a_1b1a
    db 0x90
LAB_1e1a_1b12:
    mov     di, 0x2
    mov     word ptr [bp+var_elemDepOffset], offset unk_3E676
LAB_1e1a_1b1a:
    or      di, di
    jnz     LAB_1e1a_1b74
    jmp     near ptr LAB_1e1a_196a
    db 0x90
LAB_1e1a_1b22:
    mov     di, 0x2
    mov     word ptr [bp+var_elemDepOffset], offset unk_3E682
    jmp     LAB_1e1a_1b1a
LAB_1e1a_1b2c:
    mov     di, 0x2
    mov     word ptr [bp+var_elemDepOffset], offset unk_3E68E
    jmp     LAB_1e1a_1b1a
LAB_1e1a_1b36:
    mov     di, 0x4
    mov     word ptr [bp+var_elemDepOffset], offset unk_3E69A
    jmp     LAB_1e1a_1b1a
LAB_1e1a_1b40:
    mov     di, 0x1
    mov     word ptr [bp+var_elemDepOffset], offset unk_3E640
    jmp     LAB_1e1a_1b1a
LAB_1e1a_1b4a:
    mov     di, 0x8
    mov     word ptr [bp+var_elemDepOffset], offset unk_3E646
    jmp     LAB_1e1a_1b1a
LAB_1e1a_1b54:
    cmp     ax, 0x22
    jz      LAB_1e1a_1b36
    jg      LAB_1e1a_1b62
    cmp     ax, 0x21
    jz      LAB_1e1a_1b2c
    jmp     LAB_1e1a_1b1a
LAB_1e1a_1b62:
    cmp     ax, 0x23
    jz      LAB_1e1a_1b12
    cmp     ax, 0x47
    jl      LAB_1e1a_1b1a
    cmp     ax, 0x4a
    jle     LAB_1e1a_1b40
    jmp     LAB_1e1a_1b1a
    db 0x90
LAB_1e1a_1b74:
    mov     bx, word ptr [bp+param_2]
    shl     bx, 0x1
    mov     bx, word ptr [bx+terrainrows]
    add     bx, word ptr [bp+param_1]
    add     bx, word ptr [td15_terr_map_main]
    mov     es, word ptr [td15_terr_map_main+2]
    mov     al, byte ptr es:[bx]
    mov     byte ptr [bp+var_10], al
    cmp     al, 0x6
    jnz     LAB_1e1a_1b9a
    mov     ax, word ptr [(hillHeightConsts+1*2)]
    mov     word ptr [bp+var_A], ax
    jmp     LAB_1e1a_1b9f
LAB_1e1a_1b9a:
    mov     word ptr [bp+var_A], 0x0
LAB_1e1a_1b9f:
    mov     al, byte ptr [bp+var_tileElem]
    sub     ah, ah
    mov     bx, ax
    shl     bx, 0x1
    add     bx, ax
    shl     bx, 0x1
    add     bx, ax
    shl     bx, 0x1
    mov     ax, word ptr [bx+trkObjectList.ss_rotY]
    mov     word ptr [bp+var_elemOrient], ax
    sub     si, si
    jmp     LAB_1e1a_1c06
    db 0x90
LAB_1e1a_1bbc:
    mov     ax, si
    mov     cx, ax
    shl     ax, 0x1
    add     ax, cx
    shl     ax, 0x1
    mov     word ptr [bp+var_14], ax
    mov     bx, word ptr [bp+var_elemDepOffset]
    add     bx, ax
    mov     ax, word ptr [bx]
    add     ax, word ptr [bp+var_6]
    mov     bx, word ptr [bp+vecs]
    add     bx, word ptr [bp+var_14]
    mov     word ptr [bx], ax
    mov     bx, word ptr [bp+var_elemDepOffset]
    add     bx, word ptr [bp+var_14]
    mov     ax, word ptr [bx+0x2]
    add     ax, word ptr [bp+var_A]
    mov     bx, word ptr [bp+vecs]
    add     bx, word ptr [bp+var_14]
    mov     word ptr [bx+0x2], ax
    mov     bx, word ptr [bp+var_elemDepOffset]
    add     bx, word ptr [bp+var_14]
    mov     ax, word ptr [bx+0x4]
LAB_1e1a_1bf9:
    add     ax, word ptr [bp+var_C]
    mov     bx, word ptr [bp+vecs]
    add     bx, word ptr [bp+var_14]
    mov     word ptr [bx+0x4], ax
LAB_1e1a_1c05:
    inc     si
LAB_1e1a_1c06:
    cmp     si, di
    jl      LAB_1e1a_1c0d
    jmp     near ptr LAB_1e1a_1cec
LAB_1e1a_1c0d:
    mov     ax, word ptr [bp+var_elemOrient]
    or      ax, ax
    jz      LAB_1e1a_1bbc
    cmp     ax, 0x100
    jnz     LAB_1e1a_1c1c
    jmp     near ptr LAB_1e1a_1caa
LAB_1e1a_1c1c:
    cmp     ax, 0x200
    jz      LAB_1e1a_1c68
    cmp     ax, 0x300
    jnz     LAB_1e1a_1c05
    mov     ax, si
    mov     cx, ax
    shl     ax, 0x1
    add     ax, cx
    shl     ax, 0x1
    mov     word ptr [bp+var_14], ax
    mov     bx, word ptr [bp+var_elemDepOffset]
    add     bx, ax
    mov     ax, word ptr [bx+0x4]
    neg     ax
    add     ax, word ptr [bp+var_6]
    mov     bx, word ptr [bp+vecs]
    add     bx, word ptr [bp+var_14]
    mov     word ptr [bx], ax
    mov     bx, word ptr [bp+var_elemDepOffset]
    add     bx, word ptr [bp+var_14]
    mov     ax, word ptr [bx+0x2]
    add     ax, word ptr [bp+var_A]
    mov     bx, word ptr [bp+vecs]
    add     bx, word ptr [bp+var_14]
    mov     word ptr [bx+0x2], ax
    mov     bx, word ptr [bp+var_elemDepOffset]
    add     bx, word ptr [bp+var_14]
    mov     ax, word ptr [bx]
    jmp     LAB_1e1a_1bf9
    db 0x90
LAB_1e1a_1c68:
    mov     ax, si
    mov     cx, ax
    shl     ax, 0x1
    add     ax, cx
    shl     ax, 0x1
    mov     word ptr [bp+var_14], ax
    mov     bx, word ptr [bp+var_elemDepOffset]
    add     bx, ax
    mov     ax, word ptr [bx]
    neg     ax
    add     ax, word ptr [bp+var_6]
    mov     bx, word ptr [bp+vecs]
    add     bx, word ptr [bp+var_14]
    mov     word ptr [bx], ax
    mov     bx, word ptr [bp+var_elemDepOffset]
    add     bx, word ptr [bp+var_14]
    mov     ax, word ptr [bx+0x2]
    add     ax, word ptr [bp+var_A]
    mov     bx, word ptr [bp+vecs]
    add     bx, word ptr [bp+var_14]
    mov     word ptr [bx+0x2], ax
    mov     bx, word ptr [bp+var_elemDepOffset]
    add     bx, word ptr [bp+var_14]
    mov     ax, word ptr [bx+0x4]
    jmp     LAB_1e1a_1ce7
    db 0x90
LAB_1e1a_1caa:
    mov     ax, si
    mov     cx, ax
    shl     ax, 0x1
    add     ax, cx
    shl     ax, 0x1
    mov     word ptr [bp+var_14], ax
    mov     bx, word ptr [bp+var_elemDepOffset]
    add     bx, ax
    mov     ax, word ptr [bx+0x4]
    add     ax, word ptr [bp+var_6]
    mov     bx, word ptr [bp+vecs]
    add     bx, word ptr [bp+var_14]
    mov     word ptr [bx], ax
    mov     bx, word ptr [bp+var_elemDepOffset]
    add     bx, word ptr [bp+var_14]
    mov     ax, word ptr [bx+0x2]
    add     ax, word ptr [bp+var_A]
    mov     bx, word ptr [bp+vecs]
    add     bx, word ptr [bp+var_14]
    mov     word ptr [bx+0x2], ax
    mov     bx, word ptr [bp+var_elemDepOffset]
    add     bx, word ptr [bp+var_14]
    mov     ax, word ptr [bx]
LAB_1e1a_1ce7:
    neg     ax
    jmp     near ptr LAB_1e1a_1bf9
LAB_1e1a_1cec:
    mov     ax, di
    pop     si
    pop     di
    mov     sp, bp
    pop     bp
    retf
bto_auxiliary1 endp

; int __cdecl16far shape3d_load_all(void)
shape3d_load_all proc far
    push    bp
    mov     bp, sp
    sub     sp, 0x2
    push    si
    sub     ax, ax
    mov     word ptr [game1ptr+2], ax
    mov     word ptr [game1ptr], ax
    mov     word ptr [game2ptr+2], ax
    mov     word ptr [game2ptr], ax
    call    far ptr mmgr_get_res_ofs_diff_scaled
    or      dx, dx
    jg      LAB_1e1a_1d22
    jl      LAB_1e1a_1d19
    cmp     ax, 0xfde8
    jnc     LAB_1e1a_1d22
LAB_1e1a_1d19:
    mov     ax, 0x1
    pop     si
    mov     sp, bp
    pop     bp
    retf
    db 0x90
LAB_1e1a_1d22:
    mov     ax, offset aGame1
    push    ax
    call    far ptr file_load_3dres
    add     sp, 0x2
    mov     word ptr [game1ptr], ax
    mov     word ptr [game1ptr+2], dx
    mov     ax, offset aGame2
    push    ax
    call    far ptr file_load_3dres
    add     sp, 0x2
    mov     word ptr [game2ptr], ax
    mov     word ptr [game2ptr+2], dx
    sub     si, si
LAB_1e1a_1d4a:
    mov     ax, si
    mov     cx, ax
    shl     ax, 0x1
    shl     ax, 0x1
    add     ax, cx
    add     ax, offset aBarn
    push    ax
    push    word ptr [game1ptr+2]
    push    word ptr [game1ptr]
    call    far ptr locate_shape_nofatal
    add     sp, 0x6
    mov     word ptr [curshapeptr], ax
    mov     word ptr [curshapeptr+2], dx
    or      ax, dx
    jnz     LAB_1e1a_1d98
    mov     ax, si
    mov     cx, ax
    shl     ax, 0x1
    shl     ax, 0x1
    add     ax, cx
    add     ax, offset aBarn
    push    ax
    push    word ptr [game2ptr+2]
    push    word ptr [game2ptr]
    call    far ptr locate_shape_fatal
    add     sp, 0x6
    mov     word ptr [curshapeptr], ax
    mov     word ptr [curshapeptr+2], dx
LAB_1e1a_1d98:
    mov     ax, 0x16
    imul    si
    add     ax, offset game3dshapes
    push    ax
    push    word ptr [curshapeptr+2]
    push    word ptr [curshapeptr]
    call    far ptr shape3d_init_shape
    add     sp, 0x6
    inc     si
    cmp     si, 0x74
    jl      LAB_1e1a_1d4a
    sub     ax, ax
    pop     si
    mov     sp, bp
    pop     bp
    retf
shape3d_load_all endp

; void __cdecl16far shape3d_free_all(void)
shape3d_free_all proc far
    mov     ax, word ptr [game1ptr]
    or      ax, word ptr [game1ptr+2]
    jz      LAB_1e1a_1dd7
    push    word ptr [game1ptr+2]
    push    word ptr [game1ptr]
    call    far ptr mmgr_free
    add     sp, 0x4
LAB_1e1a_1dd7:
    mov     ax, word ptr [game2ptr]
    or      ax, word ptr [game2ptr+2]
    jz      LAB_1e1a_1df0
    push    word ptr [game2ptr+2]
    push    word ptr [game2ptr]
    call    far ptr mmgr_free
    add     sp, 0x4
LAB_1e1a_1df0:
    retf
shape3d_free_all endp
    db 0x90

; void __stdcall16near shape3d_load_car_shapes(char * carid_player, char * carid_opp)
shape3d_load_car_shapes proc near
    var_10     = byte ptr  -16
    var_E      = dword ptr -14
    var_A      = dword ptr -10
    var_6      = dword ptr  -6
    carid_player = word ptr    4
    carid_opp  = word ptr    6

    push    bp
    mov     bp, sp
    sub     sp, 0x10
    push    di
    push    si
    mov     bx, word ptr [bp+carid_opp]
    mov     al, byte ptr [bx]
    mov     byte ptr [(aStxxx+2)], al
    mov     al, byte ptr [bx+0x1]
    mov     byte ptr [(aStxxx+3)], al
    mov     al, byte ptr [bx+0x2]
    mov     byte ptr [(aStxxx+4)], al
    mov     al, byte ptr [bx+0x3]
    mov     byte ptr [(aStxxx+5)], al
    mov     ax, offset aStxxx
    push    ax
    call    far ptr file_load_3dres
    add     sp, 0x2
    mov     word ptr [carresptr], ax
    mov     word ptr [carresptr+2], dx
    mov     ax, offset (game3dshapes+124*22).shape3d_numverts
    push    ax
    mov     ax, offset aCar0
    push    ax
    push    dx
    push    word ptr [carresptr]
    call    far ptr locate_shape_fatal
    add     sp, 0x6
    push    dx
    push    ax
    call    far ptr shape3d_init_shape
    add     sp, 0x6
    mov     ax, offset (game3dshapes+126*22).shape3d_numverts
    push    ax
    mov     ax, offset aCar1
    push    ax
    push    word ptr [carresptr+2]
    push    word ptr [carresptr]
    call    far ptr locate_shape_fatal
    add     sp, 0x6
    push    dx
    push    ax
    call    far ptr shape3d_init_shape
    add     sp, 0x6
    mov     ax, word ptr [(game3dshapes+126*22).shape3d_verts]
    mov     dx, word ptr [(game3dshapes+126*22).shape3d_verts+2]
    add     ax, 0x30
    mov     word ptr [bp+var_E], ax
    mov     word ptr [bp+var_E+2], dx
    les     bx, [bp+var_E]
    mov     ax, word ptr es:[bx+0x4]
    mov     word ptr [carshapevec.vz], ax
    mov     ax, word ptr es:[bx+0x12]
    add     ax, word ptr es:[bx]
    sar     ax, 0x1
    mov     word ptr [carshapevec], ax
    mov     ax, word ptr es:[bx+0x28]
    mov     word ptr [carshapevec2.vz], ax
    mov     ax, word ptr es:[bx+0x24]
    add     ax, word ptr es:[bx+0x36]
    sar     ax, 0x1
    mov     word ptr [carshapevec2], ax
    sub     si, si
LAB_1e1a_1ea4:
    mov     ax, si
    mov     cx, ax
    shl     ax, 0x1
    add     ax, cx
    shl     ax, 0x1
    mov     di, ax
    mov     ax, word ptr [carshapevec]
    les     bx, [bp+var_E]
    sub     ax, word ptr es:[bx+di]
    mov     word ptr [di+carshapevecs], ax
    les     bx, [bp+var_E]
    mov     ax, word ptr [carshapevec.vz]
    sub     ax, word ptr es:[bx+di+0x4]
    mov     word ptr [di+carshapevecs.vz], ax
    les     bx, [bp+var_E]
    mov     ax, word ptr es:[bx+di+0x2]
    mov     word ptr [di+carshapevecs.vy], ax
    les     bx, [bp+var_E]
    mov     ax, word ptr [carshapevec2]
    sub     ax, word ptr es:[bx+di+0x24]
    mov     word ptr [di+carshapevecs2], ax
    les     bx, [bp+var_E]
    mov     ax, word ptr [carshapevec2.vz]
    sub     ax, word ptr es:[bx+di+0x28]
    mov     word ptr [di+carshapevecs2.vz], ax
    les     bx, [bp+var_E]
    mov     ax, word ptr es:[bx+di+0x26]
    mov     word ptr [di+carshapevecs2.vy], ax
    les     bx, [bp+var_E]
    push    si
    push    di
    lea     si, [bx+di+0x48]
    lea     di, [di+carshapevecs3]
    push    ds
    push    ds
    push    es
    pop     ds
    pop     es
    movsw
    movsw
    movsw
    pop     ds
    pop     di
    pop     si
    les     bx, [bp+var_E]
    push    si
    push    di
    lea     si, [bx+di+0x6c]
    lea     di, [di+carshapevecs4]
    push    ds
    push    ds
    push    es
    pop     ds
    pop     es
    movsw
    movsw
    movsw
    pop     ds
    pop     di
    pop     si
    inc     si
    cmp     si, 0x6
    jge     LAB_1e1a_1f34
    jmp     near ptr LAB_1e1a_1ea4
LAB_1e1a_1f34:
    sub     si, si
LAB_1e1a_1f36:
    mov     bx, si
    shl     bx, 0x1
    mov     word ptr [bx+word_443E8], 0x0
    inc     si
    cmp     si, 0x5
    jl      LAB_1e1a_1f36
    mov     ax, offset (game3dshapes+128*22).shape3d_numverts
    push    ax
    mov     ax, offset aCar2
    push    ax
    push    word ptr [carresptr+2]
    push    word ptr [carresptr]
    call    far ptr locate_shape_fatal
    add     sp, 0x6
    push    dx
    push    ax
    call    far ptr shape3d_init_shape
    add     sp, 0x6
    mov     ax, offset (game3dshapes+116*22).shape3d_numverts
    push    ax
    mov     ax, offset aExp0_0
    push    ax
    push    word ptr [carresptr+2]
    push    word ptr [carresptr]
    call    far ptr locate_shape_fatal
    add     sp, 0x6
    push    dx
    push    ax
    call    far ptr shape3d_init_shape
    add     sp, 0x6
    mov     ax, offset (game3dshapes+117*22).shape3d_numverts
    push    ax
    mov     ax, offset aExp1_0
    push    ax
    push    word ptr [carresptr+2]
    push    word ptr [carresptr]
    call    far ptr locate_shape_fatal
    add     sp, 0x6
    push    dx
    push    ax
    call    far ptr shape3d_init_shape
    add     sp, 0x6
    mov     ax, offset (game3dshapes+118*22).shape3d_numverts
    push    ax
    mov     ax, offset aExp2_0
    push    ax
    push    word ptr [carresptr+2]
    push    word ptr [carresptr]
    call    far ptr locate_shape_fatal
    add     sp, 0x6
    push    dx
    push    ax
    call    far ptr shape3d_init_shape
    add     sp, 0x6
    mov     ax, offset (game3dshapes+119*22).shape3d_numverts
    push    ax
    mov     ax, offset aExp3_0
    push    ax
    push    word ptr [carresptr+2]
    push    word ptr [carresptr]
    call    far ptr locate_shape_fatal
    add     sp, 0x6
    push    dx
    push    ax
    call    far ptr shape3d_init_shape
    add     sp, 0x6
    mov     bx, word ptr [bp+0x8]
    mov     al, byte ptr [bx]
    mov     byte ptr [bp+var_10], al
    cmp     al, 0xff
    jnz     LAB_1e1a_1fff
shape3d_load_car_shapes endp

; void __cdecl16far shape3d_null_opp_car_thunk(void)
shape3d_null_opp_car_thunk proc far
    jmp     near ptr shape3d_null_opp_car
shape3d_null_opp_car_thunk endp
LAB_1e1a_1fff:
    mov     bx, word ptr [bp+0x6]
    cmp     byte ptr [bx], al
    jz      LAB_1e1a_2009
    jmp     near ptr LAB_1e1a_208a
LAB_1e1a_2009:
    mov     di, word ptr [bp+0x8]
    mov     al, byte ptr [di+0x1]
    cmp     byte ptr [bx+0x1], al
    jnz     LAB_1e1a_208a
    mov     al, byte ptr [di+0x2]
    cmp     byte ptr [bx+0x2], al
    jnz     LAB_1e1a_208a
    mov     al, byte ptr [di+0x3]
    cmp     byte ptr [bx+0x3], al
    jnz     LAB_1e1a_208a
    push    word ptr [carresptr+2]
    push    word ptr [carresptr]
    call    far ptr mmgr_get_chunk_size_bytes
    add     sp, 0x4
    mov     word ptr [bp-0x6], ax
    mov     word ptr [bp-0x4], dx
    push    dx
    push    ax
    mov     ax, offset aCar2_0
    push    ax
    call    far ptr mmgr_alloc_resbytes
    add     sp, 0x6
    mov     word ptr [car2resptr], ax
    mov     word ptr [car2resptr+2], dx
    sub     ax, ax
    mov     word ptr [bp-0x8], ax
    mov     word ptr [bp-0xa], ax
    jmp     LAB_1e1a_2064
    db 0x90
    db 0x90
    db 0x90
LAB_1e1a_205c:
    add     word ptr [bp-0xa], 0x1
    adc     word ptr [bp-0x8], 0x0
LAB_1e1a_2064:
    mov     ax, word ptr [bp-0x6]
    mov     dx, word ptr [bp-0x4]
    cmp     word ptr [bp-0x8], dx
    jg      LAB_1e1a_20b7
    jl      LAB_1e1a_2076
    cmp     word ptr [bp-0xa], ax
    jnc     LAB_1e1a_20b7
LAB_1e1a_2076:
    mov     bx, word ptr [bp-0xa]
    les     di, [carresptr]
    mov     al, byte ptr es:[bx+di]
    les     di, [car2resptr]
    mov     byte ptr es:[bx+di], al
    jmp     LAB_1e1a_205c
    db 0x90
LAB_1e1a_208a:
    mov     bx, word ptr [bp+0x8]
    mov     al, byte ptr [bx]
    mov     byte ptr [(aStxxx+2)], al
    mov     al, byte ptr [bx+0x1]
    mov     byte ptr [(aStxxx+3)], al
    mov     al, byte ptr [bx+0x2]
    mov     byte ptr [(aStxxx+4)], al
    mov     al, byte ptr [bx+0x3]
    mov     byte ptr [(aStxxx+5)], al
    mov     ax, offset aStxxx
    push    ax
    call    far ptr file_load_3dres
    add     sp, 0x2
    mov     word ptr [car2resptr], ax
    mov     word ptr [car2resptr+2], dx
LAB_1e1a_20b7:
    mov     ax, offset (game3dshapes+125*22).shape3d_numverts
    push    ax
    mov     ax, offset aCar0_0
    push    ax
    push    word ptr [car2resptr+2]
    push    word ptr [car2resptr]
    call    far ptr locate_shape_fatal
    add     sp, 0x6
    push    dx
    push    ax
    call    far ptr shape3d_init_shape
    add     sp, 0x6
    mov     ax, offset (game3dshapes+127*22).shape3d_numverts
    push    ax
    mov     ax, offset aCar1_0
    push    ax
    push    word ptr [car2resptr+2]
    push    word ptr [car2resptr]
    call    far ptr locate_shape_fatal
    add     sp, 0x6
    push    dx
    push    ax
    call    far ptr shape3d_init_shape
    add     sp, 0x6
    mov     ax, word ptr [(game3dshapes+127*22).shape3d_verts]
    mov     dx, word ptr [(game3dshapes+127*22).shape3d_verts+2]
    add     ax, 0x30
    mov     word ptr [bp-0xe], ax
    mov     word ptr [bp-0xc], dx
    les     bx, [bp-0xe]
    mov     ax, word ptr es:[bx+0x4]
    mov     word ptr [oppcarshapevec.vz], ax
    mov     ax, word ptr es:[bx+0x12]
    add     ax, word ptr es:[bx]
    sar     ax, 0x1
    mov     word ptr [oppcarshapevec], ax
    mov     ax, word ptr es:[bx+0x28]
    mov     word ptr [oppcarshapevec2.vz], ax
    mov     ax, word ptr es:[bx+0x24]
    add     ax, word ptr es:[bx+0x36]
    sar     ax, 0x1
    mov     word ptr [oppcarshapevec2], ax
    sub     si, si
LAB_1e1a_2137:
    mov     ax, si
    mov     cx, ax
    shl     ax, 0x1
    add     ax, cx
    shl     ax, 0x1
    mov     di, ax
    mov     ax, word ptr [oppcarshapevec]
    les     bx, [bp-0xe]
    sub     ax, word ptr es:[bx+di]
    mov     word ptr [di+oppcarshapevecs], ax
    les     bx, [bp-0xe]
    mov     ax, word ptr [oppcarshapevec.vz]
    sub     ax, word ptr es:[bx+di+0x4]
    mov     word ptr [di+oppcarshapevecs.vz], ax
    les     bx, [bp-0xe]
    mov     ax, word ptr es:[bx+di+0x2]
    mov     word ptr [di+oppcarshapevecs.vy], ax
    les     bx, [bp-0xe]
    mov     ax, word ptr [oppcarshapevec2]
    sub     ax, word ptr es:[bx+di+0x24]
    mov     word ptr [di+oppcarshapevecs2], ax
    les     bx, [bp-0xe]
    mov     ax, word ptr [oppcarshapevec2.vz]
    sub     ax, word ptr es:[bx+di+0x28]
    mov     word ptr [di+oppcarshapevecs2.vz], ax
    les     bx, [bp-0xe]
    mov     ax, word ptr es:[bx+di+0x26]
    mov     word ptr [di+oppcarshapevecs2.vy], ax
    les     bx, [bp-0xe]
    push    si
    push    di
    lea     si, [bx+di+0x48]
    lea     di, [di+oppcarshapevecs3]
    push    ds
    push    ds
    push    es
    pop     ds
    pop     es
    movsw
    movsw
    movsw
    pop     ds
    pop     di
    pop     si
    les     bx, [bp-0xe]
    push    si
    push    di
    lea     si, [bx+di+0x6c]
    lea     di, [di+oppcarshapevecs4]
    push    ds
    push    ds
    push    es
    pop     ds
    pop     es
    movsw
    movsw
    movsw
    pop     ds
    pop     di
    pop     si
    inc     si
    cmp     si, 0x6
    jge     LAB_1e1a_21c7
    jmp     near ptr LAB_1e1a_2137
LAB_1e1a_21c7:
    sub     si, si
LAB_1e1a_21c9:
    mov     bx, si
    shl     bx, 0x1
    mov     word ptr [bx+word_4448A], 0x0
    inc     si
    cmp     si, 0x5
    jl      LAB_1e1a_21c9
    mov     ax, offset (game3dshapes+129*22).shape3d_numverts
    push    ax
    mov     ax, offset aCar2_1
    push    ax
    push    word ptr [car2resptr+2]
    push    word ptr [car2resptr]
    call    far ptr locate_shape_fatal
    add     sp, 0x6
    push    dx
    push    ax
    call    far ptr shape3d_init_shape
    add     sp, 0x6
    mov     ax, offset (game3dshapes+120*22).shape3d_numverts
    push    ax
    mov     ax, offset aExp0_1
    push    ax
    push    word ptr [car2resptr+2]
    push    word ptr [car2resptr]
    call    far ptr locate_shape_fatal
    add     sp, 0x6
    push    dx
    push    ax
    call    far ptr shape3d_init_shape
    add     sp, 0x6
    mov     ax, offset (game3dshapes+121*22).shape3d_numverts
    push    ax
    mov     ax, offset aExp1_1
    push    ax
    push    word ptr [car2resptr+2]
    push    word ptr [car2resptr]
    call    far ptr locate_shape_fatal
    add     sp, 0x6
    push    dx
    push    ax
    call    far ptr shape3d_init_shape
    add     sp, 0x6
    mov     ax, offset (game3dshapes+122*22).shape3d_numverts
    push    ax
    mov     ax, offset aExp2_1
    push    ax
    push    word ptr [car2resptr+2]
    push    word ptr [car2resptr]
    call    far ptr locate_shape_fatal
    add     sp, 0x6
    push    dx
    push    ax
    call    far ptr shape3d_init_shape
    add     sp, 0x6
    mov     ax, offset (game3dshapes+123*22).shape3d_numverts
    push    ax
    mov     ax, offset aExp3_1
    push    ax
    push    word ptr [car2resptr+2]
    push    word ptr [car2resptr]
    call    far ptr locate_shape_fatal
    add     sp, 0x6
    push    dx
    push    ax
    call    far ptr shape3d_init_shape
    add     sp, 0x6
    pop     si
    pop     di
    mov     sp, bp
    pop     bp
    retf
    db 0x90

; void __cdecl16far shape3d_null_opp_car(void)
shape3d_null_opp_car proc far
    sub     ax, ax
    mov     word ptr [car2resptr+2], ax
    mov     word ptr [car2resptr], ax
    pop     si
    pop     di
    mov     sp, bp
    pop     bp
    retf
shape3d_null_opp_car endp

; void __cdecl16far shape3d_free_car_shapes(void)
shape3d_free_car_shapes proc far
    mov     ax, word ptr [car2resptr]
    or      ax, word ptr [car2resptr+2]
    jz      LAB_1e1a_22d7
    mov     ax, offset oppcarshapevec
    push    ax
    mov     ax, offset oppcarshapevecs
    push    ax
    mov     ax, offset word_4448A
    push    ax
    mov     ax, offset unk_3E710
    push    ax
    sub     ax, ax
    push    ax
    mov     ax, word ptr [(game3dshapes+127*22).shape3d_verts]
    mov     dx, word ptr [(game3dshapes+127*22).shape3d_verts+2]
    add     ax, 0x30
    push    dx
    push    ax
    push    cs
    call    near ptr sub_204AE
    add     sp, 0xe
    push    word ptr [car2resptr+2]
    push    word ptr [car2resptr]
    call    far ptr mmgr_release
    add     sp, 0x4
LAB_1e1a_22d7:
    mov     ax, offset carshapevec
    push    ax
    mov     ax, offset carshapevecs
    push    ax
    mov     ax, offset word_443E8
    push    ax
    mov     ax, offset unk_3E710
    push    ax
    sub     ax, ax
    push    ax
    mov     ax, word ptr [(game3dshapes+126*22).shape3d_verts]
    mov     dx, word ptr [(game3dshapes+126*22).shape3d_verts+2]
    add     ax, 0x30
    push    dx
    push    ax
    push    cs
    call    near ptr sub_204AE
    add     sp, 0xe
    push    word ptr [carresptr+2]
    push    word ptr [carresptr]
    call    far ptr mmgr_free
    add     sp, 0x4
    retf
shape3d_free_car_shapes endp

; void __cdecl16far sub_204AE(VECTOR * verts, int steering_angle, int param_3, int param_4, VECTOR * carshapevecs_, VECTOR * carshapevec_)
sub_204AE proc far
    var_14     = word ptr  -20
    var_12     = word ptr  -18
    var_10     = word ptr  -16
    var_E      = word ptr  -14
    var_C      = word ptr  -12
    var_8      = word ptr   -8
    var_4      = word ptr   -4
    var_2      = word ptr   -2
    verts      = dword ptr   6
    steering_angle = word ptr   10
    param_3    = word ptr   12
    param_4    = word ptr   14
    carshapevecs_ = word ptr   16
    carshapevec_ = word ptr   18

    push    bp
    mov     bp, sp
    sub     sp, 0x14
    push    di
    push    si
    mov     bx, word ptr [bp+param_4]
    mov     ax, word ptr [bp+steering_angle]
    cmp     word ptr [bx+0x8], ax
    jnz     LAB_1e1a_2324
    jmp     near ptr LAB_1e1a_24ac
LAB_1e1a_2324:
    sar     ax, 0x1
    push    ax
    call    far ptr sin_fast
    add     sp, 0x2
    mov     word ptr [bp+var_C], ax
    mov     ax, word ptr [bp+steering_angle]
    sar     ax, 0x1
    push    ax
    call    far ptr cos_fast
    add     sp, 0x2
    mov     word ptr [bp+var_2], ax
    sub     si, si
LAB_1e1a_2345:
    mov     ax, si
    mov     cx, ax
    shl     ax, 0x1
    add     ax, cx
    shl     ax, 0x1
    mov     word ptr [bp+var_10], ax
    push    word ptr [bp+var_2]
    mov     bx, word ptr [bp+carshapevecs_]
    mov     ax, si
    shl     ax, 0x1
    add     ax, cx
    shl     ax, 0x1
    add     bx, ax
    push    word ptr [bx]
    call    far ptr multiply_and_scale
    add     sp, 0x4
    push    word ptr [bp+var_C]
    mov     bx, word ptr [bp+carshapevecs_]
    add     bx, word ptr [bp+var_10]
    push    word ptr [bx+0x4]
    mov     word ptr [bp+var_14], ax
    call    far ptr multiply_and_scale
    add     sp, 0x4
    mov     bx, word ptr [bp+carshapevec_]
    mov     cx, word ptr [bx]
    add     cx, ax
    add     cx, word ptr [bp+var_14]
    les     bx, [bp+verts]
    add     bx, word ptr [bp+var_10]
    mov     word ptr es:[bx], cx
    mov     ax, si
    mov     cx, ax
    shl     ax, 0x1
    add     ax, cx
    shl     ax, 0x1
    mov     word ptr [bp+var_12], ax
    push    word ptr [bp+var_2]
    mov     bx, word ptr [bp+carshapevecs_]
    mov     ax, si
    shl     ax, 0x1
    add     ax, cx
    shl     ax, 0x1
    add     bx, ax
    push    word ptr [bx+0x4]
    call    far ptr multiply_and_scale
    add     sp, 0x4
    push    word ptr [bp+var_C]
    mov     bx, word ptr [bp+carshapevecs_]
    add     bx, word ptr [bp+var_12]
    push    word ptr [bx]
    mov     word ptr [bp+var_14], ax
    call    far ptr multiply_and_scale
    add     sp, 0x4
    mov     bx, word ptr [bp+carshapevec_]
    mov     cx, word ptr [bx+0x4]
    add     cx, ax
    add     cx, word ptr [bp+var_14]
    les     bx, [bp+verts]
    add     bx, word ptr [bp+var_12]
    mov     word ptr es:[bx+0x4], cx
    inc     si
    cmp     si, 0x6
    jge     LAB_1e1a_23f2
    jmp     near ptr LAB_1e1a_2345
LAB_1e1a_23f2:
    mov     si, 0x6
LAB_1e1a_23f5:
    mov     ax, si
    mov     cx, ax
    shl     ax, 0x1
    add     ax, cx
    shl     ax, 0x1
    mov     word ptr [bp+var_14], ax
    push    word ptr [bp+var_2]
    mov     bx, word ptr [bp+carshapevecs_]
    mov     ax, si
    shl     ax, 0x1
    add     ax, cx
    shl     ax, 0x1
    add     bx, ax
    push    word ptr [bx]
    call    far ptr multiply_and_scale
    add     sp, 0x4
    push    word ptr [bp+var_C]
    mov     bx, word ptr [bp+carshapevecs_]
    add     bx, word ptr [bp+var_14]
    push    word ptr [bx+0x4]
    mov     word ptr [bp+var_10], ax
    call    far ptr multiply_and_scale
    add     sp, 0x4
    mov     bx, word ptr [bp+carshapevec_]
    mov     cx, word ptr [bx+0x6]
    add     cx, ax
    add     cx, word ptr [bp+var_10]
    les     bx, [bp+verts]
    add     bx, word ptr [bp+var_14]
    mov     word ptr es:[bx], cx
    mov     ax, si
    mov     cx, ax
    shl     ax, 0x1
    add     ax, cx
    shl     ax, 0x1
    mov     word ptr [bp+var_12], ax
    push    word ptr [bp+var_2]
    mov     bx, word ptr [bp+carshapevecs_]
    mov     ax, si
    shl     ax, 0x1
    add     ax, cx
    shl     ax, 0x1
    add     bx, ax
    push    word ptr [bx+0x4]
    call    far ptr multiply_and_scale
    add     sp, 0x4
    push    word ptr [bp+var_C]
    mov     bx, word ptr [bp+carshapevecs_]
    add     bx, word ptr [bp+var_12]
    push    word ptr [bx]
    mov     word ptr [bp+var_10], ax
    call    far ptr multiply_and_scale
    add     sp, 0x4
    mov     bx, word ptr [bp+carshapevec_]
    mov     cx, word ptr [bx+0xa]
    add     cx, ax
    add     cx, word ptr [bp+var_10]
    les     bx, [bp+verts]
    add     bx, word ptr [bp+var_12]
    mov     word ptr es:[bx+0x4], cx
    inc     si
    cmp     si, 0xc
    jge     LAB_1e1a_24a3
    jmp     near ptr LAB_1e1a_23f5
LAB_1e1a_24a3:
    mov     bx, word ptr [bp+param_4]
    mov     ax, word ptr [bp+steering_angle]
    mov     word ptr [bx+0x8], ax
LAB_1e1a_24ac:
    sub     di, di
    jmp     LAB_1e1a_24e7
LAB_1e1a_24b0:
    mov     ax, si
    mov     cx, ax
    shl     ax, 0x1
    add     ax, cx
    shl     ax, 0x1
    mov     word ptr [bp+var_14], ax
    mov     bx, word ptr [bp+carshapevecs_]
    add     bx, ax
    mov     ax, word ptr [bx+0x2]
    sub     ax, word ptr [bp+var_8]
    les     bx, [bp+verts]
    add     bx, word ptr [bp+var_14]
    mov     word ptr es:[bx+0x2], ax
    inc     si
LAB_1e1a_24d3:
    cmp     word ptr [bp+var_4], si
    jg      LAB_1e1a_24b0
    mov     bx, word ptr [bp+param_4]
    mov     ax, di
    shl     ax, 0x1
    add     bx, ax
    mov     ax, word ptr [bp+var_8]
    mov     word ptr [bx], ax
LAB_1e1a_24e6:
    inc     di
LAB_1e1a_24e7:
    cmp     di, 0x4
    jge     LAB_1e1a_252e
    mov     ax, di
    shl     ax, 0x1
    mov     word ptr [bp+var_14], ax
    mov     bx, word ptr [bp+param_3]
    add     bx, ax
    mov     ax, word ptr [bx]
    cwd
    xor     ax, dx
    sub     ax, dx
    mov     cx, 0x6
    sar     ax, cl
    xor     ax, dx
    sub     ax, dx
    mov     word ptr [bp+var_8], ax
    mov     bx, word ptr [bp+param_4]
    add     bx, word ptr [bp+var_14]
    cmp     word ptr [bx], ax
    jz      LAB_1e1a_24e6
    mov     ax, di
    mov     cx, ax
    shl     ax, 0x1
    add     ax, cx
    shl     ax, 0x1
    mov     word ptr [bp+var_E], ax
    add     ax, 0x6
    mov     word ptr [bp+var_4], ax
    mov     si, word ptr [bp+var_E]
    jmp     LAB_1e1a_24d3
    db 0x90
LAB_1e1a_252e:
    pop     si
    pop     di
    mov     sp, bp
    pop     bp
    retf
sub_204AE endp

; int __cdecl16far track_setup(void)
track_setup proc far
    var_AF0    = dword ptr -2800
    var_AEC    = word ptr  -2796
    var_AEA    = word ptr  -2794
    var_AE8    = byte ptr  -2792
    var_MprevTileElem = byte ptr  -2790
    var_connCheckFlag = byte ptr  -2788
    var_tcompPtrL = word ptr  -2786
    var_tcompPtrH = word ptr  -2784
    var_ADE    = word ptr  -2782
    var_ADC    = word ptr  -2780
    var_ADA    = word ptr  -2778
    var_AD8    = word ptr  -2776
    var_AD6    = word ptr  -2774
    var_AD4    = byte ptr  -2772
    var_tileTerr = byte ptr  -1870
    var_74C    = byte ptr  -1868
    var_tcompPtr2L = word ptr  -1866
    var_tcompPtr2H = word ptr  -1864
    var_746    = byte ptr  -1862
    var_McurrExitPoint = byte ptr  -1860
    var_subTOIBlock = byte ptr  -1858
    var_MprevConnStatus = byte ptr  -1856
    var_MconnStatus = byte ptr  -1854
    var_trkRowIndex = byte ptr  -1850
    var_738    = byte ptr  -1848
    var_trackErrorCode = byte ptr  -944
    var_ptrCurrTOInfo = word ptr  -942
    var_3AC    = word ptr  -940
    var_3AA    = byte ptr  -938
    var_3A8    = byte ptr  -936
    var_sfCount = byte ptr  -934
    var_trkColIndex = byte ptr  -932
    var_3A2    = word ptr  -930
    var_MinternalTOI1 = dword ptr -928
    var_ptrTOInfo = word ptr  -924
    var_MprevRowIndex = byte ptr  -922
    var_398    = byte ptr  -920
    var_prevConnCode = byte ptr  -18
    var_MprevColIndex = byte ptr  -16
    var_tileElem = byte ptr  -14
    var_C      = word ptr  -12
    var_A      = word ptr  -10
    var_trackDirection = word ptr   -8
    var_tileEntryPoint = byte ptr   -6
    var_4      = byte ptr   -4
    var_2      = byte ptr   -2

    push    bp
    mov     bp, sp
    sub     sp, 0xaf0
    push    di
    push    si
    mov     ax, 0x380
    cwd
    push    dx
    push    ax
    mov     ax, offset aTcomp
    push    ax
    call    far ptr mmgr_alloc_resbytes
    add     sp, 0x6
    mov     word ptr [bp+var_tcompPtrL], ax
    mov     word ptr [bp+var_tcompPtrH], dx
    or      ax, dx
    jnz     LAB_1e1a_2564
    mov     ax, 0x2
    pop     si
    pop     di
    mov     sp, bp
    pop     bp
    retf
LAB_1e1a_2564:
    mov     ax, word ptr [bp+var_tcompPtrL]
    mov     dx, word ptr [bp+var_tcompPtrH]
    mov     word ptr [bp+var_tcompPtr2L], ax
    mov     word ptr [bp+var_tcompPtr2H], dx
    mov     byte ptr [bp+var_sfCount], 0x0
    mov     byte ptr [bp+var_4], 0x0
    mov     word ptr [track_pieces_counter], 0x0
    sub     si, si
LAB_1e1a_2585:
    les     bx, [trackdata19]
    mov     byte ptr es:[bx+si], 0xff
    inc     si
    cmp     si, 0x385
    jl      LAB_1e1a_2585
    mov     byte ptr [bp+var_trkRowIndex], 0x0
    jmp     LAB_1e1a_2604
    db 0x90
LAB_1e1a_259c:
    mov     bl, byte ptr [bp+var_tileTerr]
    sub     bh, bh
    mov     al, byte ptr [bx+terrConnDataWtoE]
    mov     byte ptr [bp+var_prevConnCode], al
    inc     byte ptr [bp+var_trkColIndex]
; Typical double loop. The inner loop 
; on rows checks if the east-west 
; connectivity of terrain is correct.  
LAB_1e1a_25ad:
    cmp     byte ptr [bp+var_trkColIndex], 0x1e
    jge     LAB_1e1a_2600
    mov     al, byte ptr [bp+var_trkRowIndex]
    cbw
    mov     bx, ax
    shl     bx, 0x1
    mov     bx, word ptr [bx+terrainrows]
    mov     al, byte ptr [bp+var_trkColIndex]
    cbw
    add     bx, ax
    add     bx, word ptr [td15_terr_map_main]
    mov     es, word ptr [td15_terr_map_main+2]
    mov     al, byte ptr es:[bx]
    mov     byte ptr [bp+var_tileTerr], al
    mov     bl, al
    sub     bh, bh
    mov     al, byte ptr [bp+var_prevConnCode]
    cmp     byte ptr [bx+terrConnDataEtoW], al
    jz      LAB_1e1a_259c
; 63h = unset flag  
    cmp     al, 0x63
    jz      LAB_1e1a_259c
LAB_1e1a_25e8:
    mov     byte ptr [bp+var_trackErrorCode], terr_mism
LAB_1e1a_25ed:
    cmp     byte ptr [bp+var_trkColIndex], 0xff
    jz      LAB_1e1a_25f7
    jmp     near ptr LAB_1e1a_35da
LAB_1e1a_25f7:
    mov     byte ptr [bp+var_trkColIndex], 0x0
    jmp     near ptr LAB_1e1a_35e6
    db 0x90
LAB_1e1a_2600:
    inc     byte ptr [bp+var_trkRowIndex]
LAB_1e1a_2604:
    cmp     byte ptr [bp+var_trkRowIndex], 0x1e
    jge     LAB_1e1a_2616
    mov     byte ptr [bp+var_prevConnCode], 0x63
    mov     byte ptr [bp+var_trkColIndex], 0x0
    jmp     LAB_1e1a_25ad
LAB_1e1a_2616:
    mov     byte ptr [bp+var_trkColIndex], 0x0
    jmp     LAB_1e1a_2672
    db 0x90
LAB_1e1a_261e:
    mov     bl, byte ptr [bp+var_tileTerr]
    sub     bh, bh
    mov     al, byte ptr [bx+terrConnDataStoN]
    mov     byte ptr [bp+var_prevConnCode], al
    inc     byte ptr [bp+var_trkRowIndex]
LAB_1e1a_262f:
    cmp     byte ptr [bp+var_trkRowIndex], 0x1e
    jge     LAB_1e1a_266e
    mov     al, byte ptr [bp+var_trkRowIndex]
    cbw
    mov     bx, ax
    shl     bx, 0x1
    mov     bx, word ptr [bx+terrainrows]
    mov     al, byte ptr [bp+var_trkColIndex]
    cbw
    add     bx, ax
    add     bx, word ptr [td15_terr_map_main]
    mov     es, word ptr [td15_terr_map_main+2]
    mov     al, byte ptr es:[bx]
    mov     byte ptr [bp+var_tileTerr], al
    mov     bl, al
    sub     bh, bh
    mov     al, byte ptr [bp+var_prevConnCode]
    cmp     byte ptr [bx+terrConnDataNtoS], al
    jz      LAB_1e1a_261e
    cmp     al, 0x63
    jz      LAB_1e1a_261e
    jmp     near ptr LAB_1e1a_25e8
    db 0x90
LAB_1e1a_266e:
    inc     byte ptr [bp+var_trkColIndex]
; Terrain mismatch check by columns.  
LAB_1e1a_2672:
    cmp     byte ptr [bp+var_trkColIndex], 0x1e
    jge     LAB_1e1a_2684
    mov     byte ptr [bp+var_prevConnCode], 0x63
    mov     byte ptr [bp+var_trkRowIndex], 0x0
    jmp     LAB_1e1a_262f
LAB_1e1a_2684:
    mov     byte ptr [bp+var_trkRowIndex], 0x0
    jmp     near ptr LAB_1e1a_27b6
; Initial track orient.  
LAB_1e1a_268c:
    mov     word ptr [track_angle], 0x0
; Sanity check...  
LAB_1e1a_2692:
    cmp     byte ptr [bp+var_sfCount], 0x0
    jz      LAB_1e1a_26da
    mov     byte ptr [bp+var_trackErrorCode], many_sf
    jmp     near ptr LAB_1e1a_25ed
    db 0x90
LAB_1e1a_26a2:
    mov     word ptr [track_angle], 0x200
    jmp     LAB_1e1a_2692
LAB_1e1a_26aa:
    mov     word ptr [track_angle], 0x100
    jmp     LAB_1e1a_2692
LAB_1e1a_26b2:
    mov     word ptr [track_angle], 0x300
    jmp     LAB_1e1a_2692
LAB_1e1a_26ba:
    cmp     ax, 0x94
    jz      LAB_1e1a_26a2
    cmp     ax, 0x95
    jz      LAB_1e1a_26aa
    cmp     ax, 0x96
    jz      LAB_1e1a_26b2
    cmp     ax, 0xb3
    jz      LAB_1e1a_26a2
    cmp     ax, 0xb4
    jz      LAB_1e1a_26aa
    cmp     ax, 0xb5
LAB_1e1a_26d6:
    jz      LAB_1e1a_26b2
    jmp     LAB_1e1a_271b
LAB_1e1a_26da:
    mov     al, byte ptr [bp+var_trkColIndex]
    mov     byte ptr [startcol2], al
    mov     al, byte ptr [bp+var_trkRowIndex]
    mov     byte ptr [startrow2], al
    cbw
    mov     bx, ax
    shl     bx, 0x1
    mov     bx, word ptr [bx+terrainrows]
    mov     al, byte ptr [bp+var_trkColIndex]
    cbw
    add     bx, ax
    add     bx, word ptr [td15_terr_map_main]
    mov     es, word ptr [td15_terr_map_main+2]
    mov     al, byte ptr es:[bx]
    mov     byte ptr [bp+var_tileTerr], al
    cmp     al, 0x6                            ; hilltop
    jnz     LAB_1e1a_2712
    mov     byte ptr [hillFlag], 0x1
    jmp     LAB_1e1a_2717
LAB_1e1a_2712:
    mov     byte ptr [hillFlag], 0x0
LAB_1e1a_2717:
    inc     byte ptr [bp+var_sfCount]
LAB_1e1a_271b:
    inc     byte ptr [bp+var_trkColIndex]
LAB_1e1a_271f:
    cmp     byte ptr [bp+var_trkColIndex], 0x1e
    jl      LAB_1e1a_2729
    jmp     near ptr LAB_1e1a_27b2
LAB_1e1a_2729:
    mov     al, byte ptr [bp+var_trkRowIndex]
    cbw
    mov     bx, ax
    shl     bx, 0x1
    mov     bx, word ptr [bx+trackrows]
    mov     al, byte ptr [bp+var_trkColIndex]
    cbw
    add     bx, ax
    add     bx, word ptr [td14_elem_map_main]
    mov     es, word ptr [td14_elem_map_main+2]
    mov     al, byte ptr es:[bx]
    mov     byte ptr [bp+var_tileElem], al
    cmp     al, 0xfd                           ; <filler
    jc      LAB_1e1a_2753
; Special tile values like 
; fillers are modified to the 
; real physical entity if need be.  
    mov     byte ptr [bp+var_tileElem], 0x0
LAB_1e1a_2753:
    cmp     byte ptr [bp+var_tileElem], 0xb6
    jc      LAB_1e1a_2779
; B5<elemTile<FD : Illegal value, 
; replaced by 0x04 locally and in td14  
    mov     byte ptr [bp+var_tileElem], 0x4
    mov     al, byte ptr [bp+var_trkRowIndex]
    cbw
    mov     bx, ax
    shl     bx, 0x1
    mov     bx, word ptr [bx+trackrows]
    mov     al, byte ptr [bp+var_trkColIndex]
    cbw
    add     bx, ax
    add     bx, word ptr [td14_elem_map_main]
    mov     byte ptr es:[bx], 0x4
; Now looking for s/f tiles.  
LAB_1e1a_2779:
    mov     al, byte ptr [bp+var_tileElem]
    sub     ah, ah
    cmp     ax, 0x93
    jnz     LAB_1e1a_2786
    jmp     near ptr LAB_1e1a_268c
LAB_1e1a_2786:
    jbe     LAB_1e1a_278b
    jmp     near ptr LAB_1e1a_26ba
LAB_1e1a_278b:
    cmp     ax, 0x1
    jnz     LAB_1e1a_2793
    jmp     near ptr LAB_1e1a_268c
LAB_1e1a_2793:
    cmp     ax, 0x86
    jnz     LAB_1e1a_279b
    jmp     near ptr LAB_1e1a_268c
LAB_1e1a_279b:
    cmp     ax, 0x87
    jnz     LAB_1e1a_27a3
    jmp     near ptr LAB_1e1a_26a2
LAB_1e1a_27a3:
    cmp     ax, 0x88
    jnz     LAB_1e1a_27ab
    jmp     near ptr LAB_1e1a_26aa
LAB_1e1a_27ab:
    cmp     ax, 0x89
    jmp     near ptr LAB_1e1a_26d6
    db 0x90
LAB_1e1a_27b2:
    inc     byte ptr [bp+var_trkRowIndex]
; Start line tile search.  
LAB_1e1a_27b6:
    cmp     byte ptr [bp+var_trkRowIndex], 0x1e
    jge     LAB_1e1a_27c6
    mov     byte ptr [bp+var_trkColIndex], 0x0
    jmp     near ptr LAB_1e1a_271f
    db 0x90
LAB_1e1a_27c6:
    cmp     byte ptr [bp+var_sfCount], 0x0
    jnz     LAB_1e1a_27d6
    mov     byte ptr [bp+var_trackErrorCode], no_sf
    jmp     near ptr LAB_1e1a_25ed
    db 0x90
; Left the loop...  
LAB_1e1a_27d6:
    mov     word ptr [track_pieces_counter], 0x0
    mov     byte ptr [bp+var_746], 0x0
    mov     byte ptr [byte_45635], 0x0
    mov     byte ptr [byte_4616E], 0x0
    mov     byte ptr [bp+var_3A8], 0x0
    mov     byte ptr [bp+var_AE8], 0x0
    sub     si, si
LAB_1e1a_27f7:
    mov     byte ptr [bp+si+0xf8c8], 0x0
    mov     ax, si
    shl     ax, 0x1
    mov     word ptr [bp+var_AEA], ax
    mov     bx, ax
    add     bx, word ptr [td01_track_file_cpy]
    mov     es, word ptr [td01_track_file_cpy+2]
    mov     word ptr es:[bx], 0xffff
    mov     bx, word ptr [bp+var_AEA]
    add     bx, word ptr [td02_penalty_related]
    mov     es, word ptr [td02_penalty_related+2]
    mov     word ptr es:[bx], 0xffff
    inc     si
    cmp     si, 0x385
    jl      LAB_1e1a_27f7
    mov     al, byte ptr [startcol2]
    mov     byte ptr [bp+var_trkColIndex], al
    mov     al, byte ptr [startrow2]
    mov     byte ptr [bp+var_trkRowIndex], al
    mov     ax, word ptr [track_angle]
    mov     word ptr [bp+var_trackDirection], ax
    mov     byte ptr [bp+var_prevConnCode], 0x0
    mov     word ptr [bp+var_3AC], 0xffff
; This looks ridiculously complex because 
; it follows track paths, not rows and 
; columns. These first few escapes are in 
; case the track runs to the fence.  
LAB_1e1a_2849:
    mov     byte ptr [bp+var_2], 0x0
    cmp     byte ptr [bp+var_trkColIndex], 0x0
    jl      LAB_1e1a_286c
    cmp     byte ptr [bp+var_trkRowIndex], 0x0
    jl      LAB_1e1a_286c
    cmp     byte ptr [bp+var_trkColIndex], 0x1d
    jg      LAB_1e1a_286c
    cmp     byte ptr [bp+var_trkRowIndex], 0x1d
    jg      LAB_1e1a_286c
    jmp     near ptr LAB_1e1a_2922
LAB_1e1a_286c:
    cmp     byte ptr [bp+var_746], 0x0
    jnz     LAB_1e1a_2876
    jmp     near ptr LAB_1e1a_2d80
; Reading internal TOI  
LAB_1e1a_2876:
    dec     byte ptr [bp+var_746]
    mov     al, byte ptr [bp+var_746]
    sub     ah, ah
    mov     cx, ax
    shl     ax, 0x1
    add     ax, cx
    shl     ax, 0x1
    add     ax, cx
    shl     ax, 0x1
    add     ax, word ptr [bp+var_tcompPtr2L]
    mov     dx, word ptr [bp+var_tcompPtr2H]
    mov     word ptr [bp+var_MinternalTOI1], ax
    mov     word ptr [bp+var_MinternalTOI1+2], dx
    les     bx, [bp+var_MinternalTOI1]
    mov     al, byte ptr es:[bx]
    mov     byte ptr [bp+var_trkColIndex], al
    mov     al, byte ptr es:[bx+0x1]
    mov     byte ptr [bp+var_trkRowIndex], al
    mov     al, byte ptr es:[bx+0x2]
    mov     byte ptr [bp+var_tileElem], al
    mov     al, byte ptr es:[bx+0x3]
    mov     byte ptr [bp+var_subTOIBlock], al
    mov     al, byte ptr es:[bx+0x4]
    mov     byte ptr [bp+var_MconnStatus], al
    mov     al, byte ptr es:[bx+0xb]
    mov     byte ptr [bp+var_prevConnCode], al
    mov     ax, word ptr es:[bx+0xc]
    mov     word ptr [bp+var_3AC], ax
    mov     al, byte ptr es:[bx+0x5]
    mov     byte ptr [bp+var_3A8], al
    mov     al, byte ptr es:[bx+0x6]
    mov     byte ptr [bp+var_MprevColIndex], al
    mov     al, byte ptr es:[bx+0x7]
    mov     byte ptr [bp+var_MprevRowIndex], al
    mov     al, byte ptr es:[bx+0x8]
    mov     byte ptr [bp+var_MprevTileElem], al
    mov     al, byte ptr es:[bx+0x9]
    mov     byte ptr [bp+var_3AA], al
    mov     al, byte ptr es:[bx+0xa]
    mov     byte ptr [bp+var_MprevConnStatus], al
    mov     byte ptr [bp+var_2], 0x1
LAB_1e1a_2908:
    cmp     byte ptr [bp+var_2], 0x0
    jnz     LAB_1e1a_2911
    jmp     near ptr LAB_1e1a_2849
LAB_1e1a_2911:
    cmp     byte ptr [bp+var_4], 0x1
    ja      LAB_1e1a_291a
    jmp     near ptr LAB_1e1a_2dca
LAB_1e1a_291a:
    mov     byte ptr [bp+var_trackErrorCode], long_jump
    jmp     near ptr LAB_1e1a_25ed
; Normal procedure. 
; Starts by loading the tile  
LAB_1e1a_2922:
    mov     al, byte ptr [bp+var_trkColIndex]
    cbw
    mov     word ptr [bp+var_AEA], ax
    mov     al, byte ptr [bp+var_trkRowIndex]
    cbw
    shl     ax, 0x1
    mov     word ptr [bp+var_AEC], ax
    mov     bx, ax
    mov     bx, word ptr [bx+trackrows]
    add     bx, word ptr [bp+var_AEA]
    add     bx, word ptr [td14_elem_map_main]
    mov     es, word ptr [td14_elem_map_main+2]
    mov     al, byte ptr es:[bx]
    mov     byte ptr [bp+var_tileElem], al
    mov     bx, word ptr [bp+var_AEC]
    mov     bx, word ptr [bx+terrainrows]
    add     bx, word ptr [bp+var_AEA]
    add     bx, word ptr [td15_terr_map_main]
    mov     es, word ptr [td15_terr_map_main+2]
    mov     al, byte ptr es:[bx]
    mov     byte ptr [bp+var_tileTerr], al
    cmp     byte ptr [bp+var_tileElem], 0x0
    jz      LAB_1e1a_2990
    or      al, al
    jz      LAB_1e1a_2990
    cmp     al, 0x7
    jc      LAB_1e1a_2990
    cmp     al, 0xb
    jnc     LAB_1e1a_2990
; Handling tile substitutions 
; on hill slopes.  
    mov     al, byte ptr [bp+var_tileElem]
    sub     ah, ah
    push    ax
    mov     al, byte ptr [bp+var_tileTerr]
    push    ax
    push    cs
    call    near ptr subst_hillroad_track
    add     sp, 0x4
    mov     byte ptr [bp+var_tileElem], al
LAB_1e1a_2990:
    cmp     byte ptr [bp+var_tileElem], 0xfd
    jnc     LAB_1e1a_2999
    jmp     near ptr LAB_1e1a_2a72
; Filler tests. If a filler is met, tile indices 
; will be set to the main tile (decs and incs) 
; and tile connectivity will be adjusted accordingly 
; (rotation check and pre-setting of tileEntryPoint).   
LAB_1e1a_2999:
    mov     al, byte ptr [bp+var_tileElem]
    sub     ah, ah
    cmp     ax, 0xfd
    jz      LAB_1e1a_29d6
    cmp     ax, 0xfe
    jz      LAB_1e1a_2a02
    cmp     ax, 0xff
    jnz     LAB_1e1a_29b0
    jmp     near ptr LAB_1e1a_2a34
; Load main element value.  
LAB_1e1a_29b0:
    mov     al, byte ptr [bp+var_trkRowIndex]
    cbw
    mov     bx, ax
    shl     bx, 0x1
    mov     bx, word ptr [bx+trackrows]
    mov     al, byte ptr [bp+var_trkColIndex]
    cbw
    add     bx, ax
    add     bx, word ptr [td14_elem_map_main]
    mov     es, word ptr [td14_elem_map_main+2]
    mov     al, byte ptr es:[bx]
    mov     byte ptr [bp+var_tileElem], al
    jmp     near ptr LAB_1e1a_2a8e
    db 0x90
LAB_1e1a_29d6:
    dec     byte ptr [bp+var_trkColIndex]
    dec     byte ptr [bp+var_trkRowIndex]
    mov     ax, word ptr [bp+var_trackDirection]
    or      ax, ax
    jz      LAB_1e1a_29f6
    cmp     ax, 0x100
    jz      LAB_1e1a_2a62
    cmp     ax, 0x200
    jz      LAB_1e1a_2a62
    cmp     ax, 0x300
    jz      LAB_1e1a_29fc
    jmp     LAB_1e1a_29b0
LAB_1e1a_29f6:
    mov     byte ptr [bp+var_tileEntryPoint], 0xc
    jmp     LAB_1e1a_29b0
LAB_1e1a_29fc:
    mov     byte ptr [bp+var_tileEntryPoint], 0x9
    jmp     LAB_1e1a_29b0
LAB_1e1a_2a02:
    dec     byte ptr [bp+var_trkRowIndex]
    mov     ax, word ptr [bp+var_trackDirection]
    or      ax, ax
    jz      LAB_1e1a_2a1e
    cmp     ax, 0x100
    jz      LAB_1e1a_2a24
    cmp     ax, 0x200
    jz      LAB_1e1a_2a62
    cmp     ax, 0x300
    jz      LAB_1e1a_2a2c
    jmp     LAB_1e1a_29b0
LAB_1e1a_2a1e:
    mov     byte ptr [bp+var_tileEntryPoint], 0xb
    jmp     LAB_1e1a_29b0
LAB_1e1a_2a24:
    mov     byte ptr [bp+var_tileEntryPoint], 0x6
    jmp     LAB_1e1a_29b0
    db 0x90
    db 0x90
LAB_1e1a_2a2c:
    mov     byte ptr [bp+var_tileEntryPoint], 0x7
    jmp     near ptr LAB_1e1a_29b0
    db 0x90
LAB_1e1a_2a34:
    dec     byte ptr [bp+var_trkColIndex]
    mov     ax, word ptr [bp+var_trackDirection]
    or      ax, ax
    jz      LAB_1e1a_2a52
    cmp     ax, 0x100
    jz      LAB_1e1a_2a62
    cmp     ax, 0x200
    jz      LAB_1e1a_2a5a
    cmp     ax, 0x300
    jz      LAB_1e1a_2a6a
    jmp     near ptr LAB_1e1a_29b0
    db 0x90
LAB_1e1a_2a52:
    mov     byte ptr [bp+var_tileEntryPoint], 0xa
    jmp     near ptr LAB_1e1a_29b0
    db 0x90
LAB_1e1a_2a5a:
    mov     byte ptr [bp+var_tileEntryPoint], 0x5
    jmp     near ptr LAB_1e1a_29b0
    db 0x90
LAB_1e1a_2a62:
    mov     byte ptr [bp+var_tileEntryPoint], 0x0
    jmp     near ptr LAB_1e1a_29b0
    db 0x90
LAB_1e1a_2a6a:
    mov     byte ptr [bp+var_tileEntryPoint], 0x8
    jmp     near ptr LAB_1e1a_29b0
    db 0x90
; Will set entry points based on entry 
; direction.  
LAB_1e1a_2a72:
    mov     ax, word ptr [bp+var_trackDirection]
    or      ax, ax
    jz      LAB_1e1a_2a8a
    cmp     ax, 0x100
    jz      LAB_1e1a_2aa8
    cmp     ax, 0x200
    jz      LAB_1e1a_2aa2
    cmp     ax, 0x300
    jz      LAB_1e1a_2aae
    jmp     LAB_1e1a_2a8e
LAB_1e1a_2a8a:
    mov     byte ptr [bp+var_tileEntryPoint], 0x2
LAB_1e1a_2a8e:
    cmp     byte ptr [bp+var_4], 0x0
    jnz     LAB_1e1a_2ab4
    cmp     byte ptr [bp+var_tileEntryPoint], 0x0
    jnz     LAB_1e1a_2ab4
    mov     byte ptr [bp+var_trackErrorCode], int_err
    jmp     near ptr LAB_1e1a_25ed
LAB_1e1a_2aa2:
    mov     byte ptr [bp+var_tileEntryPoint], 0x1
    jmp     LAB_1e1a_2a8e
LAB_1e1a_2aa8:
    mov     byte ptr [bp+var_tileEntryPoint], 0x4
    jmp     LAB_1e1a_2a8e
LAB_1e1a_2aae:
    mov     byte ptr [bp+var_tileEntryPoint], 0x3
    jmp     LAB_1e1a_2a8e
LAB_1e1a_2ab4:
    mov     byte ptr [bp+var_2], 0x0
    mov     al, byte ptr [bp+var_tileElem]
    sub     ah, ah
    mov     bx, ax
    shl     bx, 0x1
    add     bx, ax
    shl     bx, 0x1
    add     bx, ax
    shl     bx, 0x1                            ; *14
    mov     ax, word ptr [bx+trkObjectList]
    mov     word ptr [bp+var_ptrTOInfo], ax
    or      ax, ax
    jnz     LAB_1e1a_2ad8
; Elements w/o 
; connectivity  
    jmp     near ptr LAB_1e1a_2ce2
LAB_1e1a_2ad8:
    sub     si, si
    jmp     near ptr LAB_1e1a_2c9a
    db 0x90
LAB_1e1a_2ade:
    mov     byte ptr [bp+var_connCheckFlag], 0x0
    jmp     LAB_1e1a_2b02
    db 0x90
LAB_1e1a_2ae6:
    mov     bx, word ptr [bp+var_ptrCurrTOInfo]
    mov     al, byte ptr [bp+var_tileEntryPoint]
    cmp     byte ptr [bx+0x2], al
    jnz     LAB_1e1a_2b02
    mov     al, byte ptr [bp+var_prevConnCode]
    cmp     byte ptr [bx+0x4], al
    jz      LAB_1e1a_2afd
    jmp     near ptr LAB_1e1a_2cd9
LAB_1e1a_2afd:
    mov     byte ptr [bp+var_connCheckFlag], 0x1
LAB_1e1a_2b02:
    cmp     byte ptr [bp+var_connCheckFlag], 0x0
    jge     LAB_1e1a_2b0c
    jmp     near ptr LAB_1e1a_2ba8
; Possibly this is checking whether 
; we're back to the s/f tile.  
LAB_1e1a_2b0c:
    mov     al, byte ptr [bp+var_trkRowIndex]
    cbw
    mov     bx, ax
    shl     bx, 0x1
    mov     bx, word ptr [bx+trackrows]
    mov     al, byte ptr [bp+var_trkColIndex]
    cbw
    add     bx, ax
    add     bx, bp
    cmp     byte ptr [bx+0xf8c8], 0x0          ; ??
    jz      LAB_1e1a_2ba8
    sub     di, di
    jmp     LAB_1e1a_2b6e
    db 0x90
LAB_1e1a_2b2e:
    mov     byte ptr [bp+var_connCheckFlag], 0xff
    mov     ax, word ptr [bp+var_3AC]
    shl     ax, 0x1
    add     ax, word ptr [td01_track_file_cpy]
    mov     dx, word ptr [td01_track_file_cpy+2]
    mov     word ptr [bp+var_AF0], ax
    mov     word ptr [bp+var_AF0+2], dx
    les     bx, [bp+var_AF0]
    cmp     word ptr es:[bx], -0x1
    jz      LAB_1e1a_2b61
    mov     bx, word ptr [bp+var_3AC]
    shl     bx, 0x1
    add     bx, word ptr [td02_penalty_related]
    mov     es, word ptr [td02_penalty_related+2]
LAB_1e1a_2b61:
    mov     word ptr es:[bx], di
    or      di, di
    jnz     LAB_1e1a_2b6d
    mov     byte ptr [bp+var_AE8], 0x1
LAB_1e1a_2b6d:
    inc     di
; Possibly trying to find where we 
; are in a path.  
LAB_1e1a_2b6e:
    cmp     word ptr [track_pieces_counter], di
    jle     LAB_1e1a_2ba8
    les     bx, [td21_col_from_path]
    mov     al, byte ptr [bp+var_trkColIndex]
    cmp     byte ptr es:[bx+di], al
    jnz     LAB_1e1a_2b6d
    les     bx, [td22_row_from_path]
    mov     al, byte ptr [bp+var_trkRowIndex]
    cmp     byte ptr es:[bx+di], al
    jnz     LAB_1e1a_2b6d
    mov     ax, si
    cmp     byte ptr [bp+di+0xf52c], al
    jnz     LAB_1e1a_2b6d
    mov     al, byte ptr [bp+var_connCheckFlag]
    cmp     byte ptr [bp+di+0xfc68], al
    jz      LAB_1e1a_2b2e
    mov     byte ptr [bp+var_trackErrorCode], wrong_way
    jmp     near ptr LAB_1e1a_25ed
LAB_1e1a_2ba8:
    cmp     byte ptr [bp+var_connCheckFlag], 0x0
    jge     LAB_1e1a_2bb2
    jmp     near ptr LAB_1e1a_2c99
LAB_1e1a_2bb2:
    cmp     byte ptr [bp+var_2], 0x0
    jnz     LAB_1e1a_2bca
    mov     ax, si
    mov     byte ptr [bp+var_subTOIBlock], al
    mov     al, byte ptr [bp+var_connCheckFlag]
    mov     byte ptr [bp+var_MconnStatus], al
    jmp     near ptr LAB_1e1a_2c96
    db 0x90
LAB_1e1a_2bca:
    cmp     byte ptr [bp+var_746], 0x40
    jnz     LAB_1e1a_2bda
    mov     byte ptr [bp+var_trackErrorCode], many_path
    jmp     near ptr LAB_1e1a_25ed
    db 0x90
; Writing internal TOI  
LAB_1e1a_2bda:
    mov     al, byte ptr [bp+var_746]
    sub     ah, ah
    mov     cx, ax
    shl     ax, 0x1
    add     ax, cx
    shl     ax, 0x1
    add     ax, cx
    shl     ax, 0x1
    add     ax, word ptr [bp+var_tcompPtr2L]
    mov     dx, word ptr [bp+var_tcompPtr2H]
    mov     word ptr [bp+var_MinternalTOI1], ax
    mov     word ptr [bp+var_MinternalTOI1+2], dx
    les     bx, [bp+var_MinternalTOI1]
    mov     al, byte ptr [bp+var_trkColIndex]
    mov     byte ptr es:[bx], al
    les     bx, [bp+var_MinternalTOI1]
    mov     al, byte ptr [bp+var_trkRowIndex]
    mov     byte ptr es:[bx+0x1], al
    les     bx, [bp+var_MinternalTOI1]
    mov     al, byte ptr [bp+var_tileElem]
    mov     byte ptr es:[bx+0x2], al
    les     bx, [bp+var_MinternalTOI1]
    mov     ax, si
    mov     byte ptr es:[bx+0x3], al
    les     bx, [bp+var_MinternalTOI1]
    mov     al, byte ptr [bp+var_connCheckFlag]
    mov     byte ptr es:[bx+0x4], al
    les     bx, [bp+var_MinternalTOI1]
    mov     al, byte ptr [bp+var_prevConnCode]
    mov     byte ptr es:[bx+0xb], al
    les     bx, [bp+var_MinternalTOI1]
    mov     ax, word ptr [bp+var_3AC]
    mov     word ptr es:[bx+0xc], ax
    les     bx, [bp+var_MinternalTOI1]
    mov     al, byte ptr [bp+var_3A8]
    mov     byte ptr es:[bx+0x5], al
    les     bx, [bp+var_MinternalTOI1]
    mov     al, byte ptr [bp+var_MprevColIndex]
    mov     byte ptr es:[bx+0x6], al
    les     bx, [bp+var_MinternalTOI1]
    mov     al, byte ptr [bp+var_MprevRowIndex]
    mov     byte ptr es:[bx+0x7], al
    les     bx, [bp+var_MinternalTOI1]
    mov     al, byte ptr [bp+var_MprevTileElem]
    mov     byte ptr es:[bx+0x8], al
    les     bx, [bp+var_MinternalTOI1]
    mov     al, byte ptr [bp+var_3AA]
    mov     byte ptr es:[bx+0x9], al
    les     bx, [bp+var_MinternalTOI1]
    mov     al, byte ptr [bp+var_MprevConnStatus]
    mov     byte ptr es:[bx+0xa], al
    inc     byte ptr [bp+var_746]
LAB_1e1a_2c96:
    inc     byte ptr [bp+var_2]
LAB_1e1a_2c99:
    inc     si
; The loop runs over connected 
; TOInfo blocks.  
LAB_1e1a_2c9a:
    mov     bx, word ptr [bp+var_ptrTOInfo]
    mov     al, byte ptr [bx]
    sub     ah, ah
    cmp     ax, si
    jbe     LAB_1e1a_2ce2
    mov     byte ptr [bp+var_connCheckFlag], 0xff
    mov     ax, bx
    mov     cx, si
    mov     dx, cx
    shl     cx, 0x1
    add     cx, dx
    shl     cx, 0x1
    add     cx, dx
    shl     cx, 0x1                            ; cx = si*14
    add     ax, cx
    mov     word ptr [bp+var_ptrCurrTOInfo], ax
    mov     bx, ax
    mov     al, byte ptr [bp+var_tileEntryPoint]
    cmp     byte ptr [bx+0x1], al
    jz      LAB_1e1a_2cce
    jmp     near ptr LAB_1e1a_2ae6
LAB_1e1a_2cce:
    mov     al, byte ptr [bp+var_prevConnCode]
    cmp     byte ptr [bx+0x3], al
    jnz     LAB_1e1a_2cd9
    jmp     near ptr LAB_1e1a_2ade
LAB_1e1a_2cd9:
    mov     byte ptr [bp+var_trackErrorCode], elem_mism
    jmp     near ptr LAB_1e1a_25ed
    db 0x90
LAB_1e1a_2ce2:
    cmp     byte ptr [bp+var_2], 0x0
    jz      LAB_1e1a_2ceb
    jmp     near ptr LAB_1e1a_2908
LAB_1e1a_2ceb:
    cmp     byte ptr [bp+var_prevConnCode], 0x1
    jz      LAB_1e1a_2cf4
    jmp     near ptr LAB_1e1a_286c
LAB_1e1a_2cf4:
    cmp     byte ptr [bp+var_4], 0x2
    jc      LAB_1e1a_2cfd
    jmp     near ptr LAB_1e1a_286c
; Failure leads to "no 
; runway" error.  
LAB_1e1a_2cfd:
    cmp     byte ptr [bp+var_3A8], 0x2
    jnc     LAB_1e1a_2d0c
    mov     byte ptr [bp+var_trackErrorCode], no_runway
    jmp     near ptr LAB_1e1a_25ed
LAB_1e1a_2d0c:
    inc     byte ptr [bp+var_3A8]
    inc     byte ptr [bp+var_4]
    mov     ax, word ptr [bp+var_trackDirection]
    or      ax, ax
    jz      LAB_1e1a_2d2c
    cmp     ax, 0x100
    jz      LAB_1e1a_2d56
    cmp     ax, 0x200
    jz      LAB_1e1a_2d44
    cmp     ax, 0x300
    jz      LAB_1e1a_2d68
    jmp     near ptr LAB_1e1a_2849
LAB_1e1a_2d2c:
    mov     al, byte ptr [bp+var_MprevColIndex]
    mov     byte ptr [bp+var_trkColIndex], al
    mov     al, byte ptr [bp+var_MprevRowIndex]
    sub     al, byte ptr [bp+var_4]
    dec     al
LAB_1e1a_2d3c:
    mov     byte ptr [bp+var_trkRowIndex], al
    jmp     near ptr LAB_1e1a_2849
    db 0x90
LAB_1e1a_2d44:
    mov     al, byte ptr [bp+var_MprevColIndex]
    mov     byte ptr [bp+var_trkColIndex], al
    mov     al, byte ptr [bp+var_MprevRowIndex]
    add     al, byte ptr [bp+var_4]
    inc     al
    jmp     LAB_1e1a_2d3c
LAB_1e1a_2d56:
    mov     al, byte ptr [bp+var_MprevRowIndex]
    mov     byte ptr [bp+var_trkRowIndex], al
    mov     al, byte ptr [bp+var_MprevColIndex]
    add     al, byte ptr [bp+var_4]
    inc     al
    jmp     LAB_1e1a_2d78
LAB_1e1a_2d68:
    mov     al, byte ptr [bp+var_MprevRowIndex]
    mov     byte ptr [bp+var_trkRowIndex], al
    mov     al, byte ptr [bp+var_MprevColIndex]
    sub     al, byte ptr [bp+var_4]
    dec     al
LAB_1e1a_2d78:
    mov     byte ptr [bp+var_trkColIndex], al
    jmp     near ptr LAB_1e1a_2849
    db 0x90
LAB_1e1a_2d80:
    cmp     byte ptr [bp+var_AE8], 0x0
    jnz     LAB_1e1a_2d90
    mov     byte ptr [bp+var_trackErrorCode], no_path
    jmp     near ptr LAB_1e1a_25ed
    db 0x90
LAB_1e1a_2d90:
    mov     al, byte ptr [startcol2]
    mov     byte ptr [byte_45D90], al
    mov     al, byte ptr [startrow2]
    mov     byte ptr [byte_45E16], al
    mov     ax, word ptr [track_pieces_counter]
    cwd
    mov     cx, 0x3
    idiv    cx
    mov     si, ax
    cmp     si, 0x40
    jle     LAB_1e1a_2daf
    mov     si, 0x40
LAB_1e1a_2daf:
    mov     ax, si
    mov     byte ptr [byte_4616E], al
    sub     si, si
LAB_1e1a_2db6:
    mov     byte ptr [bp+si+0xf52c], 0x0
    inc     si
    cmp     si, 0x385
    jl      LAB_1e1a_2db6
    sub     di, di
    sub     si, si
    jmp     near ptr LAB_1e1a_34e8
    db 0x90
LAB_1e1a_2dca:
    mov     byte ptr [bp+var_4], 0x0
    mov     al, byte ptr [bp+var_trkRowIndex]
    cbw
    mov     bx, ax
    shl     bx, 0x1
    mov     bx, word ptr [bx+trackrows]
    mov     al, byte ptr [bp+var_trkColIndex]
    cbw
    add     bx, ax
    add     bx, bp
    mov     byte ptr [bx+0xf8c8], 0x1
    mov     bx, word ptr [track_pieces_counter]
    add     bx, bp
    mov     al, byte ptr [bp+var_subTOIBlock]
    mov     byte ptr [bx+var_AD4], al
    mov     bx, word ptr [track_pieces_counter]
    add     bx, bp
    mov     al, byte ptr [bp+var_MconnStatus]
    mov     byte ptr [bx+var_398], al
    cmp     word ptr [bp+var_3AC], -0x1
    jz      LAB_1e1a_2e40
    mov     ax, word ptr [bp+var_3AC]
    shl     ax, 0x1
    add     ax, word ptr [td01_track_file_cpy]
    mov     dx, word ptr [td01_track_file_cpy+2]
    mov     word ptr [bp+var_AF0], ax
    mov     word ptr [bp+var_AF0+2], dx
    les     bx, [bp+var_AF0]
    cmp     word ptr es:[bx], -0x1
    jz      LAB_1e1a_2e3a
    mov     bx, word ptr [bp+var_3AC]
    shl     bx, 0x1
    add     bx, word ptr [td02_penalty_related]
    mov     es, word ptr [td02_penalty_related+2]
LAB_1e1a_2e3a:
    mov     ax, word ptr [track_pieces_counter]
    mov     word ptr es:[bx], ax
LAB_1e1a_2e40:
    mov     ax, word ptr [track_pieces_counter]
    mov     word ptr [bp+var_3AC], ax
    mov     bx, ax
    add     bx, word ptr [td21_col_from_path]
    mov     es, word ptr [td21_col_from_path+2]
    mov     al, byte ptr [bp+var_trkColIndex]
    mov     byte ptr es:[bx], al
    mov     bx, word ptr [track_pieces_counter]
    add     bx, word ptr [td22_row_from_path]
    mov     es, word ptr [td22_row_from_path+2]
    mov     al, byte ptr [bp+var_trkRowIndex]
    mov     byte ptr es:[bx], al
    mov     bx, word ptr [track_pieces_counter]
    add     bx, word ptr [trackdata18]
    mov     es, word ptr [trackdata18+2]
    mov     al, byte ptr [bp+var_MconnStatus]
    mov     cl, 0x4                            ; high nibble
    shl     al, cl
    add     al, byte ptr [bp+var_subTOIBlock]
    mov     byte ptr es:[bx], al
    mov     bx, word ptr [track_pieces_counter]
    add     bx, word ptr [td17_trk_elem_ordered]
    mov     es, word ptr [td17_trk_elem_ordered+2]
    mov     al, byte ptr [bp+var_tileElem]
    mov     byte ptr es:[bx], al
    mov     al, byte ptr [bp+var_tileElem]
    sub     ah, ah
    mov     bx, ax
    shl     bx, 0x1
    add     bx, ax
    shl     bx, 0x1
    add     bx, ax
    shl     bx, 0x1
    mov     ax, word ptr [bx+trkObjectList]
    mov     word ptr [bp+var_ptrTOInfo], ax
    mov     al, byte ptr [bp+var_subTOIBlock]
    sub     ah, ah
    mov     cx, ax
    shl     ax, 0x1
    add     ax, cx
    shl     ax, 0x1
    add     ax, cx
    shl     ax, 0x1
    add     ax, word ptr [bp+var_ptrTOInfo]
    mov     word ptr [bp+var_ptrCurrTOInfo], ax
    mov     bx, ax
    mov     al, byte ptr [bx+0xc]
    mov     byte ptr [bp+var_74C], al
    or      al, al
    jnz     LAB_1e1a_2ee0
    inc     byte ptr [bp+var_3A8]
    jmp     near ptr LAB_1e1a_31c7
    db 0x90
LAB_1e1a_2ee0:
    cmp     byte ptr [bp+var_74C], 0xff
    jnz     LAB_1e1a_2eea
    jmp     near ptr LAB_1e1a_31c2
LAB_1e1a_2eea:
    cmp     byte ptr [bp+var_3A8], 0x3
    ja      LAB_1e1a_2ef4
    jmp     near ptr LAB_1e1a_31c2
LAB_1e1a_2ef4:
    cmp     byte ptr [byte_45635], 0x30
    jnz     LAB_1e1a_2efe
    jmp     near ptr LAB_1e1a_31c2
LAB_1e1a_2efe:
    mov     al, byte ptr [bp+var_tileElem]
    sub     ah, ah
    mov     bx, ax
    shl     bx, 0x1
    add     bx, ax
    shl     bx, 0x1
    add     bx, ax
    shl     bx, 0x1
    mov     ax, word ptr [bx+trkObjectList]
    mov     word ptr [bp+var_ptrTOInfo], ax
    mov     al, byte ptr [bp+var_subTOIBlock]
    sub     ah, ah
    mov     cx, ax
    shl     ax, 0x1
    add     ax, cx
    shl     ax, 0x1
    add     ax, cx
    shl     ax, 0x1
    add     ax, word ptr [bp+var_ptrTOInfo]
    mov     word ptr [bp+var_ptrCurrTOInfo], ax
    mov     bx, ax
    mov     al, byte ptr [bx+0xc]
    mov     byte ptr [bp+var_74C], al
    mov     al, byte ptr [bp+var_MprevTileElem]
    sub     ah, ah
    mov     bx, ax
    shl     bx, 0x1
    add     bx, ax
    shl     bx, 0x1
    add     bx, ax
    shl     bx, 0x1
    mov     ax, word ptr [bx+trkObjectList]
    mov     word ptr [bp+var_ptrTOInfo], ax
    mov     al, byte ptr [bp+var_3AA]
    sub     ah, ah
    mov     cx, ax
    shl     ax, 0x1
    add     ax, cx
    shl     ax, 0x1
    add     ax, cx
    shl     ax, 0x1
    add     ax, word ptr [bp+var_ptrTOInfo]
    mov     word ptr [bp+var_ptrCurrTOInfo], ax
    cmp     byte ptr [bp+var_MprevConnStatus], 0x0
    jz      LAB_1e1a_2f82
    mov     bx, ax
    cmp     word ptr [bx+0xa], 0x0
    jz      LAB_1e1a_2f86
    mov     ax, word ptr [bx+0xa]
    jmp     LAB_1e1a_2f89
LAB_1e1a_2f82:
    mov     bx, word ptr [bp+var_ptrCurrTOInfo]
LAB_1e1a_2f86:
    mov     ax, word ptr [bx+0x8]
LAB_1e1a_2f89:
    mov     word ptr [bp+var_ADE], ax
    mov     word ptr [bp+var_ADC], ds
    cmp     byte ptr [bp+var_MprevConnStatus], 0x0
    jz      LAB_1e1a_2fb6
    mov     bx, word ptr [bp+var_ptrCurrTOInfo]
    mov     al, byte ptr [bx+0x5]
    sub     ah, ah
    shl     ax, 0x1
    mov     cx, ax
    shl     ax, 0x1
    add     ax, cx
    shl     ax, 0x1
    add     ax, word ptr [bp+var_ADE]
    mov     dx, ds
    add     ax, 0xc
    jmp     LAB_1e1a_2fd4
LAB_1e1a_2fb6:
    mov     bx, word ptr [bp+var_ptrCurrTOInfo]
    mov     al, byte ptr [bx+0x5]
    sub     ah, ah
    shl     ax, 0x1
    mov     cx, ax
    shl     ax, 0x1
    add     ax, cx
    shl     ax, 0x1
    add     ax, word ptr [bp+var_ADE]
    mov     dx, word ptr [bp+var_ADC]
    add     ax, 0x6
LAB_1e1a_2fd4:
    push    si
    push    di
    lea     di, [bp+var_ADA]
    mov     si, ax
    push    ss
    pop     es
    push    ds
    mov     ds, dx
    movsw
    movsw
    movsw
    pop     ds
    pop     di
    pop     si
    cmp     byte ptr [bp+var_MconnStatus], 0x0
    jz      LAB_1e1a_2ffc
    mov     al, byte ptr [bp+var_74C]
    cbw
    mov     bx, ax
    mov     al, byte ptr [bx+byte_3E724]
    jmp     LAB_1e1a_3007
    db 0x90
LAB_1e1a_2ffc:
    mov     al, byte ptr [bp+var_74C]
    cbw
    mov     bx, ax
    mov     al, byte ptr [bx+byte_3E71E]
LAB_1e1a_3007:
    mov     byte ptr [bp+var_74C], al
    mov     bx, word ptr [bp+var_ptrCurrTOInfo]
    mov     ax, word ptr [bx+0x6]
    mov     word ptr [bp+var_trackDirection], ax
    cmp     ax, 0x100
    jz      LAB_1e1a_3074
    cmp     ax, 0x200
    jz      LAB_1e1a_305e
    cmp     ax, 0x300
    jnz     LAB_1e1a_303e
    mov     ax, word ptr [bp+var_ADA]
    mov     word ptr [bp+var_3A2], ax
    mov     ax, word ptr [bp+var_AD6]
    neg     ax
    mov     word ptr [bp+var_ADA], ax
    mov     ax, word ptr [bp+var_3A2]
LAB_1e1a_303a:
    mov     word ptr [bp+var_AD6], ax
LAB_1e1a_303e:
    cmp     byte ptr [bp+var_MprevConnStatus], 0x0
    jz      LAB_1e1a_308c
    mov     al, byte ptr [byte_45635]
    cbw
    mov     bx, ax
    shl     bx, 0x1
    add     bx, word ptr [td08_direction_related]
    mov     es, word ptr [td08_direction_related+2]
    mov     ax, word ptr [bp+var_trackDirection]
    xor     ah, 0x2
    jmp     LAB_1e1a_309f
    db 0x90
LAB_1e1a_305e:
    mov     ax, word ptr [bp+var_AD6]
    neg     ax
    mov     word ptr [bp+var_AD6], ax
    mov     ax, word ptr [bp+var_ADA]
    neg     ax
    mov     word ptr [bp+var_ADA], ax
    jmp     LAB_1e1a_303e
LAB_1e1a_3074:
    mov     ax, word ptr [bp+var_ADA]
    mov     word ptr [bp+var_3A2], ax
    mov     ax, word ptr [bp+var_AD6]
    mov     word ptr [bp+var_ADA], ax
    mov     ax, word ptr [bp+var_3A2]
    neg     ax
    jmp     LAB_1e1a_303a
LAB_1e1a_308c:
    mov     al, byte ptr [byte_45635]
    cbw
    mov     bx, ax
    shl     bx, 0x1
    add     bx, word ptr [td08_direction_related]
    mov     es, word ptr [td08_direction_related+2]
    mov     ax, word ptr [bp+var_trackDirection]
LAB_1e1a_309f:
    mov     word ptr es:[bx], ax
    mov     al, byte ptr [byte_45635]
    cbw
    mov     bx, ax
    add     bx, word ptr [trackdata23]
    mov     es, word ptr [trackdata23+2]
    mov     al, byte ptr [bp+var_74C]
    mov     byte ptr es:[bx], al
    mov     al, byte ptr [bp+var_MprevRowIndex]
    cbw
    mov     bx, ax
    shl     bx, 0x1
    mov     bx, word ptr [bx+terrainrows]
    mov     al, byte ptr [bp+var_MprevColIndex]
    cbw
    add     bx, ax
    add     bx, word ptr [td15_terr_map_main]
    mov     es, word ptr [td15_terr_map_main+2]
    cmp     byte ptr es:[bx], 0x6
    jnz     LAB_1e1a_30de
    add     word ptr [bp+var_AD8], 0x1c2
LAB_1e1a_30de:
    mov     al, byte ptr [byte_45635]
    cbw
    mov     bx, ax
    shl     bx, 0x1
    add     bx, ax
    shl     bx, 0x1
    add     bx, word ptr [td10_track_check_rel]
    mov     es, word ptr [td10_track_check_rel+2]
    mov     ax, word ptr [bp+var_AD8]
    mov     word ptr es:[bx+0x2], ax
    mov     al, byte ptr [bp+var_MprevTileElem]
    sub     ah, ah
    mov     bx, ax
    shl     bx, 0x1
    add     bx, ax
    shl     bx, 0x1
    add     bx, ax
    shl     bx, 0x1
    test    byte ptr [bx+trkObjectList.ss_multiTileFlag], 0x1
    jz      LAB_1e1a_3122
    mov     al, byte ptr [bp+var_MprevRowIndex]
    cbw
    mov     bx, ax
    shl     bx, 0x1
    mov     ax, word ptr [bx+trackpos]
    jmp     LAB_1e1a_312f
LAB_1e1a_3122:
    mov     al, byte ptr [bp+var_MprevRowIndex]
    cbw
    mov     bx, ax
    shl     bx, 0x1
    mov     ax, word ptr [bx+trackcenterpos]
LAB_1e1a_312f:
    add     ax, word ptr [bp+var_AD6]
    mov     cx, ax
    mov     al, byte ptr [byte_45635]
    cbw
    mov     bx, ax
    shl     bx, 0x1
    add     bx, ax
    shl     bx, 0x1
    add     bx, word ptr [td10_track_check_rel]
    mov     es, word ptr [td10_track_check_rel+2]
    mov     word ptr es:[bx+0x4], cx
    mov     al, byte ptr [bp+var_MprevTileElem]
    sub     ah, ah
    mov     bx, ax
    shl     bx, 0x1
    add     bx, ax
    shl     bx, 0x1
    add     bx, ax
    shl     bx, 0x1
    test    byte ptr [bx+trkObjectList.ss_multiTileFlag], 0x2
    jz      LAB_1e1a_3174
    mov     al, byte ptr [bp+var_MprevColIndex]
    cbw
    mov     bx, ax
    shl     bx, 0x1
    mov     ax, word ptr [bx+(trackpos2+1*2)]
    jmp     LAB_1e1a_3180
LAB_1e1a_3174:
    mov     al, byte ptr [bp+var_MprevColIndex]
    cbw
    mov     bx, ax
    shl     bx, 0x1
    mov     ax, word ptr [bx+trackcenterpos2]
LAB_1e1a_3180:
    add     ax, word ptr [bp+var_ADA]
    mov     cx, ax
    mov     al, byte ptr [byte_45635]
    cbw
    mov     bx, ax
    shl     bx, 0x1
    add     bx, ax
    shl     bx, 0x1
    add     bx, word ptr [td10_track_check_rel]
    mov     es, word ptr [td10_track_check_rel+2]
    mov     word ptr es:[bx], cx
    mov     al, byte ptr [bp+var_MprevRowIndex]
    cbw
    mov     bx, ax
    shl     bx, 0x1
    mov     bx, word ptr [bx+trackrows]
    mov     al, byte ptr [bp+var_MprevColIndex]
    cbw
    add     bx, ax
    add     bx, word ptr [trackdata19]
    mov     es, word ptr [trackdata19+2]
    mov     al, byte ptr [byte_45635]
    mov     byte ptr es:[bx], al
    inc     byte ptr [byte_45635]
LAB_1e1a_31c2:
    mov     byte ptr [bp+var_3A8], 0x0
LAB_1e1a_31c7:
    inc     word ptr [track_pieces_counter]
    cmp     word ptr [track_pieces_counter], 0x385
    jnz     LAB_1e1a_31dc
    mov     byte ptr [bp+var_trackErrorCode], many_elem
    jmp     near ptr LAB_1e1a_25ed
    db 0x90
LAB_1e1a_31dc:
    mov     al, byte ptr [bp+var_tileElem]
    sub     ah, ah
    mov     bx, ax
    shl     bx, 0x1
    add     bx, ax
    shl     bx, 0x1
    add     bx, ax
    shl     bx, 0x1
    mov     ax, word ptr [bx+trkObjectList]
    mov     word ptr [bp+var_ptrTOInfo], ax
    mov     al, byte ptr [bp+var_subTOIBlock]
    sub     ah, ah
    mov     cx, ax
    shl     ax, 0x1
    add     ax, cx
    shl     ax, 0x1
    add     ax, cx
    shl     ax, 0x1
    add     ax, word ptr [bp+var_ptrTOInfo]
    mov     word ptr [bp+var_ptrCurrTOInfo], ax
    cmp     byte ptr [bp+var_MconnStatus], 0x0
    jz      LAB_1e1a_3224
    mov     bx, ax
    mov     al, byte ptr [bx+0x1]
    mov     byte ptr [bp+var_McurrExitPoint], al
    mov     al, byte ptr [bx+0x3]
    jmp     LAB_1e1a_3232
LAB_1e1a_3224:
    mov     bx, word ptr [bp+var_ptrCurrTOInfo]
    mov     al, byte ptr [bx+0x2]
    mov     byte ptr [bp+var_McurrExitPoint], al
    mov     al, byte ptr [bx+0x4]
; This is the end of the thread; after 
; these branches the big loop over track 
; elements cycles. For that reason,it 
; will be the reference for naming several 
; variables. (doing it from inner loops is 
; a maddening task...)  
LAB_1e1a_3232:
    mov     byte ptr [bp+var_prevConnCode], al
    mov     al, byte ptr [bp+var_trkColIndex]
    mov     byte ptr [bp+var_MprevColIndex], al
    mov     al, byte ptr [bp+var_trkRowIndex]
    mov     byte ptr [bp+var_MprevRowIndex], al
    mov     al, byte ptr [bp+var_MconnStatus]
    mov     byte ptr [bp+var_MprevConnStatus], al
    mov     al, byte ptr [bp+var_subTOIBlock]
    mov     byte ptr [bp+var_3AA], al
    mov     al, byte ptr [bp+var_tileElem]
    mov     byte ptr [bp+var_MprevTileElem], al
    mov     al, byte ptr [bp+var_McurrExitPoint]
    sub     ah, ah
    sub     ax, 0x1
    cmp     ax, 0xb
    jbe     LAB_1e1a_326c                      ; filler-ish
    jmp     near ptr LAB_1e1a_2849
LAB_1e1a_326c:
    add     ax, ax
    xchg    ax, bx
    jmp     word ptr cs:[bx+off_1F896]
LAB_1e1a_3274:
    dec     byte ptr [bp+0xf8c6]
LAB_1e1a_3278:
    mov     word ptr [bp-0x8], 0x0
    jmp     near ptr LAB_1e1a_2849
LAB_1e1a_3280:
    dec     byte ptr [bp+0xf8c6]
    inc     byte ptr [bp+0xfc5c]
    jmp     LAB_1e1a_3278
LAB_1e1a_328a:
    inc     byte ptr [bp+0xf8c6]
LAB_1e1a_328e:
    dec     byte ptr [bp+0xfc5c]
    mov     word ptr [bp-0x8], 0x300
    jmp     near ptr LAB_1e1a_2849
LAB_1e1a_329a:
    inc     byte ptr [bp+0xfc5c]
LAB_1e1a_329e:
    inc     byte ptr [bp+0xf8c6]
LAB_1e1a_32a2:
    mov     word ptr [bp-0x8], 0x200
    jmp     near ptr LAB_1e1a_2849
LAB_1e1a_32aa:
    inc     byte ptr [bp+0xfc5c]
LAB_1e1a_32ae:
    add     byte ptr [bp+0xf8c6], 0x2
    jmp     LAB_1e1a_32a2
    db 0x90
LAB_1e1a_32b6:
    inc     byte ptr [bp+0xfc5c]
LAB_1e1a_32ba:
    mov     word ptr [bp-0x8], 0x100
    jmp     near ptr LAB_1e1a_2849
LAB_1e1a_32c2:
    inc     byte ptr [bp+0xfc5c]
LAB_1e1a_32c6:
    inc     byte ptr [bp+0xf8c6]
    jmp     LAB_1e1a_32ba
LAB_1e1a_32cc:
    add     byte ptr [bp+0xfc5c], 0x2
    jmp     LAB_1e1a_32ba
    db 0x90
LAB_1e1a_32d4:
    add     byte ptr [bp+0xfc5c], 0x2
    jmp     LAB_1e1a_32c6
    db 0x90
off_1F896:
    dw LAB_1e1a_3274
    dw LAB_1e1a_329e
    dw LAB_1e1a_32b6
    dw LAB_1e1a_328e
    dw LAB_1e1a_3280
    dw LAB_1e1a_328a
    dw LAB_1e1a_32c2
    dw LAB_1e1a_32cc
    dw LAB_1e1a_32d4
    dw LAB_1e1a_329a
    dw LAB_1e1a_32ae
    dw LAB_1e1a_32aa
    jmp     near ptr LAB_1e1a_2849
    db 0x90
LAB_1e1a_32f8:
    mov     al, byte ptr [bp+var_subTOIBlock]
    sub     ah, ah
    mov     bx, ax
    shl     bx, 0x1
    add     bx, ax
    shl     bx, 0x1
    add     bx, ax
    shl     bx, 0x1
    add     bx, word ptr [bp+var_ptrCurrTOInfo]
    mov     ax, word ptr [bx+0x8]
LAB_1e1a_3311:
    mov     word ptr [bp+var_ADE], ax
    mov     word ptr [bp+var_ADC], ds
    mov     al, byte ptr [bp+var_subTOIBlock]
    sub     ah, ah
    mov     cx, ax
    shl     ax, 0x1
    add     ax, cx
    shl     ax, 0x1
    add     ax, cx
    shl     ax, 0x1
    add     ax, word ptr [bp+var_ptrCurrTOInfo]
    mov     word ptr [bp+var_AF0], ax
    mov     bx, ax
    mov     al, byte ptr [bx+0x5]
    sub     ah, ah
    mov     cx, ax
    shl     ax, 0x1
    add     ax, cx
    shl     ax, 0x1
    shl     ax, 0x1
    add     ax, word ptr [bp+var_ADE]
    mov     dx, ds
    push    si
    push    di
    lea     di, [bp+var_ADA]
    mov     si, ax
    push    ss
    pop     es
    push    ds
    movsw
    movsw
    movsw
    pop     ds
    pop     di
    pop     si
    mov     ax, word ptr [bx+0x6]
    mov     word ptr [bp+var_trackDirection], ax
    cmp     ax, 0x100
    jz      LAB_1e1a_33d6
    cmp     ax, 0x200
    jz      LAB_1e1a_33c0
    cmp     ax, 0x300
    jnz     LAB_1e1a_338a
    mov     ax, word ptr [bp+var_ADA]
    mov     word ptr [bp+var_3A2], ax
    mov     ax, word ptr [bp+var_AD6]
    neg     ax
    mov     word ptr [bp+var_ADA], ax
    mov     ax, word ptr [bp+var_3A2]
LAB_1e1a_3386:
    mov     word ptr [bp+var_AD6], ax
LAB_1e1a_338a:
    mov     al, byte ptr [bp+var_trkRowIndex]
    cbw
    mov     bx, ax
    shl     bx, 0x1
    mov     bx, word ptr [bx+terrainrows]
    mov     al, byte ptr [bp+var_trkColIndex]
    cbw
    add     bx, ax
    add     bx, word ptr [td15_terr_map_main]
    mov     es, word ptr [td15_terr_map_main+2]
    cmp     byte ptr es:[bx], 0x6
    jnz     LAB_1e1a_33ee
    mov     bx, di
    shl     bx, 0x1
    add     bx, word ptr [trackdata7]
    mov     es, word ptr [trackdata7+2]
    mov     word ptr es:[bx], 0x1c2
    jmp     LAB_1e1a_33ff
    db 0x90
LAB_1e1a_33c0:
    mov     ax, word ptr [bp+var_AD6]
    neg     ax
    mov     word ptr [bp+var_AD6], ax
    mov     ax, word ptr [bp+var_ADA]
    neg     ax
    mov     word ptr [bp+var_ADA], ax
    jmp     LAB_1e1a_338a
LAB_1e1a_33d6:
    mov     ax, word ptr [bp+var_ADA]
    mov     word ptr [bp+var_3A2], ax
    mov     ax, word ptr [bp+var_AD6]
    mov     word ptr [bp+var_ADA], ax
    mov     ax, word ptr [bp+var_3A2]
    neg     ax
    jmp     LAB_1e1a_3386
LAB_1e1a_33ee:
    mov     bx, di
    shl     bx, 0x1
    add     bx, word ptr [trackdata7]
    mov     es, word ptr [trackdata7+2]
    mov     word ptr es:[bx], 0x0
LAB_1e1a_33ff:
    mov     ax, di
    shl     ax, 0x1
    mov     word ptr [bp+var_AF0], ax
    mov     bx, ax
    add     bx, word ptr [trackdata6]
    mov     es, word ptr [trackdata6+2]
    mov     word ptr es:[bx], 0x0
    mov     ax, di
    mov     cx, ax
    shl     ax, 0x1
    add     ax, cx
    shl     ax, 0x1
    mov     word ptr [bp+var_AEC], ax
    mov     bx, word ptr [bp+var_AF0]
    add     bx, word ptr [trackdata7]
    mov     es, word ptr [trackdata7+2]
    mov     ax, word ptr es:[bx]
    add     ax, word ptr [bp+var_AD8]
    mov     bx, word ptr [bp+var_AEC]
    add     bx, word ptr [trackdata9]
    mov     es, word ptr [trackdata9+2]
    mov     word ptr es:[bx+0x2], ax
    mov     bx, word ptr [bp+var_C]
    mov     ax, bx
    shl     bx, 0x1
    add     bx, ax
    shl     bx, 0x1
    add     bx, ax
    shl     bx, 0x1
    test    byte ptr [bx+trkObjectList.ss_multiTileFlag], 0x1
    jz      LAB_1e1a_3474
    mov     al, byte ptr [bp+var_trkRowIndex]
    cbw
switchdataD_2000_1602:
    mov     bx, ax
    shl     bx, 0x1
    mov     ax, word ptr [bx+trackpos]
    add     ax, word ptr [bp+var_AD6]
    mov     bx, word ptr [bp+var_AEC]
    jmp     LAB_1e1a_348f
LAB_1e1a_3474:
    mov     al, byte ptr [bp+var_trkRowIndex]
    cbw
    mov     bx, ax
    shl     bx, 0x1
    mov     ax, word ptr [bx+trackcenterpos]
    add     ax, word ptr [bp+var_AD6]
    mov     bx, di
    mov     cx, bx
    shl     bx, 0x1
    add     bx, cx
    shl     bx, 0x1
LAB_1e1a_348f:
    add     bx, word ptr [trackdata9]
    mov     es, word ptr [trackdata9+2]
    mov     word ptr es:[bx+0x4], ax
    mov     bx, word ptr [bp+var_C]
    mov     ax, bx
    shl     bx, 0x1
    add     bx, ax
    shl     bx, 0x1
    add     bx, ax
    shl     bx, 0x1
    test    byte ptr [bx+trkObjectList.ss_multiTileFlag], 0x2
    jz      LAB_1e1a_34c0
    mov     al, byte ptr [bp+var_trkColIndex]
    cbw
    mov     bx, ax
    shl     bx, 0x1
    mov     ax, word ptr [bx+(trackpos2+1*2)]
    jmp     LAB_1e1a_34cd
LAB_1e1a_34c0:
    mov     al, byte ptr [bp+var_trkColIndex]
    cbw
    mov     bx, ax
    shl     bx, 0x1
    mov     ax, word ptr [bx+trackcenterpos2]
LAB_1e1a_34cd:
    add     ax, word ptr [bp+var_ADA]
    mov     bx, di
    mov     cx, bx
    shl     bx, 0x1
    add     bx, cx
    shl     bx, 0x1
    add     bx, word ptr [trackdata9]
    mov     es, word ptr [trackdata9+2]
    mov     word ptr es:[bx], ax
    inc     di
LAB_1e1a_34e7:
    inc     si
LAB_1e1a_34e8:
    mov     al, byte ptr [byte_4616E]
    cbw
    mov     word ptr [bp+var_AF0], ax
    cmp     ax, si
    jg      LAB_1e1a_34f7
    jmp     near ptr LAB_1e1a_35ce
LAB_1e1a_34f7:
    mov     ax, word ptr [track_pieces_counter]
    imul    si
    cwd
    mov     cx, word ptr [bp+var_AF0]
    idiv    cx
    mov     word ptr [bp+var_A], ax
    mov     bx, ax
    add     bx, word ptr [td21_col_from_path]
    mov     es, word ptr [td21_col_from_path+2]
    mov     al, byte ptr es:[bx]
    mov     byte ptr [bp+var_trkColIndex], al
    mov     bx, word ptr [bp+var_A]
    add     bx, word ptr [td22_row_from_path]
    mov     es, word ptr [td22_row_from_path+2]
    mov     al, byte ptr es:[bx]
    mov     byte ptr [bp+var_trkRowIndex], al
    cbw
    mov     bx, ax
    shl     bx, 0x1
    mov     ax, word ptr [bx+terrainrows]
    mov     cx, ax
    mov     al, byte ptr [bp+var_trkColIndex]
    cbw
    add     cx, ax
    add     cx, bp
    sub     cx, 0xad4
    mov     word ptr [bp+var_AEC], cx
    mov     bx, cx
    cmp     byte ptr [bx], 0x0
    jnz     LAB_1e1a_34e7
    mov     byte ptr [bx], 0x1
    mov     bx, word ptr [bp+var_A]
    add     bx, word ptr [td17_trk_elem_ordered]
    mov     es, word ptr [td17_trk_elem_ordered+2]
    mov     al, byte ptr es:[bx]
    sub     ah, ah
    mov     word ptr [bp+var_C], ax
    mov     bx, word ptr [bp+var_A]
    add     bx, word ptr [trackdata18]
    mov     es, word ptr [trackdata18+2]
    mov     al, byte ptr es:[bx]
    and     al, 0xf                            ; mask out the high nibble
    mov     byte ptr [bp+var_subTOIBlock], al
    mov     bx, word ptr [bp+var_A]
    add     bx, word ptr [trackdata18]
    mov     al, byte ptr es:[bx]
    and     al, 0x10                           ; 5th bit (low to high)
    mov     byte ptr [bp+var_connCheckFlag], al
    mov     bx, word ptr [bp+var_C]
    mov     ax, bx
    shl     bx, 0x1
    add     bx, ax
    shl     bx, 0x1
    add     bx, ax
    shl     bx, 0x1
    mov     ax, word ptr [bx+trkObjectList]
    mov     word ptr [bp+var_ptrCurrTOInfo], ax
    cmp     byte ptr [bp+var_connCheckFlag], 0x0
    jnz     LAB_1e1a_35a7
    jmp     near ptr LAB_1e1a_32f8
LAB_1e1a_35a7:
    mov     al, byte ptr [bp+var_subTOIBlock]
    sub     ah, ah
    mov     bx, ax
    shl     bx, 0x1
    add     bx, ax
    shl     bx, 0x1
    add     bx, ax
    shl     bx, 0x1
    add     bx, word ptr [bp+var_ptrCurrTOInfo]
    mov     ax, word ptr [bx+0xa]
    mov     word ptr [bp+var_AEA], ax
    or      ax, ax
    jnz     LAB_1e1a_35cb
    jmp     near ptr LAB_1e1a_32f8
LAB_1e1a_35cb:
    jmp     near ptr LAB_1e1a_3311
LAB_1e1a_35ce:
    mov     ax, di
    mov     byte ptr [byte_4616E], al
    mov     byte ptr [bp+var_trackErrorCode], 0x0
    jmp     LAB_1e1a_360e
LAB_1e1a_35da:
    cmp     byte ptr [bp+var_trkColIndex], 0x1e
    jnz     LAB_1e1a_35e6
    mov     byte ptr [bp+var_trkColIndex], 0x1d
LAB_1e1a_35e6:
    cmp     byte ptr [bp+var_trkRowIndex], 0xff
    jnz     LAB_1e1a_35f4
    mov     byte ptr [bp+var_trkRowIndex], 0x0
    jmp     LAB_1e1a_3600
LAB_1e1a_35f4:
    cmp     byte ptr [bp+var_trkRowIndex], 0x1e
    jnz     LAB_1e1a_3600
    mov     byte ptr [bp+var_trkRowIndex], 0x1d
LAB_1e1a_3600:
    mov     al, byte ptr [bp+var_trkColIndex]
    mov     byte ptr [byte_45D90], al
    mov     al, byte ptr [bp+var_trkRowIndex]
    mov     byte ptr [byte_45E16], al
LAB_1e1a_360e:
    push    word ptr [bp+var_tcompPtrH]
    push    word ptr [bp+var_tcompPtrL]
    call    far ptr mmgr_release
    add     sp, 0x4
    mov     al, byte ptr [bp+var_trackErrorCode]
    cbw
    pop     si
    pop     di
    mov     sp, bp
    pop     bp
    retf
track_setup endp
    db 0x90

; void __cdecl16far load_opponent_data(void)
load_opponent_data proc far
    var_F30    = word ptr  -3888
    var_B2E    = word ptr  -2862
    var_B2C    = word ptr  -2860
    var_B2A    = word ptr  -2858
    var_B28    = word ptr  -2856
    var_B26    = word ptr  -2854
    var_B24    = word ptr  -2852
    local_b22  = word ptr  -2848
    var_414    = word ptr  -1044
    var_412    = word ptr  -1042
    var_410    = word ptr  -1040
    var_20E    = word ptr  -526
    var_20C    = word ptr  -524
    var_A      = dword ptr -10
    var_6      = word ptr   -6
    var_4      = word ptr   -4
    var_2      = word ptr   -2

    push    bp
    mov     bp, sp
    sub     sp, 0xf30
    push    di
    push    si
    mov     al, byte ptr [gameconfig.game_opponenttype]
    add     al, 0x30
    mov     byte ptr [aOpp1_3], al
    mov     ax, offset aOpp1
    push    ax
    call    far ptr file_load_resfile
    add     sp, 0x2
    mov     word ptr [bp+var_B2E], ax
    mov     word ptr [bp+var_B2C], dx
    mov     ax, offset aNam
    push    ax
    push    dx
    push    word ptr [bp+var_B2E]
    call    far ptr locate_text_res
    add     sp, 0x6
    push    dx
    push    ax
    mov     ax, offset unk_46464
    push    ax
    call    far ptr copy_string
    add     sp, 0x6
    mov     ax, offset aPath
    push    ax
    push    word ptr [bp+var_B2C]
    push    word ptr [bp+var_B2E]
    call    far ptr locate_shape_alt
    add     sp, 0x6
    mov     word ptr [bp+var_414], ax
    mov     word ptr [bp+var_412], dx
    mov     ax, offset aSped
    push    ax
    push    word ptr [bp+var_B2C]
    push    word ptr [bp+var_B2E]
    call    far ptr locate_shape_alt
    add     sp, 0x6
    mov     word ptr [bp+var_A], ax
    mov     word ptr [bp+var_A+2], dx
    sub     si, si
LAB_1e1a_36a6:
    les     bx, [bp+var_A]
    mov     al, byte ptr es:[bx+si]
    mov     byte ptr [si+oppnentSped], al
    inc     si
    cmp     si, 0x10
    jl      LAB_1e1a_36a6
    mov     word ptr [bp+var_B26], 0x423f
    mov     word ptr [bp+var_B24], 0xf
    mov     word ptr [bp+var_B28], 0x0
    sub     ax, ax
    mov     word ptr [bp+var_20C], ax
    mov     word ptr [bp+var_20E], ax
    mov     word ptr [bp+var_B2A], ax
    sub     si, si
LAB_1e1a_36d8:
    mov     word ptr [bp+var_410], 0x0
    mov     bx, si
    shl     bx, 0x1
    add     bx, word ptr [td01_track_file_cpy]
    mov     es, word ptr [td01_track_file_cpy+2]
    mov     ax, word ptr es:[bx]
    mov     word ptr [bp+var_4], ax
    or      ax, ax
    jnz     LAB_1e1a_3702
    mov     word ptr [bp+var_2], 0x1
LAB_1e1a_36f9:
    mov     word ptr [bp+var_410], 0x1
    jmp     LAB_1e1a_373a
    db 0x90
LAB_1e1a_3702:
    cmp     word ptr [bp+var_4], -0x1
    jnz     LAB_1e1a_3710
    mov     word ptr [bp+var_2], 0x0
    jmp     LAB_1e1a_36f9
    db 0x90
LAB_1e1a_3710:
    cmp     word ptr [bp+var_B28], 0x0
    jz      LAB_1e1a_373a
    sub     di, di
    jmp     LAB_1e1a_3734
    db 0x90
LAB_1e1a_371c:
    mov     bx, di
    shl     bx, 0x1
    add     bx, bp
    cmp     word ptr [bx+local_b22], si
    jnz     LAB_1e1a_3733
    mov     word ptr [bp+var_2], 0x0
    mov     word ptr [bp+var_410], 0x1
LAB_1e1a_3733:
    inc     di
LAB_1e1a_3734:
    cmp     word ptr [bp+var_B28], di
    jg      LAB_1e1a_371c
LAB_1e1a_373a:
    mov     bx, word ptr [bp+var_B28]
    inc     word ptr [bp+var_B28]
    shl     bx, 0x1
    add     bx, bp
    mov     word ptr [bx+0xf4e0], si
    les     bx, [td17_trk_elem_ordered]
    mov     bl, byte ptr es:[bx+si]
    sub     bh, bh
    add     bx, word ptr [bp+var_A]
    mov     es, word ptr [bp+var_A+2]
    mov     al, byte ptr es:[bx]
    sub     ah, ah
    inc     ax
    sub     dx, dx
    add     word ptr [bp+var_20E], ax
    adc     word ptr [bp+var_20C], dx
    cmp     word ptr [bp+var_410], dx
    jnz     LAB_1e1a_3772
    jmp     near ptr LAB_1e1a_385e
LAB_1e1a_3772:
    cmp     word ptr [bp+var_2], dx
    jnz     LAB_1e1a_377a
    jmp     near ptr LAB_1e1a_3805
LAB_1e1a_377a:
    mov     ax, word ptr [bp+var_B26]
    mov     dx, word ptr [bp+var_B24]
    cmp     word ptr [bp+var_20C], dx
    ja      LAB_1e1a_3805
    jc      LAB_1e1a_3790
    cmp     word ptr [bp+var_20E], ax
    jnc     LAB_1e1a_3805
LAB_1e1a_3790:
    mov     bx, word ptr [bp+var_B28]
    inc     word ptr [bp+var_B28]
    shl     bx, 0x1
    add     bx, bp
    mov     word ptr [bx+0xf4e0], 0x0
    mov     ax, word ptr [bp+var_20E]
    mov     dx, word ptr [bp+var_20C]
    mov     word ptr [bp+var_B26], ax
    mov     word ptr [bp+var_B24], dx
    sub     di, di
    jmp     LAB_1e1a_37d8
    db 0x90
    db 0x90
LAB_1e1a_37b8:
    mov     ax, di
    shl     ax, 0x1
    mov     word ptr [bp+var_F30], ax
    mov     bx, ax
    add     bx, bp
    mov     ax, word ptr [bx+local_b22]
    mov     bx, word ptr [bp+var_F30]
    add     bx, word ptr [trackdata3]
    mov     es, word ptr [trackdata3+2]
    mov     word ptr es:[bx], ax
    inc     di
LAB_1e1a_37d8:
    cmp     word ptr [bp+var_B28], di
    jg      LAB_1e1a_37b8
    mov     bx, word ptr [bp+var_B28]
    shl     bx, 0x1
    add     bx, word ptr [trackdata3]
    mov     es, word ptr [trackdata3+2]
    mov     word ptr es:[bx], 0x0
    mov     bx, word ptr [bp+var_B28]
    shl     bx, 0x1
    add     bx, word ptr [trackdata3]
    mov     es, word ptr [trackdata3+2]
    mov     word ptr es:[bx+0x2], 0x1
LAB_1e1a_3805:
    cmp     word ptr [bp+var_B2A], 0x0
    jnz     LAB_1e1a_3822
    push    word ptr [bp+var_B2C]
    push    word ptr [bp+var_B2E]
    call    far ptr unload_resource
    add     sp, 0x4
    pop     si
    pop     di
    mov     sp, bp
    pop     bp
    retf
LAB_1e1a_3822:
    dec     word ptr [bp+var_B2A]
    mov     ax, word ptr [bp+var_B2A]
    shl     ax, 0x1
    add     ax, bp
    mov     word ptr [bp+var_F30], ax
    mov     bx, ax
    mov     si, word ptr [bx+0xfdf6]
    mov     ax, word ptr [bx+0xfbf2]
    mov     word ptr [bp+var_B28], ax
    mov     bx, word ptr [bp+var_B2A]
    shl     bx, 0x1
    shl     bx, 0x1
    add     bx, bp
    mov     ax, word ptr [bx+0xf0d2]
    mov     dx, word ptr [bx+0xf0d4]
    mov     word ptr [bp+var_20E], ax
    mov     word ptr [bp+var_20C], dx
    jmp     near ptr LAB_1e1a_36d8
    db 0x90
LAB_1e1a_385e:
    mov     bx, si
    shl     bx, 0x1
    add     bx, word ptr [td02_penalty_related]
    mov     es, word ptr [td02_penalty_related+2]
    mov     ax, word ptr es:[bx]
    mov     word ptr [bp+var_6], ax
    cmp     ax, 0xffff
    jz      LAB_1e1a_38b4
    mov     ax, word ptr [bp+var_B2A]
    shl     ax, 0x1
    add     ax, bp
    mov     word ptr [bp+var_F30], ax
    mov     bx, ax
    mov     ax, word ptr [bp+var_6]
    mov     word ptr [bx+0xfdf6], ax
    mov     bx, word ptr [bp+var_F30]
    mov     ax, word ptr [bp+var_B28]
    mov     word ptr [bx+0xfbf2], ax
    mov     bx, word ptr [bp+var_B2A]
    inc     word ptr [bp+var_B2A]
    shl     bx, 0x1
    shl     bx, 0x1
    add     bx, bp
    mov     ax, word ptr [bp+var_20E]
    mov     dx, word ptr [bp+var_20C]
    mov     word ptr [bx+0xf0d2], ax
    mov     word ptr [bx+0xf0d4], dx
LAB_1e1a_38b4:
    mov     si, word ptr [bp+var_4]
    jmp     near ptr LAB_1e1a_36d8
load_opponent_data endp

; uchar __cdecl16far subst_hillroad_track(uchar terrain, uchar element)
subst_hillroad_track proc far
    terrain    = byte ptr    6
    element    = byte ptr    8

    push    bp
    mov     bp, sp
    mov     al, byte ptr [bp+terrain]
    sub     ah, ah
    cmp     ax, 0x7
    jz      LAB_1e1a_38e0
    cmp     ax, 0x8
    jz      LAB_1e1a_391e
    cmp     ax, 0x9
    jnz     LAB_1e1a_38d4
    jmp     near ptr LAB_1e1a_395e
LAB_1e1a_38d4:
    cmp     ax, 0xa
    jnz     LAB_1e1a_38dc
    jmp     near ptr LAB_1e1a_399c
LAB_1e1a_38dc:
    sub     ax, ax
    pop     bp
    retf
LAB_1e1a_38e0:
    mov     al, byte ptr [bp+element]
    sub     ah, ah
    cmp     ax, 0x4
    jz      LAB_1e1a_3906
    cmp     ax, 0xe
    jz      LAB_1e1a_390c
    cmp     ax, 0x18
    jz      LAB_1e1a_3912
    cmp     ax, 0x27
    jz      LAB_1e1a_3918
    cmp     ax, 0x3b
    jz      LAB_1e1a_3918
    cmp     ax, 0x62
    jz      LAB_1e1a_3918
    jmp     LAB_1e1a_38dc
    db 0x90
LAB_1e1a_3906:
    mov     ax, 0xb6
    jmp     near ptr LAB_1e1a_39d7
LAB_1e1a_390c:
    mov     ax, 0xba
    jmp     near ptr LAB_1e1a_39d7
LAB_1e1a_3912:
    mov     ax, 0xbe
    jmp     near ptr LAB_1e1a_39d7
LAB_1e1a_3918:
    mov     ax, 0xc2
    jmp     near ptr LAB_1e1a_39d7
LAB_1e1a_391e:
    mov     al, byte ptr [bp+element]
    sub     ah, ah
    cmp     ax, 0x5
    jz      LAB_1e1a_3944
    cmp     ax, 0xf
    jz      LAB_1e1a_394a
    cmp     ax, 0x19
    jz      LAB_1e1a_3950
    cmp     ax, 0x24
    jz      LAB_1e1a_3958
    cmp     ax, 0x38
    jz      LAB_1e1a_3958
    cmp     ax, 0x5f
    jz      LAB_1e1a_3958
    jmp     LAB_1e1a_38dc
    db 0x90
LAB_1e1a_3944:
    mov     ax, 0xb7
    jmp     near ptr LAB_1e1a_39d7
LAB_1e1a_394a:
    mov     ax, 0xbb
    jmp     near ptr LAB_1e1a_39d7
LAB_1e1a_3950:
    mov     ax, 0xbf
    jmp     near ptr LAB_1e1a_39d7
    db 0x90
    db 0x90
LAB_1e1a_3958:
    mov     ax, 0xc3
    jmp     LAB_1e1a_39d7
    db 0x90
LAB_1e1a_395e:
    mov     al, byte ptr [bp+element]
    sub     ah, ah
    cmp     ax, 0x4
    jz      LAB_1e1a_3984
    cmp     ax, 0xe
    jz      LAB_1e1a_398a
    cmp     ax, 0x18
    jz      LAB_1e1a_3990
    cmp     ax, 0x26
    jz      LAB_1e1a_3996
    cmp     ax, 0x3a
    jz      LAB_1e1a_3996
    cmp     ax, 0x61
    jz      LAB_1e1a_3996
    jmp     near ptr LAB_1e1a_38dc
LAB_1e1a_3984:
    mov     ax, 0xb8
    jmp     LAB_1e1a_39d7
    db 0x90
LAB_1e1a_398a:
    mov     ax, 0xbc
    jmp     LAB_1e1a_39d7
    db 0x90
LAB_1e1a_3990:
    mov     ax, 0xc0
    jmp     LAB_1e1a_39d7
    db 0x90
LAB_1e1a_3996:
    mov     ax, 0xc4
    pop     bp
    retf
    db 0x90
LAB_1e1a_399c:
    mov     al, byte ptr [bp+element]
    sub     ah, ah
    cmp     ax, 0x5
    jz      LAB_1e1a_39c2
    cmp     ax, 0xf
    jz      LAB_1e1a_39c8
    cmp     ax, 0x19
    jz      LAB_1e1a_39ce
    cmp     ax, 0x25
    jz      LAB_1e1a_39d4
    cmp     ax, 0x39
    jz      LAB_1e1a_39d4
    cmp     ax, 0x60
    jz      LAB_1e1a_39d4
    jmp     near ptr LAB_1e1a_38dc
LAB_1e1a_39c2:
    mov     ax, 0xb9
    pop     bp
    retf
    db 0x90
LAB_1e1a_39c8:
    mov     ax, 0xbd
    pop     bp
    retf
    db 0x90
LAB_1e1a_39ce:
    mov     ax, 0xc1
    pop     bp
    retf
    db 0x90
LAB_1e1a_39d4:
    mov     ax, 0xc5
LAB_1e1a_39d7:
    pop     bp
    retf
subst_hillroad_track endp

seg004 ends
end
